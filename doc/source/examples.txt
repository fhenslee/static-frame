#start_Series-__init__()
>>> sf.Series((10, 2, 8), index=('a', 'b', 'c'))
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-__init__()

#start_Series-from_concat()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((4, 3, 12), index=('d', 'e', 'f'))
>>> sf.Series.from_concat((s1, s2))
<Series>
<Index>
a        10
b        2
c        8
d        4
e        3
f        12
<<U1>    <int64>
#end_Series-from_concat()

#start_Series-from_concat_items()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((4, 3, 12), index=('d', 'e', 'f'))
>>> sf.Series.from_concat_items((('x', s1), ('y', s2)))
<Series>
<IndexHierarchy>
x                a     10
x                b     2
x                c     8
y                d     4
y                e     3
y                f     12
<<U1>            <<U1> <int64>
#end_Series-from_concat_items()

#start_Series-from_delimited()
>>> sf.Series.from_delimited('1.2|5.5|8.2|-3.0', delimiter='|')
<Series>
<Index>
0        1.2
1        5.5
2        8.2
3        -3.0
<int64>  <float64>
>>> sf.Series.from_delimited('2021-01:1517-04:1620-12', delimiter=':', dtype=np.datetime64)
<Series>
<Index>
0        2021-01
1        1517-04
2        1620-12
<int64>  <datetime64[M]>
#end_Series-from_delimited()

#start_Series-from_dict()
>>> sf.Series.from_dict(dict(a=10, b=2, c=8))
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-from_dict()

#start_Series-from_element()
>>> sf.Series.from_element(-1, index=('a', 'b', 'c'), name='x')
<Series: x>
<Index>
a           -1
b           -1
c           -1
<<U1>       <int64>
#end_Series-from_element()

#start_Series-from_items()
>>> sf.Series.from_items((('a', 10), ('b', 2), ('c', 8)), name='x')
<Series: x>
<Index>
a           10
b           2
c           8
<<U1>       <int64>
#end_Series-from_items()

#start_Series-from_overlay()
>>> s1 = sf.Series((11, 1, None), index=('a', 'b', 'c'))
>>> s1
<Series>
<Index>
a        11
b        1
c        None
<<U1>    <object>
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> sf.Series.from_overlay((s1, s2))
<Series>
<Index>
a        11
b        1
c        8
d        19
<<U1>    <object>
#end_Series-from_overlay()

#start_Series-from_pandas()
>>> df = pd.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> sf.Series.from_pandas(df)
<Series>
<Index>
a        10
b        2
c        8
<object> <int64>
#end_Series-from_pandas()

#start_Series-to_frame()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_frame()
<Frame>
<Index> 0       <int64>
<Index>
a       10
b       2
c       8
<<U1>   <int64>
#end_Series-to_frame()

#start_Series-to_frame_go()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_frame_go()
<FrameGO>
<IndexGO> 0       <int64>
<Index>
a         10
b         2
c         8
<<U1>     <int64>
#end_Series-to_frame_go()

#start_Series-to_frame_he()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_frame_he()
<FrameHE>
<Index>   0       <int64>
<Index>
a         10
b         2
c         8
<<U1>     <int64>
#end_Series-to_frame_he()

#start_Series-to_pairs()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_pairs()
(('a', 10), ('b', 2), ('c', 8))
#end_Series-to_pairs()

#start_Series-to_pandas()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_pandas()
a    10
b     2
c     8
dtype: int64
#end_Series-to_pandas()

#start_Series-to_series_he()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_series_he()
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_Series-to_series_he()

#start_Series-STATIC
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.STATIC
True
#end_Series-STATIC

#start_Series-T
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.T
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-T

#start_Series-dtype
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.dtype
int64
#end_Series-dtype

#start_Series-index
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.index
<Index>
a
b
c
<<U1>
#end_Series-index

#start_Series-memory
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.memory
       L   Lu    LM  LMu   LMD LMDu  R    Ru    RM   RMu   RMD RMDu
Name   16  B     16  B     16  B     16   B     16   B     16  B
Index  756 B     788 B     564 B     8.83 KB    812  B     588 B
Values 120 B     136 B     24  B     120  B     136  B     24  B
Total  932 B     980 B     644 B     9.0  KB    1004 B     668 B
#end_Series-memory

#start_Series-name
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.name
#end_Series-name

#start_Series-nbytes
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.nbytes
24
#end_Series-nbytes

#start_Series-ndim
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.ndim
1
#end_Series-ndim

#start_Series-shape
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.shape
(3,)
#end_Series-shape

#start_Series-size
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.size
3
#end_Series-size

#start_Series-__array__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.__array__()
[10  2  8]
#end_Series-__array__()

#start_Series-__array_ufunc__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> np.array((0, 1, 0)) * s
<Series>
<Index>
a        0
b        2
c        0
<<U1>    <int64>
#end_Series-__array_ufunc__()

#start_Series-__bool__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_Series-__bool__()

#start_Series-__deepcopy__()
>>> import copy
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> copy.deepcopy(s)
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-__deepcopy__()

#start_Series-__len__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> len(s)
3
#end_Series-__len__()

#start_Series-__round__()
>>> s = sf.Series((10.235, 2.124, 8.734), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        8.734
<<U1>    <float64>
>>> round(s, 1)
<Series>
<Index>
a        10.2
b        2.1
c        8.7
<<U1>    <float64>
#end_Series-__round__()

#start_Series-all()
>>> s = sf.Series((False, False, True), index=('a', 'b', 'c'))
>>> s.all()
False
#end_Series-all()

#start_Series-any()
>>> s = sf.Series((False, False, True), index=('a', 'b', 'c'))
>>> s.any()
True
#end_Series-any()

#start_Series-astype()
>>> s = sf.Series((11, 1, None), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        11
b        1
c        None
<<U1>    <object>
>>> s.astype(float)
<Series>
<Index>
a        11.0
b        1.0
c        nan
<<U1>    <float64>
#end_Series-astype()

#start_Series-clip()
>>> s = sf.Series((10.235, 2.124, 8.734), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        8.734
<<U1>    <float64>
>>> s.clip(lower=2.5, upper=10.1)
<Series>
<Index>
a        10.1
b        2.5
c        8.734
<<U1>    <float64>
#end_Series-clip()

#start_Series-corr()
>>> s1 = sf.Series((10.235, 2.124, 8.734), index=('a', 'b', 'c'))
>>> s2 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s1.corr(s2)
0.9977051066985494
#end_Series-corr()

#start_Series-count()
>>> s = sf.Series((8, 5, None, 8), index=('a', 'b', 'c', 'd'))
>>> s.count(skipna=True)
3
>>> s.count(unique=True)
2
#end_Series-count()

#start_Series-cov()
>>> s1 = sf.Series((10.235, 2.124, 8.734), index=('a', 'b', 'c'))
>>> s2 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s1.cov(s2)
17.924999999999997
#end_Series-cov()

#start_Series-cumprod()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.cumprod()
<Series>
<Index>
a        10
b        20
c        160
<<U1>    <int64>
#end_Series-cumprod()

#start_Series-cumsum()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.cumsum()
<Series>
<Index>
a        10
b        12
c        20
<<U1>    <int64>
#end_Series-cumsum()

#start_Series-drop_duplicated()
>>> s = sf.Series((8, 5, None, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        None
d        8
<<U1>    <object>
>>> s.drop_duplicated()
<Series>
<Index>
b        5
c        None
<<U1>    <object>
#end_Series-drop_duplicated()

#start_Series-dropfalsy()
>>> s = sf.Series(('q', 'r', '', 's'), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        q
b        r
c
d        s
<<U1>    <<U1>
>>> s.dropfalsy()
<Series>
<Index>
a        q
b        r
d        s
<<U1>    <<U1>
#end_Series-dropfalsy()

#start_Series-dropna()
>>> s = sf.Series((8, 5, None, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        None
d        8
<<U1>    <object>
>>> s.dropna()
<Series>
<Index>
a        8
b        5
d        8
<<U1>    <object>
#end_Series-dropna()

#start_Series-duplicated()
>>> s = sf.Series((8, 5, None, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        None
d        8
<<U1>    <object>
>>> s.duplicated()
<Series>
<Index>
a        True
b        False
c        False
d        True
<<U1>    <bool>
#end_Series-duplicated()

#start_Series-equals()
>>> s1 = sf.Series((10.235, 2.124, 8.734), index=('a', 'b', 'c'))
>>> s2 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s1.equals(s2)
False
#end_Series-equals()

#start_Series-fillfalsy()
>>> s = sf.Series(('q', 'r', '', 's'), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        q
b        r
c
d        s
<<U1>    <<U1>
>>> s.fillfalsy('missing')
<Series>
<Index>
a        q
b        r
c        missing
d        s
<<U1>    <<U7>
#end_Series-fillfalsy()

#start_Series-fillfalsy_backward()
>>> s = sf.Series(('', '', 'r', 's'), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a
b
c        r
d        s
<<U1>    <<U1>
>>> s.fillfalsy_backward()
<Series>
<Index>
a        r
b        r
c        r
d        s
<<U1>    <<U1>
#end_Series-fillfalsy_backward()

#start_Series-fillfalsy_forward()
>>> s = sf.Series(('p', 'q', '', ''), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        p
b        q
c
d
<<U1>    <<U1>
>>> s.fillfalsy_forward()
<Series>
<Index>
a        p
b        q
c        q
d        q
<<U1>    <<U1>
#end_Series-fillfalsy_forward()

#start_Series-fillfalsy_leading()
>>> s = sf.Series(('', '', 'r', 's'), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a
b
c        r
d        s
<<U1>    <<U1>
>>> s.fillfalsy_leading('missing')
<Series>
<Index>
a        missing
b        missing
c        r
d        s
<<U1>    <<U7>
#end_Series-fillfalsy_leading()

#start_Series-fillfalsy_trailing()
>>> s = sf.Series(('p', 'q', '', ''), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        p
b        q
c
d
<<U1>    <<U1>
>>> s.fillfalsy_trailing('missing')
<Series>
<Index>
a        p
b        q
c        missing
d        missing
<<U1>    <<U7>
#end_Series-fillfalsy_trailing()

#start_Series-fillna()
>>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        nan
d        8.734
e        nan
<<U1>    <float64>
>>> s.fillna(0.0)
<Series>
<Index>
a        10.235
b        2.124
c        0.0
d        8.734
e        0.0
<<U1>    <float64>
#end_Series-fillna()

#start_Series-fillna_backward()
>>> s = sf.Series((np.nan, np.nan, 10.235, 2.124, 8.734), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        nan
b        nan
c        10.235
d        2.124
e        8.734
<<U1>    <float64>
>>> s.fillna_backward()
<Series>
<Index>
a        10.235
b        10.235
c        10.235
d        2.124
e        8.734
<<U1>    <float64>
#end_Series-fillna_backward()

#start_Series-fillna_forward()
>>> s = sf.Series((10.235, 2.124, 8.734, np.nan, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        8.734
d        nan
e        nan
<<U1>    <float64>
>>> s.fillna_forward()
<Series>
<Index>
a        10.235
b        2.124
c        8.734
d        8.734
e        8.734
<<U1>    <float64>
#end_Series-fillna_forward()

#start_Series-fillna_leading()
>>> s = sf.Series((np.nan, np.nan, 10.235, 2.124, 8.734), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        nan
b        nan
c        10.235
d        2.124
e        8.734
<<U1>    <float64>
>>> s.fillna_leading(0.0)
<Series>
<Index>
a        0.0
b        0.0
c        10.235
d        2.124
e        8.734
<<U1>    <float64>
#end_Series-fillna_leading()

#start_Series-fillna_trailing()
>>> s = sf.Series((10.235, 2.124, 8.734, np.nan, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        8.734
d        nan
e        nan
<<U1>    <float64>
>>> s.fillna_trailing(0.0)
<Series>
<Index>
a        10.235
b        2.124
c        8.734
d        0.0
e        0.0
<<U1>    <float64>
#end_Series-fillna_trailing()

#start_Series-head()
>>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        nan
d        8.734
e        nan
<<U1>    <float64>
>>> s.head(2)
<Series>
<Index>
a        10.235
b        2.124
<<U1>    <float64>
#end_Series-head()

#start_Series-iloc_max()
>>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        nan
d        8.734
e        nan
<<U1>    <float64>
>>> s.iloc_max()
0
#end_Series-iloc_max()

#start_Series-iloc_min()
>>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        nan
d        8.734
e        nan
<<U1>    <float64>
>>> s.iloc_min()
1
#end_Series-iloc_min()

#start_Series-iloc_searchsorted()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
>>> s.iloc_searchsorted(18)
2
#end_Series-iloc_searchsorted()

#start_Series-insert_after()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((4, 3, 12), index=('d', 'e', 'f'))
>>> s1.insert_after('b', s2)
<Series>
<Index>
a        10
b        2
d        4
e        3
f        12
c        8
<<U1>    <int64>
#end_Series-insert_after()

#start_Series-insert_before()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((4, 3, 12), index=('d', 'e', 'f'))
>>> s1.insert_before('b', s2)
<Series>
<Index>
a        10
d        4
e        3
f        12
b        2
c        8
<<U1>    <int64>
#end_Series-insert_before()

#start_Series-isfalsy()
>>> s = sf.Series((2, '', 19, 0, None), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b
c        19
d        0
e        None
<<U1>    <object>
>>> s.isfalsy()
<Series>
<Index>
a        False
b        True
c        False
d        True
e        True
<<U1>    <bool>
#end_Series-isfalsy()

#start_Series-isin()
>>> s = sf.Series((2, '', 19, 0, None), index=('a', 'b', 'c', 'd', 'e'))
>>> s.isin((2, 19))
<Series>
<Index>
a        True
b        False
c        True
d        False
e        False
<<U1>    <bool>
#end_Series-isin()

#start_Series-isna()
>>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        nan
d        8.734
e        nan
<<U1>    <float64>
>>> s.isna()
<Series>
<Index>
a        False
b        False
c        True
d        False
e        True
<<U1>    <bool>
#end_Series-isna()

#start_Series-loc_max()
>>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        nan
d        8.734
e        nan
<<U1>    <float64>
>>> s.loc_max()
a
#end_Series-loc_max()

#start_Series-loc_min()
>>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        nan
d        8.734
e        nan
<<U1>    <float64>
>>> s.loc_min()
b
#end_Series-loc_min()

#start_Series-loc_searchsorted()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
>>> s.loc_searchsorted(18)
c
#end_Series-loc_searchsorted()

#start_Series-max()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.max()
10
#end_Series-max()

#start_Series-mean()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.mean()
6.666666666666667
#end_Series-mean()

#start_Series-median()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.median()
8.0
#end_Series-median()

#start_Series-min()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.min()
2
#end_Series-min()

#start_Series-notfalsy()
>>> s = sf.Series((2, '', 19, 0, None), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b
c        19
d        0
e        None
<<U1>    <object>
>>> s.notfalsy()
<Series>
<Index>
a        True
b        False
c        True
d        False
e        False
<<U1>    <bool>
#end_Series-notfalsy()

#start_Series-notna()
>>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        nan
d        8.734
e        nan
<<U1>    <float64>
>>> s.notna()
<Series>
<Index>
a        True
b        True
c        False
d        True
e        False
<<U1>    <bool>
#end_Series-notna()

#start_Series-prod()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.prod()
160
#end_Series-prod()

#start_Series-rank_dense()
>>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        0
d        8
<<U1>    <int64>
>>> s.rank_dense()
<Series>
<Index>
a        2
b        1
c        0
d        2
<<U1>    <int64>
#end_Series-rank_dense()

#start_Series-rank_max()
>>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        0
d        8
<<U1>    <int64>
>>> s.rank_max()
<Series>
<Index>
a        3
b        1
c        0
d        3
<<U1>    <int64>
#end_Series-rank_max()

#start_Series-rank_mean()
>>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        0
d        8
<<U1>    <int64>
>>> s.rank_mean()
<Series>
<Index>
a        2.5
b        1.0
c        0.0
d        2.5
<<U1>    <float64>
#end_Series-rank_mean()

#start_Series-rank_min()
>>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        0
d        8
<<U1>    <int64>
>>> s.rank_min()
<Series>
<Index>
a        2
b        1
c        0
d        2
<<U1>    <int64>
#end_Series-rank_min()

#start_Series-rank_ordinal()
>>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        0
d        8
<<U1>    <int64>
>>> s.rank_ordinal()
<Series>
<Index>
a        2
b        1
c        0
d        3
<<U1>    <int64>
#end_Series-rank_ordinal()

#start_Series-rehierarch()
>>> s = sf.Series((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))
>>> s
<Series>
<IndexHierarchy>
1                a     3
1                b     2
2                a     8
2                b     7
<int64>          <<U1> <int64>
>>> s.rehierarch((1, 0))
<Series>
<IndexHierarchy>
a                1       3
a                2       8
b                1       2
b                2       7
<<U1>            <int64> <int64>
#end_Series-rehierarch()

#start_Series-reindex()
>>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        0
d        8
<<U1>    <int64>
>>> s.reindex(('d', 'f', 'e', 'c'), fill_value=-1)
<Series>
<Index>
d        8
f        -1
e        -1
c        0
<<U1>    <int64>
#end_Series-reindex()

#start_Series-relabel()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.relabel(('x', 'y', 'z'))
<Series>
<Index>
x        10
y        2
z        8
<<U1>    <int64>
>>> s.relabel(dict(a='x', b='y'))
<Series>
<Index>
x        10
y        2
c        8
<<U1>    <int64>
>>> s.relabel(lambda l: f'+{l.upper()}+')
<Series>
<Index>
+A+      10
+B+      2
+C+      8
<<U3>    <int64>
#end_Series-relabel()

#start_Series-relabel_flat()
>>> s = sf.Series((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))
>>> s
<Series>
<IndexHierarchy>
1                a     3
1                b     2
2                a     8
2                b     7
<int64>          <<U1> <int64>
>>> s.relabel_flat()
<Series>
<Index>
(1, 'a') 3
(1, 'b') 2
(2, 'a') 8
(2, 'b') 7
<object> <int64>
#end_Series-relabel_flat()

#start_Series-relabel_level_add()
>>> s = sf.Series((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))
>>> s
<Series>
<IndexHierarchy>
1                a     3
1                b     2
2                a     8
2                b     7
<int64>          <<U1> <int64>
>>> s.relabel_level_add('x')
<Series>
<IndexHierarchy>
x                1       a     3
x                1       b     2
x                2       a     8
x                2       b     7
<<U1>            <int64> <<U1> <int64>
#end_Series-relabel_level_add()

#start_Series-relabel_level_drop()
>>> s = sf.Series((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))
>>> s
<Series>
<IndexHierarchy>
1                a     3
1                b     2
2                a     8
2                b     7
<int64>          <<U1> <int64>
>>> s.iloc[:2].relabel_level_drop(1)
<Series>
<Index>
a        3
b        2
<<U1>    <int64>
#end_Series-relabel_level_drop()

#start_Series-rename()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'), name='x')
>>> s
<Series: x>
<Index>
a           10
b           2
c           8
<<U1>       <int64>
>>> s.rename('y')
<Series: y>
<Index>
a           10
b           2
c           8
<<U1>       <int64>
#end_Series-rename()

#start_Series-roll()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
>>> s.roll(2)
<Series>
<Index>
a        34
b        54
c        2
d        8
e        19
<<U1>    <int64>
#end_Series-roll()

#start_Series-sample()
>>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        nan
d        8.734
e        nan
<<U1>    <float64>
>>> s.sample(2, seed=0)
<Series>
<Index>
a        10.235
c        nan
<<U1>    <float64>
#end_Series-sample()

#start_Series-shift()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
>>> s.shift(2)
<Series>
<Index>
a        nan
b        nan
c        2.0
d        8.0
e        19.0
<<U1>    <float64>
#end_Series-shift()

#start_Series-sort_index()
>>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        0
d        8
<<U1>    <int64>
>>> s.sort_index()
<Series>
<Index>
a        8
b        5
c        0
d        8
<<U1>    <int64>
>>> s.sort_index(ascending=False)
<Series>
<Index>
d        8
c        0
b        5
a        8
<<U1>    <int64>
#end_Series-sort_index()

#start_Series-sort_values()
>>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        0
d        8
<<U1>    <int64>
>>> s.sort_values()
<Series>
<Index>
c        0
b        5
a        8
d        8
<<U1>    <int64>
>>> s.sort_values(ascending=False)
<Series>
<Index>
d        8
a        8
b        5
c        0
<<U1>    <int64>
#end_Series-sort_values()

#start_Series-std()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.std()
3.39934634239519
#end_Series-std()

#start_Series-sum()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.sum()
20
#end_Series-sum()

#start_Series-tail()
>>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        nan
d        8.734
e        nan
<<U1>    <float64>
>>> s.tail(2)
<Series>
<Index>
d        8.734
e        nan
<<U1>    <float64>
#end_Series-tail()

#start_Series-transpose()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.transpose()
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-transpose()

#start_Series-unique()
>>> s = sf.Series((8, 5, None, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        None
d        8
<<U1>    <object>
>>> s.unique()
[8 5 None]
#end_Series-unique()

#start_Series-var()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.var()
11.555555555555557
#end_Series-var()

#start_Series-__contains__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.__contains__('a')
True
#end_Series-__contains__()

#start_Series-__iter__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.__iter__())
('a', 'b', 'c')
#end_Series-__iter__()

#start_Series-__reversed__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.__reversed__())
('c', 'b', 'a')
#end_Series-__reversed__()

#start_Series-get()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.get('a')
10
>>> s.get('z', -1)
-1
#end_Series-get()

#start_Series-items()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.items())
(('a', 10), ('b', 2), ('c', 8))
#end_Series-items()

#start_Series-keys()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.keys()
<Index>
a
b
c
<<U1>
#end_Series-keys()

#start_Series-values
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.values
[10  2  8]
#end_Series-values

#start_Series-interface
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.interface
<Frame>
<Index>                              cls_name group                doc                  <<U18>
<Index: signature>
__init__(values, *, index, name, ... Series   Constructor          Initializer. Args...
from_concat(containers, *, index,... Series   Constructor          Concatenate multi...
from_concat_items(items, *, name,... Series   Constructor          Produce a Series ...
from_delimited(delimited, *, deli... Series   Constructor          Series constructi...
from_dict(mapping, *, dtype, name... Series   Constructor          Series constructi...
from_element(element, *, index, d... Series   Constructor          Create a Series f...
from_items(pairs, *, dtype, name,... Series   Constructor          Series constructi...
from_overlay(containers, *, index... Series   Constructor          Return a new Seri...
from_pandas(value, *, index, inde... Series   Constructor          Given a Pandas Se...
to_frame(axis, *, index, index_co... Series   Exporter             Return a Frame vi...
to_frame_go(axis, *, index, index... Series   Exporter             Return FrameGO vi...
to_frame_he(axis, *, index, index... Series   Exporter             Return FrameHE vi...
to_html(config, style_config)        Series   Exporter             Return an HTML ta...
to_html_datatables(fp, show, config) Series   Exporter             Return a complete...
to_pairs()                           Series   Exporter             Return a tuple of...
to_pandas()                          Series   Exporter             Return a Pandas S...
to_series_he()                       Series   Exporter             Return a SeriesHE...
...                                  ...      ...                  ...
via_fill_value(fill_value).__le__... Series   Accessor Fill Value
via_fill_value(fill_value).__eq__... Series   Accessor Fill Value
via_fill_value(fill_value).__ne__... Series   Accessor Fill Value
via_fill_value(fill_value).__gt__... Series   Accessor Fill Value
via_fill_value(fill_value).__ge__... Series   Accessor Fill Value
via_fill_value(fill_value).__radd... Series   Accessor Fill Value
via_fill_value(fill_value).__rsub... Series   Accessor Fill Value
via_fill_value(fill_value).__rmul... Series   Accessor Fill Value
via_fill_value(fill_value).__rtru... Series   Accessor Fill Value
via_fill_value(fill_value).__rflo... Series   Accessor Fill Value
via_re(pattern, flags).search(pos... Series   Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... Series   Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... Series   Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... Series   Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... Series   Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... Series   Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... Series   Accessor Regular ... Perform the same ...
<<U87>                               <<U6>    <<U27>               <<U83>
#end_Series-interface

#start_Series-__repr__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> repr(s)
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-__repr__()

#start_Series-__str__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> str(s)
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-__str__()

#start_Series-display()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.display()
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.display(sf.DisplayConfig(type_show=False))
a 10
b 2
c 8
#end_Series-display()

#start_Series-display_tall()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.display_tall()
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-display_tall()

#start_Series-display_wide()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.display_wide()
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-display_wide()

#start_Series-assign[]()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.assign['c']('x')
<Series>
<Index>
a        2
b        8
c        x
d        34
e        54
<<U1>    <object>
>>> s.assign['c':]('x')
<Series>
<Index>
a        2
b        8
c        x
d        x
e        x
<<U1>    <object>
>>> s.assign[['a', 'd']](('x', 'y'))
<Series>
<Index>
a        x
b        8
c        19
d        y
e        54
<<U1>    <object>
#end_Series-assign[]()

#start_Series-assign[].apply()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
>>> s.assign['c':].apply(lambda s: s / 100)
<Series>
<Index>
a        2.0
b        8.0
c        0.19
d        0.34
e        0.54
<<U1>    <float64>
#end_Series-assign[].apply()

#start_Series-assign[].apply_element()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
>>> s.assign['b':].apply_element(lambda e: e if e < 10 else f'--{e}--')
<Series>
<Index>
a        2
b        8
c        --19--
d        --34--
e        --54--
<<U1>    <object>
#end_Series-assign[].apply_element()

#start_Series-assign[].apply_element_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
>>> s.assign['b':].apply_element_items(lambda l, e: e if l == 'c' else f'--{e}--')
<Series>
<Index>
a        2
b        --8--
c        19
d        --34--
e        --54--
<<U1>    <object>
#end_Series-assign[].apply_element_items()

#start_Series-assign.iloc[]()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.assign.iloc[2]('x')
<Series>
<Index>
a        2
b        8
c        x
d        34
e        54
<<U1>    <object>
>>> s.assign.iloc[2:]('x')
<Series>
<Index>
a        2
b        8
c        x
d        x
e        x
<<U1>    <object>
>>> s.assign.iloc[[0, 4]](('x', 'y'))
<Series>
<Index>
a        x
b        8
c        19
d        34
e        y
<<U1>    <object>
#end_Series-assign.iloc[]()

#start_Series-assign.iloc[].apply()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
>>> s.assign.iloc[2:].apply(lambda s: s / 100)
<Series>
<Index>
a        2.0
b        8.0
c        0.19
d        0.34
e        0.54
<<U1>    <float64>
#end_Series-assign.iloc[].apply()

#start_Series-assign.iloc[].apply_element()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
>>> s.assign.iloc[2:].apply_element(lambda e: e / 100 if e < 10 else e)
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
#end_Series-assign.iloc[].apply_element()

#start_Series-assign.iloc[].apply_element_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
>>> s.assign.iloc[2:].apply_element_items(lambda l, e: e if l == 'c' else f'--{e}--')
<Series>
<Index>
a        2
b        8
c        19
d        --34--
e        --54--
<<U1>    <object>
#end_Series-assign.iloc[].apply_element_items()

#start_Series-assign.loc[]()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.assign.loc['c']('x')
<Series>
<Index>
a        2
b        8
c        x
d        34
e        54
<<U1>    <object>
>>> s.assign.loc['c':]('x')
<Series>
<Index>
a        2
b        8
c        x
d        x
e        x
<<U1>    <object>
>>> s.assign.loc[['a', 'd']](('x', 'y'))
<Series>
<Index>
a        x
b        8
c        19
d        y
e        54
<<U1>    <object>
#end_Series-assign.loc[]()

#start_Series-assign.loc[].apply()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
>>> s.assign.loc['c':].apply(lambda s: s / 100)
<Series>
<Index>
a        2.0
b        8.0
c        0.19
d        0.34
e        0.54
<<U1>    <float64>
#end_Series-assign.loc[].apply()

#start_Series-assign.loc[].apply_element()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
>>> s.assign.loc['c':].apply_element(lambda e: e / 100 if e < 10 else e)
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
#end_Series-assign.loc[].apply_element()

#start_Series-assign.loc[].apply_element_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
>>> s.assign.loc['c':].apply_element_items(lambda l, e: e / 100 if l == 'c' else e)
<Series>
<Index>
a        2.0
b        8.0
c        0.19
d        34.0
e        54.0
<<U1>    <float64>
#end_Series-assign.loc[].apply_element_items()

#start_Series-drop[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.drop['c']
<Series>
<Index>
a        2
b        8
d        34
e        54
<<U1>    <int64>
>>> s.drop['c':]
<Series>
<Index>
a        2
b        8
<<U1>    <int64>
>>> s.drop[['a', 'd']]
<Series>
<Index>
b        8
c        19
e        54
<<U1>    <int64>
#end_Series-drop[]

#start_Series-drop.iloc[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.drop.iloc[2]
<Series>
<Index>
a        2
b        8
d        34
e        54
<<U1>    <int64>
>>> s.drop.iloc[2:]
<Series>
<Index>
a        2
b        8
<<U1>    <int64>
>>> s.drop.iloc[[0, 4]]
<Series>
<Index>
b        8
c        19
d        34
<<U1>    <int64>
#end_Series-drop.iloc[]

#start_Series-drop.loc[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.drop.loc['c']
<Series>
<Index>
a        2
b        8
d        34
e        54
<<U1>    <int64>
>>> s.drop.loc['c':]
<Series>
<Index>
a        2
b        8
<<U1>    <int64>
>>> s.drop.loc[['a', 'd']]
<Series>
<Index>
b        8
c        19
e        54
<<U1>    <int64>
#end_Series-drop.loc[]

#start_Series-mask[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.mask['c']
<Series>
<Index>
a        False
b        False
c        True
d        False
e        False
<<U1>    <bool>
>>> s.mask['c':]
<Series>
<Index>
a        False
b        False
c        True
d        True
e        True
<<U1>    <bool>
>>> s.mask[['a', 'd']]
<Series>
<Index>
a        True
b        False
c        False
d        True
e        False
<<U1>    <bool>
#end_Series-mask[]

#start_Series-mask.iloc[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.mask.iloc[2]
<Series>
<Index>
a        False
b        False
c        True
d        False
e        False
<<U1>    <bool>
>>> s.mask.iloc[2:]
<Series>
<Index>
a        False
b        False
c        True
d        True
e        True
<<U1>    <bool>
>>> s.mask.iloc[[0, 4]]
<Series>
<Index>
a        True
b        False
c        False
d        False
e        True
<<U1>    <bool>
#end_Series-mask.iloc[]

#start_Series-mask.loc[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.mask.loc['c']
<Series>
<Index>
a        False
b        False
c        True
d        False
e        False
<<U1>    <bool>
>>> s.mask.loc['c':]
<Series>
<Index>
a        False
b        False
c        True
d        True
e        True
<<U1>    <bool>
>>> s.mask.loc[['a', 'd']]
<Series>
<Index>
a        True
b        False
c        False
d        True
e        False
<<U1>    <bool>
#end_Series-mask.loc[]

#start_Series-masked_array[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.masked_array['c']
[2 8 -- 34 54]
>>> s.masked_array['c':]
[2 8 -- -- --]
>>> s.masked_array[['a', 'd']]
[-- 8 19 -- 54]
#end_Series-masked_array[]

#start_Series-masked_array.iloc[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.masked_array.iloc[2]
[2 8 -- 34 54]
>>> s.masked_array.iloc[2:]
[2 8 -- -- --]
>>> s.masked_array.iloc[[0, 4]]
[-- 8 19 34 --]
#end_Series-masked_array.iloc[]

#start_Series-masked_array.loc[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.masked_array.loc['c']
[2 8 -- 34 54]
>>> s.masked_array.loc['c':]
[2 8 -- -- --]
>>> s.masked_array.loc[['a', 'd']]
[-- 8 19 -- 54]
#end_Series-masked_array.loc[]

#start_Series-[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s['c']
19
>>> s['c':]
<Series>
<Index>
c        19
d        34
e        54
<<U1>    <int64>
>>> s[['a', 'd']]
<Series>
<Index>
a        2
d        34
<<U1>    <int64>
#end_Series-[]

#start_Series-iloc[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iloc[2]
19
>>> s.iloc[2:]
<Series>
<Index>
c        19
d        34
e        54
<<U1>    <int64>
>>> s.iloc[[0, 4]]
<Series>
<Index>
a        2
e        54
<<U1>    <int64>
#end_Series-iloc[]

#start_Series-loc[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.loc['c']
19
>>> s.loc['c':]
<Series>
<Index>
c        19
d        34
e        54
<<U1>    <int64>
>>> s.loc[['a', 'd']]
<Series>
<Index>
a        2
d        34
<<U1>    <int64>
#end_Series-loc[]

#start_Series-iter_element()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element())
(2, 8, 19, 34, 54)
#end_Series-iter_element()

#start_Series-iter_element().apply()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_element().apply(lambda e: e > 10)
<Series>
<Index>
a        False
b        False
c        True
d        True
e        True
<<U1>    <bool>
#end_Series-iter_element().apply()

#start_Series-iter_element().apply_iter()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element().apply_iter(lambda e: e > 10))
(False, False, True, True, True)
#end_Series-iter_element().apply_iter()

#start_Series-iter_element().apply_iter_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element().apply_iter_items(lambda e: e > 10))
(('a', False), ('b', False), ('c', True), ('d', True), ('e', True))
#end_Series-iter_element().apply_iter_items()

#start_Series-iter_element().apply_pool()
>>> def func(e): return e > 10
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_element().apply_pool(func, use_threads=True)
<Series>
<Index>
a        False
b        False
c        True
d        True
e        True
<<U1>    <bool>
#end_Series-iter_element().apply_pool()

#start_Series-iter_element().map_all()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.iter_element().map_all({2: 200, 10: -1, 8: 45})
<Series>
<Index>
a        -1
b        200
c        45
<<U1>    <int64>
#end_Series-iter_element().map_all()

#start_Series-iter_element().map_all_iter()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element().map_all_iter({2: 200, 10: -1, 8: 45}))
(-1, 200, 45)
#end_Series-iter_element().map_all_iter()

#start_Series-iter_element().map_all_iter_items()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element().map_all_iter_items({2: 200, 10: -1, 8: 45}))
(('a', -1), ('b', 200), ('c', 45))
#end_Series-iter_element().map_all_iter_items()

#start_Series-iter_element().map_any()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.iter_element().map_any({10: -1, 8: 45})
<Series>
<Index>
a        -1
b        2
c        45
<<U1>    <int64>
#end_Series-iter_element().map_any()

#start_Series-iter_element().map_any_iter()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element().map_any_iter({10: -1, 8: 45}))
(-1, 2, 45)
#end_Series-iter_element().map_any_iter()

#start_Series-iter_element().map_any_iter_items()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element().map_any_iter_items({10: -1, 8: 45}))
(('a', -1), ('b', 2), ('c', 45))
#end_Series-iter_element().map_any_iter_items()

#start_Series-iter_element().map_fill()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.iter_element().map_fill({10: -1, 8: 45}, fill_value=np.nan)
<Series>
<Index>
a        -1.0
b        nan
c        45.0
<<U1>    <float64>
#end_Series-iter_element().map_fill()

#start_Series-iter_element().map_fill_iter()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element().map_fill_iter({10: -1, 8: 45}, fill_value=np.nan))
(-1, nan, 45)
#end_Series-iter_element().map_fill_iter()

#start_Series-iter_element().map_fill_iter_items()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element().map_fill_iter_items({10: -1, 8: 45}, fill_value=np.nan))
(('a', -1), ('b', nan), ('c', 45))
#end_Series-iter_element().map_fill_iter_items()

#start_Series-iter_element_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element_items())
(('a', 2), ('b', 8), ('c', 19), ('d', 34), ('e', 54))
#end_Series-iter_element_items()

#start_Series-iter_element_items().apply()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_element_items().apply(lambda l, e: e > 10 if l != 'c' else 0)
<Series>
<Index>
a        0
b        0
c        0
d        1
e        1
<<U1>    <int64>
#end_Series-iter_element_items().apply()

#start_Series-iter_element_items().apply_iter()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element_items().apply_iter(lambda l, e: e > 10 and l != 'e'))
(False, False, True, True, False)
#end_Series-iter_element_items().apply_iter()

#start_Series-iter_element_items().apply_iter_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element_items().apply_iter_items(lambda l, e: e > 10 and l != 'e'))
(('a', False), ('b', False), ('c', True), ('d', True), ('e', False))
#end_Series-iter_element_items().apply_iter_items()

#start_Series-iter_element_items().apply_pool()
>>> def func(pair): return pair[1] > 10 and pair[0] != 'e'
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_element_items().apply_pool(func, use_threads=True)
<Series>
<Index>
a        False
b        False
c        True
d        True
e        False
<<U1>    <bool>
#end_Series-iter_element_items().apply_pool()

#start_Series-iter_element_items().map_all()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.iter_element_items().map_all({('b', 2): 200, ('a', 10): -1, ('c', 8): 45})
<Series>
<Index>
a        -1
b        200
c        45
<<U1>    <int64>
#end_Series-iter_element_items().map_all()

#start_Series-iter_element_items().map_all_iter()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element_items().map_all_iter({('b', 2): 200, ('a', 10): -1, ('c', 8): 45}))
(-1, 200, 45)
#end_Series-iter_element_items().map_all_iter()

#start_Series-iter_element_items().map_all_iter_items()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element_items().map_all_iter_items({('b', 2): 200, ('a', 10): -1, ('c', 8): 45}))
(('a', -1), ('b', 200), ('c', 45))
#end_Series-iter_element_items().map_all_iter_items()

#start_Series-iter_element_items().map_any()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.iter_element_items().map_any({('a', 10): -1, ('c', 8): 45})
<Series>
<Index>
a        -1
b        2
c        45
<<U1>    <int64>
#end_Series-iter_element_items().map_any()

#start_Series-iter_element_items().map_any_iter()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element_items().map_any_iter({('a', 10): -1, ('c', 8): 45}))
(-1, 2, 45)
#end_Series-iter_element_items().map_any_iter()

#start_Series-iter_element_items().map_any_iter_items()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element_items().map_any_iter_items({('a', 10): -1, ('c', 8): 45}))
(('a', -1), ('b', 2), ('c', 45))
#end_Series-iter_element_items().map_any_iter_items()

#start_Series-iter_element_items().map_fill()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.iter_element_items().map_fill({('a', 10): -1, ('c', 8): 45}, fill_value=np.nan)
<Series>
<Index>
a        -1.0
b        nan
c        45.0
<<U1>    <float64>
#end_Series-iter_element_items().map_fill()

#start_Series-iter_element_items().map_fill_iter()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element_items().map_fill_iter({('a', 10): -1, ('c', 8): 45}, fill_value=np.nan))
(-1, nan, 45)
#end_Series-iter_element_items().map_fill_iter()

#start_Series-iter_element_items().map_fill_iter_items()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element_items().map_fill_iter_items({('a', 10): -1, ('c', 8): 45}, fill_value=np.nan))
(('a', -1), ('b', nan), ('c', 45))
#end_Series-iter_element_items().map_fill_iter_items()

#start_Series-iter_group()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group())
(<Series>
<Index>
a        -2
d        -2
<<U1>    <int64>, <Series>
<Index>
b        8
e        8
<<U1>    <int64>, <Series>
<Index>
c        19
<<U1>    <int64>)
#end_Series-iter_group()

#start_Series-iter_group().apply()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group().apply(lambda s: s.sum())
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_Series-iter_group().apply()

#start_Series-iter_group().apply_iter()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group().apply_iter(lambda s: s.sum()))
(-4, 16, 19)
#end_Series-iter_group().apply_iter()

#start_Series-iter_group().apply_iter_items()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group().apply_iter_items(lambda s: s.sum()))
((-2, -4), (8, 16), (19, 19))
#end_Series-iter_group().apply_iter_items()

#start_Series-iter_group().apply_pool()
>>> def func(s): return s.sum()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group().apply_pool(func, use_threads=True)
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_Series-iter_group().apply_pool()

#start_Series-iter_group_array()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array())
(array([-2, -2]), array([8, 8]), array([19]))
#end_Series-iter_group_array()

#start_Series-iter_group_array().apply()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_array().apply(lambda s: s.sum())
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_Series-iter_group_array().apply()

#start_Series-iter_group_array().apply_iter()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array().apply_iter(lambda s: s.sum()))
(-4, 16, 19)
#end_Series-iter_group_array().apply_iter()

#start_Series-iter_group_array().apply_iter_items()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array().apply_iter_items(lambda s: s.sum()))
((-2, -4), (8, 16), (19, 19))
#end_Series-iter_group_array().apply_iter_items()

#start_Series-iter_group_array().apply_pool()
>>> def func(s): return s.sum()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_array().apply_pool(func, use_threads=True)
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_Series-iter_group_array().apply_pool()

#start_Series-iter_group_array_items()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array_items())
((-2, array([-2, -2])), (8, array([8, 8])), (19, array([19])))
#end_Series-iter_group_array_items()

#start_Series-iter_group_array_items().apply()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_array_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)
<Series>
<Index>
-2       -4
8        (2,)
19       19
<int64>  <object>
#end_Series-iter_group_array_items().apply()

#start_Series-iter_group_array_items().apply_iter()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))
(-4, -1, 19)
#end_Series-iter_group_array_items().apply_iter()

#start_Series-iter_group_array_items().apply_iter_items()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))
((-2, -4), (8, -1), (19, 19))
#end_Series-iter_group_array_items().apply_iter_items()

#start_Series-iter_group_array_items().apply_pool()
>>> def func(pair): return pair[1].sum()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_array_items().apply_pool(func, use_threads=True)
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_Series-iter_group_array_items().apply_pool()

#start_Series-iter_group_items()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_items())
((-2, <Series>
<Index>
a        -2
d        -2
<<U1>    <int64>), (8, <Series>
<Index>
b        8
e        8
<<U1>    <int64>), (19, <Series>
<Index>
c        19
<<U1>    <int64>))
#end_Series-iter_group_items()

#start_Series-iter_group_items().apply()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)
<Series>
<Index>
-2       -4
8        (2,)
19       19
<int64>  <object>
#end_Series-iter_group_items().apply()

#start_Series-iter_group_items().apply_iter()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))
(-4, -1, 19)
#end_Series-iter_group_items().apply_iter()

#start_Series-iter_group_items().apply_iter_items()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))
((-2, -4), (8, -1), (19, 19))
#end_Series-iter_group_items().apply_iter_items()

#start_Series-iter_group_items().apply_pool()
>>> def func(pair): return pair[1].sum()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_items().apply_pool(func, use_threads=True)
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_Series-iter_group_items().apply_pool()

#start_Series-iter_group_labels()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.iter_group_labels())
(<Series>
<Index>
a        10
<<U1>    <int64>, <Series>
<Index>
b        2
<<U1>    <int64>, <Series>
<Index>
c        8
<<U1>    <int64>)
#end_Series-iter_group_labels()

#start_Series-iter_group_labels().apply()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels().apply(lambda s: s.sum())
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_Series-iter_group_labels().apply()

#start_Series-iter_group_labels().apply_iter()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels().apply_iter(lambda s: s.sum()))
(-2, 8, 19, -2, 8)
#end_Series-iter_group_labels().apply_iter()

#start_Series-iter_group_labels().apply_iter_items()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels().apply_iter_items(lambda s: s.sum()))
(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))
#end_Series-iter_group_labels().apply_iter_items()

#start_Series-iter_group_labels().apply_pool()
>>> def func(s): return s.sum()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels().apply_pool(func, use_threads=True)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_Series-iter_group_labels().apply_pool()

#start_Series-iter_group_labels_array()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.iter_group_labels_array())
(array([10]), array([2]), array([8]))
#end_Series-iter_group_labels_array()

#start_Series-iter_group_labels_array().apply()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_array().apply(lambda s: s.sum())
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_Series-iter_group_labels_array().apply()

#start_Series-iter_group_labels_array().apply_iter()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_array().apply_iter(lambda s: s.sum()))
(-2, 8, 19, -2, 8)
#end_Series-iter_group_labels_array().apply_iter()

#start_Series-iter_group_labels_array().apply_iter_items()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_array().apply_iter_items(lambda s: s.sum()))
(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))
#end_Series-iter_group_labels_array().apply_iter_items()

#start_Series-iter_group_labels_array().apply_pool()
>>> def func(s): return s.sum()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_array().apply_pool(func, use_threads=True)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_Series-iter_group_labels_array().apply_pool()

#start_Series-iter_group_labels_array_items()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.iter_group_labels_array_items())
(('a', array([10])), ('b', array([2])), ('c', array([8])))
#end_Series-iter_group_labels_array_items()

#start_Series-iter_group_labels_array_items().apply()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_array_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_Series-iter_group_labels_array_items().apply()

#start_Series-iter_group_labels_array_items().apply_iter()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_array_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))
(-2, 8, 19, -2, 8)
#end_Series-iter_group_labels_array_items().apply_iter()

#start_Series-iter_group_labels_array_items().apply_iter_items()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_array_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))
(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))
#end_Series-iter_group_labels_array_items().apply_iter_items()

#start_Series-iter_group_labels_array_items().apply_pool()
>>> def func(pair): return pair[1].sum()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_array_items().apply_pool(func, use_threads=True)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_Series-iter_group_labels_array_items().apply_pool()

#start_Series-iter_group_labels_items()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.iter_group_labels_items())
(('a', <Series>
<Index>
a        10
<<U1>    <int64>), ('b', <Series>
<Index>
b        2
<<U1>    <int64>), ('c', <Series>
<Index>
c        8
<<U1>    <int64>))
#end_Series-iter_group_labels_items()

#start_Series-iter_group_labels_items().apply()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_Series-iter_group_labels_items().apply()

#start_Series-iter_group_labels_items().apply_iter()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))
(-2, 8, 19, -2, 8)
#end_Series-iter_group_labels_items().apply_iter()

#start_Series-iter_group_labels_items().apply_iter_items()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))
(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))
#end_Series-iter_group_labels_items().apply_iter_items()

#start_Series-iter_group_labels_items().apply_pool()
>>> def func(pair): return pair[1].sum()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_items().apply_pool(func, use_threads=True)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_Series-iter_group_labels_items().apply_pool()

#start_Series-iter_window()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window(size=3, step=1))
(<Series>
<Index>
a        2
b        8
c        19
<<U1>    <int64>, <Series>
<Index>
b        8
c        19
d        34
<<U1>    <int64>, <Series>
<Index>
c        19
d        34
e        54
<<U1>    <int64>)
#end_Series-iter_window()

#start_Series-iter_window().apply()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window(size=3, step=1).apply(lambda s: s.sum())
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_Series-iter_window().apply()

#start_Series-iter_window().apply_iter()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window(size=3, step=1).apply_iter(lambda s: s.sum()))
(29, 61, 107)
#end_Series-iter_window().apply_iter()

#start_Series-iter_window().apply_iter_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window(size=3, step=1).apply_iter_items(lambda s: s.sum()))
(('c', 29), ('d', 61), ('e', 107))
#end_Series-iter_window().apply_iter_items()

#start_Series-iter_window().apply_pool()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window(size=3, step=1).apply_pool(lambda s: s.sum(), use_threads=True)
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_Series-iter_window().apply_pool()

#start_Series-iter_window_array()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array(size=3, step=1))
(array([ 2,  8, 19]), array([ 8, 19, 34]), array([19, 34, 54]))
#end_Series-iter_window_array()

#start_Series-iter_window_array().apply()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_array(size=3, step=1).apply(lambda s: s.sum())
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_Series-iter_window_array().apply()

#start_Series-iter_window_array().apply_iter()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array(size=3, step=1).apply_iter(lambda s: s.sum()))
(29, 61, 107)
#end_Series-iter_window_array().apply_iter()

#start_Series-iter_window_array().apply_iter_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array(size=3, step=1).apply_iter_items(lambda s: s.sum()))
(('c', 29), ('d', 61), ('e', 107))
#end_Series-iter_window_array().apply_iter_items()

#start_Series-iter_window_array().apply_pool()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_array(size=3, step=1).apply_pool(lambda s: s.sum(), use_threads=True)
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_Series-iter_window_array().apply_pool()

#start_Series-iter_window_array_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array_items(size=3, step=1))
(('c', array([ 2,  8, 19])), ('d', array([ 8, 19, 34])), ('e', array([19, 34, 54])))
#end_Series-iter_window_array_items()

#start_Series-iter_window_array_items().apply()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_array_items(size=3, step=1).apply(lambda l, s: s.sum() if l != 'd' else -1)
<Series>
<Index>
c        29
d        -1
e        107
<<U1>    <int64>
#end_Series-iter_window_array_items().apply()

#start_Series-iter_window_array_items().apply_iter()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array_items(size=3, step=1).apply_iter(lambda l, s: s.sum() if l != 'd' else -1))
(29, -1, 107)
#end_Series-iter_window_array_items().apply_iter()

#start_Series-iter_window_array_items().apply_iter_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array_items(size=3, step=1).apply_iter_items(lambda l, s: s.sum() if l != 'd' else -1))
(('c', 29), ('d', -1), ('e', 107))
#end_Series-iter_window_array_items().apply_iter_items()

#start_Series-iter_window_array_items().apply_pool()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_array_items(size=3, step=1).apply_pool(lambda pair: pair[1].sum(), use_threads=True)
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_Series-iter_window_array_items().apply_pool()

#start_Series-iter_window_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_items(size=3, step=1))
(('c', <Series>
<Index>
a        2
b        8
c        19
<<U1>    <int64>), ('d', <Series>
<Index>
b        8
c        19
d        34
<<U1>    <int64>), ('e', <Series>
<Index>
c        19
d        34
e        54
<<U1>    <int64>))
#end_Series-iter_window_items()

#start_Series-iter_window_items().apply()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_items(size=3, step=1).apply(lambda l, s: s.sum() if l != 'd' else -1)
<Series>
<Index>
c        29
d        -1
e        107
<<U1>    <int64>
#end_Series-iter_window_items().apply()

#start_Series-iter_window_items().apply_iter()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_items(size=3, step=1).apply_iter(lambda l, s: s.sum() if l != 'd' else -1))
(29, -1, 107)
#end_Series-iter_window_items().apply_iter()

#start_Series-iter_window_items().apply_iter_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_items(size=3, step=1).apply_iter_items(lambda l, s: s.sum() if l != 'd' else -1))
(('c', 29), ('d', -1), ('e', 107))
#end_Series-iter_window_items().apply_iter_items()

#start_Series-iter_window_items().apply_pool()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_items(size=3, step=1).apply_pool(lambda pair: pair[1].sum(), use_threads=True)
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_Series-iter_window_items().apply_pool()

#start_Series-__add__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s + 8
<Series>
<Index>
a        18
b        10
c        16
<<U1>    <int64>
>>> s + s.reindex(('c', 'b'))
<Series>
<Index>
a        nan
b        4.0
c        16.0
<<U1>    <float64>
#end_Series-__add__()

#start_Series-__and__()
>>> s = sf.Series((False, False, True), index=('a', 'b', 'c'))
>>> s & True
<Series>
<Index>
a        False
b        False
c        True
<<U1>    <bool>
>>> s & (True, False, True)
<Series>
<Index>
a        False
b        False
c        True
<<U1>    <bool>
#end_Series-__and__()

#start_Series-__eq__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s == 8
<Series>
<Index>
a        False
b        False
c        True
<<U1>    <bool>
>>> s == s.reindex(('c', 'b'))
<Series>
<Index>
a        False
b        True
c        True
<<U1>    <bool>
#end_Series-__eq__()

#start_Series-__floordiv__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s // 8
<Series>
<Index>
a        1
b        0
c        1
<<U1>    <int64>
>>> s // s.reindex(('c', 'b'))
<Series>
<Index>
a        nan
b        1.0
c        1.0
<<U1>    <float64>
#end_Series-__floordiv__()

#start_Series-__ge__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s >= 8
<Series>
<Index>
a        True
b        False
c        True
<<U1>    <bool>
>>> s >= s.reindex(('c', 'b'))
<Series>
<Index>
a        False
b        True
c        True
<<U1>    <bool>
#end_Series-__ge__()

#start_Series-__gt__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s > 8
<Series>
<Index>
a        True
b        False
c        False
<<U1>    <bool>
>>> s > s.reindex(('c', 'b'))
<Series>
<Index>
a        False
b        False
c        False
<<U1>    <bool>
#end_Series-__gt__()

#start_Series-__le__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s <= 8
<Series>
<Index>
a        False
b        True
c        True
<<U1>    <bool>
>>> s <= s.reindex(('c', 'b'))
<Series>
<Index>
a        False
b        True
c        True
<<U1>    <bool>
#end_Series-__le__()

#start_Series-__lt__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s < 8
<Series>
<Index>
a        False
b        True
c        False
<<U1>    <bool>
>>> s < s.reindex(('c', 'b'))
<Series>
<Index>
a        False
b        False
c        False
<<U1>    <bool>
#end_Series-__lt__()

#start_Series-__matmul__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s @ (3, 0, 4)
62
#end_Series-__matmul__()

#start_Series-__mod__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s % 8
<Series>
<Index>
a        2
b        2
c        0
<<U1>    <int64>
>>> s % s.reindex(('c', 'b'))
<Series>
<Index>
a        nan
b        0.0
c        0.0
<<U1>    <float64>
#end_Series-__mod__()

#start_Series-__mul__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s * 8
<Series>
<Index>
a        80
b        16
c        64
<<U1>    <int64>
>>> s * s.reindex(('c', 'b'))
<Series>
<Index>
a        nan
b        4.0
c        64.0
<<U1>    <float64>
#end_Series-__mul__()

#start_Series-__ne__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s != 8
<Series>
<Index>
a        True
b        True
c        False
<<U1>    <bool>
>>> s != s.reindex(('c', 'b'))
<Series>
<Index>
a        True
b        False
c        False
<<U1>    <bool>
#end_Series-__ne__()

#start_Series-__or__()
>>> s = sf.Series((False, False, True), index=('a', 'b', 'c'))
>>> s | True
<Series>
<Index>
a        True
b        True
c        True
<<U1>    <bool>
>>> s | (True, False, True)
<Series>
<Index>
a        True
b        False
c        True
<<U1>    <bool>
#end_Series-__or__()

#start_Series-__pow__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s ** 8
<Series>
<Index>
a        100000000
b        256
c        16777216
<<U1>    <int64>
>>> s ** s.reindex(('c', 'b'))
<Series>
<Index>
a        nan
b        4.0
c        16777216.0
<<U1>    <float64>
#end_Series-__pow__()

#start_Series-__radd__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> 8 + s
<Series>
<Index>
a        18
b        10
c        16
<<U1>    <int64>
#end_Series-__radd__()

#start_Series-__rfloordiv__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> 8 // s
<Series>
<Index>
a        0
b        4
c        1
<<U1>    <int64>
#end_Series-__rfloordiv__()

#start_Series-__rmatmul__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s @ (3, 0, 4)
62
#end_Series-__rmatmul__()

#start_Series-__rmul__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> 8 * s
<Series>
<Index>
a        80
b        16
c        64
<<U1>    <int64>
#end_Series-__rmul__()

#start_Series-__rshift__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s >> 1
<Series>
<Index>
a        5
b        1
c        4
<<U1>    <int64>
#end_Series-__rshift__()

#start_Series-__rsub__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> 8 - s
<Series>
<Index>
a        -2
b        6
c        0
<<U1>    <int64>
#end_Series-__rsub__()

#start_Series-__rtruediv__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> 8 / s
<Series>
<Index>
a        0.8
b        4.0
c        1.0
<<U1>    <float64>
#end_Series-__rtruediv__()

#start_Series-__sub__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s - 8
<Series>
<Index>
a        2
b        -6
c        0
<<U1>    <int64>
>>> s - s.reindex(('c', 'b'))
<Series>
<Index>
a        nan
b        0.0
c        0.0
<<U1>    <float64>
#end_Series-__sub__()

#start_Series-__truediv__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s / 8
<Series>
<Index>
a        1.25
b        0.25
c        1.0
<<U1>    <float64>
>>> s / s.reindex(('c', 'b'))
<Series>
<Index>
a        nan
b        1.0
c        1.0
<<U1>    <float64>
#end_Series-__truediv__()

#start_Series-__xor__()
>>> s = sf.Series((False, False, True), index=('a', 'b', 'c'))
>>> s ^ True
<Series>
<Index>
a        True
b        True
c        False
<<U1>    <bool>
>>> s ^ (True, False, True)
<Series>
<Index>
a        True
b        False
c        False
<<U1>    <bool>
#end_Series-__xor__()

#start_Series-__abs__()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> abs(s)
<Series>
<Index>
a        2
b        8
c        19
d        2
e        8
<<U1>    <int64>
#end_Series-__abs__()

#start_Series-__invert__()
>>> s = sf.Series((False, False, True), index=('a', 'b', 'c'))
>>> ~s
<Series>
<Index>
a        True
b        True
c        False
<<U1>    <bool>
#end_Series-__invert__()

#start_Series-__neg__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> -s
<Series>
<Index>
a        -10
b        -2
c        -8
<<U1>    <int64>
#end_Series-__neg__()

#start_Series-__pos__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> +s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-__pos__()

#start_Series-via_dt.year
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.year
<Series>
<Index>
a        1517
b        1517
c        1517
d        1517
e        1517
<<U1>    <int64>
#end_Series-via_dt.year

#start_Series-via_dt.month
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.month
<Series>
<Index>
a        1
b        4
c        12
d        6
e        10
<<U1>    <int64>
#end_Series-via_dt.month

#start_Series-via_dt.day
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.day
<Series>
<Index>
a        1
b        1
c        31
d        30
e        1
<<U1>    <int64>
#end_Series-via_dt.day

#start_Series-via_dt.hour
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.hour
<Series>
<Index>
a        0
b        0
c        0
d        0
e        0
<<U1>    <int64>
#end_Series-via_dt.hour

#start_Series-via_dt.minute
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.minute
<Series>
<Index>
a        0
b        0
c        0
d        0
e        0
<<U1>    <int64>
#end_Series-via_dt.minute

#start_Series-via_dt.second
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.second
<Series>
<Index>
a        0
b        0
c        0
d        0
e        0
<<U1>    <int64>
#end_Series-via_dt.second

#start_Series-via_dt.weekday()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.weekday()
<Series>
<Index>
a        0
b        6
c        0
d        5
e        0
<<U1>    <int64>
#end_Series-via_dt.weekday()

#start_Series-via_dt.quarter()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.quarter()
<Series>
<Index>
a        1
b        2
c        4
d        2
e        4
<<U1>    <int64>
#end_Series-via_dt.quarter()

#start_Series-via_dt.is_month_end()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_month_end()
<Series>
<Index>
a        False
b        False
c        True
d        True
e        False
<<U1>    <bool>
#end_Series-via_dt.is_month_end()

#start_Series-via_dt.is_month_start()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_month_start()
<Series>
<Index>
a        True
b        True
c        False
d        False
e        True
<<U1>    <bool>
#end_Series-via_dt.is_month_start()

#start_Series-via_dt.is_year_end()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_year_end()
<Series>
<Index>
a        False
b        False
c        True
d        False
e        False
<<U1>    <bool>
#end_Series-via_dt.is_year_end()

#start_Series-via_dt.is_year_start()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_year_start()
<Series>
<Index>
a        True
b        False
c        False
d        False
e        False
<<U1>    <bool>
#end_Series-via_dt.is_year_start()

#start_Series-via_dt.is_quarter_end()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_quarter_end()
<Series>
<Index>
a        False
b        False
c        True
d        True
e        False
<<U1>    <bool>
#end_Series-via_dt.is_quarter_end()

#start_Series-via_dt.is_quarter_start()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_quarter_start()
<Series>
<Index>
a        True
b        True
c        False
d        False
e        True
<<U1>    <bool>
#end_Series-via_dt.is_quarter_start()

#start_Series-via_dt.timetuple()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.timetuple()
<Series>
<Index>
a        time.struct_time(...
b        time.struct_time(...
c        time.struct_time(...
d        time.struct_time(...
e        time.struct_time(...
<<U1>    <object>
#end_Series-via_dt.timetuple()

#start_Series-via_dt.isoformat()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.isoformat()
<Series>
<Index>
a        1517-01-01
b        1517-04-01
c        1517-12-31
d        1517-06-30
e        1517-10-01
<<U1>    <<U10>
#end_Series-via_dt.isoformat()

#start_Series-via_dt.fromisoformat()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'))
>>> s.via_dt.fromisoformat()
<Series>
<Index>
a        1517-01-01
b        1517-04-01
c        1517-12-31
d        1517-06-30
e        1517-10-01
<<U1>    <object>
#end_Series-via_dt.fromisoformat()

#start_Series-via_dt.strftime()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.strftime("%A | %B")
<Series>
<Index>
a        Monday | January
b        Sunday | April
c        Monday | December
d        Saturday | June
e        Monday | October
<<U1>    <<U17>
#end_Series-via_dt.strftime()

#start_Series-via_dt.strptime()
>>> s = sf.Series(('1/1/1517', '4/1/1517', '6/30/1517'), index=('a', 'b', 'c'))
>>> s.via_dt.strptime("%m/%d/%Y")
<Series>
<Index>
a        1517-01-01 00:00:00
b        1517-04-01 00:00:00
c        1517-06-30 00:00:00
<<U1>    <object>
#end_Series-via_dt.strptime()

#start_Series-via_dt.strpdate()
>>> s = sf.Series(('1/1/1517', '4/1/1517', '6/30/1517'), index=('a', 'b', 'c'))
>>> s.via_dt.strpdate("%m/%d/%Y")
<Series>
<Index>
a        1517-01-01
b        1517-04-01
c        1517-06-30
<<U1>    <object>
#end_Series-via_dt.strpdate()

#start_Series-via_str.__getitem__()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str[-1]
<Series>
<Index>
a
b        Z
c        3
d
<<U1>    <<U1>
#end_Series-via_str.__getitem__()

#start_Series-via_str.capitalize()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.capitalize()
<Series>
<Index>
a        Qrs
b        Xyz
c        123
d         wx
<<U1>    <<U4>
#end_Series-via_str.capitalize()

#start_Series-via_str.center()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.center(8)
<Series>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>    <<U8>
#end_Series-via_str.center()

#start_Series-via_str.contains()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.contains('X')
<Series>
<Index>
a        False
b        True
c        False
d        True
<<U1>    <bool>
#end_Series-via_str.contains()

#start_Series-via_str.count()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.count('X')
<Series>
<Index>
a        0
b        1
c        0
d        1
<<U1>    <int64>
#end_Series-via_str.count()

#start_Series-via_str.decode()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd')).astype(bytes)
>>> s
<Series>
<Index>
a        b'qrs '
b        b'XYZ'
c        b'123'
d        b' wX '
<<U1>    <|S4>
>>> s.via_str.decode()
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
#end_Series-via_str.decode()

#start_Series-via_str.encode()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.encode()
<Series>
<Index>
a        b'qrs '
b        b'XYZ'
c        b'123'
d        b' wX '
<<U1>    <|S4>
#end_Series-via_str.encode()

#start_Series-via_str.endswith()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.endswith(' ')
<Series>
<Index>
a        True
b        False
c        False
d        True
<<U1>    <bool>
#end_Series-via_str.endswith()

#start_Series-via_str.find()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.find('X')
<Series>
<Index>
a        -1
b        0
c        -1
d        2
<<U1>    <int64>
#end_Series-via_str.find()

#start_Series-via_str.format()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.format('{:-^10}')
<Series>
<Index>
a        ---qrs ---
b        ---XYZ----
c        ---123----
d        --- wX ---
<<U1>    <<U10>
#end_Series-via_str.format()

#start_Series-via_str.index()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.index('X')
ValueError('substring not found')
#end_Series-via_str.index()

#start_Series-via_str.isalnum()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.isalnum()
<Series>
<Index>
a        False
b        True
c        True
d        False
<<U1>    <bool>
#end_Series-via_str.isalnum()

#start_Series-via_str.isalpha()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.isalpha()
<Series>
<Index>
a        False
b        True
c        False
d        False
<<U1>    <bool>
#end_Series-via_str.isalpha()

#start_Series-via_str.isdecimal()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.isdecimal()
<Series>
<Index>
a        False
b        False
c        True
d        False
<<U1>    <bool>
#end_Series-via_str.isdecimal()

#start_Series-via_str.isdigit()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.isdigit()
<Series>
<Index>
a        False
b        False
c        True
d        False
<<U1>    <bool>
#end_Series-via_str.isdigit()

#start_Series-via_str.islower()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.islower()
<Series>
<Index>
a        True
b        False
c        False
d        False
<<U1>    <bool>
#end_Series-via_str.islower()

#start_Series-via_str.isnumeric()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.isnumeric()
<Series>
<Index>
a        False
b        False
c        True
d        False
<<U1>    <bool>
#end_Series-via_str.isnumeric()

#start_Series-via_str.isspace()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.isspace()
<Series>
<Index>
a        False
b        False
c        False
d        False
<<U1>    <bool>
#end_Series-via_str.isspace()

#start_Series-via_str.istitle()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.istitle()
<Series>
<Index>
a        False
b        False
c        False
d        False
<<U1>    <bool>
#end_Series-via_str.istitle()

#start_Series-via_str.isupper()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.isupper()
<Series>
<Index>
a        False
b        True
c        False
d        False
<<U1>    <bool>
#end_Series-via_str.isupper()

#start_Series-via_str.ljust()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.ljust(8)
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U8>
#end_Series-via_str.ljust()

#start_Series-via_str.len()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.len()
<Series>
<Index>
a        4
b        3
c        3
d        4
<<U1>    <int64>
#end_Series-via_str.len()

#start_Series-via_str.lower()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.lower()
<Series>
<Index>
a        qrs
b        xyz
c        123
d         wx
<<U1>    <<U4>
#end_Series-via_str.lower()

#start_Series-via_str.lstrip()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.lstrip()
<Series>
<Index>
a        qrs
b        XYZ
c        123
d        wX
<<U1>    <<U4>
#end_Series-via_str.lstrip()

#start_Series-via_str.partition()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.partition('X')
<Series>
<Index>
a        ('qrs ', '', '')
b        ('', 'X', 'YZ')
c        ('123', '', '')
d        (' w', 'X', ' ')
<<U1>    <object>
#end_Series-via_str.partition()

#start_Series-via_str.replace()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.replace('X', '*')
<Series>
<Index>
a        qrs
b        *YZ
c        123
d         w*
<<U1>    <<U4>
#end_Series-via_str.replace()

#start_Series-via_str.rfind()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.rfind('X')
<Series>
<Index>
a        -1
b        0
c        -1
d        2
<<U1>    <int64>
#end_Series-via_str.rfind()

#start_Series-via_str.rindex()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.rindex('X')
ValueError('substring not found')
#end_Series-via_str.rindex()

#start_Series-via_str.rjust()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.rjust(8)
<Series>
<Index>
a            qrs
b             XYZ
c             123
d             wX
<<U1>    <<U8>
#end_Series-via_str.rjust()

#start_Series-via_str.rpartition()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.rpartition('X')
<Series>
<Index>
a        ('', '', 'qrs ')
b        ('', 'X', 'YZ')
c        ('', '', '123')
d        (' w', 'X', ' ')
<<U1>    <object>
#end_Series-via_str.rpartition()

#start_Series-via_str.rsplit()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.rsplit('X')
<Series>
<Index>
a        ('qrs ',)
b        ('', 'YZ')
c        ('123',)
d        (' w', ' ')
<<U1>    <object>
#end_Series-via_str.rsplit()

#start_Series-via_str.rstrip()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.rstrip()
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
#end_Series-via_str.rstrip()

#start_Series-via_str.split()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.split('X')
<Series>
<Index>
a        ('qrs ',)
b        ('', 'YZ')
c        ('123',)
d        (' w', ' ')
<<U1>    <object>
#end_Series-via_str.split()

#start_Series-via_str.startswith()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.startswith('X')
<Series>
<Index>
a        False
b        True
c        False
d        False
<<U1>    <bool>
#end_Series-via_str.startswith()

#start_Series-via_str.strip()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.strip()
<Series>
<Index>
a        qrs
b        XYZ
c        123
d        wX
<<U1>    <<U4>
#end_Series-via_str.strip()

#start_Series-via_str.swapcase()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.swapcase()
<Series>
<Index>
a        QRS
b        xyz
c        123
d         Wx
<<U1>    <<U4>
#end_Series-via_str.swapcase()

#start_Series-via_str.title()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.title()
<Series>
<Index>
a        Qrs
b        Xyz
c        123
d         Wx
<<U1>    <<U4>
#end_Series-via_str.title()

#start_Series-via_str.upper()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.upper()
<Series>
<Index>
a        QRS
b        XYZ
c        123
d         WX
<<U1>    <<U4>
#end_Series-via_str.upper()

#start_Series-via_str.zfill()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.zfill(8)
<Series>
<Index>
a        0000qrs
b        00000XYZ
c        00000123
d        0000 wX
<<U1>    <<U8>
#end_Series-via_str.zfill()

#start_Series-via_fill_value().loc
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.via_fill_value(0).loc[['a', 'c', 'd', 'e']]
<Series>
<Index>
a        10
c        8
d        0
e        0
<<U1>    <int64>
#end_Series-via_fill_value().loc

#start_Series-via_fill_value().__getitem__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.via_fill_value(0)[['a', 'c', 'd', 'e']]
<Series>
<Index>
a        10
c        8
d        0
e        0
<<U1>    <int64>
#end_Series-via_fill_value().__getitem__()

#start_Series-via_fill_value().via_T
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.via_fill_value().via_T
NotImplementedError('via_T functionality only available on Frame')
#end_Series-via_fill_value().via_T

#start_Series-via_fill_value().__add__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) + s2
<Series>
<Index>
a        10
b        4
c        16
d        19
<<U1>    <int64>
#end_Series-via_fill_value().__add__()

#start_Series-via_fill_value().__sub__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) - s2
<Series>
<Index>
a        10
b        0
c        0
d        -19
<<U1>    <int64>
#end_Series-via_fill_value().__sub__()

#start_Series-via_fill_value().__mul__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) * s2
<Series>
<Index>
a        0
b        4
c        64
d        0
<<U1>    <int64>
#end_Series-via_fill_value().__mul__()

#start_Series-via_fill_value().__truediv__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) / s2
<Series>
<Index>
a        inf
b        1.0
c        1.0
d        0.0
<<U1>    <float64>
#end_Series-via_fill_value().__truediv__()

#start_Series-via_fill_value().__floordiv__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) // s2
<Series>
<Index>
a        0
b        1
c        1
d        0
<<U1>    <int64>
#end_Series-via_fill_value().__floordiv__()

#start_Series-via_fill_value().__mod__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) % s2
<Series>
<Index>
a        0
b        0
c        0
d        0
<<U1>    <int64>
#end_Series-via_fill_value().__mod__()

#start_Series-via_fill_value().__pow__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) ** s2
<Series>
<Index>
a        1
b        4
c        16777216
d        0
<<U1>    <int64>
#end_Series-via_fill_value().__pow__()

#start_Series-via_fill_value().__lshift__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) << s2
<Series>
<Index>
a        10
b        8
c        2048
d        0
<<U1>    <int64>
#end_Series-via_fill_value().__lshift__()

#start_Series-via_fill_value().__rshift__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) >> s2
<Series>
<Index>
a        10
b        0
c        0
d        0
<<U1>    <int64>
#end_Series-via_fill_value().__rshift__()

#start_Series-via_fill_value().__and__()
>>> s1 = sf.Series((False, False, True), index=('a', 'b', 'c'))
>>> s2 = sf.Series((False, False, True), index=('b', 'c', 'd'))
>>> s1.via_fill_value(False) & s2
<Series>
<Index>
a        False
b        False
c        False
d        False
<<U1>    <bool>
#end_Series-via_fill_value().__and__()

#start_Series-via_fill_value().__xor__()
>>> s1 = sf.Series((False, False, True), index=('a', 'b', 'c'))
>>> s2 = sf.Series((False, False, True), index=('b', 'c', 'd'))
>>> s1.via_fill_value(False) ^ s2
<Series>
<Index>
a        False
b        False
c        True
d        True
<<U1>    <bool>
#end_Series-via_fill_value().__xor__()

#start_Series-via_fill_value().__or__()
>>> s1 = sf.Series((False, False, True), index=('a', 'b', 'c'))
>>> s2 = sf.Series((False, False, True), index=('b', 'c', 'd'))
>>> s1.via_fill_value(False) | s2
<Series>
<Index>
a        False
b        False
c        True
d        True
<<U1>    <bool>
#end_Series-via_fill_value().__or__()

#start_Series-via_fill_value().__lt__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) < s2
<Series>
<Index>
a        False
b        False
c        False
d        True
<<U1>    <bool>
#end_Series-via_fill_value().__lt__()

#start_Series-via_fill_value().__le__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) <= s2
<Series>
<Index>
a        False
b        True
c        True
d        True
<<U1>    <bool>
#end_Series-via_fill_value().__le__()

#start_Series-via_fill_value().__eq__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) == s2
<Series>
<Index>
a        False
b        True
c        True
d        False
<<U1>    <bool>
#end_Series-via_fill_value().__eq__()

#start_Series-via_fill_value().__ne__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) != s2
<Series>
<Index>
a        True
b        False
c        False
d        True
<<U1>    <bool>
#end_Series-via_fill_value().__ne__()

#start_Series-via_fill_value().__gt__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) > s2
<Series>
<Index>
a        True
b        False
c        False
d        False
<<U1>    <bool>
#end_Series-via_fill_value().__gt__()

#start_Series-via_fill_value().__ge__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) >= s2
<Series>
<Index>
a        True
b        True
c        True
d        False
<<U1>    <bool>
#end_Series-via_fill_value().__ge__()

#start_Series-via_fill_value().__radd__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s2 + s1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_Series-via_fill_value().__radd__()

#start_Series-via_fill_value().__rsub__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s2 - s1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_Series-via_fill_value().__rsub__()

#start_Series-via_fill_value().__rmul__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s2 * s1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_Series-via_fill_value().__rmul__()

#start_Series-via_fill_value().__rtruediv__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s2 / s1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_Series-via_fill_value().__rtruediv__()

#start_Series-via_fill_value().__rfloordiv__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s2 // s1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_Series-via_fill_value().__rfloordiv__()

#start_Series-via_re().search()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.via_re('[X123]').search()
<Series>
<Index>
a        True
b        True
c        False
<<U1>    <bool>
#end_Series-via_re().search()

#start_Series-via_re().match()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.via_re('[X123]').match()
<Series>
<Index>
a        True
b        True
c        False
<<U1>    <bool>
#end_Series-via_re().match()

#start_Series-via_re().fullmatch()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.via_re('123').fullmatch()
<Series>
<Index>
a        False
b        False
c        False
<<U1>    <bool>
#end_Series-via_re().fullmatch()

#start_Series-via_re().split()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.via_re('[X123]').split()
<Series>
<Index>
a        ('', '0')
b        ('', '')
c        ('8',)
<<U1>    <object>
#end_Series-via_re().split()

#start_Series-via_re().findall()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.via_re('[X123]').findall()
<Series>
<Index>
a        ('1',)
b        ('2',)
c        ()
<<U1>    <object>
#end_Series-via_re().findall()

#start_Series-via_re().sub()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.via_re('[X123]').sub('==')
<Series>
<Index>
a        ==0
b        ==
c        8
<<U1>    <<U3>
#end_Series-via_re().sub()

#start_Series-via_re().subn()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.via_re('[X123]').subn('==', 1)
<Series>
<Index>
a        ('==0', 1)
b        ('==', 1)
c        ('8', 0)
<<U1>    <object>
#end_Series-via_re().subn()

#start_Series-via_values.apply()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.via_values.apply(np.sin)
<Series>
<Index>
a        -0.5440211108893698
b        0.9092974268256817
c        0.9893582466233818
<<U1>    <float64>
#end_Series-via_values.apply()

#start_Series-via_values.__array_ufunc__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> np.sin(s.via_values)
<Series>
<Index>
a        -0.5440211108893698
b        0.9092974268256817
c        0.9893582466233818
<<U1>    <float64>
#end_Series-via_values.__array_ufunc__()

#start_Series-via_values.__call__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> np.sin(s.via_values(unify_blocks=True))
<Series>
<Index>
a        -0.5440211108893698
b        0.9092974268256817
c        0.9893582466233818
<<U1>    <float64>
#end_Series-via_values.__call__()

#start_SeriesHE-__init__()
>>> sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-__init__()

#start_SeriesHE-from_concat()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((4, 3, 12), index=('d', 'e', 'f'))
>>> sf.SeriesHE.from_concat((s1, s2))
<SeriesHE>
<Index>
a          10
b          2
c          8
d          4
e          3
f          12
<<U1>      <int64>
#end_SeriesHE-from_concat()

#start_SeriesHE-from_concat_items()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((4, 3, 12), index=('d', 'e', 'f'))
>>> sf.SeriesHE.from_concat_items((('x', s1), ('y', s2)))
<SeriesHE>
<IndexHierarchy>
x                a     10
x                b     2
x                c     8
y                d     4
y                e     3
y                f     12
<<U1>            <<U1> <int64>
#end_SeriesHE-from_concat_items()

#start_SeriesHE-from_delimited()
>>> sf.SeriesHE.from_delimited('1.2|5.5|8.2|-3.0', delimiter='|')
<SeriesHE>
<Index>
0          1.2
1          5.5
2          8.2
3          -3.0
<int64>    <float64>
>>> sf.SeriesHE.from_delimited('2021-01:1517-04:1620-12', delimiter=':', dtype=np.datetime64)
<SeriesHE>
<Index>
0          2021-01
1          1517-04
2          1620-12
<int64>    <datetime64[M]>
#end_SeriesHE-from_delimited()

#start_SeriesHE-from_dict()
>>> sf.SeriesHE.from_dict(dict(a=10, b=2, c=8))
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-from_dict()

#start_SeriesHE-from_element()
>>> sf.SeriesHE.from_element(-1, index=('a', 'b', 'c'), name='x')
<SeriesHE: x>
<Index>
a             -1
b             -1
c             -1
<<U1>         <int64>
#end_SeriesHE-from_element()

#start_SeriesHE-from_items()
>>> sf.SeriesHE.from_items((('a', 10), ('b', 2), ('c', 8)), name='x')
<SeriesHE: x>
<Index>
a             10
b             2
c             8
<<U1>         <int64>
#end_SeriesHE-from_items()

#start_SeriesHE-from_overlay()
>>> s1 = sf.SeriesHE((11, 1, None), index=('a', 'b', 'c'))
>>> s1
<SeriesHE>
<Index>
a          11
b          1
c          None
<<U1>      <object>
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> sf.SeriesHE.from_overlay((s1, s2))
<SeriesHE>
<Index>
a          11
b          1
c          8
d          19
<<U1>      <object>
#end_SeriesHE-from_overlay()

#start_SeriesHE-from_pandas()
>>> df = pd.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> sf.SeriesHE.from_pandas(df)
<SeriesHE>
<Index>
a          10
b          2
c          8
<object>   <int64>
#end_SeriesHE-from_pandas()

#start_SeriesHE-to_frame()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_frame()
<Frame>
<Index> 0       <int64>
<Index>
a       10
b       2
c       8
<<U1>   <int64>
#end_SeriesHE-to_frame()

#start_SeriesHE-to_frame_go()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_frame_go()
<FrameGO>
<IndexGO> 0       <int64>
<Index>
a         10
b         2
c         8
<<U1>     <int64>
#end_SeriesHE-to_frame_go()

#start_SeriesHE-to_frame_he()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_frame_he()
<FrameHE>
<Index>   0       <int64>
<Index>
a         10
b         2
c         8
<<U1>     <int64>
#end_SeriesHE-to_frame_he()

#start_SeriesHE-to_pairs()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_pairs()
(('a', 10), ('b', 2), ('c', 8))
#end_SeriesHE-to_pairs()

#start_SeriesHE-to_pandas()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_pandas()
a    10
b     2
c     8
dtype: int64
#end_SeriesHE-to_pandas()

#start_SeriesHE-to_series()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_series()
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_SeriesHE-to_series()

#start_SeriesHE-to_series_he()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_series_he()
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-to_series_he()

#start_SeriesHE-STATIC
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.STATIC
True
#end_SeriesHE-STATIC

#start_SeriesHE-T
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.T
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-T

#start_SeriesHE-dtype
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.dtype
int64
#end_SeriesHE-dtype

#start_SeriesHE-index
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.index
<Index>
a
b
c
<<U1>
#end_SeriesHE-index

#start_SeriesHE-memory
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.memory
       L   Lu    LM  LMu   LMD LMDu  R    Ru    RM   RMu   RMD RMDu
Name   16  B     16  B     16  B     16   B     16   B     16  B
Index  756 B     788 B     564 B     8.83 KB    812  B     588 B
Values 120 B     136 B     24  B     120  B     136  B     24  B
Total  940 B     988 B     652 B     9.01 KB    1012 B     676 B
#end_SeriesHE-memory

#start_SeriesHE-name
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.name
#end_SeriesHE-name

#start_SeriesHE-nbytes
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.nbytes
24
#end_SeriesHE-nbytes

#start_SeriesHE-ndim
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.ndim
1
#end_SeriesHE-ndim

#start_SeriesHE-shape
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.shape
(3,)
#end_SeriesHE-shape

#start_SeriesHE-size
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.size
3
#end_SeriesHE-size

#start_SeriesHE-__array__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.__array__()
[10  2  8]
#end_SeriesHE-__array__()

#start_SeriesHE-__array_ufunc__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> np.array((0, 1, 0)) * s
<SeriesHE>
<Index>
a          0
b          2
c          0
<<U1>      <int64>
#end_SeriesHE-__array_ufunc__()

#start_SeriesHE-__bool__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_SeriesHE-__bool__()

#start_SeriesHE-__deepcopy__()
>>> import copy
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> copy.deepcopy(s)
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-__deepcopy__()

#start_SeriesHE-__len__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> len(s)
3
#end_SeriesHE-__len__()

#start_SeriesHE-__round__()
>>> s = sf.SeriesHE((10.235, 2.124, 8.734), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          8.734
<<U1>      <float64>
>>> round(s, 1)
<SeriesHE>
<Index>
a          10.2
b          2.1
c          8.7
<<U1>      <float64>
#end_SeriesHE-__round__()

#start_SeriesHE-all()
>>> s = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))
>>> s.all()
False
#end_SeriesHE-all()

#start_SeriesHE-any()
>>> s = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))
>>> s.any()
True
#end_SeriesHE-any()

#start_SeriesHE-astype()
>>> s = sf.SeriesHE((11, 1, None), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          11
b          1
c          None
<<U1>      <object>
>>> s.astype(float)
<SeriesHE>
<Index>
a          11.0
b          1.0
c          nan
<<U1>      <float64>
#end_SeriesHE-astype()

#start_SeriesHE-clip()
>>> s = sf.SeriesHE((10.235, 2.124, 8.734), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          8.734
<<U1>      <float64>
>>> s.clip(lower=2.5, upper=10.1)
<SeriesHE>
<Index>
a          10.1
b          2.5
c          8.734
<<U1>      <float64>
#end_SeriesHE-clip()

#start_SeriesHE-corr()
>>> s1 = sf.SeriesHE((10.235, 2.124, 8.734), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s1.corr(s2)
0.9977051066985494
#end_SeriesHE-corr()

#start_SeriesHE-count()
>>> s = sf.SeriesHE((8, 5, None, 8), index=('a', 'b', 'c', 'd'))
>>> s.count(skipna=True)
3
>>> s.count(unique=True)
2
#end_SeriesHE-count()

#start_SeriesHE-cov()
>>> s1 = sf.SeriesHE((10.235, 2.124, 8.734), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s1.cov(s2)
17.924999999999997
#end_SeriesHE-cov()

#start_SeriesHE-cumprod()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.cumprod()
<SeriesHE>
<Index>
a          10
b          20
c          160
<<U1>      <int64>
#end_SeriesHE-cumprod()

#start_SeriesHE-cumsum()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.cumsum()
<SeriesHE>
<Index>
a          10
b          12
c          20
<<U1>      <int64>
#end_SeriesHE-cumsum()

#start_SeriesHE-drop_duplicated()
>>> s = sf.SeriesHE((8, 5, None, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          None
d          8
<<U1>      <object>
>>> s.drop_duplicated()
<SeriesHE>
<Index>
b          5
c          None
<<U1>      <object>
#end_SeriesHE-drop_duplicated()

#start_SeriesHE-dropfalsy()
>>> s = sf.SeriesHE(('q', 'r', '', 's'), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          q
b          r
c
d          s
<<U1>      <<U1>
>>> s.dropfalsy()
<SeriesHE>
<Index>
a          q
b          r
d          s
<<U1>      <<U1>
#end_SeriesHE-dropfalsy()

#start_SeriesHE-dropna()
>>> s = sf.SeriesHE((8, 5, None, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          None
d          8
<<U1>      <object>
>>> s.dropna()
<SeriesHE>
<Index>
a          8
b          5
d          8
<<U1>      <object>
#end_SeriesHE-dropna()

#start_SeriesHE-duplicated()
>>> s = sf.SeriesHE((8, 5, None, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          None
d          8
<<U1>      <object>
>>> s.duplicated()
<SeriesHE>
<Index>
a          True
b          False
c          False
d          True
<<U1>      <bool>
#end_SeriesHE-duplicated()

#start_SeriesHE-equals()
>>> s1 = sf.SeriesHE((10.235, 2.124, 8.734), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s1.equals(s2)
False
#end_SeriesHE-equals()

#start_SeriesHE-fillfalsy()
>>> s = sf.SeriesHE(('q', 'r', '', 's'), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          q
b          r
c
d          s
<<U1>      <<U1>
>>> s.fillfalsy('missing')
<SeriesHE>
<Index>
a          q
b          r
c          missing
d          s
<<U1>      <<U7>
#end_SeriesHE-fillfalsy()

#start_SeriesHE-fillfalsy_backward()
>>> s = sf.SeriesHE(('', '', 'r', 's'), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a
b
c          r
d          s
<<U1>      <<U1>
>>> s.fillfalsy_backward()
<SeriesHE>
<Index>
a          r
b          r
c          r
d          s
<<U1>      <<U1>
#end_SeriesHE-fillfalsy_backward()

#start_SeriesHE-fillfalsy_forward()
>>> s = sf.SeriesHE(('p', 'q', '', ''), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          p
b          q
c
d
<<U1>      <<U1>
>>> s.fillfalsy_forward()
<SeriesHE>
<Index>
a          p
b          q
c          q
d          q
<<U1>      <<U1>
#end_SeriesHE-fillfalsy_forward()

#start_SeriesHE-fillfalsy_leading()
>>> s = sf.SeriesHE(('', '', 'r', 's'), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a
b
c          r
d          s
<<U1>      <<U1>
>>> s.fillfalsy_leading('missing')
<SeriesHE>
<Index>
a          missing
b          missing
c          r
d          s
<<U1>      <<U7>
#end_SeriesHE-fillfalsy_leading()

#start_SeriesHE-fillfalsy_trailing()
>>> s = sf.SeriesHE(('p', 'q', '', ''), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          p
b          q
c
d
<<U1>      <<U1>
>>> s.fillfalsy_trailing('missing')
<SeriesHE>
<Index>
a          p
b          q
c          missing
d          missing
<<U1>      <<U7>
#end_SeriesHE-fillfalsy_trailing()

#start_SeriesHE-fillna()
>>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          nan
d          8.734
e          nan
<<U1>      <float64>
>>> s.fillna(0.0)
<SeriesHE>
<Index>
a          10.235
b          2.124
c          0.0
d          8.734
e          0.0
<<U1>      <float64>
#end_SeriesHE-fillna()

#start_SeriesHE-fillna_backward()
>>> s = sf.SeriesHE((np.nan, np.nan, 10.235, 2.124, 8.734), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          nan
b          nan
c          10.235
d          2.124
e          8.734
<<U1>      <float64>
>>> s.fillna_backward()
<SeriesHE>
<Index>
a          10.235
b          10.235
c          10.235
d          2.124
e          8.734
<<U1>      <float64>
#end_SeriesHE-fillna_backward()

#start_SeriesHE-fillna_forward()
>>> s = sf.SeriesHE((10.235, 2.124, 8.734, np.nan, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          8.734
d          nan
e          nan
<<U1>      <float64>
>>> s.fillna_forward()
<SeriesHE>
<Index>
a          10.235
b          2.124
c          8.734
d          8.734
e          8.734
<<U1>      <float64>
#end_SeriesHE-fillna_forward()

#start_SeriesHE-fillna_leading()
>>> s = sf.SeriesHE((np.nan, np.nan, 10.235, 2.124, 8.734), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          nan
b          nan
c          10.235
d          2.124
e          8.734
<<U1>      <float64>
>>> s.fillna_leading(0.0)
<SeriesHE>
<Index>
a          0.0
b          0.0
c          10.235
d          2.124
e          8.734
<<U1>      <float64>
#end_SeriesHE-fillna_leading()

#start_SeriesHE-fillna_trailing()
>>> s = sf.SeriesHE((10.235, 2.124, 8.734, np.nan, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          8.734
d          nan
e          nan
<<U1>      <float64>
>>> s.fillna_trailing(0.0)
<SeriesHE>
<Index>
a          10.235
b          2.124
c          8.734
d          0.0
e          0.0
<<U1>      <float64>
#end_SeriesHE-fillna_trailing()

#start_SeriesHE-head()
>>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          nan
d          8.734
e          nan
<<U1>      <float64>
>>> s.head(2)
<SeriesHE>
<Index>
a          10.235
b          2.124
<<U1>      <float64>
#end_SeriesHE-head()

#start_SeriesHE-iloc_max()
>>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          nan
d          8.734
e          nan
<<U1>      <float64>
>>> s.iloc_max()
0
#end_SeriesHE-iloc_max()

#start_SeriesHE-iloc_min()
>>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          nan
d          8.734
e          nan
<<U1>      <float64>
>>> s.iloc_min()
1
#end_SeriesHE-iloc_min()

#start_SeriesHE-iloc_searchsorted()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
>>> s.iloc_searchsorted(18)
2
#end_SeriesHE-iloc_searchsorted()

#start_SeriesHE-insert_after()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((4, 3, 12), index=('d', 'e', 'f'))
>>> s1.insert_after('b', s2)
<SeriesHE>
<Index>
a          10
b          2
d          4
e          3
f          12
c          8
<<U1>      <int64>
#end_SeriesHE-insert_after()

#start_SeriesHE-insert_before()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((4, 3, 12), index=('d', 'e', 'f'))
>>> s1.insert_before('b', s2)
<SeriesHE>
<Index>
a          10
d          4
e          3
f          12
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-insert_before()

#start_SeriesHE-isfalsy()
>>> s = sf.SeriesHE((2, '', 19, 0, None), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b
c          19
d          0
e          None
<<U1>      <object>
>>> s.isfalsy()
<SeriesHE>
<Index>
a          False
b          True
c          False
d          True
e          True
<<U1>      <bool>
#end_SeriesHE-isfalsy()

#start_SeriesHE-isin()
>>> s = sf.SeriesHE((2, '', 19, 0, None), index=('a', 'b', 'c', 'd', 'e'))
>>> s.isin((2, 19))
<SeriesHE>
<Index>
a          True
b          False
c          True
d          False
e          False
<<U1>      <bool>
#end_SeriesHE-isin()

#start_SeriesHE-isna()
>>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          nan
d          8.734
e          nan
<<U1>      <float64>
>>> s.isna()
<SeriesHE>
<Index>
a          False
b          False
c          True
d          False
e          True
<<U1>      <bool>
#end_SeriesHE-isna()

#start_SeriesHE-loc_max()
>>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          nan
d          8.734
e          nan
<<U1>      <float64>
>>> s.loc_max()
a
#end_SeriesHE-loc_max()

#start_SeriesHE-loc_min()
>>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          nan
d          8.734
e          nan
<<U1>      <float64>
>>> s.loc_min()
b
#end_SeriesHE-loc_min()

#start_SeriesHE-loc_searchsorted()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
>>> s.loc_searchsorted(18)
c
#end_SeriesHE-loc_searchsorted()

#start_SeriesHE-max()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.max()
10
#end_SeriesHE-max()

#start_SeriesHE-mean()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.mean()
6.666666666666667
#end_SeriesHE-mean()

#start_SeriesHE-median()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.median()
8.0
#end_SeriesHE-median()

#start_SeriesHE-min()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.min()
2
#end_SeriesHE-min()

#start_SeriesHE-notfalsy()
>>> s = sf.SeriesHE((2, '', 19, 0, None), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b
c          19
d          0
e          None
<<U1>      <object>
>>> s.notfalsy()
<SeriesHE>
<Index>
a          True
b          False
c          True
d          False
e          False
<<U1>      <bool>
#end_SeriesHE-notfalsy()

#start_SeriesHE-notna()
>>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          nan
d          8.734
e          nan
<<U1>      <float64>
>>> s.notna()
<SeriesHE>
<Index>
a          True
b          True
c          False
d          True
e          False
<<U1>      <bool>
#end_SeriesHE-notna()

#start_SeriesHE-prod()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.prod()
160
#end_SeriesHE-prod()

#start_SeriesHE-rank_dense()
>>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          0
d          8
<<U1>      <int64>
>>> s.rank_dense()
<SeriesHE>
<Index>
a          2
b          1
c          0
d          2
<<U1>      <int64>
#end_SeriesHE-rank_dense()

#start_SeriesHE-rank_max()
>>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          0
d          8
<<U1>      <int64>
>>> s.rank_max()
<SeriesHE>
<Index>
a          3
b          1
c          0
d          3
<<U1>      <int64>
#end_SeriesHE-rank_max()

#start_SeriesHE-rank_mean()
>>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          0
d          8
<<U1>      <int64>
>>> s.rank_mean()
<SeriesHE>
<Index>
a          2.5
b          1.0
c          0.0
d          2.5
<<U1>      <float64>
#end_SeriesHE-rank_mean()

#start_SeriesHE-rank_min()
>>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          0
d          8
<<U1>      <int64>
>>> s.rank_min()
<SeriesHE>
<Index>
a          2
b          1
c          0
d          2
<<U1>      <int64>
#end_SeriesHE-rank_min()

#start_SeriesHE-rank_ordinal()
>>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          0
d          8
<<U1>      <int64>
>>> s.rank_ordinal()
<SeriesHE>
<Index>
a          2
b          1
c          0
d          3
<<U1>      <int64>
#end_SeriesHE-rank_ordinal()

#start_SeriesHE-rehierarch()
>>> s = sf.SeriesHE((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))
>>> s
<SeriesHE>
<IndexHierarchy>
1                a     3
1                b     2
2                a     8
2                b     7
<int64>          <<U1> <int64>
>>> s.rehierarch((1, 0))
<SeriesHE>
<IndexHierarchy>
a                1       3
a                2       8
b                1       2
b                2       7
<<U1>            <int64> <int64>
#end_SeriesHE-rehierarch()

#start_SeriesHE-reindex()
>>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          0
d          8
<<U1>      <int64>
>>> s.reindex(('d', 'f', 'e', 'c'), fill_value=-1)
<SeriesHE>
<Index>
d          8
f          -1
e          -1
c          0
<<U1>      <int64>
#end_SeriesHE-reindex()

#start_SeriesHE-relabel()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.relabel(('x', 'y', 'z'))
<SeriesHE>
<Index>
x          10
y          2
z          8
<<U1>      <int64>
>>> s.relabel(dict(a='x', b='y'))
<SeriesHE>
<Index>
x          10
y          2
c          8
<<U1>      <int64>
>>> s.relabel(lambda l: f'+{l.upper()}+')
<SeriesHE>
<Index>
+A+        10
+B+        2
+C+        8
<<U3>      <int64>
#end_SeriesHE-relabel()

#start_SeriesHE-relabel_flat()
>>> s = sf.SeriesHE((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))
>>> s
<SeriesHE>
<IndexHierarchy>
1                a     3
1                b     2
2                a     8
2                b     7
<int64>          <<U1> <int64>
>>> s.relabel_flat()
<SeriesHE>
<Index>
(1, 'a')   3
(1, 'b')   2
(2, 'a')   8
(2, 'b')   7
<object>   <int64>
#end_SeriesHE-relabel_flat()

#start_SeriesHE-relabel_level_add()
>>> s = sf.SeriesHE((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))
>>> s
<SeriesHE>
<IndexHierarchy>
1                a     3
1                b     2
2                a     8
2                b     7
<int64>          <<U1> <int64>
>>> s.relabel_level_add('x')
<SeriesHE>
<IndexHierarchy>
x                1       a     3
x                1       b     2
x                2       a     8
x                2       b     7
<<U1>            <int64> <<U1> <int64>
#end_SeriesHE-relabel_level_add()

#start_SeriesHE-relabel_level_drop()
>>> s = sf.SeriesHE((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))
>>> s
<SeriesHE>
<IndexHierarchy>
1                a     3
1                b     2
2                a     8
2                b     7
<int64>          <<U1> <int64>
>>> s.iloc[:2].relabel_level_drop(1)
<SeriesHE>
<Index>
a          3
b          2
<<U1>      <int64>
#end_SeriesHE-relabel_level_drop()

#start_SeriesHE-rename()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'), name='x')
>>> s
<SeriesHE: x>
<Index>
a             10
b             2
c             8
<<U1>         <int64>
>>> s.rename('y')
<SeriesHE: y>
<Index>
a             10
b             2
c             8
<<U1>         <int64>
#end_SeriesHE-rename()

#start_SeriesHE-roll()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
>>> s.roll(2)
<SeriesHE>
<Index>
a          34
b          54
c          2
d          8
e          19
<<U1>      <int64>
#end_SeriesHE-roll()

#start_SeriesHE-sample()
>>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          nan
d          8.734
e          nan
<<U1>      <float64>
>>> s.sample(2, seed=0)
<SeriesHE>
<Index>
a          10.235
c          nan
<<U1>      <float64>
#end_SeriesHE-sample()

#start_SeriesHE-shift()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
>>> s.shift(2)
<SeriesHE>
<Index>
a          nan
b          nan
c          2.0
d          8.0
e          19.0
<<U1>      <float64>
#end_SeriesHE-shift()

#start_SeriesHE-sort_index()
>>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          0
d          8
<<U1>      <int64>
>>> s.sort_index()
<SeriesHE>
<Index>
a          8
b          5
c          0
d          8
<<U1>      <int64>
>>> s.sort_index(ascending=False)
<SeriesHE>
<Index>
d          8
c          0
b          5
a          8
<<U1>      <int64>
#end_SeriesHE-sort_index()

#start_SeriesHE-sort_values()
>>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          0
d          8
<<U1>      <int64>
>>> s.sort_values()
<SeriesHE>
<Index>
c          0
b          5
a          8
d          8
<<U1>      <int64>
>>> s.sort_values(ascending=False)
<SeriesHE>
<Index>
d          8
a          8
b          5
c          0
<<U1>      <int64>
#end_SeriesHE-sort_values()

#start_SeriesHE-std()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.std()
3.39934634239519
#end_SeriesHE-std()

#start_SeriesHE-sum()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.sum()
20
#end_SeriesHE-sum()

#start_SeriesHE-tail()
>>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          nan
d          8.734
e          nan
<<U1>      <float64>
>>> s.tail(2)
<SeriesHE>
<Index>
d          8.734
e          nan
<<U1>      <float64>
#end_SeriesHE-tail()

#start_SeriesHE-transpose()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.transpose()
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-transpose()

#start_SeriesHE-unique()
>>> s = sf.SeriesHE((8, 5, None, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          None
d          8
<<U1>      <object>
>>> s.unique()
[8 5 None]
#end_SeriesHE-unique()

#start_SeriesHE-var()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.var()
11.555555555555557
#end_SeriesHE-var()

#start_SeriesHE-__contains__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.__contains__('a')
True
#end_SeriesHE-__contains__()

#start_SeriesHE-__iter__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.__iter__())
('a', 'b', 'c')
#end_SeriesHE-__iter__()

#start_SeriesHE-__reversed__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.__reversed__())
('c', 'b', 'a')
#end_SeriesHE-__reversed__()

#start_SeriesHE-get()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.get('a')
10
>>> s.get('z', -1)
-1
#end_SeriesHE-get()

#start_SeriesHE-items()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.items())
(('a', 10), ('b', 2), ('c', 8))
#end_SeriesHE-items()

#start_SeriesHE-keys()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.keys()
<Index>
a
b
c
<<U1>
#end_SeriesHE-keys()

#start_SeriesHE-values
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.values
[10  2  8]
#end_SeriesHE-values

#start_SeriesHE-interface
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.interface
<Frame>
<Index>                              cls_name group                doc                  <<U18>
<Index: signature>
__init__(values, *, index, name, ... SeriesHE Constructor          Initializer. Args...
from_concat(containers, *, index,... SeriesHE Constructor          Concatenate multi...
from_concat_items(items, *, name,... SeriesHE Constructor          Produce a Series ...
from_delimited(delimited, *, deli... SeriesHE Constructor          Series constructi...
from_dict(mapping, *, dtype, name... SeriesHE Constructor          Series constructi...
from_element(element, *, index, d... SeriesHE Constructor          Create a Series f...
from_items(pairs, *, dtype, name,... SeriesHE Constructor          Series constructi...
from_overlay(containers, *, index... SeriesHE Constructor          Return a new Seri...
from_pandas(value, *, index, inde... SeriesHE Constructor          Given a Pandas Se...
to_frame(axis, *, index, index_co... SeriesHE Exporter             Return a Frame vi...
to_frame_go(axis, *, index, index... SeriesHE Exporter             Return FrameGO vi...
to_frame_he(axis, *, index, index... SeriesHE Exporter             Return FrameHE vi...
to_html(config, style_config)        SeriesHE Exporter             Return an HTML ta...
to_html_datatables(fp, show, config) SeriesHE Exporter             Return a complete...
to_pairs()                           SeriesHE Exporter             Return a tuple of...
to_pandas()                          SeriesHE Exporter             Return a Pandas S...
to_series()                          SeriesHE Exporter             Return a Series f...
...                                  ...      ...                  ...
via_fill_value(fill_value).__le__... SeriesHE Accessor Fill Value
via_fill_value(fill_value).__eq__... SeriesHE Accessor Fill Value
via_fill_value(fill_value).__ne__... SeriesHE Accessor Fill Value
via_fill_value(fill_value).__gt__... SeriesHE Accessor Fill Value
via_fill_value(fill_value).__ge__... SeriesHE Accessor Fill Value
via_fill_value(fill_value).__radd... SeriesHE Accessor Fill Value
via_fill_value(fill_value).__rsub... SeriesHE Accessor Fill Value
via_fill_value(fill_value).__rmul... SeriesHE Accessor Fill Value
via_fill_value(fill_value).__rtru... SeriesHE Accessor Fill Value
via_fill_value(fill_value).__rflo... SeriesHE Accessor Fill Value
via_re(pattern, flags).search(pos... SeriesHE Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... SeriesHE Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... SeriesHE Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... SeriesHE Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... SeriesHE Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... SeriesHE Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... SeriesHE Accessor Regular ... Perform the same ...
<<U87>                               <<U8>    <<U27>               <<U83>
#end_SeriesHE-interface

#start_SeriesHE-__repr__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> repr(s)
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-__repr__()

#start_SeriesHE-__str__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> str(s)
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-__str__()

#start_SeriesHE-display()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.display()
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.display(sf.DisplayConfig(type_show=False))
a 10
b 2
c 8
#end_SeriesHE-display()

#start_SeriesHE-display_tall()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.display_tall()
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-display_tall()

#start_SeriesHE-display_wide()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.display_wide()
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-display_wide()

#start_SeriesHE-assign[]()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.assign['c']('x')
<SeriesHE>
<Index>
a          2
b          8
c          x
d          34
e          54
<<U1>      <object>
>>> s.assign['c':]('x')
<SeriesHE>
<Index>
a          2
b          8
c          x
d          x
e          x
<<U1>      <object>
>>> s.assign[['a', 'd']](('x', 'y'))
<SeriesHE>
<Index>
a          x
b          8
c          19
d          y
e          54
<<U1>      <object>
#end_SeriesHE-assign[]()

#start_SeriesHE-assign[].apply()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
>>> s.assign['c':].apply(lambda s: s / 100)
<SeriesHE>
<Index>
a          2.0
b          8.0
c          0.19
d          0.34
e          0.54
<<U1>      <float64>
#end_SeriesHE-assign[].apply()

#start_SeriesHE-assign[].apply_element()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
>>> s.assign['b':].apply_element(lambda e: e if e < 10 else f'--{e}--')
<SeriesHE>
<Index>
a          2
b          8
c          --19--
d          --34--
e          --54--
<<U1>      <object>
#end_SeriesHE-assign[].apply_element()

#start_SeriesHE-assign[].apply_element_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
>>> s.assign['b':].apply_element_items(lambda l, e: e if l == 'c' else f'--{e}--')
<SeriesHE>
<Index>
a          2
b          --8--
c          19
d          --34--
e          --54--
<<U1>      <object>
#end_SeriesHE-assign[].apply_element_items()

#start_SeriesHE-assign.iloc[]()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.assign.iloc[2]('x')
<SeriesHE>
<Index>
a          2
b          8
c          x
d          34
e          54
<<U1>      <object>
>>> s.assign.iloc[2:]('x')
<SeriesHE>
<Index>
a          2
b          8
c          x
d          x
e          x
<<U1>      <object>
>>> s.assign.iloc[[0, 4]](('x', 'y'))
<SeriesHE>
<Index>
a          x
b          8
c          19
d          34
e          y
<<U1>      <object>
#end_SeriesHE-assign.iloc[]()

#start_SeriesHE-assign.iloc[].apply()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
>>> s.assign.iloc[2:].apply(lambda s: s / 100)
<SeriesHE>
<Index>
a          2.0
b          8.0
c          0.19
d          0.34
e          0.54
<<U1>      <float64>
#end_SeriesHE-assign.iloc[].apply()

#start_SeriesHE-assign.iloc[].apply_element()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
>>> s.assign.iloc[2:].apply_element(lambda e: e / 100 if e < 10 else e)
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
#end_SeriesHE-assign.iloc[].apply_element()

#start_SeriesHE-assign.iloc[].apply_element_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
>>> s.assign.iloc[2:].apply_element_items(lambda l, e: e if l == 'c' else f'--{e}--')
<SeriesHE>
<Index>
a          2
b          8
c          19
d          --34--
e          --54--
<<U1>      <object>
#end_SeriesHE-assign.iloc[].apply_element_items()

#start_SeriesHE-assign.loc[]()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.assign.loc['c']('x')
<SeriesHE>
<Index>
a          2
b          8
c          x
d          34
e          54
<<U1>      <object>
>>> s.assign.loc['c':]('x')
<SeriesHE>
<Index>
a          2
b          8
c          x
d          x
e          x
<<U1>      <object>
>>> s.assign.loc[['a', 'd']](('x', 'y'))
<SeriesHE>
<Index>
a          x
b          8
c          19
d          y
e          54
<<U1>      <object>
#end_SeriesHE-assign.loc[]()

#start_SeriesHE-assign.loc[].apply()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
>>> s.assign.loc['c':].apply(lambda s: s / 100)
<SeriesHE>
<Index>
a          2.0
b          8.0
c          0.19
d          0.34
e          0.54
<<U1>      <float64>
#end_SeriesHE-assign.loc[].apply()

#start_SeriesHE-assign.loc[].apply_element()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
>>> s.assign.loc['c':].apply_element(lambda e: e / 100 if e < 10 else e)
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
#end_SeriesHE-assign.loc[].apply_element()

#start_SeriesHE-assign.loc[].apply_element_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
>>> s.assign.loc['c':].apply_element_items(lambda l, e: e / 100 if l == 'c' else e)
<SeriesHE>
<Index>
a          2.0
b          8.0
c          0.19
d          34.0
e          54.0
<<U1>      <float64>
#end_SeriesHE-assign.loc[].apply_element_items()

#start_SeriesHE-drop[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.drop['c']
<SeriesHE>
<Index>
a          2
b          8
d          34
e          54
<<U1>      <int64>
>>> s.drop['c':]
<SeriesHE>
<Index>
a          2
b          8
<<U1>      <int64>
>>> s.drop[['a', 'd']]
<SeriesHE>
<Index>
b          8
c          19
e          54
<<U1>      <int64>
#end_SeriesHE-drop[]

#start_SeriesHE-drop.iloc[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.drop.iloc[2]
<SeriesHE>
<Index>
a          2
b          8
d          34
e          54
<<U1>      <int64>
>>> s.drop.iloc[2:]
<SeriesHE>
<Index>
a          2
b          8
<<U1>      <int64>
>>> s.drop.iloc[[0, 4]]
<SeriesHE>
<Index>
b          8
c          19
d          34
<<U1>      <int64>
#end_SeriesHE-drop.iloc[]

#start_SeriesHE-drop.loc[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.drop.loc['c']
<SeriesHE>
<Index>
a          2
b          8
d          34
e          54
<<U1>      <int64>
>>> s.drop.loc['c':]
<SeriesHE>
<Index>
a          2
b          8
<<U1>      <int64>
>>> s.drop.loc[['a', 'd']]
<SeriesHE>
<Index>
b          8
c          19
e          54
<<U1>      <int64>
#end_SeriesHE-drop.loc[]

#start_SeriesHE-mask[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.mask['c']
<SeriesHE>
<Index>
a          False
b          False
c          True
d          False
e          False
<<U1>      <bool>
>>> s.mask['c':]
<SeriesHE>
<Index>
a          False
b          False
c          True
d          True
e          True
<<U1>      <bool>
>>> s.mask[['a', 'd']]
<SeriesHE>
<Index>
a          True
b          False
c          False
d          True
e          False
<<U1>      <bool>
#end_SeriesHE-mask[]

#start_SeriesHE-mask.iloc[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.mask.iloc[2]
<SeriesHE>
<Index>
a          False
b          False
c          True
d          False
e          False
<<U1>      <bool>
>>> s.mask.iloc[2:]
<SeriesHE>
<Index>
a          False
b          False
c          True
d          True
e          True
<<U1>      <bool>
>>> s.mask.iloc[[0, 4]]
<SeriesHE>
<Index>
a          True
b          False
c          False
d          False
e          True
<<U1>      <bool>
#end_SeriesHE-mask.iloc[]

#start_SeriesHE-mask.loc[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.mask.loc['c']
<SeriesHE>
<Index>
a          False
b          False
c          True
d          False
e          False
<<U1>      <bool>
>>> s.mask.loc['c':]
<SeriesHE>
<Index>
a          False
b          False
c          True
d          True
e          True
<<U1>      <bool>
>>> s.mask.loc[['a', 'd']]
<SeriesHE>
<Index>
a          True
b          False
c          False
d          True
e          False
<<U1>      <bool>
#end_SeriesHE-mask.loc[]

#start_SeriesHE-masked_array[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.masked_array['c']
[2 8 -- 34 54]
>>> s.masked_array['c':]
[2 8 -- -- --]
>>> s.masked_array[['a', 'd']]
[-- 8 19 -- 54]
#end_SeriesHE-masked_array[]

#start_SeriesHE-masked_array.iloc[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.masked_array.iloc[2]
[2 8 -- 34 54]
>>> s.masked_array.iloc[2:]
[2 8 -- -- --]
>>> s.masked_array.iloc[[0, 4]]
[-- 8 19 34 --]
#end_SeriesHE-masked_array.iloc[]

#start_SeriesHE-masked_array.loc[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.masked_array.loc['c']
[2 8 -- 34 54]
>>> s.masked_array.loc['c':]
[2 8 -- -- --]
>>> s.masked_array.loc[['a', 'd']]
[-- 8 19 -- 54]
#end_SeriesHE-masked_array.loc[]

#start_SeriesHE-[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s['c']
19
>>> s['c':]
<SeriesHE>
<Index>
c          19
d          34
e          54
<<U1>      <int64>
>>> s[['a', 'd']]
<SeriesHE>
<Index>
a          2
d          34
<<U1>      <int64>
#end_SeriesHE-[]

#start_SeriesHE-iloc[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iloc[2]
19
>>> s.iloc[2:]
<SeriesHE>
<Index>
c          19
d          34
e          54
<<U1>      <int64>
>>> s.iloc[[0, 4]]
<SeriesHE>
<Index>
a          2
e          54
<<U1>      <int64>
#end_SeriesHE-iloc[]

#start_SeriesHE-loc[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.loc['c']
19
>>> s.loc['c':]
<SeriesHE>
<Index>
c          19
d          34
e          54
<<U1>      <int64>
>>> s.loc[['a', 'd']]
<SeriesHE>
<Index>
a          2
d          34
<<U1>      <int64>
#end_SeriesHE-loc[]

#start_SeriesHE-iter_element()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element())
(2, 8, 19, 34, 54)
#end_SeriesHE-iter_element()

#start_SeriesHE-iter_element().apply()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_element().apply(lambda e: e > 10)
<Series>
<Index>
a        False
b        False
c        True
d        True
e        True
<<U1>    <bool>
#end_SeriesHE-iter_element().apply()

#start_SeriesHE-iter_element().apply_iter()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element().apply_iter(lambda e: e > 10))
(False, False, True, True, True)
#end_SeriesHE-iter_element().apply_iter()

#start_SeriesHE-iter_element().apply_iter_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element().apply_iter_items(lambda e: e > 10))
(('a', False), ('b', False), ('c', True), ('d', True), ('e', True))
#end_SeriesHE-iter_element().apply_iter_items()

#start_SeriesHE-iter_element().apply_pool()
>>> def func(e): return e > 10
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_element().apply_pool(func, use_threads=True)
<Series>
<Index>
a        False
b        False
c        True
d        True
e        True
<<U1>    <bool>
#end_SeriesHE-iter_element().apply_pool()

#start_SeriesHE-iter_element().map_all()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.iter_element().map_all({2: 200, 10: -1, 8: 45})
<Series>
<Index>
a        -1
b        200
c        45
<<U1>    <int64>
#end_SeriesHE-iter_element().map_all()

#start_SeriesHE-iter_element().map_all_iter()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element().map_all_iter({2: 200, 10: -1, 8: 45}))
(-1, 200, 45)
#end_SeriesHE-iter_element().map_all_iter()

#start_SeriesHE-iter_element().map_all_iter_items()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element().map_all_iter_items({2: 200, 10: -1, 8: 45}))
(('a', -1), ('b', 200), ('c', 45))
#end_SeriesHE-iter_element().map_all_iter_items()

#start_SeriesHE-iter_element().map_any()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.iter_element().map_any({10: -1, 8: 45})
<Series>
<Index>
a        -1
b        2
c        45
<<U1>    <int64>
#end_SeriesHE-iter_element().map_any()

#start_SeriesHE-iter_element().map_any_iter()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element().map_any_iter({10: -1, 8: 45}))
(-1, 2, 45)
#end_SeriesHE-iter_element().map_any_iter()

#start_SeriesHE-iter_element().map_any_iter_items()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element().map_any_iter_items({10: -1, 8: 45}))
(('a', -1), ('b', 2), ('c', 45))
#end_SeriesHE-iter_element().map_any_iter_items()

#start_SeriesHE-iter_element().map_fill()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.iter_element().map_fill({10: -1, 8: 45}, fill_value=np.nan)
<Series>
<Index>
a        -1.0
b        nan
c        45.0
<<U1>    <float64>
#end_SeriesHE-iter_element().map_fill()

#start_SeriesHE-iter_element().map_fill_iter()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element().map_fill_iter({10: -1, 8: 45}, fill_value=np.nan))
(-1, nan, 45)
#end_SeriesHE-iter_element().map_fill_iter()

#start_SeriesHE-iter_element().map_fill_iter_items()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element().map_fill_iter_items({10: -1, 8: 45}, fill_value=np.nan))
(('a', -1), ('b', nan), ('c', 45))
#end_SeriesHE-iter_element().map_fill_iter_items()

#start_SeriesHE-iter_element_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element_items())
(('a', 2), ('b', 8), ('c', 19), ('d', 34), ('e', 54))
#end_SeriesHE-iter_element_items()

#start_SeriesHE-iter_element_items().apply()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_element_items().apply(lambda l, e: e > 10 if l != 'c' else 0)
<Series>
<Index>
a        0
b        0
c        0
d        1
e        1
<<U1>    <int64>
#end_SeriesHE-iter_element_items().apply()

#start_SeriesHE-iter_element_items().apply_iter()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element_items().apply_iter(lambda l, e: e > 10 and l != 'e'))
(False, False, True, True, False)
#end_SeriesHE-iter_element_items().apply_iter()

#start_SeriesHE-iter_element_items().apply_iter_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element_items().apply_iter_items(lambda l, e: e > 10 and l != 'e'))
(('a', False), ('b', False), ('c', True), ('d', True), ('e', False))
#end_SeriesHE-iter_element_items().apply_iter_items()

#start_SeriesHE-iter_element_items().apply_pool()
>>> def func(pair): return pair[1] > 10 and pair[0] != 'e'
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_element_items().apply_pool(func, use_threads=True)
<Series>
<Index>
a        False
b        False
c        True
d        True
e        False
<<U1>    <bool>
#end_SeriesHE-iter_element_items().apply_pool()

#start_SeriesHE-iter_element_items().map_all()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.iter_element_items().map_all({('b', 2): 200, ('a', 10): -1, ('c', 8): 45})
<Series>
<Index>
a        -1
b        200
c        45
<<U1>    <int64>
#end_SeriesHE-iter_element_items().map_all()

#start_SeriesHE-iter_element_items().map_all_iter()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element_items().map_all_iter({('b', 2): 200, ('a', 10): -1, ('c', 8): 45}))
(-1, 200, 45)
#end_SeriesHE-iter_element_items().map_all_iter()

#start_SeriesHE-iter_element_items().map_all_iter_items()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element_items().map_all_iter_items({('b', 2): 200, ('a', 10): -1, ('c', 8): 45}))
(('a', -1), ('b', 200), ('c', 45))
#end_SeriesHE-iter_element_items().map_all_iter_items()

#start_SeriesHE-iter_element_items().map_any()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.iter_element_items().map_any({('a', 10): -1, ('c', 8): 45})
<Series>
<Index>
a        -1
b        2
c        45
<<U1>    <int64>
#end_SeriesHE-iter_element_items().map_any()

#start_SeriesHE-iter_element_items().map_any_iter()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element_items().map_any_iter({('a', 10): -1, ('c', 8): 45}))
(-1, 2, 45)
#end_SeriesHE-iter_element_items().map_any_iter()

#start_SeriesHE-iter_element_items().map_any_iter_items()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element_items().map_any_iter_items({('a', 10): -1, ('c', 8): 45}))
(('a', -1), ('b', 2), ('c', 45))
#end_SeriesHE-iter_element_items().map_any_iter_items()

#start_SeriesHE-iter_element_items().map_fill()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.iter_element_items().map_fill({('a', 10): -1, ('c', 8): 45}, fill_value=np.nan)
<Series>
<Index>
a        -1.0
b        nan
c        45.0
<<U1>    <float64>
#end_SeriesHE-iter_element_items().map_fill()

#start_SeriesHE-iter_element_items().map_fill_iter()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element_items().map_fill_iter({('a', 10): -1, ('c', 8): 45}, fill_value=np.nan))
(-1, nan, 45)
#end_SeriesHE-iter_element_items().map_fill_iter()

#start_SeriesHE-iter_element_items().map_fill_iter_items()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element_items().map_fill_iter_items({('a', 10): -1, ('c', 8): 45}, fill_value=np.nan))
(('a', -1), ('b', nan), ('c', 45))
#end_SeriesHE-iter_element_items().map_fill_iter_items()

#start_SeriesHE-iter_group()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group())
(<SeriesHE>
<Index>
a          -2
d          -2
<<U1>      <int64>, <SeriesHE>
<Index>
b          8
e          8
<<U1>      <int64>, <SeriesHE>
<Index>
c          19
<<U1>      <int64>)
#end_SeriesHE-iter_group()

#start_SeriesHE-iter_group().apply()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group().apply(lambda s: s.sum())
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_SeriesHE-iter_group().apply()

#start_SeriesHE-iter_group().apply_iter()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group().apply_iter(lambda s: s.sum()))
(-4, 16, 19)
#end_SeriesHE-iter_group().apply_iter()

#start_SeriesHE-iter_group().apply_iter_items()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group().apply_iter_items(lambda s: s.sum()))
((-2, -4), (8, 16), (19, 19))
#end_SeriesHE-iter_group().apply_iter_items()

#start_SeriesHE-iter_group().apply_pool()
>>> def func(s): return s.sum()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group().apply_pool(func, use_threads=True)
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_SeriesHE-iter_group().apply_pool()

#start_SeriesHE-iter_group_array()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array())
(array([-2, -2]), array([8, 8]), array([19]))
#end_SeriesHE-iter_group_array()

#start_SeriesHE-iter_group_array().apply()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_array().apply(lambda s: s.sum())
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_SeriesHE-iter_group_array().apply()

#start_SeriesHE-iter_group_array().apply_iter()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array().apply_iter(lambda s: s.sum()))
(-4, 16, 19)
#end_SeriesHE-iter_group_array().apply_iter()

#start_SeriesHE-iter_group_array().apply_iter_items()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array().apply_iter_items(lambda s: s.sum()))
((-2, -4), (8, 16), (19, 19))
#end_SeriesHE-iter_group_array().apply_iter_items()

#start_SeriesHE-iter_group_array().apply_pool()
>>> def func(s): return s.sum()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_array().apply_pool(func, use_threads=True)
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_SeriesHE-iter_group_array().apply_pool()

#start_SeriesHE-iter_group_array_items()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array_items())
((-2, array([-2, -2])), (8, array([8, 8])), (19, array([19])))
#end_SeriesHE-iter_group_array_items()

#start_SeriesHE-iter_group_array_items().apply()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_array_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)
<Series>
<Index>
-2       -4
8        (2,)
19       19
<int64>  <object>
#end_SeriesHE-iter_group_array_items().apply()

#start_SeriesHE-iter_group_array_items().apply_iter()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))
(-4, -1, 19)
#end_SeriesHE-iter_group_array_items().apply_iter()

#start_SeriesHE-iter_group_array_items().apply_iter_items()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))
((-2, -4), (8, -1), (19, 19))
#end_SeriesHE-iter_group_array_items().apply_iter_items()

#start_SeriesHE-iter_group_array_items().apply_pool()
>>> def func(pair): return pair[1].sum()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_array_items().apply_pool(func, use_threads=True)
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_SeriesHE-iter_group_array_items().apply_pool()

#start_SeriesHE-iter_group_items()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_items())
((-2, <SeriesHE>
<Index>
a          -2
d          -2
<<U1>      <int64>), (8, <SeriesHE>
<Index>
b          8
e          8
<<U1>      <int64>), (19, <SeriesHE>
<Index>
c          19
<<U1>      <int64>))
#end_SeriesHE-iter_group_items()

#start_SeriesHE-iter_group_items().apply()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)
<Series>
<Index>
-2       -4
8        (2,)
19       19
<int64>  <object>
#end_SeriesHE-iter_group_items().apply()

#start_SeriesHE-iter_group_items().apply_iter()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))
(-4, -1, 19)
#end_SeriesHE-iter_group_items().apply_iter()

#start_SeriesHE-iter_group_items().apply_iter_items()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))
((-2, -4), (8, -1), (19, 19))
#end_SeriesHE-iter_group_items().apply_iter_items()

#start_SeriesHE-iter_group_items().apply_pool()
>>> def func(pair): return pair[1].sum()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_items().apply_pool(func, use_threads=True)
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_SeriesHE-iter_group_items().apply_pool()

#start_SeriesHE-iter_group_labels()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.iter_group_labels())
(<SeriesHE>
<Index>
a          10
<<U1>      <int64>, <SeriesHE>
<Index>
b          2
<<U1>      <int64>, <SeriesHE>
<Index>
c          8
<<U1>      <int64>)
#end_SeriesHE-iter_group_labels()

#start_SeriesHE-iter_group_labels().apply()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels().apply(lambda s: s.sum())
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_SeriesHE-iter_group_labels().apply()

#start_SeriesHE-iter_group_labels().apply_iter()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels().apply_iter(lambda s: s.sum()))
(-2, 8, 19, -2, 8)
#end_SeriesHE-iter_group_labels().apply_iter()

#start_SeriesHE-iter_group_labels().apply_iter_items()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels().apply_iter_items(lambda s: s.sum()))
(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))
#end_SeriesHE-iter_group_labels().apply_iter_items()

#start_SeriesHE-iter_group_labels().apply_pool()
>>> def func(s): return s.sum()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels().apply_pool(func, use_threads=True)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_SeriesHE-iter_group_labels().apply_pool()

#start_SeriesHE-iter_group_labels_array()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.iter_group_labels_array())
(array([10]), array([2]), array([8]))
#end_SeriesHE-iter_group_labels_array()

#start_SeriesHE-iter_group_labels_array().apply()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_array().apply(lambda s: s.sum())
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_SeriesHE-iter_group_labels_array().apply()

#start_SeriesHE-iter_group_labels_array().apply_iter()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_array().apply_iter(lambda s: s.sum()))
(-2, 8, 19, -2, 8)
#end_SeriesHE-iter_group_labels_array().apply_iter()

#start_SeriesHE-iter_group_labels_array().apply_iter_items()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_array().apply_iter_items(lambda s: s.sum()))
(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))
#end_SeriesHE-iter_group_labels_array().apply_iter_items()

#start_SeriesHE-iter_group_labels_array().apply_pool()
>>> def func(s): return s.sum()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_array().apply_pool(func, use_threads=True)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_SeriesHE-iter_group_labels_array().apply_pool()

#start_SeriesHE-iter_group_labels_array_items()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.iter_group_labels_array_items())
(('a', array([10])), ('b', array([2])), ('c', array([8])))
#end_SeriesHE-iter_group_labels_array_items()

#start_SeriesHE-iter_group_labels_array_items().apply()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_array_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_SeriesHE-iter_group_labels_array_items().apply()

#start_SeriesHE-iter_group_labels_array_items().apply_iter()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_array_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))
(-2, 8, 19, -2, 8)
#end_SeriesHE-iter_group_labels_array_items().apply_iter()

#start_SeriesHE-iter_group_labels_array_items().apply_iter_items()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_array_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))
(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))
#end_SeriesHE-iter_group_labels_array_items().apply_iter_items()

#start_SeriesHE-iter_group_labels_array_items().apply_pool()
>>> def func(pair): return pair[1].sum()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_array_items().apply_pool(func, use_threads=True)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_SeriesHE-iter_group_labels_array_items().apply_pool()

#start_SeriesHE-iter_group_labels_items()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.iter_group_labels_items())
(('a', <SeriesHE>
<Index>
a          10
<<U1>      <int64>), ('b', <SeriesHE>
<Index>
b          2
<<U1>      <int64>), ('c', <SeriesHE>
<Index>
c          8
<<U1>      <int64>))
#end_SeriesHE-iter_group_labels_items()

#start_SeriesHE-iter_group_labels_items().apply()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_SeriesHE-iter_group_labels_items().apply()

#start_SeriesHE-iter_group_labels_items().apply_iter()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))
(-2, 8, 19, -2, 8)
#end_SeriesHE-iter_group_labels_items().apply_iter()

#start_SeriesHE-iter_group_labels_items().apply_iter_items()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))
(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))
#end_SeriesHE-iter_group_labels_items().apply_iter_items()

#start_SeriesHE-iter_group_labels_items().apply_pool()
>>> def func(pair): return pair[1].sum()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_items().apply_pool(func, use_threads=True)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_SeriesHE-iter_group_labels_items().apply_pool()

#start_SeriesHE-iter_window()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window(size=3, step=1))
(<SeriesHE>
<Index>
a          2
b          8
c          19
<<U1>      <int64>, <SeriesHE>
<Index>
b          8
c          19
d          34
<<U1>      <int64>, <SeriesHE>
<Index>
c          19
d          34
e          54
<<U1>      <int64>)
#end_SeriesHE-iter_window()

#start_SeriesHE-iter_window().apply()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window(size=3, step=1).apply(lambda s: s.sum())
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_SeriesHE-iter_window().apply()

#start_SeriesHE-iter_window().apply_iter()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window(size=3, step=1).apply_iter(lambda s: s.sum()))
(29, 61, 107)
#end_SeriesHE-iter_window().apply_iter()

#start_SeriesHE-iter_window().apply_iter_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window(size=3, step=1).apply_iter_items(lambda s: s.sum()))
(('c', 29), ('d', 61), ('e', 107))
#end_SeriesHE-iter_window().apply_iter_items()

#start_SeriesHE-iter_window().apply_pool()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window(size=3, step=1).apply_pool(lambda s: s.sum(), use_threads=True)
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_SeriesHE-iter_window().apply_pool()

#start_SeriesHE-iter_window_array()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array(size=3, step=1))
(array([ 2,  8, 19]), array([ 8, 19, 34]), array([19, 34, 54]))
#end_SeriesHE-iter_window_array()

#start_SeriesHE-iter_window_array().apply()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_array(size=3, step=1).apply(lambda s: s.sum())
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_SeriesHE-iter_window_array().apply()

#start_SeriesHE-iter_window_array().apply_iter()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array(size=3, step=1).apply_iter(lambda s: s.sum()))
(29, 61, 107)
#end_SeriesHE-iter_window_array().apply_iter()

#start_SeriesHE-iter_window_array().apply_iter_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array(size=3, step=1).apply_iter_items(lambda s: s.sum()))
(('c', 29), ('d', 61), ('e', 107))
#end_SeriesHE-iter_window_array().apply_iter_items()

#start_SeriesHE-iter_window_array().apply_pool()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_array(size=3, step=1).apply_pool(lambda s: s.sum(), use_threads=True)
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_SeriesHE-iter_window_array().apply_pool()

#start_SeriesHE-iter_window_array_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array_items(size=3, step=1))
(('c', array([ 2,  8, 19])), ('d', array([ 8, 19, 34])), ('e', array([19, 34, 54])))
#end_SeriesHE-iter_window_array_items()

#start_SeriesHE-iter_window_array_items().apply()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_array_items(size=3, step=1).apply(lambda l, s: s.sum() if l != 'd' else -1)
<Series>
<Index>
c        29
d        -1
e        107
<<U1>    <int64>
#end_SeriesHE-iter_window_array_items().apply()

#start_SeriesHE-iter_window_array_items().apply_iter()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array_items(size=3, step=1).apply_iter(lambda l, s: s.sum() if l != 'd' else -1))
(29, -1, 107)
#end_SeriesHE-iter_window_array_items().apply_iter()

#start_SeriesHE-iter_window_array_items().apply_iter_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array_items(size=3, step=1).apply_iter_items(lambda l, s: s.sum() if l != 'd' else -1))
(('c', 29), ('d', -1), ('e', 107))
#end_SeriesHE-iter_window_array_items().apply_iter_items()

#start_SeriesHE-iter_window_array_items().apply_pool()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_array_items(size=3, step=1).apply_pool(lambda pair: pair[1].sum(), use_threads=True)
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_SeriesHE-iter_window_array_items().apply_pool()

#start_SeriesHE-iter_window_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_items(size=3, step=1))
(('c', <SeriesHE>
<Index>
a          2
b          8
c          19
<<U1>      <int64>), ('d', <SeriesHE>
<Index>
b          8
c          19
d          34
<<U1>      <int64>), ('e', <SeriesHE>
<Index>
c          19
d          34
e          54
<<U1>      <int64>))
#end_SeriesHE-iter_window_items()

#start_SeriesHE-iter_window_items().apply()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_items(size=3, step=1).apply(lambda l, s: s.sum() if l != 'd' else -1)
<Series>
<Index>
c        29
d        -1
e        107
<<U1>    <int64>
#end_SeriesHE-iter_window_items().apply()

#start_SeriesHE-iter_window_items().apply_iter()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_items(size=3, step=1).apply_iter(lambda l, s: s.sum() if l != 'd' else -1))
(29, -1, 107)
#end_SeriesHE-iter_window_items().apply_iter()

#start_SeriesHE-iter_window_items().apply_iter_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_items(size=3, step=1).apply_iter_items(lambda l, s: s.sum() if l != 'd' else -1))
(('c', 29), ('d', -1), ('e', 107))
#end_SeriesHE-iter_window_items().apply_iter_items()

#start_SeriesHE-iter_window_items().apply_pool()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_items(size=3, step=1).apply_pool(lambda pair: pair[1].sum(), use_threads=True)
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_SeriesHE-iter_window_items().apply_pool()

#start_SeriesHE-__add__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s + 8
<SeriesHE>
<Index>
a          18
b          10
c          16
<<U1>      <int64>
>>> s + s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          nan
b          4.0
c          16.0
<<U1>      <float64>
#end_SeriesHE-__add__()

#start_SeriesHE-__and__()
>>> s = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))
>>> s & True
<SeriesHE>
<Index>
a          False
b          False
c          True
<<U1>      <bool>
>>> s & (True, False, True)
<SeriesHE>
<Index>
a          False
b          False
c          True
<<U1>      <bool>
#end_SeriesHE-__and__()

#start_SeriesHE-__eq__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s == 8
False
>>> s == s.reindex(('c', 'b'))
False
#end_SeriesHE-__eq__()

#start_SeriesHE-__floordiv__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s // 8
<SeriesHE>
<Index>
a          1
b          0
c          1
<<U1>      <int64>
>>> s // s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          nan
b          1.0
c          1.0
<<U1>      <float64>
#end_SeriesHE-__floordiv__()

#start_SeriesHE-__ge__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s >= 8
<SeriesHE>
<Index>
a          True
b          False
c          True
<<U1>      <bool>
>>> s >= s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          False
b          True
c          True
<<U1>      <bool>
#end_SeriesHE-__ge__()

#start_SeriesHE-__gt__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s > 8
<SeriesHE>
<Index>
a          True
b          False
c          False
<<U1>      <bool>
>>> s > s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          False
b          False
c          False
<<U1>      <bool>
#end_SeriesHE-__gt__()

#start_SeriesHE-__le__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s <= 8
<SeriesHE>
<Index>
a          False
b          True
c          True
<<U1>      <bool>
>>> s <= s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          False
b          True
c          True
<<U1>      <bool>
#end_SeriesHE-__le__()

#start_SeriesHE-__lt__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s < 8
<SeriesHE>
<Index>
a          False
b          True
c          False
<<U1>      <bool>
>>> s < s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          False
b          False
c          False
<<U1>      <bool>
#end_SeriesHE-__lt__()

#start_SeriesHE-__matmul__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s @ (3, 0, 4)
62
#end_SeriesHE-__matmul__()

#start_SeriesHE-__mod__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s % 8
<SeriesHE>
<Index>
a          2
b          2
c          0
<<U1>      <int64>
>>> s % s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          nan
b          0.0
c          0.0
<<U1>      <float64>
#end_SeriesHE-__mod__()

#start_SeriesHE-__mul__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s * 8
<SeriesHE>
<Index>
a          80
b          16
c          64
<<U1>      <int64>
>>> s * s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          nan
b          4.0
c          64.0
<<U1>      <float64>
#end_SeriesHE-__mul__()

#start_SeriesHE-__ne__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s != 8
True
>>> s != s.reindex(('c', 'b'))
True
#end_SeriesHE-__ne__()

#start_SeriesHE-__or__()
>>> s = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))
>>> s | True
<SeriesHE>
<Index>
a          True
b          True
c          True
<<U1>      <bool>
>>> s | (True, False, True)
<SeriesHE>
<Index>
a          True
b          False
c          True
<<U1>      <bool>
#end_SeriesHE-__or__()

#start_SeriesHE-__pow__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s ** 8
<SeriesHE>
<Index>
a          100000000
b          256
c          16777216
<<U1>      <int64>
>>> s ** s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          nan
b          4.0
c          16777216.0
<<U1>      <float64>
#end_SeriesHE-__pow__()

#start_SeriesHE-__radd__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> 8 + s
<SeriesHE>
<Index>
a          18
b          10
c          16
<<U1>      <int64>
#end_SeriesHE-__radd__()

#start_SeriesHE-__rfloordiv__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> 8 // s
<SeriesHE>
<Index>
a          0
b          4
c          1
<<U1>      <int64>
#end_SeriesHE-__rfloordiv__()

#start_SeriesHE-__rmatmul__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s @ (3, 0, 4)
62
#end_SeriesHE-__rmatmul__()

#start_SeriesHE-__rmul__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> 8 * s
<SeriesHE>
<Index>
a          80
b          16
c          64
<<U1>      <int64>
#end_SeriesHE-__rmul__()

#start_SeriesHE-__rshift__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s >> 1
<SeriesHE>
<Index>
a          5
b          1
c          4
<<U1>      <int64>
#end_SeriesHE-__rshift__()

#start_SeriesHE-__rsub__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> 8 - s
<SeriesHE>
<Index>
a          -2
b          6
c          0
<<U1>      <int64>
#end_SeriesHE-__rsub__()

#start_SeriesHE-__rtruediv__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> 8 / s
<SeriesHE>
<Index>
a          0.8
b          4.0
c          1.0
<<U1>      <float64>
#end_SeriesHE-__rtruediv__()

#start_SeriesHE-__sub__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s - 8
<SeriesHE>
<Index>
a          2
b          -6
c          0
<<U1>      <int64>
>>> s - s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          nan
b          0.0
c          0.0
<<U1>      <float64>
#end_SeriesHE-__sub__()

#start_SeriesHE-__truediv__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s / 8
<SeriesHE>
<Index>
a          1.25
b          0.25
c          1.0
<<U1>      <float64>
>>> s / s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          nan
b          1.0
c          1.0
<<U1>      <float64>
#end_SeriesHE-__truediv__()

#start_SeriesHE-__xor__()
>>> s = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))
>>> s ^ True
<SeriesHE>
<Index>
a          True
b          True
c          False
<<U1>      <bool>
>>> s ^ (True, False, True)
<SeriesHE>
<Index>
a          True
b          False
c          False
<<U1>      <bool>
#end_SeriesHE-__xor__()

#start_SeriesHE-__abs__()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> abs(s)
<SeriesHE>
<Index>
a          2
b          8
c          19
d          2
e          8
<<U1>      <int64>
#end_SeriesHE-__abs__()

#start_SeriesHE-__invert__()
>>> s = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))
>>> ~s
<SeriesHE>
<Index>
a          True
b          True
c          False
<<U1>      <bool>
#end_SeriesHE-__invert__()

#start_SeriesHE-__neg__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> -s
<SeriesHE>
<Index>
a          -10
b          -2
c          -8
<<U1>      <int64>
#end_SeriesHE-__neg__()

#start_SeriesHE-__pos__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> +s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-__pos__()

#start_SeriesHE-via_dt.year
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.year
<SeriesHE>
<Index>
a          1517
b          1517
c          1517
d          1517
e          1517
<<U1>      <int64>
#end_SeriesHE-via_dt.year

#start_SeriesHE-via_dt.month
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.month
<SeriesHE>
<Index>
a          1
b          4
c          12
d          6
e          10
<<U1>      <int64>
#end_SeriesHE-via_dt.month

#start_SeriesHE-via_dt.day
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.day
<SeriesHE>
<Index>
a          1
b          1
c          31
d          30
e          1
<<U1>      <int64>
#end_SeriesHE-via_dt.day

#start_SeriesHE-via_dt.hour
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.hour
<SeriesHE>
<Index>
a          0
b          0
c          0
d          0
e          0
<<U1>      <int64>
#end_SeriesHE-via_dt.hour

#start_SeriesHE-via_dt.minute
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.minute
<SeriesHE>
<Index>
a          0
b          0
c          0
d          0
e          0
<<U1>      <int64>
#end_SeriesHE-via_dt.minute

#start_SeriesHE-via_dt.second
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.second
<SeriesHE>
<Index>
a          0
b          0
c          0
d          0
e          0
<<U1>      <int64>
#end_SeriesHE-via_dt.second

#start_SeriesHE-via_dt.weekday()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.weekday()
<SeriesHE>
<Index>
a          0
b          6
c          0
d          5
e          0
<<U1>      <int64>
#end_SeriesHE-via_dt.weekday()

#start_SeriesHE-via_dt.quarter()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.quarter()
<SeriesHE>
<Index>
a          1
b          2
c          4
d          2
e          4
<<U1>      <int64>
#end_SeriesHE-via_dt.quarter()

#start_SeriesHE-via_dt.is_month_end()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_month_end()
<SeriesHE>
<Index>
a          False
b          False
c          True
d          True
e          False
<<U1>      <bool>
#end_SeriesHE-via_dt.is_month_end()

#start_SeriesHE-via_dt.is_month_start()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_month_start()
<SeriesHE>
<Index>
a          True
b          True
c          False
d          False
e          True
<<U1>      <bool>
#end_SeriesHE-via_dt.is_month_start()

#start_SeriesHE-via_dt.is_year_end()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_year_end()
<SeriesHE>
<Index>
a          False
b          False
c          True
d          False
e          False
<<U1>      <bool>
#end_SeriesHE-via_dt.is_year_end()

#start_SeriesHE-via_dt.is_year_start()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_year_start()
<SeriesHE>
<Index>
a          True
b          False
c          False
d          False
e          False
<<U1>      <bool>
#end_SeriesHE-via_dt.is_year_start()

#start_SeriesHE-via_dt.is_quarter_end()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_quarter_end()
<SeriesHE>
<Index>
a          False
b          False
c          True
d          True
e          False
<<U1>      <bool>
#end_SeriesHE-via_dt.is_quarter_end()

#start_SeriesHE-via_dt.is_quarter_start()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_quarter_start()
<SeriesHE>
<Index>
a          True
b          True
c          False
d          False
e          True
<<U1>      <bool>
#end_SeriesHE-via_dt.is_quarter_start()

#start_SeriesHE-via_dt.timetuple()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.timetuple()
<SeriesHE>
<Index>
a          time.struct_time(...
b          time.struct_time(...
c          time.struct_time(...
d          time.struct_time(...
e          time.struct_time(...
<<U1>      <object>
#end_SeriesHE-via_dt.timetuple()

#start_SeriesHE-via_dt.isoformat()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.isoformat()
<SeriesHE>
<Index>
a          1517-01-01
b          1517-04-01
c          1517-12-31
d          1517-06-30
e          1517-10-01
<<U1>      <<U10>
#end_SeriesHE-via_dt.isoformat()

#start_SeriesHE-via_dt.fromisoformat()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'))
>>> s.via_dt.fromisoformat()
<SeriesHE>
<Index>
a          1517-01-01
b          1517-04-01
c          1517-12-31
d          1517-06-30
e          1517-10-01
<<U1>      <object>
#end_SeriesHE-via_dt.fromisoformat()

#start_SeriesHE-via_dt.strftime()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.strftime("%A | %B")
<SeriesHE>
<Index>
a          Monday | January
b          Sunday | April
c          Monday | December
d          Saturday | June
e          Monday | October
<<U1>      <<U17>
#end_SeriesHE-via_dt.strftime()

#start_SeriesHE-via_dt.strptime()
>>> s = sf.SeriesHE(('1/1/1517', '4/1/1517', '6/30/1517'), index=('a', 'b', 'c'))
>>> s.via_dt.strptime("%m/%d/%Y")
<SeriesHE>
<Index>
a          1517-01-01 00:00:00
b          1517-04-01 00:00:00
c          1517-06-30 00:00:00
<<U1>      <object>
#end_SeriesHE-via_dt.strptime()

#start_SeriesHE-via_dt.strpdate()
>>> s = sf.SeriesHE(('1/1/1517', '4/1/1517', '6/30/1517'), index=('a', 'b', 'c'))
>>> s.via_dt.strpdate("%m/%d/%Y")
<SeriesHE>
<Index>
a          1517-01-01
b          1517-04-01
c          1517-06-30
<<U1>      <object>
#end_SeriesHE-via_dt.strpdate()

#start_SeriesHE-via_str.__getitem__()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str[-1]
<SeriesHE>
<Index>
a
b          Z
c          3
d
<<U1>      <<U1>
#end_SeriesHE-via_str.__getitem__()

#start_SeriesHE-via_str.capitalize()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.capitalize()
<SeriesHE>
<Index>
a          Qrs
b          Xyz
c          123
d           wx
<<U1>      <<U4>
#end_SeriesHE-via_str.capitalize()

#start_SeriesHE-via_str.center()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.center(8)
<SeriesHE>
<Index>
a            qrs
b            XYZ
c            123
d             wX
<<U1>      <<U8>
#end_SeriesHE-via_str.center()

#start_SeriesHE-via_str.contains()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.contains('X')
<SeriesHE>
<Index>
a          False
b          True
c          False
d          True
<<U1>      <bool>
#end_SeriesHE-via_str.contains()

#start_SeriesHE-via_str.count()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.count('X')
<SeriesHE>
<Index>
a          0
b          1
c          0
d          1
<<U1>      <int64>
#end_SeriesHE-via_str.count()

#start_SeriesHE-via_str.decode()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd')).astype(bytes)
>>> s
<SeriesHE>
<Index>
a          b'qrs '
b          b'XYZ'
c          b'123'
d          b' wX '
<<U1>      <|S4>
>>> s.via_str.decode()
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
#end_SeriesHE-via_str.decode()

#start_SeriesHE-via_str.encode()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.encode()
<SeriesHE>
<Index>
a          b'qrs '
b          b'XYZ'
c          b'123'
d          b' wX '
<<U1>      <|S4>
#end_SeriesHE-via_str.encode()

#start_SeriesHE-via_str.endswith()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.endswith(' ')
<SeriesHE>
<Index>
a          True
b          False
c          False
d          True
<<U1>      <bool>
#end_SeriesHE-via_str.endswith()

#start_SeriesHE-via_str.find()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.find('X')
<SeriesHE>
<Index>
a          -1
b          0
c          -1
d          2
<<U1>      <int64>
#end_SeriesHE-via_str.find()

#start_SeriesHE-via_str.format()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.format('{:-^10}')
<SeriesHE>
<Index>
a          ---qrs ---
b          ---XYZ----
c          ---123----
d          --- wX ---
<<U1>      <<U10>
#end_SeriesHE-via_str.format()

#start_SeriesHE-via_str.index()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.index('X')
ValueError('substring not found')
#end_SeriesHE-via_str.index()

#start_SeriesHE-via_str.isalnum()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.isalnum()
<SeriesHE>
<Index>
a          False
b          True
c          True
d          False
<<U1>      <bool>
#end_SeriesHE-via_str.isalnum()

#start_SeriesHE-via_str.isalpha()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.isalpha()
<SeriesHE>
<Index>
a          False
b          True
c          False
d          False
<<U1>      <bool>
#end_SeriesHE-via_str.isalpha()

#start_SeriesHE-via_str.isdecimal()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.isdecimal()
<SeriesHE>
<Index>
a          False
b          False
c          True
d          False
<<U1>      <bool>
#end_SeriesHE-via_str.isdecimal()

#start_SeriesHE-via_str.isdigit()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.isdigit()
<SeriesHE>
<Index>
a          False
b          False
c          True
d          False
<<U1>      <bool>
#end_SeriesHE-via_str.isdigit()

#start_SeriesHE-via_str.islower()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.islower()
<SeriesHE>
<Index>
a          True
b          False
c          False
d          False
<<U1>      <bool>
#end_SeriesHE-via_str.islower()

#start_SeriesHE-via_str.isnumeric()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.isnumeric()
<SeriesHE>
<Index>
a          False
b          False
c          True
d          False
<<U1>      <bool>
#end_SeriesHE-via_str.isnumeric()

#start_SeriesHE-via_str.isspace()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.isspace()
<SeriesHE>
<Index>
a          False
b          False
c          False
d          False
<<U1>      <bool>
#end_SeriesHE-via_str.isspace()

#start_SeriesHE-via_str.istitle()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.istitle()
<SeriesHE>
<Index>
a          False
b          False
c          False
d          False
<<U1>      <bool>
#end_SeriesHE-via_str.istitle()

#start_SeriesHE-via_str.isupper()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.isupper()
<SeriesHE>
<Index>
a          False
b          True
c          False
d          False
<<U1>      <bool>
#end_SeriesHE-via_str.isupper()

#start_SeriesHE-via_str.ljust()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.ljust(8)
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U8>
#end_SeriesHE-via_str.ljust()

#start_SeriesHE-via_str.len()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.len()
<SeriesHE>
<Index>
a          4
b          3
c          3
d          4
<<U1>      <int64>
#end_SeriesHE-via_str.len()

#start_SeriesHE-via_str.lower()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.lower()
<SeriesHE>
<Index>
a          qrs
b          xyz
c          123
d           wx
<<U1>      <<U4>
#end_SeriesHE-via_str.lower()

#start_SeriesHE-via_str.lstrip()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.lstrip()
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d          wX
<<U1>      <<U4>
#end_SeriesHE-via_str.lstrip()

#start_SeriesHE-via_str.partition()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.partition('X')
<SeriesHE>
<Index>
a          ('qrs ', '', '')
b          ('', 'X', 'YZ')
c          ('123', '', '')
d          (' w', 'X', ' ')
<<U1>      <object>
#end_SeriesHE-via_str.partition()

#start_SeriesHE-via_str.replace()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.replace('X', '*')
<SeriesHE>
<Index>
a          qrs
b          *YZ
c          123
d           w*
<<U1>      <<U4>
#end_SeriesHE-via_str.replace()

#start_SeriesHE-via_str.rfind()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.rfind('X')
<SeriesHE>
<Index>
a          -1
b          0
c          -1
d          2
<<U1>      <int64>
#end_SeriesHE-via_str.rfind()

#start_SeriesHE-via_str.rindex()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.rindex('X')
ValueError('substring not found')
#end_SeriesHE-via_str.rindex()

#start_SeriesHE-via_str.rjust()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.rjust(8)
<SeriesHE>
<Index>
a              qrs
b               XYZ
c               123
d               wX
<<U1>      <<U8>
#end_SeriesHE-via_str.rjust()

#start_SeriesHE-via_str.rpartition()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.rpartition('X')
<SeriesHE>
<Index>
a          ('', '', 'qrs ')
b          ('', 'X', 'YZ')
c          ('', '', '123')
d          (' w', 'X', ' ')
<<U1>      <object>
#end_SeriesHE-via_str.rpartition()

#start_SeriesHE-via_str.rsplit()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.rsplit('X')
<SeriesHE>
<Index>
a          ('qrs ',)
b          ('', 'YZ')
c          ('123',)
d          (' w', ' ')
<<U1>      <object>
#end_SeriesHE-via_str.rsplit()

#start_SeriesHE-via_str.rstrip()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.rstrip()
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
#end_SeriesHE-via_str.rstrip()

#start_SeriesHE-via_str.split()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.split('X')
<SeriesHE>
<Index>
a          ('qrs ',)
b          ('', 'YZ')
c          ('123',)
d          (' w', ' ')
<<U1>      <object>
#end_SeriesHE-via_str.split()

#start_SeriesHE-via_str.startswith()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.startswith('X')
<SeriesHE>
<Index>
a          False
b          True
c          False
d          False
<<U1>      <bool>
#end_SeriesHE-via_str.startswith()

#start_SeriesHE-via_str.strip()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.strip()
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d          wX
<<U1>      <<U4>
#end_SeriesHE-via_str.strip()

#start_SeriesHE-via_str.swapcase()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.swapcase()
<SeriesHE>
<Index>
a          QRS
b          xyz
c          123
d           Wx
<<U1>      <<U4>
#end_SeriesHE-via_str.swapcase()

#start_SeriesHE-via_str.title()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.title()
<SeriesHE>
<Index>
a          Qrs
b          Xyz
c          123
d           Wx
<<U1>      <<U4>
#end_SeriesHE-via_str.title()

#start_SeriesHE-via_str.upper()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.upper()
<SeriesHE>
<Index>
a          QRS
b          XYZ
c          123
d           WX
<<U1>      <<U4>
#end_SeriesHE-via_str.upper()

#start_SeriesHE-via_str.zfill()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.zfill(8)
<SeriesHE>
<Index>
a          0000qrs
b          00000XYZ
c          00000123
d          0000 wX
<<U1>      <<U8>
#end_SeriesHE-via_str.zfill()

#start_SeriesHE-via_fill_value().loc
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.via_fill_value(0).loc[['a', 'c', 'd', 'e']]
<SeriesHE>
<Index>
a          10
c          8
d          0
e          0
<<U1>      <int64>
#end_SeriesHE-via_fill_value().loc

#start_SeriesHE-via_fill_value().__getitem__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.via_fill_value(0)[['a', 'c', 'd', 'e']]
<SeriesHE>
<Index>
a          10
c          8
d          0
e          0
<<U1>      <int64>
#end_SeriesHE-via_fill_value().__getitem__()

#start_SeriesHE-via_fill_value().via_T
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.via_fill_value().via_T
NotImplementedError('via_T functionality only available on Frame')
#end_SeriesHE-via_fill_value().via_T

#start_SeriesHE-via_fill_value().__add__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) + s2
<SeriesHE>
<Index>
a          10
b          4
c          16
d          19
<<U1>      <int64>
#end_SeriesHE-via_fill_value().__add__()

#start_SeriesHE-via_fill_value().__sub__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) - s2
<SeriesHE>
<Index>
a          10
b          0
c          0
d          -19
<<U1>      <int64>
#end_SeriesHE-via_fill_value().__sub__()

#start_SeriesHE-via_fill_value().__mul__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) * s2
<SeriesHE>
<Index>
a          0
b          4
c          64
d          0
<<U1>      <int64>
#end_SeriesHE-via_fill_value().__mul__()

#start_SeriesHE-via_fill_value().__truediv__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) / s2
<SeriesHE>
<Index>
a          inf
b          1.0
c          1.0
d          0.0
<<U1>      <float64>
#end_SeriesHE-via_fill_value().__truediv__()

#start_SeriesHE-via_fill_value().__floordiv__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) // s2
<SeriesHE>
<Index>
a          0
b          1
c          1
d          0
<<U1>      <int64>
#end_SeriesHE-via_fill_value().__floordiv__()

#start_SeriesHE-via_fill_value().__mod__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) % s2
<SeriesHE>
<Index>
a          0
b          0
c          0
d          0
<<U1>      <int64>
#end_SeriesHE-via_fill_value().__mod__()

#start_SeriesHE-via_fill_value().__pow__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) ** s2
<SeriesHE>
<Index>
a          1
b          4
c          16777216
d          0
<<U1>      <int64>
#end_SeriesHE-via_fill_value().__pow__()

#start_SeriesHE-via_fill_value().__lshift__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) << s2
<SeriesHE>
<Index>
a          10
b          8
c          2048
d          0
<<U1>      <int64>
#end_SeriesHE-via_fill_value().__lshift__()

#start_SeriesHE-via_fill_value().__rshift__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) >> s2
<SeriesHE>
<Index>
a          10
b          0
c          0
d          0
<<U1>      <int64>
#end_SeriesHE-via_fill_value().__rshift__()

#start_SeriesHE-via_fill_value().__and__()
>>> s1 = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((False, False, True), index=('b', 'c', 'd'))
>>> s1.via_fill_value(False) & s2
<SeriesHE>
<Index>
a          False
b          False
c          False
d          False
<<U1>      <bool>
#end_SeriesHE-via_fill_value().__and__()

#start_SeriesHE-via_fill_value().__xor__()
>>> s1 = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((False, False, True), index=('b', 'c', 'd'))
>>> s1.via_fill_value(False) ^ s2
<SeriesHE>
<Index>
a          False
b          False
c          True
d          True
<<U1>      <bool>
#end_SeriesHE-via_fill_value().__xor__()

#start_SeriesHE-via_fill_value().__or__()
>>> s1 = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((False, False, True), index=('b', 'c', 'd'))
>>> s1.via_fill_value(False) | s2
<SeriesHE>
<Index>
a          False
b          False
c          True
d          True
<<U1>      <bool>
#end_SeriesHE-via_fill_value().__or__()

#start_SeriesHE-via_fill_value().__lt__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) < s2
<SeriesHE>
<Index>
a          False
b          False
c          False
d          True
<<U1>      <bool>
#end_SeriesHE-via_fill_value().__lt__()

#start_SeriesHE-via_fill_value().__le__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) <= s2
<SeriesHE>
<Index>
a          False
b          True
c          True
d          True
<<U1>      <bool>
#end_SeriesHE-via_fill_value().__le__()

#start_SeriesHE-via_fill_value().__eq__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) == s2
<SeriesHE>
<Index>
a          False
b          True
c          True
d          False
<<U1>      <bool>
#end_SeriesHE-via_fill_value().__eq__()

#start_SeriesHE-via_fill_value().__ne__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) != s2
<SeriesHE>
<Index>
a          True
b          False
c          False
d          True
<<U1>      <bool>
#end_SeriesHE-via_fill_value().__ne__()

#start_SeriesHE-via_fill_value().__gt__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) > s2
<SeriesHE>
<Index>
a          True
b          False
c          False
d          False
<<U1>      <bool>
#end_SeriesHE-via_fill_value().__gt__()

#start_SeriesHE-via_fill_value().__ge__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) >= s2
<SeriesHE>
<Index>
a          True
b          True
c          True
d          False
<<U1>      <bool>
#end_SeriesHE-via_fill_value().__ge__()

#start_SeriesHE-via_fill_value().__radd__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s2 + s1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_SeriesHE-via_fill_value().__radd__()

#start_SeriesHE-via_fill_value().__rsub__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s2 - s1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_SeriesHE-via_fill_value().__rsub__()

#start_SeriesHE-via_fill_value().__rmul__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s2 * s1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_SeriesHE-via_fill_value().__rmul__()

#start_SeriesHE-via_fill_value().__rtruediv__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s2 / s1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_SeriesHE-via_fill_value().__rtruediv__()

#start_SeriesHE-via_fill_value().__rfloordiv__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s2 // s1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_SeriesHE-via_fill_value().__rfloordiv__()

#start_SeriesHE-via_re().search()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.via_re('[X123]').search()
<SeriesHE>
<Index>
a          True
b          True
c          False
<<U1>      <bool>
#end_SeriesHE-via_re().search()

#start_SeriesHE-via_re().match()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.via_re('[X123]').match()
<SeriesHE>
<Index>
a          True
b          True
c          False
<<U1>      <bool>
#end_SeriesHE-via_re().match()

#start_SeriesHE-via_re().fullmatch()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.via_re('123').fullmatch()
<SeriesHE>
<Index>
a          False
b          False
c          False
<<U1>      <bool>
#end_SeriesHE-via_re().fullmatch()

#start_SeriesHE-via_re().split()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.via_re('[X123]').split()
<SeriesHE>
<Index>
a          ('', '0')
b          ('', '')
c          ('8',)
<<U1>      <object>
#end_SeriesHE-via_re().split()

#start_SeriesHE-via_re().findall()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.via_re('[X123]').findall()
<SeriesHE>
<Index>
a          ('1',)
b          ('2',)
c          ()
<<U1>      <object>
#end_SeriesHE-via_re().findall()

#start_SeriesHE-via_re().sub()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.via_re('[X123]').sub('==')
<SeriesHE>
<Index>
a          ==0
b          ==
c          8
<<U1>      <<U3>
#end_SeriesHE-via_re().sub()

#start_SeriesHE-via_re().subn()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.via_re('[X123]').subn('==', 1)
<SeriesHE>
<Index>
a          ('==0', 1)
b          ('==', 1)
c          ('8', 0)
<<U1>      <object>
#end_SeriesHE-via_re().subn()

#start_SeriesHE-via_values.apply()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.via_values.apply(np.sin)
<SeriesHE>
<Index>
a          -0.5440211108893698
b          0.9092974268256817
c          0.9893582466233818
<<U1>      <float64>
#end_SeriesHE-via_values.apply()

#start_SeriesHE-via_values.__array_ufunc__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> np.sin(s.via_values)
<SeriesHE>
<Index>
a          -0.5440211108893698
b          0.9092974268256817
c          0.9893582466233818
<<U1>      <float64>
#end_SeriesHE-via_values.__array_ufunc__()

#start_SeriesHE-via_values.__call__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> np.sin(s.via_values(unify_blocks=True))
<SeriesHE>
<Index>
a          -0.5440211108893698
b          0.9092974268256817
c          0.9893582466233818
<<U1>      <float64>
#end_SeriesHE-via_values.__call__()

#start_Frame-__init__()
>>> sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>
#end_Frame-__init__()

#start_Frame-from_arrow()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> aw = f1.to_arrow()
>>> aw
pyarrow.Table
__index0__: string
a: int64
b: int64
----
__index0__: [["p","q","r"]]
a: [[0,2,4]]
b: [[1,3,5]]
>>> sf.Frame.from_arrow(aw, index_depth=1)
<Frame>
<Index>  a       b       <<U1>
<Index>
p        0       1
q        2       3
r        4       5
<object> <int64> <int64>
#end_Frame-from_arrow()

#start_Frame-from_clipboard()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_clipboard()
>>> sf.Frame.from_clipboard(index_depth=1)
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       1
q       2       3
r       4       5
<<U1>   <int64> <int64>
#end_Frame-from_clipboard()

#start_Frame-from_concat()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> sf.Frame.from_concat((f1, f2), axis=1)
<Frame>
<Index> a       b       c      d      <<U1>
<Index>
p       0       1       False  True
q       2       3       False  True
r       4       5       False  True
<<U1>   <int64> <int64> <bool> <bool>
>>> sf.Frame.from_concat((f1, f2.relabel(columns=('a', 'b'))), axis=0, index=sf.IndexAutoFactory)
<Frame>
<Index> a        b        <<U1>
<Index>
0       0        1
1       2        3
2       4        5
3       False    True
4       False    True
5       False    True
<int64> <object> <object>
#end_Frame-from_concat()

#start_Frame-from_concat_items()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> sf.Frame.from_concat_items(((f1.name, f1), (f2.name, f2)), axis=1)
<Frame>
<IndexHierarchy> x       x       y      y      <<U1>
                 a       b       c      d      <<U1>
<Index>
p                0       1       False  True
q                2       3       False  True
r                4       5       False  True
<<U1>            <int64> <int64> <bool> <bool>
>>> sf.Frame.from_concat_items(((f1.name, f1), (f2.name, f2.relabel(columns=('a', 'b')))), axis=0)
<Frame>
<Index>                a        b        <<U1>
<IndexHierarchy>
x                p     0        1
x                q     2        3
x                r     4        5
y                p     False    True
y                q     False    True
y                r     False    True
<<U1>            <<U1> <object> <object>
#end_Frame-from_concat_items()

#start_Frame-from_csv()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_csv('/tmp/f.csv')
>>> from pathlib import Path
>>> Path('/tmp/f.csv').read_text()
__index0__,a,b
p,0,1
q,2,3
r,4,5

>>> sf.Frame.from_csv('/tmp/f.csv', index_depth=1)
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       1
q       2       3
r       4       5
<<U1>   <int64> <int64>
#end_Frame-from_csv()

#start_Frame-from_delimited()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_delimited('/tmp/f.psv', delimiter='|')
>>> from pathlib import Path
>>> Path('/tmp/f.psv').read_text()
__index0__|a|b
p|0|1
q|2|3
r|4|5

>>> sf.Frame.from_delimited('/tmp/f.psv', delimiter='|', index_depth=1)
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       1
q       2       3
r       4       5
<<U1>   <int64> <int64>
#end_Frame-from_delimited()

#start_Frame-from_dict()
>>> sf.Frame.from_dict(mapping=dict(a=(10, 2, 8, 3), b=('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), dtypes=dict(b=np.datetime64), name='x')
<Frame: x>
<Index>    a       b               <<U1>
<Index>
0          10      1517-01-01
1          2       1517-04-01
2          8       1517-12-31
3          3       1517-06-30
<int64>    <int64> <datetime64[D]>
#end_Frame-from_dict()

#start_Frame-from_dict_fields()
>>> sf.Frame.from_dict_fields(records=(dict(a=False, b=False, c=True), dict(a='1517-04-01', b='1517-01-01', c='1517-04-01')), columns=('p', 'q'), dtypes=dict(q=np.datetime64), name='x')
TypeError("from_dict_fields() got an unexpected keyword argument 'records'")
#end_Frame-from_dict_fields()

#start_Frame-from_dict_records()
>>> sf.Frame.from_dict_records(records=(dict(a=10, b=False, c='1517-01-01'), dict(a=8, b=True, c='1517-04-01')), index=('p', 'q'), dtypes=dict(c=np.datetime64), name='x')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
p          10      False  1517-01-01
q          8       True   1517-04-01
<<U1>      <int64> <bool> <datetime64[D]>
#end_Frame-from_dict_records()

#start_Frame-from_dict_records_items()
>>> sf.Frame.from_dict_records_items(items=(('p', dict(a=10, b=False, c='1517-01-01')), ('q', dict(a=8, b=True, c='1517-04-01'))), dtypes=dict(c=np.datetime64), name='x')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
p          10      False  1517-01-01
q          8       True   1517-04-01
<<U1>      <int64> <bool> <datetime64[D]>
#end_Frame-from_dict_records_items()

#start_Frame-from_element()
>>> sf.Frame.from_element(0, index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       0
q          0       0
r          0       0
<<U1>      <int64> <int64>
#end_Frame-from_element()

#start_Frame-from_element_items()
>>> sf.Frame.from_element_items(((('a', 0), -1), (('b', 0), 10), (('a', 1), 3), (('b', 'a'), 1)), columns=(0, 1), index=('a', 'b'), name='x', axis=1)
ErrorInitTypeBlocks('mismatched row count: 1: 2')
#end_Frame-from_element_items()

#start_Frame-from_elements()
>>> sf.Frame.from_elements((10, 2, 8, 3), index=('p', 'q', 'r', 's'), columns=['a'], name='x')
<Frame: x>
<Index>    a       <<U1>
<Index>
p          10
q          2
r          8
s          3
<<U1>      <int64>
#end_Frame-from_elements()

#start_Frame-from_fields()
>>> sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-from_fields()

#start_Frame-from_hdf5()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f1.to_hdf5('/tmp/f.hdf5')
>>> f1.from_hdf5('/tmp/f.hdf5', label='x', index_depth=1)
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
#end_Frame-from_hdf5()

#start_Frame-from_items()
>>> sf.Frame.from_items((('a', (10, 2, 8, 3)), ('b', ('qrs ', 'XYZ', '123', ' wX '))), index=('p', 'q', 'r', 's'), name='x')
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
#end_Frame-from_items()

#start_Frame-from_json()
>>> sf.Frame.from_json('[{"a": 10, "b": false, "c": "1517-01-01"}, {"a": 8, "b": true, "c": "1517-04-01"}]', dtypes=dict(c=np.datetime64), name='x')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          8       True   1517-04-01
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-from_json()

#start_Frame-from_json_columns()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> msg = f.to_json_columns(indent=4)
>>> msg
{
    "a": {
        "0": 10,
        "1": 2,
        "2": 8,
        "3": 3
    },
    "b": {
        "0": false,
        "1": true,
        "2": true,
        "3": false
    },
    "c": {
        "0": "1517-01-01",
        "1": "1517-04-01",
        "2": "1517-12-31",
        "3": "1517-06-30"
    }
}
>>> sf.Frame.from_json_columns(msg, dtypes=dict(c=np.datetime64))
<Frame>
<Index> a       b      c          <<U1>
<Index>
0       10      False  1517-01-01
1       2       True   1517-04-01
2       8       True   1517-12-31
3       3       False  1517-06-30
<<U1>   <int64> <bool> <<U10>
#end_Frame-from_json_columns()

#start_Frame-from_json_index()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> msg = f.to_json_index(indent=4)
>>> msg
{
    "0": {
        "a": 10,
        "b": false,
        "c": "1517-01-01"
    },
    "1": {
        "a": 2,
        "b": true,
        "c": "1517-04-01"
    },
    "2": {
        "a": 8,
        "b": true,
        "c": "1517-12-31"
    },
    "3": {
        "a": 3,
        "b": false,
        "c": "1517-06-30"
    }
}
>>> sf.Frame.from_json_index(msg, dtypes=dict(c=np.datetime64))
<Frame>
<Index> a       b      c               <<U1>
<Index>
0       10      False  1517-01-01
1       2       True   1517-04-01
2       8       True   1517-12-31
3       3       False  1517-06-30
<<U1>   <int64> <bool> <datetime64[D]>
#end_Frame-from_json_index()

#start_Frame-from_json_records()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> msg = f.to_json_records(indent=4)
>>> msg
[
    {
        "a": 10,
        "b": false,
        "c": "1517-01-01"
    },
    {
        "a": 2,
        "b": true,
        "c": "1517-04-01"
    },
    {
        "a": 8,
        "b": true,
        "c": "1517-12-31"
    },
    {
        "a": 3,
        "b": false,
        "c": "1517-06-30"
    }
]
>>> sf.Frame.from_json_records(msg, dtypes=dict(c=np.datetime64))
<Frame>
<Index> a       b      c               <<U1>
<Index>
0       10      False  1517-01-01
1       2       True   1517-04-01
2       8       True   1517-12-31
3       3       False  1517-06-30
<int64> <int64> <bool> <datetime64[D]>
#end_Frame-from_json_records()

#start_Frame-from_json_split()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> msg = f.to_json_split(indent=4)
>>> msg
{
    "columns": [
        "a",
        "b",
        "c"
    ],
    "index": [
        0,
        1,
        2,
        3
    ],
    "data": [
        [
            10,
            false,
            "1517-01-01"
        ],
        [
            2,
            true,
            "1517-04-01"
        ],
        [
            8,
            true,
            "1517-12-31"
        ],
        [
            3,
            false,
            "1517-06-30"
        ]
    ]
}
>>> sf.Frame.from_json_split(msg, dtypes=dict(c=np.datetime64))
<Frame>
<Index> a       b      c               <<U1>
<Index>
0       10      False  1517-01-01
1       2       True   1517-04-01
2       8       True   1517-12-31
3       3       False  1517-06-30
<int64> <int64> <bool> <datetime64[D]>
#end_Frame-from_json_split()

#start_Frame-from_json_values()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> msg = f.to_json_values(indent=4)
>>> msg
[
    [
        10,
        false,
        "1517-01-01"
    ],
    [
        2,
        true,
        "1517-04-01"
    ],
    [
        8,
        true,
        "1517-12-31"
    ],
    [
        3,
        false,
        "1517-06-30"
    ]
]
>>> sf.Frame.from_json_values(msg, columns=tuple('abc'), dtypes=dict(c=np.datetime64))
<Frame>
<Index> a       b      c               <<U1>
<Index>
0       10      False  1517-01-01
1       2       True   1517-04-01
2       8       True   1517-12-31
3       3       False  1517-06-30
<int64> <int64> <bool> <datetime64[D]>
#end_Frame-from_json_values()

#start_Frame-from_msgpack()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> mb = f1.to_msgpack()
>>> mb
b'\x85\xc4\x02sf\xa5Frame\xc4\x04name\xa1x\xc4\x06blocks\xc4\xcd\x82\xc4\x02sf\xaaTypeBlocks\xc4\x06blocks\xc4\xb3\x92\x85\xc4\x02nd\xc3\xc4\x04type\xa3<i8\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4 \n\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U4\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4@q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00 \x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00\x00\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00w\x00\x00\x00X\x00\x00\x00 \x00\x00\x00\xc4\x05index\xc4S\x83\xc4\x02sf\xa5Index\xc4\x04name\xc0\xc4\x04data\xc49\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4\x10p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00\xc4\x07columns\xc4K\x83\xc4\x02sf\xa5Index\xc4\x04name\xc0\xc4\x04data\xc41\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x02\xc4\x04data\xc4\x08a\x00\x00\x00b\x00\x00\x00'
>>> sf.Frame.from_msgpack(mb)
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
#end_Frame-from_msgpack()

#start_Frame-from_npy()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npy('/tmp/f.npy')
>>> sf.Frame.from_npy('/tmp/f.npy')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> import shutil
>>> shutil.rmtree('/tmp/f.npy')
#end_Frame-from_npy()

#start_Frame-from_npy_mmap()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npy('/tmp/f.npy')
>>> f2, closer = sf.Frame.from_npy_mmap('/tmp/f.npy')
>>> f2
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> closer() # close mmaps after usage
>>> import shutil
>>> shutil.rmtree('/tmp/f.npy')
#end_Frame-from_npy_mmap()

#start_Frame-from_npz()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npz('/tmp/f.npz')
>>> sf.Frame.from_npz('/tmp/f.npz')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-from_npz()

#start_Frame-from_overlay()
>>> f1 = sf.Frame.from_items((('a', (10, 2, np.nan, 3)), ('b', ('qrs ', 'XYZ', None, None))), index=('p', 'q', 'r', 's'), name='x')
>>> f1
<Frame: x>
<Index>    a         b        <<U1>
<Index>
p          10.0      qrs
q          2.0       XYZ
r          nan       None
s          3.0       None
<<U1>      <float64> <object>
>>> f2 = sf.Frame.from_items((('a', (8, 3)), ('b', ('123', ' wX '))), index=('r', 's'), name='y')
>>> f2
<Frame: y>
<Index>    a       b     <<U1>
<Index>
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> sf.Frame.from_overlay((f1, f2))
<Frame>
<Index> a         b        <<U1>
<Index>
p       10.0      qrs
q       2.0       XYZ
r       8.0       123
s       3.0        wX
<<U1>   <float64> <object>
#end_Frame-from_overlay()

#start_Frame-from_pandas()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> df = f1.to_pandas()
>>> df
    a     b
p  10  qrs 
q   2   XYZ
r   8   123
s   3   wX 
>>> sf.Frame.from_pandas(df, dtypes=dict(b=str))
<Frame: x>
<Index>    a       b     <object>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<object>   <int64> <<U4>
#end_Frame-from_pandas()

#start_Frame-from_parquet()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f1.to_parquet('/tmp/f.parquet')
>>> sf.Frame.from_parquet('/tmp/f.parquet', index_depth=1)
<Frame>
<Index>  a       b        <<U1>
<Index>
p        10      qrs
q        2       XYZ
r        8       123
s        3        wX
<object> <int64> <object>
#end_Frame-from_parquet()

#start_Frame-from_pickle()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_pickle('/tmp/f.pickle')
>>> sf.Frame.from_pickle('/tmp/f.pickle')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-from_pickle()

#start_Frame-from_records()
>>> sf.Frame.from_records(((10, False, '1517-01-01'), (8, True,'1517-04-01')), index=('p', 'q'), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
p          10      False  1517-01-01
q          8       True   1517-04-01
<<U1>      <int64> <bool> <datetime64[D]>
#end_Frame-from_records()

#start_Frame-from_records_items()
>>> sf.Frame.from_records_items((('p', (10, False, '1517-01-01')), ('q', (8, True,'1517-04-01'))), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
p          10      False  1517-01-01
q          8       True   1517-04-01
<<U1>      <int64> <bool> <datetime64[D]>
#end_Frame-from_records_items()

#start_Frame-from_series()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'), name='x')
>>> sf.Frame.from_series(s)
<Frame>
<Index> x       <<U1>
<Index>
a       10
b       2
c       8
<<U1>   <int64>
#end_Frame-from_series()

#start_Frame-from_sql()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_sqlite('/tmp/f.db')
>>> import sqlite3
>>> conn = sqlite3.connect('/tmp/f.db')
>>> sf.Frame.from_sql("select * from x limit 2", connection=conn, index_depth=1)
<Frame>
<Index> a       b       c          <<U1>
<Index>
0       10      0       1517-01-01
1       2       1       1517-04-01
<int64> <int64> <int64> <<U10>
#end_Frame-from_sql()

#start_Frame-from_sqlite()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_sqlite('/tmp/f.db')
>>> sf.Frame.from_sqlite('/tmp/f.db', label=f1.name, index_depth=1)
<Frame: x>
<Index>    a       b      c          <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <<U10>
#end_Frame-from_sqlite()

#start_Frame-from_structured_array()
>>> sa = np.array([(False, 8), (True, 19)], dtype=[('a', bool), ('b', int)])
>>> sa
[(False,  8) ( True, 19)]
>>> sf.Frame.from_structured_array(sa)
<Frame>
<Index> a      b       <<U1>
<Index>
0       False  8
1       True   19
<int64> <bool> <int64>
#end_Frame-from_structured_array()

#start_Frame-from_tsv()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_tsv('/tmp/f.tsv')
>>> from pathlib import Path
>>> Path('/tmp/f.tsv').read_text()
__index0__	a	b
p	0	1
q	2	3
r	4	5

>>> sf.Frame.from_tsv('/tmp/f.tsv', index_depth=1)
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       1
q       2       3
r       4       5
<<U1>   <int64> <int64>
#end_Frame-from_tsv()

#start_Frame-from_xlsx()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_xlsx('/tmp/f.xlsx')
>>> sf.Frame.from_xlsx('/tmp/f.xlsx', index_depth=1)
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       1
q       2       3
r       4       5
<<U1>   <int64> <int64>
#end_Frame-from_xlsx()

#start_Frame-to_arrow()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_arrow()
pyarrow.Table
__index0__: string
a: int64
b: string
----
__index0__: [["p","q","r","s"]]
a: [[10,2,8,3]]
b: [["qrs ","XYZ","123"," wX "]]
#end_Frame-to_arrow()

#start_Frame-to_clipboard()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_clipboard()
#end_Frame-to_clipboard()

#start_Frame-to_csv()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_csv('/tmp/f.csv')
>>> from pathlib import Path
>>> Path('/tmp/f.csv').read_text()
__index0__,a,b
p,0,1
q,2,3
r,4,5

#end_Frame-to_csv()

#start_Frame-to_delimited()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_delimited('/tmp/f.psv', delimiter='|')
>>> from pathlib import Path
>>> Path('/tmp/f.psv').read_text()
__index0__|a|b
p|0|1
q|2|3
r|4|5

#end_Frame-to_delimited()

#start_Frame-to_frame()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_frame()
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
#end_Frame-to_frame()

#start_Frame-to_frame_go()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_frame_go()
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_Frame-to_frame_go()

#start_Frame-to_frame_he()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_frame_he()
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_Frame-to_frame_he()

#start_Frame-to_hdf5()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_hdf5('/tmp/f.h5')
#end_Frame-to_hdf5()

#start_Frame-to_json_columns()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.to_json_columns(indent=4)
{
    "a": {
        "0": 10,
        "1": 2,
        "2": 8,
        "3": 3
    },
    "b": {
        "0": false,
        "1": true,
        "2": true,
        "3": false
    },
    "c": {
        "0": "1517-01-01",
        "1": "1517-04-01",
        "2": "1517-12-31",
        "3": "1517-06-30"
    }
}
#end_Frame-to_json_columns()

#start_Frame-to_json_index()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.to_json_index(indent=4)
{
    "0": {
        "a": 10,
        "b": false,
        "c": "1517-01-01"
    },
    "1": {
        "a": 2,
        "b": true,
        "c": "1517-04-01"
    },
    "2": {
        "a": 8,
        "b": true,
        "c": "1517-12-31"
    },
    "3": {
        "a": 3,
        "b": false,
        "c": "1517-06-30"
    }
}
#end_Frame-to_json_index()

#start_Frame-to_json_records()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.to_json_records(indent=4)
[
    {
        "a": 10,
        "b": false,
        "c": "1517-01-01"
    },
    {
        "a": 2,
        "b": true,
        "c": "1517-04-01"
    },
    {
        "a": 8,
        "b": true,
        "c": "1517-12-31"
    },
    {
        "a": 3,
        "b": false,
        "c": "1517-06-30"
    }
]
#end_Frame-to_json_records()

#start_Frame-to_json_split()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.to_json_split(indent=4)
{
    "columns": [
        "a",
        "b",
        "c"
    ],
    "index": [
        0,
        1,
        2,
        3
    ],
    "data": [
        [
            10,
            false,
            "1517-01-01"
        ],
        [
            2,
            true,
            "1517-04-01"
        ],
        [
            8,
            true,
            "1517-12-31"
        ],
        [
            3,
            false,
            "1517-06-30"
        ]
    ]
}
#end_Frame-to_json_split()

#start_Frame-to_json_values()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.to_json_values(indent=4)
[
    [
        10,
        false,
        "1517-01-01"
    ],
    [
        2,
        true,
        "1517-04-01"
    ],
    [
        8,
        true,
        "1517-12-31"
    ],
    [
        3,
        false,
        "1517-06-30"
    ]
]
#end_Frame-to_json_values()

#start_Frame-to_latex()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_latex()
\begin{table}[ht]
\centering
\begin{tabular}{c c c}
\hline\hline
   & a   & b    \\
\hline
p  & 10  & qrs  \\
q  & 2   & XYZ  \\
r  & 8   & 123  \\
s  & 3   &  wX  \\
\hline\end{tabular}
\end{table}
#end_Frame-to_latex()

#start_Frame-to_markdown()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_markdown()
|  |a  |b   |
|--|---|----|
|p |10 |qrs |
|q |2  |XYZ |
|r |8  |123 |
|s |3  | wX |
#end_Frame-to_markdown()

#start_Frame-to_msgpack()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_msgpack()
b'\x85\xc4\x02sf\xa5Frame\xc4\x04name\xa1x\xc4\x06blocks\xc4\xcd\x82\xc4\x02sf\xaaTypeBlocks\xc4\x06blocks\xc4\xb3\x92\x85\xc4\x02nd\xc3\xc4\x04type\xa3<i8\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4 \n\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U4\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4@q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00 \x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00\x00\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00w\x00\x00\x00X\x00\x00\x00 \x00\x00\x00\xc4\x05index\xc4S\x83\xc4\x02sf\xa5Index\xc4\x04name\xc0\xc4\x04data\xc49\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4\x10p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00\xc4\x07columns\xc4K\x83\xc4\x02sf\xa5Index\xc4\x04name\xc0\xc4\x04data\xc41\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x02\xc4\x04data\xc4\x08a\x00\x00\x00b\x00\x00\x00'
#end_Frame-to_msgpack()

#start_Frame-to_npy()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npy('/tmp/f.npy')
>>> sf.Frame.from_npy('/tmp/f.npy')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> import shutil
>>> shutil.rmtree('/tmp/f.npy')
#end_Frame-to_npy()

#start_Frame-to_npz()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npz('/tmp/f.npz')
>>> sf.Frame.from_npz('/tmp/f.npz')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-to_npz()

#start_Frame-to_pairs()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_pairs()
(('a', (('p', 10), ('q', 2), ('r', 8), ('s', 3))), ('b', (('p', 'qrs '), ('q', 'XYZ'), ('r', '123'), ('s', ' wX '))))
#end_Frame-to_pairs()

#start_Frame-to_pandas()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_pandas()
    a     b
p  10  qrs 
q   2   XYZ
r   8   123
s   3   wX 
#end_Frame-to_pandas()

#start_Frame-to_parquet()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_parquet('/tmp/f.parquet')
#end_Frame-to_parquet()

#start_Frame-to_pickle()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_pickle('/tmp/f.pickle')
>>> sf.Frame.from_pickle('/tmp/f.pickle')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-to_pickle()

#start_Frame-to_rst()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_rst()
+--+---+----+
|  |a  |b   |
+==+===+====+
|p |10 |qrs |
+--+---+----+
|q |2  |XYZ |
+--+---+----+
|r |8  |123 |
+--+---+----+
|s |3  | wX |
+--+---+----+
#end_Frame-to_rst()

#start_Frame-to_series()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_series()
<Series: x>
<Index>
('p', 'a')  10
('p', 'b')  qrs
('q', 'a')  2
('q', 'b')  XYZ
('r', 'a')  8
('r', 'b')  123
('s', 'a')  3
('s', 'b')   wX
<object>    <object>
#end_Frame-to_series()

#start_Frame-to_sqlite()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_sqlite('/tmp/f.db')
>>> import sqlite3
>>> conn = sqlite3.connect('/tmp/f.db')
>>> sf.Frame.from_sql("select * from x limit 2", connection=conn, index_depth=1)
<Frame>
<Index> a       b       c          <<U1>
<Index>
0       10      0       1517-01-01
1       2       1       1517-04-01
<int64> <int64> <int64> <<U10>
#end_Frame-to_sqlite()

#start_Frame-to_tsv()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_tsv('/tmp/f.tsv')
>>> from pathlib import Path
>>> Path('/tmp/f.tsv').read_text()
__index0__	a	b
p	0	1
q	2	3
r	4	5

#end_Frame-to_tsv()

#start_Frame-to_xarray()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_xarray()
<xarray.Dataset>
Dimensions:     (__index0__: 4)
Coordinates:
  * __index0__  (__index0__) <U1 'p' 'q' 'r' 's'
Data variables:
    a           (__index0__) int64 10 2 8 3
    b           (__index0__) <U4 'qrs ' 'XYZ' '123' ' wX '
#end_Frame-to_xarray()

#start_Frame-to_xlsx()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_xlsx('/tmp/f.xlsx')
#end_Frame-to_xlsx()

#start_Frame-STATIC
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.STATIC
True
#end_Frame-STATIC

#start_Frame-T
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.T
<Frame: x>
<Index>    0          1          2          3          <int64>
<Index>
a          10         2          8          3
b          False      True       True       False
c          1517-01-01 1517-04-01 1517-12-31 1517-06-30
<<U1>      <object>   <object>   <object>   <object>
#end_Frame-T

#start_Frame-columns
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.columns
<Index>
a
b
c
<<U1>
#end_Frame-columns

#start_Frame-dtypes
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.dtypes
<Series: x>
<Index>
a           int64
b           bool
c           datetime64[D]
<<U1>       <object>
#end_Frame-dtypes

#start_Frame-index
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.index
<Index>
0
1
2
3
<int64>
#end_Frame-index

#start_Frame-memory
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.memory
        L    Lu    LM   LMu   LMD  LMDu  R     Ru    RM   RMu   RMD  RMDu
Name    50   B     50   B     50   B     50    B     50   B     50   B
Index   208  B     224  B     112  B     8.3   KB    256  B     144  B
Columns 756  B     788  B     564  B     8.83  KB    812  B     588  B
Blocks  1.4  KB    1.45 KB    1.12 KB    1.4   KB    1.45 KB    1.12 KB
Total   2.42 KB    2.52 KB    1.86 KB    10.52 KB    2.57 KB    1.92 KB
#end_Frame-memory

#start_Frame-name
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.name
x
#end_Frame-name

#start_Frame-nbytes
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.nbytes
68
#end_Frame-nbytes

#start_Frame-ndim
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.ndim
2
#end_Frame-ndim

#start_Frame-shape
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.shape
(4, 3)
#end_Frame-shape

#start_Frame-size
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.size
12
#end_Frame-size

#start_Frame-__array__()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.__array__()
[[0 1]
 [2 3]
 [4 5]]
#end_Frame-__array__()

#start_Frame-__array_ufunc__()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> np.array((1, 0)) * f
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       0
q       2       0
r       4       0
<<U1>   <int64> <int64>
#end_Frame-__array_ufunc__()

#start_Frame-__bool__()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> bool(f)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_Frame-__bool__()

#start_Frame-__dataframe__()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> dfi = f.__dataframe__()
>>> tuple(dfi.get_columns())
(<DFIColumn: shape=(3,) dtype=<i8>, <DFIColumn: shape=(3,) dtype=<i8>)
#end_Frame-__dataframe__()

#start_Frame-__deepcopy__()
>>> import copy
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> copy.deepcopy(f)
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>
#end_Frame-__deepcopy__()

#start_Frame-__len__()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> len(f)
3
#end_Frame-__len__()

#start_Frame-__round__()
>>> f = sf.Frame((np.arange(6).reshape(3,2) * 4/3), index=('p', 'q', 'r'), columns=('a', 'b'), name='y')
>>> f
<Frame: y>
<Index>    a                  b                  <<U1>
<Index>
p          0.0                1.3333333333333333
q          2.6666666666666665 4.0
r          5.333333333333333  6.666666666666667
<<U1>      <float64>          <float64>
>>> round(f, 1)
<Frame: y>
<Index>    a         b         <<U1>
<Index>
p          0.0       1.3
q          2.7       4.0
r          5.3       6.7
<<U1>      <float64> <float64>
#end_Frame-__round__()

#start_Frame-all()
>>> f = sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f.all()
<Series>
<Index>
c        False
d        True
<<U1>    <bool>
#end_Frame-all()

#start_Frame-any()
>>> f = sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f.any()
<Series>
<Index>
c        False
d        True
<<U1>    <bool>
#end_Frame-any()

#start_Frame-astype[]()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> f.astype['c'](object)
<Frame: x>
<Index>    a       b      c          <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <object>
#end_Frame-astype[]()

#start_Frame-astype()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>
>>> f.astype(float)
<Frame: x>
<Index>    a         b         <<U1>
<Index>
p          0.0       1.0
q          2.0       3.0
r          4.0       5.0
<<U1>      <float64> <float64>
#end_Frame-astype()

#start_Frame-clip()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>
>>> f.clip(lower=2, upper=4)
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       2
q          2       3
r          4       4
<<U1>      <int64> <int64>
#end_Frame-clip()

#start_Frame-corr()
>>> f1 = sf.Frame((np.concatenate((np.arange(8) * 2, np.arange(8) ** 2)).reshape(4,4)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c', 'd'), name='x')
>>> f1.corr()
<Frame: x>
<Index>    a                  b                  c                  d                  <<U1>
<Index>
a          1.0                0.9888513796308233 0.965581028730576  0.9340437381585037
b          0.9888513796308233 0.9999999999999999 0.9923448088115435 0.972134396307783
c          0.9655810287305759 0.9923448088115435 0.9999999999999999 0.9934089501944108
d          0.9340437381585037 0.9721343963077829 0.9934089501944108 1.0
<<U1>      <float64>          <float64>          <float64>          <float64>
#end_Frame-corr()

#start_Frame-count()
>>> f = sf.Frame.from_items((('a', (10, 2, np.nan, 3)), ('b', ('qrs ', 'XYZ', None, None))), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a         b        <<U1>
<Index>
p          10.0      qrs
q          2.0       XYZ
r          nan       None
s          3.0       None
<<U1>      <float64> <object>
>>> f.count(skipna=True)
<Series>
<Index>
a        3
b        2
<<U1>    <int64>
>>> f.count(unique=True)
<Series>
<Index>
a        3
b        2
<<U1>    <int64>
#end_Frame-count()

#start_Frame-cov()
>>> f1 = sf.Frame((np.concatenate((np.arange(8) * 2, np.arange(8) ** 2)).reshape(4,4)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c', 'd'), name='x')
>>> f1.cov()
<Frame: x>
<Index>    a                  b                  c                  d                  <<U1>
<Index>
a          58.666666666666664 84.0               112.0              142.66666666666666
b          84.0               123.0              166.66666666666666 215.0
c          112.0              166.66666666666666 229.33333333333331 300.0
d          142.66666666666666 215.0              300.0              397.66666666666663
<<U1>      <float64>          <float64>          <float64>          <float64>
#end_Frame-cov()

#start_Frame-cumprod()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.cumprod()
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       1
q       0       3
r       0       15
<<U1>   <int64> <int64>
#end_Frame-cumprod()

#start_Frame-cumsum()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.cumsum()
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       1
q       2       4
r       6       9
<<U1>   <int64> <int64>
#end_Frame-cumsum()

#start_Frame-drop_duplicated()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a         b        c               <<U1>
<Index>
0          10.0      False    1517-01-01
1          2.0       True     1517-04-01
2          nan       None     NaT
3          2.0       True     1517-04-01
<int64>    <float64> <object> <datetime64[D]>
>>> f.drop_duplicated()
<Frame: x>
<Index>    a         b        c               <<U1>
<Index>
0          10.0      False    1517-01-01
2          nan       None     NaT
<int64>    <float64> <object> <datetime64[D]>
#end_Frame-drop_duplicated()

#start_Frame-dropfalsy()
>>> f = sf.Frame.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          0             NaT
3          2       123   1517-04-01
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.dropfalsy()
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
3          2       123   1517-04-01
<int64>    <int64> <<U4> <datetime64[D]>
#end_Frame-dropfalsy()

#start_Frame-dropna()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a         b        c               <<U1>
<Index>
0          10.0      False    1517-01-01
1          2.0       True     1517-04-01
2          nan       None     NaT
3          2.0       True     1517-04-01
<int64>    <float64> <object> <datetime64[D]>
>>> f.dropna()
<Frame: x>
<Index>    a         b        c               <<U1>
<Index>
0          10.0      False    1517-01-01
1          2.0       True     1517-04-01
3          2.0       True     1517-04-01
<int64>    <float64> <object> <datetime64[D]>
#end_Frame-dropna()

#start_Frame-duplicated()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a         b        c               <<U1>
<Index>
0          10.0      False    1517-01-01
1          2.0       True     1517-04-01
2          nan       None     NaT
3          2.0       True     1517-04-01
<int64>    <float64> <object> <datetime64[D]>
>>> f.duplicated()
<Series>
<Index>
0        False
1        True
2        False
3        True
<int64>  <bool>
#end_Frame-duplicated()

#start_Frame-equals()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.Frame((np.arange(6).reshape(3,2) * 4/3), index=('p', 'q', 'r'), columns=('a', 'b'), name='y')
>>> f1.equals(f2)
False
#end_Frame-equals()

#start_Frame-fillfalsy()
>>> f = sf.Frame.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          0             NaT
3          2       123   1517-04-01
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.fillfalsy(dict(a=1, b='abc', c=np.datetime64('2022-01-10')))
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          1       abc   2022-01-10
3          2       123   1517-04-01
<int64>    <int64> <<U4> <datetime64[D]>
#end_Frame-fillfalsy()

#start_Frame-fillfalsy_backward()
>>> f = sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          0       20      0
1          0       18      0
2          10      -3      0
3          2       18      1
<int64>    <int64> <int64> <int64>
>>> f.fillfalsy_backward()
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          10      20      1
1          10      18      1
2          10      -3      1
3          2       18      1
<int64>    <int64> <int64> <int64>
#end_Frame-fillfalsy_backward()

#start_Frame-fillfalsy_forward()
>>> f = sf.Frame.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          10      8       1
1          2       3       0
2          0       8       0
3          0       0       0
<int64>    <int64> <int64> <int64>
>>> f.fillfalsy_forward()
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          10      8       1
1          2       3       1
2          2       8       1
3          2       8       1
<int64>    <int64> <int64> <int64>
#end_Frame-fillfalsy_forward()

#start_Frame-fillfalsy_leading()
>>> f = sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          0       20      0
1          0       18      0
2          10      -3      0
3          2       18      1
<int64>    <int64> <int64> <int64>
>>> f.fillfalsy_leading(-1)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          -1      20      -1
1          -1      18      -1
2          10      -3      -1
3          2       18      1
<int64>    <int64> <int64> <int64>
#end_Frame-fillfalsy_leading()

#start_Frame-fillfalsy_trailing()
>>> f = sf.Frame.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          10      8       1
1          2       3       0
2          0       8       0
3          0       0       0
<int64>    <int64> <int64> <int64>
>>> f.fillfalsy_trailing(-1)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          10      8       1
1          2       3       -1
2          -1      8       -1
3          -1      -1      -1
<int64>    <int64> <int64> <int64>
#end_Frame-fillfalsy_trailing()

#start_Frame-fillna()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a         b     c               <<U1>
<Index>
0          10.0      qrs   1517-01-01
1          2.0       XYZ   1517-04-01
2          nan             NaT
3          2.0       123   1517-04-01
<int64>    <float64> <<U4> <datetime64[D]>
>>> f.fillna(-1)
<Frame: x>
<Index>    a         b     c          <<U1>
<Index>
0          10.0      qrs   1517-01-01
1          2.0       XYZ   1517-04-01
2          -1.0            -1
3          2.0       123   1517-04-01
<int64>    <float64> <<U4> <object>
#end_Frame-fillna()

#start_Frame-fillna_backward()
>>> f = sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y')
>>> f
<Frame: y>
<Index>    a         b         c         <<U1>
<Index>
0          nan       nan       nan
1          nan       8.0       nan
2          10.0      3.0       nan
3          2.0       8.0       1.0
<int64>    <float64> <float64> <float64>
>>> f.fillna_backward()
<Frame: y>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          10.0      8.0       1.0
2          10.0      3.0       1.0
3          2.0       8.0       1.0
<int64>    <float64> <float64> <float64>
#end_Frame-fillna_backward()

#start_Frame-fillna_forward()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          2.0       3.0       nan
2          nan       8.0       nan
3          nan       nan       nan
<int64>    <float64> <float64> <float64>
>>> f.fillna_forward()
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          2.0       3.0       1.0
2          2.0       8.0       1.0
3          2.0       8.0       1.0
<int64>    <float64> <float64> <float64>
#end_Frame-fillna_forward()

#start_Frame-fillna_leading()
>>> f = sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y')
>>> f
<Frame: y>
<Index>    a         b         c         <<U1>
<Index>
0          nan       nan       nan
1          nan       8.0       nan
2          10.0      3.0       nan
3          2.0       8.0       1.0
<int64>    <float64> <float64> <float64>
>>> f.fillna_leading(-1)
<Frame: y>
<Index>    a         b         c         <<U1>
<Index>
0          -1.0      -1.0      -1.0
1          -1.0      8.0       -1.0
2          10.0      3.0       -1.0
3          2.0       8.0       1.0
<int64>    <float64> <float64> <float64>
#end_Frame-fillna_leading()

#start_Frame-fillna_trailing()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          2.0       3.0       nan
2          nan       8.0       nan
3          nan       nan       nan
<int64>    <float64> <float64> <float64>
>>> f.fillna_trailing(-1)
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          2.0       3.0       -1.0
2          -1.0      8.0       -1.0
3          -1.0      -1.0      -1.0
<int64>    <float64> <float64> <float64>
#end_Frame-fillna_trailing()

#start_Frame-head()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> f.head(2)
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-head()

#start_Frame-iloc_max()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          2.0       3.0       nan
2          nan       8.0       nan
3          nan       nan       nan
<int64>    <float64> <float64> <float64>
>>> f.iloc_max()
<Series>
<Index>
a        0
b        0
c        0
<<U1>    <int64>
#end_Frame-iloc_max()

#start_Frame-iloc_min()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          2.0       3.0       nan
2          nan       8.0       nan
3          nan       nan       nan
<int64>    <float64> <float64> <float64>
>>> f.iloc_min()
<Series>
<Index>
a        1
b        1
c        0
<<U1>    <int64>
#end_Frame-iloc_min()

#start_Frame-insert_after()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f1.insert_after('b', f2)
<Frame: x>
<Index>    a       b       c      d      <<U1>
<Index>
p          0       1       False  True
q          2       3       False  True
r          4       5       False  True
<<U1>      <int64> <int64> <bool> <bool>
#end_Frame-insert_after()

#start_Frame-insert_before()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f1.insert_before('b', f2)
<Frame: x>
<Index>    a       c      d      b       <<U1>
<Index>
p          0       False  True   1
q          2       False  True   3
r          4       False  True   5
<<U1>      <int64> <bool> <bool> <int64>
#end_Frame-insert_before()

#start_Frame-isfalsy()
>>> f = sf.Frame.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          0             NaT
3          2       123   1517-04-01
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.isfalsy()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       False  False  False
1       False  False  False
2       True   True   True
3       False  False  False
<int64> <bool> <bool> <bool>
#end_Frame-isfalsy()

#start_Frame-isin()
>>> f = sf.Frame.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')
>>> f.isin((0, 8))
<Frame: x>
<Index>    a      b      c      <<U1>
<Index>
0          False  True   False
1          False  False  True
2          True   True   True
3          True   True   True
<int64>    <bool> <bool> <bool>
#end_Frame-isin()

#start_Frame-isna()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          2.0       3.0       nan
2          nan       8.0       nan
3          nan       nan       nan
<int64>    <float64> <float64> <float64>
>>> f.isna()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       False  False  False
1       False  False  True
2       True   False  True
3       True   True   True
<int64> <bool> <bool> <bool>
#end_Frame-isna()

#start_Frame-join_inner()
>>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_inner(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_Frame-join_inner()

#start_Frame-join_left()
>>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_left(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_Frame-join_left()

#start_Frame-join_outer()
>>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_outer(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_Frame-join_outer()

#start_Frame-join_right()
>>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_right(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_Frame-join_right()

#start_Frame-loc_max()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          2.0       3.0       nan
2          nan       8.0       nan
3          nan       nan       nan
<int64>    <float64> <float64> <float64>
>>> f.loc_max()
<Series>
<Index>
a        0
b        0
c        0
<<U1>    <int64>
#end_Frame-loc_max()

#start_Frame-loc_min()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          2.0       3.0       nan
2          nan       8.0       nan
3          nan       nan       nan
<int64>    <float64> <float64> <float64>
>>> f.loc_min()
<Series>
<Index>
a        1
b        1
c        0
<<U1>    <int64>
#end_Frame-loc_min()

#start_Frame-max()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.max()
<Series>
<Index>
a        4
b        5
<<U1>    <int64>
#end_Frame-max()

#start_Frame-mean()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.mean()
<Series>
<Index>
a        2.0
b        3.0
<<U1>    <float64>
#end_Frame-mean()

#start_Frame-median()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.median()
<Series>
<Index>
a        2.0
b        3.0
<<U1>    <float64>
#end_Frame-median()

#start_Frame-min()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.min()
<Series>
<Index>
a        0
b        1
<<U1>    <int64>
#end_Frame-min()

#start_Frame-notfalsy()
>>> f = sf.Frame.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          0             NaT
3          2       123   1517-04-01
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.notfalsy()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       True   True   True
1       True   True   True
2       False  False  False
3       True   True   True
<int64> <bool> <bool> <bool>
#end_Frame-notfalsy()

#start_Frame-notna()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          2.0       3.0       nan
2          nan       8.0       nan
3          nan       nan       nan
<int64>    <float64> <float64> <float64>
>>> f.notna()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       True   True   True
1       True   True   False
2       False  True   False
3       False  False  False
<int64> <bool> <bool> <bool>
#end_Frame-notna()

#start_Frame-pivot()
>>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f1.pivot(index_fields='b', columns_fields='c')
<Frame>
<Index: c> 0         1         <int64>
<Index: b>
0          11.0      nan
3          10.0      nan
8          nan       6.0
<int64>    <float64> <float64>
#end_Frame-pivot()

#start_Frame-pivot_stack()
>>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f1.pivot_stack()
<Frame: x>
<Index>                0       <int64>
<IndexHierarchy>
0                a     11
0                b     0
0                c     0
1                a     4
1                b     8
1                c     1
2                a     10
2                b     3
2                c     0
3                a     2
3                b     8
3                c     1
<int64>          <<U1> <int64>
#end_Frame-pivot_stack()

#start_Frame-pivot_unstack()
>>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = f1.pivot_stack()
>>> f2
<Frame: x>
<Index>                0       <int64>
<IndexHierarchy>
0                a     11
0                b     0
0                c     0
1                a     4
1                b     8
1                c     1
2                a     10
2                b     3
2                c     0
3                a     2
3                b     8
3                c     1
<int64>          <<U1> <int64>
>>> f2.pivot_unstack()
<Frame: x>
<IndexHierarchy> 0       0       0       <int64>
                 a       b       c       <<U1>
<Index>
0                11      0       0
1                4       8       1
2                10      3       0
3                2       8       1
<int64>          <int64> <int64> <int64>
#end_Frame-pivot_unstack()

#start_Frame-prod()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.prod()
<Series>
<Index>
a        0
b        15
<<U1>    <int64>
#end_Frame-prod()

#start_Frame-rank_dense()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          11      0       0
1          4       8       1
2          10      3       0
3          2       8       1
<int64>    <int64> <int64> <int64>
>>> f.rank_dense()
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          3       0       0
1          1       2       1
2          2       1       0
3          0       2       1
<int64>    <int64> <int64> <int64>
#end_Frame-rank_dense()

#start_Frame-rank_max()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          11      0       0
1          4       8       1
2          10      3       0
3          2       8       1
<int64>    <int64> <int64> <int64>
>>> f.rank_max()
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          3       0       1
1          1       3       3
2          2       1       1
3          0       3       3
<int64>    <int64> <int64> <int64>
#end_Frame-rank_max()

#start_Frame-rank_mean()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          11      0       0
1          4       8       1
2          10      3       0
3          2       8       1
<int64>    <int64> <int64> <int64>
>>> f.rank_mean()
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          3.0       0.0       0.5
1          1.0       2.5       2.5
2          2.0       1.0       0.5
3          0.0       2.5       2.5
<int64>    <float64> <float64> <float64>
#end_Frame-rank_mean()

#start_Frame-rank_min()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          11      0       0
1          4       8       1
2          10      3       0
3          2       8       1
<int64>    <int64> <int64> <int64>
>>> f.rank_min()
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          3       0       0
1          1       2       2
2          2       1       0
3          0       2       2
<int64>    <int64> <int64> <int64>
#end_Frame-rank_min()

#start_Frame-rank_ordinal()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          11      0       0
1          4       8       1
2          10      3       0
3          2       8       1
<int64>    <int64> <int64> <int64>
>>> f.rank_ordinal()
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          3       0       0
1          1       2       2
2          2       1       1
3          0       3       3
<int64>    <int64> <int64> <int64>
#end_Frame-rank_ordinal()

#start_Frame-rehierarch()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rehierarch((1, 0))
<Frame: x>
<Index>                  a       b      c               <<U1>
<IndexHierarchy>
p                0       10      False  1517-01-01
p                1       8       True   1517-12-31
q                0       2       True   1517-04-01
q                1       3       False  1517-06-30
<<U1>            <int64> <int64> <bool> <datetime64[D]>
#end_Frame-rehierarch()

#start_Frame-reindex()
>>> f = sf.Frame.from_items((('a', (10, 2, 8, 3)), ('b', ('qrs ', 'XYZ', '123', ' wX '))), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.reindex(('q', 't', 's', 'r'), fill_value=sf.FillValueAuto(i=-1, U=''))
<Frame: x>
<Index>    a       b     <<U1>
<Index>
q          2       XYZ
t          -1
s          3        wX
r          8       123
<<U1>      <int64> <<U4>
#end_Frame-reindex()

#start_Frame-relabel()
>>> f = sf.Frame.from_records(((10, False, '1517-01-01'), (8, True,'1517-04-01')), index=('p', 'q'), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
p          10      False  1517-01-01
q          8       True   1517-04-01
<<U1>      <int64> <bool> <datetime64[D]>
>>> f.relabel(('y', 'z'))
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
y          10      False  1517-01-01
z          8       True   1517-04-01
<<U1>      <int64> <bool> <datetime64[D]>
>>> f.relabel(dict(q='x', p='y'))
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
y          10      False  1517-01-01
x          8       True   1517-04-01
<<U1>      <int64> <bool> <datetime64[D]>
>>> f.relabel(lambda l: f'+{l.upper()}+')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
+P+        10      False  1517-01-01
+Q+        8       True   1517-04-01
<<U3>      <int64> <bool> <datetime64[D]>
#end_Frame-relabel()

#start_Frame-relabel_flat()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.relabel_flat(index=True)
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
(0, 'p')   10      False  1517-01-01
(0, 'q')   2       True   1517-04-01
(1, 'p')   8       True   1517-12-31
(1, 'q')   3       False  1517-06-30
<object>   <int64> <bool> <datetime64[D]>
#end_Frame-relabel_flat()

#start_Frame-relabel_level_add()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.relabel_level_add('I')
<Frame: x>
<Index>                        a       b      c               <<U1>
<IndexHierarchy>
I                0       p     10      False  1517-01-01
I                0       q     2       True   1517-04-01
I                1       p     8       True   1517-12-31
I                1       q     3       False  1517-06-30
<<U1>            <int64> <<U1> <int64> <bool> <datetime64[D]>
#end_Frame-relabel_level_add()

#start_Frame-relabel_level_drop()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.iloc[:2].relabel_level_drop(1)
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
p          10      False  1517-01-01
q          2       True   1517-04-01
<<U1>      <int64> <bool> <datetime64[D]>
#end_Frame-relabel_level_drop()

#start_Frame-relabel_shift_in()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.relabel_shift_in('a')
<Frame: x>
<Index>                                            b      c               <<U1>
<IndexHierarchy: ('__index0__', '...
0                                    p     10      False  1517-01-01
0                                    q     2       True   1517-04-01
1                                    p     8       True   1517-12-31
1                                    q     3       False  1517-06-30
<int64>                              <<U1> <int64> <bool> <datetime64[D]>
#end_Frame-relabel_shift_in()

#start_Frame-relabel_shift_out()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rename(index=('d', 'e')).relabel_shift_out([1, 0])
<Frame: x>
<Index>    e     d       a       b      c               <<U1>
<Index>
0          p     0       10      False  1517-01-01
1          q     0       2       True   1517-04-01
2          p     1       8       True   1517-12-31
3          q     1       3       False  1517-06-30
<int64>    <<U1> <int64> <int64> <bool> <datetime64[D]>
#end_Frame-relabel_shift_out()

#start_Frame-rename()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rename('y', index='p', columns='q')
<Frame: y>
<Index: q>                a       b      c               <<U1>
<IndexHierarchy: p>
0                   p     10      False  1517-01-01
0                   q     2       True   1517-04-01
1                   p     8       True   1517-12-31
1                   q     3       False  1517-06-30
<int64>             <<U1> <int64> <bool> <datetime64[D]>
#end_Frame-rename()

#start_Frame-roll()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> f.roll(3)
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          2       True   1517-04-01
1          8       True   1517-12-31
2          3       False  1517-06-30
3          10      False  1517-01-01
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-roll()

#start_Frame-sample()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> f.sample(2, 2, seed=0)
<Frame: x>
<Index>    b      c               <<U1>
<Index>
2          True   1517-12-31
3          False  1517-06-30
<int64>    <bool> <datetime64[D]>
#end_Frame-sample()

#start_Frame-set_columns()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.set_columns((1, 'p'), drop=True)
<Frame: x>
<Index: (1, 'p')>       8       True   1517-12-31      <object>
<IndexHierarchy>
0                 p     10      False  1517-01-01
0                 q     2       True   1517-04-01
1                 q     3       False  1517-06-30
<int64>           <<U1> <int64> <bool> <datetime64[D]>
#end_Frame-set_columns()

#start_Frame-set_columns_hierarchy()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.set_columns_hierarchy([(1, 'p'), (1, 'q')], drop=True)
<Frame: x>
<IndexHierarchy: ((1, 'p'), (1, '...       8       True   1517-12-31      <object>
                                           3       False  1517-06-30      <object>
<IndexHierarchy>
0                                    p     10      False  1517-01-01
0                                    q     2       True   1517-04-01
<int64>                              <<U1> <int64> <bool> <datetime64[D]>
#end_Frame-set_columns_hierarchy()

#start_Frame-set_index()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> f.set_index('c', drop=True, index_constructor=sf.IndexDate)
<Frame: x>
<Index>         a       b      <<U1>
<IndexDate: c>
1517-01-01      10      False
1517-04-01      2       True
1517-12-31      8       True
1517-06-30      3       False
<datetime64[D]> <int64> <bool>
#end_Frame-set_index()

#start_Frame-set_index_hierarchy()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> f.set_index_hierarchy(['b', 'c'], drop=True, index_constructors=(sf.Index, sf.IndexDate))
<Frame: x>
<Index>                                      a       <<U1>
<IndexHierarchy: ('b', 'c')>
False                        1517-01-01      10
True                         1517-04-01      2
True                         1517-12-31      8
False                        1517-06-30      3
<bool>                       <datetime64[D]> <int64>
#end_Frame-set_index_hierarchy()

#start_Frame-shift()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> f.shift(3, fill_value=sf.FillValueAuto)
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          0       False  NaT
1          0       False  NaT
2          0       False  NaT
3          10      False  1517-01-01
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-shift()

#start_Frame-sort_columns()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.sort_columns(ascending=False)
<Frame: x>
<Index>                c               b      a       <<U1>
<IndexHierarchy>
0                p     1517-01-01      False  10
0                q     1517-04-01      True   2
1                p     1517-12-31      True   8
1                q     1517-06-30      False  3
<int64>          <<U1> <datetime64[D]> <bool> <int64>
#end_Frame-sort_columns()

#start_Frame-sort_index()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.sort_index(ascending=False)
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                q     3       False  1517-06-30
1                p     8       True   1517-12-31
0                q     2       True   1517-04-01
0                p     10      False  1517-01-01
<int64>          <<U1> <int64> <bool> <datetime64[D]>
#end_Frame-sort_index()

#start_Frame-sort_values()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> f.sort_values('c')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
3          3       False  1517-06-30
2          8       True   1517-12-31
<int64>    <int64> <bool> <datetime64[D]>
>>> f.sort_values(['c', 'b'], ascending=False)
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
2          8       True   1517-12-31
3          3       False  1517-06-30
1          2       True   1517-04-01
0          10      False  1517-01-01
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-sort_values()

#start_Frame-std()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.std()
<Series>
<Index>
a        1.632993161855452
b        1.632993161855452
<<U1>    <float64>
#end_Frame-std()

#start_Frame-sum()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.sum()
<Series>
<Index>
a        6
b        9
<<U1>    <int64>
#end_Frame-sum()

#start_Frame-tail()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> f.tail(2)
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-tail()

#start_Frame-transpose()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.transpose()
<Frame: x>
<Index>    p       q       r       <<U1>
<Index>
a          0       2       4
b          1       3       5
<<U1>      <int64> <int64> <int64>
#end_Frame-transpose()

#start_Frame-unique()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a         b        c               <<U1>
<Index>
0          10.0      False    1517-01-01
1          2.0       True     1517-04-01
2          nan       None     NaT
3          2.0       True     1517-04-01
<int64>    <float64> <object> <datetime64[D]>
>>> f.unique()
[10.0 False datetime.date(1517, 1, 1) 2.0 True datetime.date(1517, 4, 1)
 nan None]
#end_Frame-unique()

#start_Frame-unset_columns()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>
>>> f.rename(columns='o').unset_columns()
<Frame: x>
<Index>    0        1        <int64>
<Index>
o          a        b
p          0        1
q          2        3
r          4        5
<<U1>      <object> <object>
#end_Frame-unset_columns()

#start_Frame-unset_index()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rename(index=(('d', 'e'))).unset_index()
<Frame: x>
<Index>    d       e     a       b      c               <<U1>
<Index>
0          0       p     10      False  1517-01-01
1          0       q     2       True   1517-04-01
2          1       p     8       True   1517-12-31
3          1       q     3       False  1517-06-30
<int64>    <int64> <<U1> <int64> <bool> <datetime64[D]>
#end_Frame-unset_index()

#start_Frame-var()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.var()
<Series>
<Index>
a        2.6666666666666665
b        2.6666666666666665
<<U1>    <float64>
#end_Frame-var()

#start_Frame-__contains__()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.__contains__('a')
True
#end_Frame-__contains__()

#start_Frame-__iter__()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.__iter__())
('a', 'b', 'c')
#end_Frame-__iter__()

#start_Frame-__reversed__()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.__reversed__())
('c', 'b', 'a')
#end_Frame-__reversed__()

#start_Frame-get()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.get('a')
<Series: a>
<Index>
0           10
1           2
2           8
3           3
<int64>     <int64>
>>> f.get('z', -1)
-1
#end_Frame-get()

#start_Frame-items()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.items())
(('a', <Series: a>
<Index>
0           10
1           2
2           8
3           3
<int64>     <int64>), ('b', <Series: b>
<Index>
0           False
1           True
2           True
3           False
<int64>     <bool>), ('c', <Series: c>
<Index>
0           1517-01-01
1           1517-04-01
2           1517-12-31
3           1517-06-30
<int64>     <datetime64[D]>))
#end_Frame-items()

#start_Frame-keys()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.keys()
<Index>
a
b
c
<<U1>
#end_Frame-keys()

#start_Frame-values
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.values
[[10 False datetime.date(1517, 1, 1)]
 [2 True datetime.date(1517, 4, 1)]
 [8 True datetime.date(1517, 12, 31)]
 [3 False datetime.date(1517, 6, 30)]]
#end_Frame-values

#start_Frame-interface
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.interface
<Frame>
<Index>                              cls_name group                doc                  <<U18>
<Index: signature>
__init__(data, *, index, columns,... Frame    Constructor          Initializer. Args...
from_arrow(value, *, index_depth,... Frame    Constructor          Realize a Frame f...
from_clipboard(*, delimiter, inde... Frame    Constructor          Create a Frame fr...
from_concat(frames, *, axis, unio... Frame    Constructor          Concatenate multi...
from_concat_items(items, *, axis,... Frame    Constructor          Produce a Frame w...
from_csv(fp, *, index_depth, inde... Frame    Constructor          Specialized versi...
from_delimited(fp, *, delimiter, ... Frame    Constructor          Create a Frame fr...
from_dict(mapping, *, index, fill... Frame    Constructor          Create a Frame fr...
from_dict_fields(fields, *, colum... Frame    Constructor          Frame constructor...
from_dict_records(records, *, ind... Frame    Constructor          Frame constructor...
from_dict_records_items(items, *,... Frame    Constructor          Frame constructor...
from_element(element, *, index, c... Frame    Constructor          Create a Frame fr...
from_element_items(items, *, inde... Frame    Constructor          Create a Frame fr...
from_elements(elements, *, index,... Frame    Constructor          Create a Frame fr...
from_fields(fields, *, index, col... Frame    Constructor          Frame constructor...
from_hdf5(fp, *, label, index_dep... Frame    Constructor          Load Frame from t...
from_items(pairs, *, index, fill_... Frame    Constructor          Frame constructor...
...                                  ...      ...                  ...
via_fill_value(fill_value).__le__... Frame    Accessor Fill Value
via_fill_value(fill_value).__eq__... Frame    Accessor Fill Value
via_fill_value(fill_value).__ne__... Frame    Accessor Fill Value
via_fill_value(fill_value).__gt__... Frame    Accessor Fill Value
via_fill_value(fill_value).__ge__... Frame    Accessor Fill Value
via_fill_value(fill_value).__radd... Frame    Accessor Fill Value
via_fill_value(fill_value).__rsub... Frame    Accessor Fill Value
via_fill_value(fill_value).__rmul... Frame    Accessor Fill Value
via_fill_value(fill_value).__rtru... Frame    Accessor Fill Value
via_fill_value(fill_value).__rflo... Frame    Accessor Fill Value
via_re(pattern, flags).search(pos... Frame    Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... Frame    Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... Frame    Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... Frame    Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... Frame    Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... Frame    Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... Frame    Accessor Regular ... Perform the same ...
<<U89>                               <<U5>    <<U27>               <<U83>
#end_Frame-interface

#start_Frame-__repr__()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> repr(f)
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-__repr__()

#start_Frame-__str__()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> str(f)
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-__str__()

#start_Frame-display()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.display()
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> f.display(sf.DisplayConfig(type_show=False))
  a  b     c
0 10 False 1517-01-01
1 2  True  1517-04-01
2 8  True  1517-12-31
3 3  False 1517-06-30
#end_Frame-display()

#start_Frame-display_tall()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.display_tall()
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-display_tall()

#start_Frame-display_wide()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.display_wide()
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-display_wide()

#start_Frame-assign[]()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign['a'](-1)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          -1      8       1
q          -1      -3      0
r          -1      8       9
s          -1      0       12
<<U1>      <int64> <int64> <int64>
>>> f.assign[['a', 'c']](-1)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          -1      8       -1
q          -1      -3      -1
r          -1      8       -1
s          -1      0       -1
<<U1>      <int64> <int64> <int64>
#end_Frame-assign[]()

#start_Frame-assign[].apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.assign['a'].apply(lambda s: s / 100)
<Frame: x>
<Index>    a         b       c       <<U1>
<Index>
p          0.1       8       1
q          -0.02     -3      0
r          0.0       8       9
s          0.0       0       12
<<U1>      <float64> <int64> <int64>
#end_Frame-assign[].apply()

#start_Frame-assign[].apply_element()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.assign['a'].apply_element(lambda e: e / 100 if e < 8 else e)
<Frame: x>
<Index>    a         b       c       <<U1>
<Index>
p          10.0      8       1
q          -0.02     -3      0
r          0.0       8       9
s          0.0       0       12
<<U1>      <float64> <int64> <int64>
#end_Frame-assign[].apply_element()

#start_Frame-assign[].apply_element_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.assign['a'].apply_element_items(lambda l, e: e / 100 if l == ('q', 'a') else e)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
#end_Frame-assign[].apply_element_items()

#start_Frame-assign.iloc[]()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.iloc[2]((-1, -2, -3))
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          -1      -2      -3
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.assign.iloc[2:](-1)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          -1      -1      -1
s          -1      -1      -1
<<U1>      <int64> <int64> <int64>
>>> f.assign.iloc[[0, 3]](-1)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          -1      -1      -1
q          -2      -3      0
r          0       8       9
s          -1      -1      -1
<<U1>      <int64> <int64> <int64>
#end_Frame-assign.iloc[]()

#start_Frame-assign.iloc[].apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.assign.iloc[2:].apply(lambda s: s / 100)
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
p          10.0      8.0       1.0
q          -2.0      -3.0      0.0
r          0.0       0.08      0.09
s          0.0       0.0       0.12
<<U1>      <float64> <float64> <float64>
#end_Frame-assign.iloc[].apply()

#start_Frame-assign.iloc[].apply_element()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.assign.iloc[1:].apply_element(lambda e: e / 100 if e < 8 else e)
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
p          10.0      8.0       1.0
q          -0.02     -0.03     0.0
r          0.0       8.0       9.0
s          0.0       0.0       12.0
<<U1>      <float64> <float64> <float64>
#end_Frame-assign.iloc[].apply_element()

#start_Frame-assign.iloc[].apply_element_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.assign.iloc[1:].apply_element_items(lambda l, e: e / 100 if l == ('q', 'a') else e)
<Frame: x>
<Index>    a         b       c       <<U1>
<Index>
p          10.0      8       1
q          -0.02     -3      0
r          0.0       8       9
s          0.0       0       12
<<U1>      <float64> <int64> <int64>
#end_Frame-assign.iloc[].apply_element_items()

#start_Frame-assign.loc[]()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.loc['r'](-1)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          -1      -1      -1
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.assign.loc['r':](-1)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          -1      -1      -1
s          -1      -1      -1
<<U1>      <int64> <int64> <int64>
>>> f.assign.loc[['p', 's']](-1)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          -1      -1      -1
q          -2      -3      0
r          0       8       9
s          -1      -1      -1
<<U1>      <int64> <int64> <int64>
#end_Frame-assign.loc[]()

#start_Frame-assign.loc[].apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.assign.loc['r':].apply(lambda s: s / 100)
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
p          10.0      8.0       1.0
q          -2.0      -3.0      0.0
r          0.0       0.08      0.09
s          0.0       0.0       0.12
<<U1>      <float64> <float64> <float64>
#end_Frame-assign.loc[].apply()

#start_Frame-assign.loc[].apply_element()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.assign.loc['r':].apply_element(lambda e: e / 100 if e < 10 else e)
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
p          10.0      8.0       1.0
q          -2.0      -3.0      0.0
r          0.0       0.08      0.09
s          0.0       0.0       12.0
<<U1>      <float64> <float64> <float64>
#end_Frame-assign.loc[].apply_element()

#start_Frame-assign.loc[].apply_element_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.assign.loc['r':].apply_element_items(lambda l, e: e / 100 if l[1] == 'c' else e)
<Frame: x>
<Index>    a       b       c         <<U1>
<Index>
p          10      8       1.0
q          -2      -3      0.0
r          0       8       0.09
s          0       0       0.12
<<U1>      <int64> <int64> <float64>
#end_Frame-assign.loc[].apply_element_items()

#start_Frame-assign.bloc[]()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.bloc[f > 5](-1)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          -1      -1      1
q          -2      -3      0
r          0       -1      -1
s          0       0       -1
<<U1>      <int64> <int64> <int64>
#end_Frame-assign.bloc[]()

#start_Frame-assign.bloc[].apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.bloc[f > 5].apply(lambda s: s * .01)
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
p          0.1       0.08      1.0
q          -2.0      -3.0      0.0
r          0.0       0.08      0.09
s          0.0       0.0       0.12
<<U1>      <float64> <float64> <float64>
#end_Frame-assign.bloc[].apply()

#start_Frame-assign.bloc[].apply_element()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.bloc[f > 5].apply_element(lambda e: e * .01 if e == 8 else e)
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
p          10.0      0.08      1.0
q          -2.0      -3.0      0.0
r          0.0       0.08      9.0
s          0.0       0.0       12.0
<<U1>      <float64> <float64> <float64>
#end_Frame-assign.bloc[].apply_element()

#start_Frame-assign.bloc[].apply_element_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.bloc[f > 5].apply_element_items(lambda e: e * .01 if l[1] == 'c' else e)
TypeError('<lambda>() takes 1 positional argument but 2 were given')
#end_Frame-assign.bloc[].apply_element_items()

#start_Frame-bloc[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.bloc[f > 5]
<Series>
<Index>
('p', 'a') 10
('p', 'b') 8
('r', 'b') 8
('r', 'c') 9
('s', 'c') 12
<object>   <int64>
#end_Frame-bloc[]

#start_Frame-drop[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.drop['c']
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          10      8
q          -2      -3
r          0       8
s          0       0
<<U1>      <int64> <int64>
>>> f.drop['b':]
<Frame: x>
<Index>    a       <<U1>
<Index>
p          10
q          -2
r          0
s          0
<<U1>      <int64>
>>> f.drop[['a', 'c']]
<Frame: x>
<Index>    b       <<U1>
<Index>
p          8
q          -3
r          8
s          0
<<U1>      <int64>
#end_Frame-drop[]

#start_Frame-drop.iloc[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.drop.iloc[1]
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.drop.iloc[1:]
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
<<U1>      <int64> <int64> <int64>
>>> f.drop.iloc[[0, 2]]
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
q          -2      -3      0
s          0       0       12
<<U1>      <int64> <int64> <int64>
#end_Frame-drop.iloc[]

#start_Frame-drop.loc[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.drop.loc['r']
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.drop.loc['r':]
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
<<U1>      <int64> <int64> <int64>
>>> f.drop.loc[['p', 's']]
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
q          -2      -3      0
r          0       8       9
<<U1>      <int64> <int64> <int64>
#end_Frame-drop.loc[]

#start_Frame-mask[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.mask['c']
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  True
q       False  False  True
r       False  False  True
s       False  False  True
<<U1>   <bool> <bool> <bool>
>>> f.mask['b':]
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  True   True
q       False  True   True
r       False  True   True
s       False  True   True
<<U1>   <bool> <bool> <bool>
>>> f.mask[['a', 'c']]
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   False  True
q       True   False  True
r       True   False  True
s       True   False  True
<<U1>   <bool> <bool> <bool>
#end_Frame-mask[]

#start_Frame-mask.iloc[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.mask.iloc[1]
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       True   True   True
r       False  False  False
s       False  False  False
<<U1>   <bool> <bool> <bool>
>>> f.mask.iloc[1:]
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       True   True   True
r       True   True   True
s       True   True   True
<<U1>   <bool> <bool> <bool>
>>> f.mask.iloc[[0, 2]]
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   True   True
q       False  False  False
r       True   True   True
s       False  False  False
<<U1>   <bool> <bool> <bool>
#end_Frame-mask.iloc[]

#start_Frame-mask.loc[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.mask.loc['r']
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       False  False  False
r       True   True   True
s       False  False  False
<<U1>   <bool> <bool> <bool>
>>> f.mask.loc['r':]
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       False  False  False
r       True   True   True
s       True   True   True
<<U1>   <bool> <bool> <bool>
>>> f.mask.loc[['p', 's']]
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   True   True
q       False  False  False
r       False  False  False
s       True   True   True
<<U1>   <bool> <bool> <bool>
#end_Frame-mask.loc[]

#start_Frame-masked_array[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.masked_array['c']
[[10 8 --]
 [-2 -3 --]
 [0 8 --]
 [0 0 --]]
>>> f.masked_array['b':]
[[10 -- --]
 [-2 -- --]
 [0 -- --]
 [0 -- --]]
>>> f.masked_array[['a', 'c']]
[[-- 8 --]
 [-- -3 --]
 [-- 8 --]
 [-- 0 --]]
#end_Frame-masked_array[]

#start_Frame-masked_array.iloc[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.masked_array.iloc[1]
[[10 8 1]
 [-- -- --]
 [0 8 9]
 [0 0 12]]
>>> f.masked_array.iloc[1:]
[[10 8 1]
 [-- -- --]
 [-- -- --]
 [-- -- --]]
>>> f.masked_array.iloc[[0, 2]]
[[-- -- --]
 [-2 -3 0]
 [-- -- --]
 [0 0 12]]
#end_Frame-masked_array.iloc[]

#start_Frame-masked_array.loc[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.masked_array.loc['r']
[[10 8 1]
 [-2 -3 0]
 [-- -- --]
 [0 0 12]]
>>> f.masked_array.loc['r':]
[[10 8 1]
 [-2 -3 0]
 [-- -- --]
 [-- -- --]]
>>> f.masked_array.loc[['p', 's']]
[[-- -- --]
 [-2 -3 0]
 [0 8 9]
 [-- -- --]]
#end_Frame-masked_array.loc[]

#start_Frame-[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f['b']
<Series: b>
<Index>
p           8
q           -3
r           8
s           0
<<U1>       <int64>
>>> f['b':]
<Frame: x>
<Index>    b       c       <<U1>
<Index>
p          8       1
q          -3      0
r          8       9
s          0       12
<<U1>      <int64> <int64>
>>> f[['a', 'c']]
<Frame: x>
<Index>    a       c       <<U1>
<Index>
p          10      1
q          -2      0
r          0       9
s          0       12
<<U1>      <int64> <int64>
#end_Frame-[]

#start_Frame-iloc[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iloc[2]
<Series: r>
<Index>
a           0
b           8
c           9
<<U1>       <int64>
>>> f.iloc[2:]
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.iloc[[0, 3]]
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
s          0       0       12
<<U1>      <int64> <int64> <int64>
#end_Frame-iloc[]

#start_Frame-loc[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.loc['r']
<Series: r>
<Index>
a           0
b           8
c           9
<<U1>       <int64>
>>> f.loc['r':]
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.loc[['p', 's']]
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
s          0       0       12
<<U1>      <int64> <int64> <int64>
#end_Frame-loc[]

#start_Frame-iter_array()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array())
(array([10, -2,  0,  0]), array([ 8, -3,  8,  0]), array([ 1,  0,  9, 12]))
#end_Frame-iter_array()

#start_Frame-iter_array().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array().apply(lambda v: v.sum())
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_Frame-iter_array().apply()

#start_Frame-iter_array().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array().apply_iter(lambda v: v.sum()))
(8, 13, 22)
#end_Frame-iter_array().apply_iter()

#start_Frame-iter_array().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array().apply_iter_items(lambda v: v.sum()))
(('a', 8), ('b', 13), ('c', 22))
#end_Frame-iter_array().apply_iter_items()

#start_Frame-iter_array().apply_pool()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array().apply_pool(lambda v: v.sum(), use_threads=True)
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_Frame-iter_array().apply_pool()

#start_Frame-iter_array_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array_items())
(('a', array([10, -2,  0,  0])), ('b', array([ 8, -3,  8,  0])), ('c', array([ 1,  0,  9, 12])))
#end_Frame-iter_array_items()

#start_Frame-iter_array_items().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array_items().apply(lambda k, v: v.sum() if k != 'b' else -1)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_Frame-iter_array_items().apply()

#start_Frame-iter_array_items().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array_items().apply_iter(lambda k, v: v.sum() if k != 'b' else -1))
(8, -1, 22)
#end_Frame-iter_array_items().apply_iter()

#start_Frame-iter_array_items().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array_items().apply_iter_items(lambda k, v: v.sum() if k != 'b' else -1))
(('a', 8), ('b', -1), ('c', 22))
#end_Frame-iter_array_items().apply_iter_items()

#start_Frame-iter_array_items().apply_pool()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array_items().apply_pool(lambda pair: pair[1].sum() if pair[0] != 'b' else -1, use_threads=True)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_Frame-iter_array_items().apply_pool()

#start_Frame-iter_element()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element())
(10, 8, 1, -2, -3, 0, 0, 8, 9, 0, 0, 12)
#end_Frame-iter_element()

#start_Frame-iter_element().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element().apply(lambda e: e > 5)
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   True   False
q       False  False  False
r       False  True   True
s       False  False  True
<<U1>   <bool> <bool> <bool>
#end_Frame-iter_element().apply()

#start_Frame-iter_element().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element().apply_iter(lambda e: e > 10))
(False, False, False, False, False, False, False, False, False, False, False, True)
#end_Frame-iter_element().apply_iter()

#start_Frame-iter_element().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element().apply_iter_items(lambda e: e > 10))
((('p', 'a'), False), (('p', 'b'), False), (('p', 'c'), False), (('q', 'a'), False), (('q', 'b'), False), (('q', 'c'), False), (('r', 'a'), False), (('r', 'b'), False), (('r', 'c'), False), (('s', 'a'), False), (('s', 'b'), False), (('s', 'c'), True))
#end_Frame-iter_element().apply_iter_items()

#start_Frame-iter_element().apply_pool()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element().apply_pool(lambda e: e > 5, use_threads=True)
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   True   False
q       False  False  False
r       False  True   True
s       False  False  True
<<U1>   <bool> <bool> <bool>
#end_Frame-iter_element().apply_pool()

#start_Frame-iter_element().map_all()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          1       2       1
q          2       1       0
r          0       2       2
s          0       0       1
<<U1>      <int64> <int64> <int64>
>>> f.iter_element().map_all({0: 200, 1: -1, 2: 45})
<Frame>
<Index> a       b       c       <<U1>
<Index>
p       -1      45      -1
q       45      -1      200
r       200     45      45
s       200     200     -1
<<U1>   <int64> <int64> <int64>
#end_Frame-iter_element().map_all()

#start_Frame-iter_element().map_all_iter()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          1       2       1
q          2       1       0
r          0       2       2
s          0       0       1
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_element().map_all_iter({0: 200, 1: -1, 2: 45}))
(-1, 45, -1, 45, -1, 200, 200, 45, 45, 200, 200, -1)
#end_Frame-iter_element().map_all_iter()

#start_Frame-iter_element().map_all_iter_items()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          1       2       1
q          2       1       0
r          0       2       2
s          0       0       1
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_element().map_all_iter_items({0: 200, 1: -1, 2: 45}))
((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), 200), (('r', 'a'), 200), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), 200), (('s', 'b'), 200), (('s', 'c'), -1))
#end_Frame-iter_element().map_all_iter_items()

#start_Frame-iter_element().map_any()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          1       2       1
q          2       1       0
r          0       2       2
s          0       0       1
<<U1>      <int64> <int64> <int64>
>>> f.iter_element().map_any({1: -1, 2: 45})
<Frame>
<Index> a       b       c       <<U1>
<Index>
p       -1      45      -1
q       45      -1      0
r       0       45      45
s       0       0       -1
<<U1>   <int64> <int64> <int64>
#end_Frame-iter_element().map_any()

#start_Frame-iter_element().map_any_iter()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          1       2       1
q          2       1       0
r          0       2       2
s          0       0       1
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_element().map_any_iter({1: -1, 2: 45}))
(-1, 45, -1, 45, -1, 0, 0, 45, 45, 0, 0, -1)
#end_Frame-iter_element().map_any_iter()

#start_Frame-iter_element().map_any_iter_items()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          1       2       1
q          2       1       0
r          0       2       2
s          0       0       1
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_element().map_any_iter_items({1: -1, 2: 45}))
((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), 0), (('r', 'a'), 0), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), 0), (('s', 'b'), 0), (('s', 'c'), -1))
#end_Frame-iter_element().map_any_iter_items()

#start_Frame-iter_element().map_fill()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          1       2       1
q          2       1       0
r          0       2       2
s          0       0       1
<<U1>      <int64> <int64> <int64>
>>> f.iter_element().map_fill({1: -1, 2: 45}, fill_value=np.nan)
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       -1.0      45.0      -1.0
q       45.0      -1.0      nan
r       nan       45.0      45.0
s       nan       nan       -1.0
<<U1>   <float64> <float64> <float64>
#end_Frame-iter_element().map_fill()

#start_Frame-iter_element().map_fill_iter()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          1       2       1
q          2       1       0
r          0       2       2
s          0       0       1
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_element().map_fill_iter({1: -1, 2: 45}, fill_value=np.nan))
(-1, 45, -1, 45, -1, nan, nan, 45, 45, nan, nan, -1)
#end_Frame-iter_element().map_fill_iter()

#start_Frame-iter_element().map_fill_iter_items()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          1       2       1
q          2       1       0
r          0       2       2
s          0       0       1
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_element().map_fill_iter_items({1: -1, 2: 45}, fill_value=np.nan))
((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), nan), (('r', 'a'), nan), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), nan), (('s', 'b'), nan), (('s', 'c'), -1))
#end_Frame-iter_element().map_fill_iter_items()

#start_Frame-iter_element_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element_items())
((('p', 'a'), 10), (('p', 'b'), 8), (('p', 'c'), 1), (('q', 'a'), -2), (('q', 'b'), -3), (('q', 'c'), 0), (('r', 'a'), 0), (('r', 'b'), 8), (('r', 'c'), 9), (('s', 'a'), 0), (('s', 'b'), 0), (('s', 'c'), 12))
#end_Frame-iter_element_items()

#start_Frame-iter_element_items().apply()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element_items().apply(lambda k, v: v > 1 if k != ('q', 'b') else 'x')
<Frame>
<Index> a      b        c      <<U1>
<Index>
p       False  True     False
q       True   x        False
r       False  True     True
s       False  False    False
<<U1>   <bool> <object> <bool>
#end_Frame-iter_element_items().apply()

#start_Frame-iter_element_items().apply_iter()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element_items().apply_iter(lambda k, v: v > 1 if k != ('q', 'b') else 'x'))
(False, True, False, True, 'x', False, False, True, True, False, False, False)
#end_Frame-iter_element_items().apply_iter()

#start_Frame-iter_element_items().apply_iter_items()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element_items().apply_iter_items(lambda k, v: v > 1 if k != ('q', 'b') else 'x'))
((('p', 'a'), False), (('p', 'b'), True), (('p', 'c'), False), (('q', 'a'), True), (('q', 'b'), 'x'), (('q', 'c'), False), (('r', 'a'), False), (('r', 'b'), True), (('r', 'c'), True), (('s', 'a'), False), (('s', 'b'), False), (('s', 'c'), False))
#end_Frame-iter_element_items().apply_iter_items()

#start_Frame-iter_element_items().apply_pool()
>>> def func(pair): return pair[1] > 0 and pair[0] == ('q', 'b')
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element_items().apply_pool(func, use_threads=True)
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       False  True   False
r       False  False  False
s       False  False  False
<<U1>   <bool> <bool> <bool>
#end_Frame-iter_element_items().apply_pool()

#start_Frame-iter_element_items().map_all()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> f.iter_element_items().map_all({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1})
<Frame>
<Index> a       b       <<U1>
<Index>
p       200     -1
q       45      1
<<U1>   <int64> <int64>
#end_Frame-iter_element_items().map_all()

#start_Frame-iter_element_items().map_all_iter()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_element_items().map_all_iter({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1}))
(200, -1, 45, 1)
#end_Frame-iter_element_items().map_all_iter()

#start_Frame-iter_element_items().map_all_iter_items()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_element_items().map_all_iter_items({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1}))
((('p', 'a'), 200), (('p', 'b'), -1), (('q', 'a'), 45), (('q', 'b'), 1))
#end_Frame-iter_element_items().map_all_iter_items()

#start_Frame-iter_element_items().map_any()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> f.iter_element_items().map_any({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1})
<Frame>
<Index> a       b       <<U1>
<Index>
p       200     3
q       9       1
<<U1>   <int64> <int64>
#end_Frame-iter_element_items().map_any()

#start_Frame-iter_element_items().map_any_iter()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_element_items().map_any_iter({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}))
(200, 3, 9, 1)
#end_Frame-iter_element_items().map_any_iter()

#start_Frame-iter_element_items().map_any_iter_items()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_element_items().map_any_iter_items({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}))
((('p', 'a'), 200), (('p', 'b'), 3), (('q', 'a'), 9), (('q', 'b'), 1))
#end_Frame-iter_element_items().map_any_iter_items()

#start_Frame-iter_element_items().map_fill()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> f.iter_element_items().map_fill({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1)
<Frame>
<Index> a       b       <<U1>
<Index>
p       200     -1
q       -1      1
<<U1>   <int64> <int64>
#end_Frame-iter_element_items().map_fill()

#start_Frame-iter_element_items().map_fill_iter()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_element_items().map_fill_iter({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1))
(200, -1, -1, 1)
#end_Frame-iter_element_items().map_fill_iter()

#start_Frame-iter_element_items().map_fill_iter_items()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_element_items().map_fill_iter_items({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1))
((('p', 'a'), 200), (('p', 'b'), -1), (('q', 'a'), -1), (('q', 'b'), 1))
#end_Frame-iter_element_items().map_fill_iter_items()

#start_Frame-iter_group()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group('c'))
(<Frame>
<Index> a       b       c       <<U1>
<Index>
0       11      0       0
2       10      3       0
<int64> <int64> <int64> <int64>, <Frame>
<Index> a       b       c       <<U1>
<Index>
1       4       8       1
3       2       8       1
<int64> <int64> <int64> <int64>)
#end_Frame-iter_group()

#start_Frame-iter_group().apply()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group('c').apply(lambda f: f['b'].sum())
<Series>
<Index: c>
0          3
1          16
<int64>    <int64>
#end_Frame-iter_group().apply()

#start_Frame-iter_group().apply_iter()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group('c').apply_iter(lambda f: f['b'].sum()))
(3, 16)
#end_Frame-iter_group().apply_iter()

#start_Frame-iter_group().apply_iter_items()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group('c').apply_iter_items(lambda f: f['b'].sum()))
((0, 3), (1, 16))
#end_Frame-iter_group().apply_iter_items()

#start_Frame-iter_group().apply_pool()
>>> def func(f): return f['b'].sum()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group('c').apply_pool(func, use_threads=True)
<Series>
<Index: c>
0          3
1          16
<int64>    <int64>
#end_Frame-iter_group().apply_pool()

#start_Frame-iter_group_array()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array('c'))
(array([[11,  0,  0],
       [10,  3,  0]]), array([[4, 8, 1],
       [2, 8, 1]]))
#end_Frame-iter_group_array()

#start_Frame-iter_group_array().apply()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_array('c').apply(lambda a: np.sum(a))
<Series>
<Index: c>
0          24
1          24
<int64>    <int64>
#end_Frame-iter_group_array().apply()

#start_Frame-iter_group_array().apply_iter()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array('c').apply_iter(lambda a: np.sum(a)))
(24, 24)
#end_Frame-iter_group_array().apply_iter()

#start_Frame-iter_group_array().apply_iter_items()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array('c').apply_iter_items(lambda a: np.sum(a)))
((0, 24), (1, 24))
#end_Frame-iter_group_array().apply_iter_items()

#start_Frame-iter_group_array().apply_pool()
>>> def func(a): return np.sum(a)
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_array('c').apply_pool(func, use_threads=True)
<Series>
<Index: c>
0          24
1          24
<int64>    <int64>
#end_Frame-iter_group_array().apply_pool()

#start_Frame-iter_group_array_items()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array_items('c'))
((0, array([[11,  0,  0],
       [10,  3,  0]])), (1, array([[4, 8, 1],
       [2, 8, 1]])))
#end_Frame-iter_group_array_items()

#start_Frame-iter_group_array_items().apply()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_array_items('c').apply(lambda k, v: np.sum(v) if k == 0 else v.shape)
<Series>
<Index: c>
0          24
1          (2, 3)
<int64>    <object>
#end_Frame-iter_group_array_items().apply()

#start_Frame-iter_group_array_items().apply_iter()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array_items('c').apply_iter(lambda k, v: np.sum(v) if k == 0 else v.shape))
(24, (2, 3))
#end_Frame-iter_group_array_items().apply_iter()

#start_Frame-iter_group_array_items().apply_iter_items()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array_items('c').apply_iter_items(lambda k, v: np.sum(v) if k == 0 else v.shape))
((0, 24), (1, (2, 3)))
#end_Frame-iter_group_array_items().apply_iter_items()

#start_Frame-iter_group_items()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_items('c'))
((0, <Frame>
<Index> a       b       c       <<U1>
<Index>
0       11      0       0
2       10      3       0
<int64> <int64> <int64> <int64>), (1, <Frame>
<Index> a       b       c       <<U1>
<Index>
1       4       8       1
3       2       8       1
<int64> <int64> <int64> <int64>))
#end_Frame-iter_group_items()

#start_Frame-iter_group_items().apply()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_items('c').apply(lambda k, v: v['b'].sum() if k == 0 else v.shape)
<Series>
<Index: c>
0          3
1          (2, 3)
<int64>    <object>
#end_Frame-iter_group_items().apply()

#start_Frame-iter_group_items().apply_iter()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_items('c').apply_iter(lambda k, v: v['b'].sum() if k == 0 else v.shape))
(3, (2, 3))
#end_Frame-iter_group_items().apply_iter()

#start_Frame-iter_group_items().apply_iter_items()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_items('c').apply_iter_items(lambda k, v: v['b'].sum() if k == 0 else v.shape))
((0, 3), (1, (2, 3)))
#end_Frame-iter_group_items().apply_iter_items()

#start_Frame-iter_group_labels()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels(1))
(<Frame>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
1                p     8       True   1517-12-31
<int64>          <<U1> <int64> <bool> <datetime64[D]>, <Frame>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                q     2       True   1517-04-01
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>)
#end_Frame-iter_group_labels()

#start_Frame-iter_group_labels().apply()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels(1).apply(lambda f: f['b'].sum())
<Series>
<Index>
p        1
q        1
<<U1>    <int64>
#end_Frame-iter_group_labels().apply()

#start_Frame-iter_group_labels().apply_iter()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels(1).apply_iter(lambda f: f['b'].sum()))
(1, 1)
#end_Frame-iter_group_labels().apply_iter()

#start_Frame-iter_group_labels().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels(1).apply_iter_items(lambda f: f['b'].sum()))
(('p', 1), ('q', 1))
#end_Frame-iter_group_labels().apply_iter_items()

#start_Frame-iter_group_labels_array()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array(1))
(array([[10, False, datetime.date(1517, 1, 1)],
       [8, True, datetime.date(1517, 12, 31)]], dtype=object), array([[2, True, datetime.date(1517, 4, 1)],
       [3, False, datetime.date(1517, 6, 30)]], dtype=object))
#end_Frame-iter_group_labels_array()

#start_Frame-iter_group_labels_array().apply()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels_array(1).apply(lambda a: np.sum(a[:, 0]))
<Series>
<Index>
p        18
q        5
<<U1>    <int64>
#end_Frame-iter_group_labels_array().apply()

#start_Frame-iter_group_labels_array().apply_iter()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array(1).apply_iter(lambda a: np.sum(a[:, 0])))
(18, 5)
#end_Frame-iter_group_labels_array().apply_iter()

#start_Frame-iter_group_labels_array().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array(1).apply_iter_items(lambda a: np.sum(a[:, 0])))
(('p', 18), ('q', 5))
#end_Frame-iter_group_labels_array().apply_iter_items()

#start_Frame-iter_group_labels_array_items()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array_items(1))
(('p', array([[10, False, datetime.date(1517, 1, 1)],
       [8, True, datetime.date(1517, 12, 31)]], dtype=object)), ('q', array([[2, True, datetime.date(1517, 4, 1)],
       [3, False, datetime.date(1517, 6, 30)]], dtype=object)))
#end_Frame-iter_group_labels_array_items()

#start_Frame-iter_group_labels_array_items().apply()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels_array_items(1).apply(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1)
<Series>
<Index>
p        -1
q        5
<<U1>    <int64>
#end_Frame-iter_group_labels_array_items().apply()

#start_Frame-iter_group_labels_array_items().apply_iter()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array_items(1).apply_iter(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1))
(-1, 5)
#end_Frame-iter_group_labels_array_items().apply_iter()

#start_Frame-iter_group_labels_array_items().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array_items(1).apply_iter_items(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1))
(('p', -1), ('q', 5))
#end_Frame-iter_group_labels_array_items().apply_iter_items()

#start_Frame-iter_group_labels_items()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_items(1))
(('p', <Frame>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
1                p     8       True   1517-12-31
<int64>          <<U1> <int64> <bool> <datetime64[D]>), ('q', <Frame>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                q     2       True   1517-04-01
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>))
#end_Frame-iter_group_labels_items()

#start_Frame-iter_group_labels_items().apply()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels_items(1).apply(lambda k, v: v['b'].sum() if k == 'p' else -1)
<Series>
<Index>
p        1
q        -1
<<U1>    <int64>
#end_Frame-iter_group_labels_items().apply()

#start_Frame-iter_group_labels_items().apply_iter()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_items(1).apply_iter(lambda k, v: v['b'].sum() if k == 'p' else -1))
(1, -1)
#end_Frame-iter_group_labels_items().apply_iter()

#start_Frame-iter_group_labels_items().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_items(1).apply_iter_items(lambda k, v: v['b'].sum() if k == 'p' else -1))
(('p', 1), ('q', -1))
#end_Frame-iter_group_labels_items().apply_iter_items()

#start_Frame-iter_series()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series())
(<Series: a>
<Index>
p           10
q           -2
r           0
s           0
<<U1>       <int64>, <Series: b>
<Index>
p           8
q           -3
r           8
s           0
<<U1>       <int64>, <Series: c>
<Index>
p           1
q           0
r           9
s           12
<<U1>       <int64>)
#end_Frame-iter_series()

#start_Frame-iter_series().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series().apply(lambda v: v.sum())
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_Frame-iter_series().apply()

#start_Frame-iter_series().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series().apply_iter(lambda v: v.sum()))
(8, 13, 22)
#end_Frame-iter_series().apply_iter()

#start_Frame-iter_series().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series().apply_iter_items(lambda v: v.sum()))
(('a', 8), ('b', 13), ('c', 22))
#end_Frame-iter_series().apply_iter_items()

#start_Frame-iter_series().apply_pool()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series().apply_pool(lambda v: v.sum(), use_threads=True)
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_Frame-iter_series().apply_pool()

#start_Frame-iter_series_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series_items())
(('a', <Series: a>
<Index>
p           10
q           -2
r           0
s           0
<<U1>       <int64>), ('b', <Series: b>
<Index>
p           8
q           -3
r           8
s           0
<<U1>       <int64>), ('c', <Series: c>
<Index>
p           1
q           0
r           9
s           12
<<U1>       <int64>))
#end_Frame-iter_series_items()

#start_Frame-iter_series_items().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series_items().apply(lambda k, v: v.sum() if k != 'b' else -1)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_Frame-iter_series_items().apply()

#start_Frame-iter_series_items().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series_items().apply_iter(lambda k, v: v.sum() if k != 'b' else -1))
(8, -1, 22)
#end_Frame-iter_series_items().apply_iter()

#start_Frame-iter_series_items().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series_items().apply_iter_items(lambda k, v: v.sum() if k != 'b' else -1))
(('a', 8), ('b', -1), ('c', 22))
#end_Frame-iter_series_items().apply_iter_items()

#start_Frame-iter_series_items().apply_pool()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series_items().apply_pool(lambda pair: pair[1].sum() if pair[0] != 'b' else -1, use_threads=True)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_Frame-iter_series_items().apply_pool()

#start_Frame-iter_tuple()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple())
(Axis(p=10, q=-2, r=0, s=0), Axis(p=8, q=-3, r=8, s=0), Axis(p=1, q=0, r=9, s=12))
#end_Frame-iter_tuple()

#start_Frame-iter_tuple().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_tuple().apply(lambda v: v.p + v.q)
<Series>
<Index>
a        8
b        5
c        1
<<U1>    <int64>
#end_Frame-iter_tuple().apply()

#start_Frame-iter_tuple().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple().apply_iter(lambda v: v.p + v.q))
(8, 5, 1)
#end_Frame-iter_tuple().apply_iter()

#start_Frame-iter_tuple().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple().apply_iter_items(lambda v: v.p + v.q))
(('a', 8), ('b', 5), ('c', 1))
#end_Frame-iter_tuple().apply_iter_items()

#start_Frame-iter_tuple().map_all()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> f.iter_tuple().map_all({(2, 9): -1, (3, 8): -2})
<Series>
<Index>
a        -1
b        -2
<<U1>    <int64>
#end_Frame-iter_tuple().map_all()

#start_Frame-iter_tuple().map_all_iter()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple().map_all_iter({(2, 9): -1, (3, 8): -2}))
(-1, -2)
#end_Frame-iter_tuple().map_all_iter()

#start_Frame-iter_tuple().map_all_iter_items()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple().map_all_iter_items({(2, 9): -1, (3, 8): -2}))
(('a', -1), ('b', -2))
#end_Frame-iter_tuple().map_all_iter_items()

#start_Frame-iter_tuple().map_any()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple().map_any({(2, 9): -1}))
('a', 'b')
#end_Frame-iter_tuple().map_any()

#start_Frame-iter_tuple().map_any_iter()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple().map_any_iter({(2, 9): -1}))
(-1, Axis(p=3, q=8))
#end_Frame-iter_tuple().map_any_iter()

#start_Frame-iter_tuple().map_any_iter_items()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple().map_any_iter_items({(2, 9): -1}))
(('a', -1), ('b', Axis(p=3, q=8)))
#end_Frame-iter_tuple().map_any_iter_items()

#start_Frame-iter_tuple().map_fill()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> f.iter_tuple().map_fill({(2, 9): -1}, fill_value=np.nan)
<Series>
<Index>
a        -1.0
b        nan
<<U1>    <float64>
#end_Frame-iter_tuple().map_fill()

#start_Frame-iter_tuple().map_fill_iter()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple().map_fill_iter({(2, 9): -1}, fill_value=np.nan))
(-1, nan)
#end_Frame-iter_tuple().map_fill_iter()

#start_Frame-iter_tuple().map_fill_iter_items()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple().map_fill_iter_items({(2, 9): -1}, fill_value=np.nan))
(('a', -1), ('b', nan))
#end_Frame-iter_tuple().map_fill_iter_items()

#start_Frame-iter_tuple_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple_items())
(('a', Axis(p=10, q=-2, r=0, s=0)), ('b', Axis(p=8, q=-3, r=8, s=0)), ('c', Axis(p=1, q=0, r=9, s=12)))
#end_Frame-iter_tuple_items()

#start_Frame-iter_tuple_items().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_tuple_items().apply(lambda k, v: v.p + v.q if k == 'b' else -1)
<Series>
<Index>
a        -1
b        5
c        -1
<<U1>    <int64>
#end_Frame-iter_tuple_items().apply()

#start_Frame-iter_tuple_items().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple_items().apply_iter(lambda k, v: v.p + v.q if k == 'b' else -1))
(-1, 5, -1)
#end_Frame-iter_tuple_items().apply_iter()

#start_Frame-iter_tuple_items().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple_items().apply_iter_items(lambda k, v: v.p + v.q if k == 'b' else -1))
(('a', -1), ('b', 5), ('c', -1))
#end_Frame-iter_tuple_items().apply_iter_items()

#start_Frame-iter_tuple_items().map_all()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> f.iter_tuple_items().map_all({('a', (2, 9)): -1, ('b', (3, 8)): -2})
<Series>
<Index>
a        -1
b        -2
<<U1>    <int64>
#end_Frame-iter_tuple_items().map_all()

#start_Frame-iter_tuple_items().map_all_iter()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple_items().map_all_iter({('a', (2, 9)): -1, ('b', (3, 8)): -2}))
(-1, -2)
#end_Frame-iter_tuple_items().map_all_iter()

#start_Frame-iter_tuple_items().map_all_iter_items()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple_items().map_all_iter_items({('a', (2, 9)): -1, ('b', (3, 8)): -2}))
(('a', -1), ('b', -2))
#end_Frame-iter_tuple_items().map_all_iter_items()

#start_Frame-iter_tuple_items().map_any()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> f.iter_tuple_items().map_any({('a', (2, 9)): -1})
<Series>
<Index>
a        -1
b        Axis(p=3, q=8)
<<U1>    <object>
#end_Frame-iter_tuple_items().map_any()

#start_Frame-iter_tuple_items().map_any_iter()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple_items().map_any_iter({('a', (2, 9)): -1}))
(-1, Axis(p=3, q=8))
#end_Frame-iter_tuple_items().map_any_iter()

#start_Frame-iter_tuple_items().map_any_iter_items()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple_items().map_any_iter_items({('a', (2, 9)): -1}))
(('a', -1), ('b', Axis(p=3, q=8)))
#end_Frame-iter_tuple_items().map_any_iter_items()

#start_Frame-iter_tuple_items().map_fill()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> f.iter_tuple_items().map_fill({('a', (2, 9)): -1}, fill_value=np.nan)
<Series>
<Index>
a        -1.0
b        nan
<<U1>    <float64>
#end_Frame-iter_tuple_items().map_fill()

#start_Frame-iter_tuple_items().map_fill_iter()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple_items().map_fill_iter({('a', (2, 9)): -1}, fill_value=np.nan))
(-1, nan)
#end_Frame-iter_tuple_items().map_fill_iter()

#start_Frame-iter_tuple_items().map_fill_iter_items()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple_items().map_fill_iter_items({('a', (2, 9)): -1}, fill_value=np.nan))
(('a', -1), ('b', nan))
#end_Frame-iter_tuple_items().map_fill_iter_items()

#start_Frame-iter_window()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window(size=2, step=1))
(<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
<<U1>      <int64> <int64> <int64>, <Frame: x>
<Index>    a       b       c       <<U1>
<Index>
q          -2      -3      0
r          0       8       9
<<U1>      <int64> <int64> <int64>, <Frame: x>
<Index>    a       b       c       <<U1>
<Index>
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>)
#end_Frame-iter_window()

#start_Frame-iter_window().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.iter_window(size=2, step=1).apply(lambda f: f.max().max())
<Series>
<Index>
q        10
r        9
s        12
<<U1>    <int64>
#end_Frame-iter_window().apply()

#start_Frame-iter_window().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window(size=2, step=1).apply_iter(lambda f: f.max().max()))
(10, 9, 12)
#end_Frame-iter_window().apply_iter()

#start_Frame-iter_window().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window(size=2, step=1).apply_iter_items(lambda f: f.max().max()))
(('q', 10), ('r', 9), ('s', 12))
#end_Frame-iter_window().apply_iter_items()

#start_Frame-iter_window_array()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window_array(size=2, step=1))
(array([[10,  8,  1],
       [-2, -3,  0]]), array([[-2, -3,  0],
       [ 0,  8,  9]]), array([[ 0,  8,  9],
       [ 0,  0, 12]]))
#end_Frame-iter_window_array()

#start_Frame-iter_window_array().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.iter_window_array(size=2, step=1).apply(lambda a: np.max(a))
<Series>
<Index>
q        10
r        9
s        12
<<U1>    <int64>
#end_Frame-iter_window_array().apply()

#start_Frame-iter_window_array().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window_array(size=2, step=1).apply_iter(lambda a: np.max(a)))
(10, 9, 12)
#end_Frame-iter_window_array().apply_iter()

#start_Frame-iter_window_array().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window_array(size=2, step=1).apply_iter_items(lambda a: np.max(a)))
(('q', 10), ('r', 9), ('s', 12))
#end_Frame-iter_window_array().apply_iter_items()

#start_Frame-iter_window_array_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window_array_items(size=2, step=1))
(('q', array([[10,  8,  1],
       [-2, -3,  0]])), ('r', array([[-2, -3,  0],
       [ 0,  8,  9]])), ('s', array([[ 0,  8,  9],
       [ 0,  0, 12]])))
#end_Frame-iter_window_array_items()

#start_Frame-iter_window_array_items().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.iter_window_array_items(size=2, step=1).apply(lambda k, v: np.max(v) if k == 'r' else np.min(v))
<Series>
<Index>
q        -3
r        9
s        0
<<U1>    <int64>
#end_Frame-iter_window_array_items().apply()

#start_Frame-iter_window_array_items().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window_array_items(size=2, step=1).apply_iter(lambda k, v: np.max(v) if k == 'r' else np.min(v)))
(-3, 9, 0)
#end_Frame-iter_window_array_items().apply_iter()

#start_Frame-iter_window_array_items().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window_array_items(size=2, step=1).apply_iter_items(lambda k, v: np.max(v) if k == 'r' else np.min(v)))
(('q', -3), ('r', 9), ('s', 0))
#end_Frame-iter_window_array_items().apply_iter_items()

#start_Frame-iter_window_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window_items(size=2, step=1))
(('q', <Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
<<U1>      <int64> <int64> <int64>), ('r', <Frame: x>
<Index>    a       b       c       <<U1>
<Index>
q          -2      -3      0
r          0       8       9
<<U1>      <int64> <int64> <int64>), ('s', <Frame: x>
<Index>    a       b       c       <<U1>
<Index>
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>))
#end_Frame-iter_window_items()

#start_Frame-iter_window_items().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.iter_window_items(size=2, step=1).apply(lambda k, v: v.max().max() if k == 'r' else v.min().min())
<Series>
<Index>
q        -3
r        9
s        0
<<U1>    <int64>
#end_Frame-iter_window_items().apply()

#start_Frame-iter_window_items().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window_items(size=2, step=1).apply_iter(lambda k, v: v.max().max() if k == 'r' else v.min().min()))
(-3, 9, 0)
#end_Frame-iter_window_items().apply_iter()

#start_Frame-iter_window_items().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window_items(size=2, step=1).apply_iter_items(lambda k, v: v.max().max() if k == 'r' else v.min().min()))
(('q', -3), ('r', 9), ('s', 0))
#end_Frame-iter_window_items().apply_iter_items()

#start_Frame-__add__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 + 8
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          18      16      9
q          6       5       8
r          8       16      17
s          8       8       20
<<U1>      <int64> <int64> <int64>
>>> f1 + f2
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       12.0      11.0      nan
q       7.0       5.0       nan
r       nan       nan       nan
s       nan       nan       nan
<<U1>   <float64> <float64> <float64>
#end_Frame-__add__()

#start_Frame-__and__()
>>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> f & True
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          False  True
q          True   True
r          True   False
<<U1>      <bool> <bool>
>>> f & (True, False)
<Frame>
<Index> a      b      <<U1>
<Index>
p       False  False
q       True   False
r       True   False
<<U1>   <bool> <bool>
#end_Frame-__and__()

#start_Frame-__eq__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 == 8
<Frame: x>
<Index>    a      b      c      <<U1>
<Index>
p          False  True   False
q          False  False  False
r          False  True   False
s          False  False  False
<<U1>      <bool> <bool> <bool>
>>> f1 == f2
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       False  False  False
r       False  False  False
s       False  False  False
<<U1>   <bool> <bool> <bool>
#end_Frame-__eq__()

#start_Frame-__floordiv__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 // 8
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          1       1       0
q          -1      -1      0
r          0       1       1
s          0       0       1
<<U1>      <int64> <int64> <int64>
>>> f1 // f2
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       5.0       2.0       nan
q       -1.0      -1.0      nan
r       nan       nan       nan
s       nan       nan       nan
<<U1>   <float64> <float64> <float64>
#end_Frame-__floordiv__()

#start_Frame-__ge__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 >= 8
<Frame: x>
<Index>    a      b      c      <<U1>
<Index>
p          True   True   False
q          False  False  False
r          False  True   True
s          False  False  True
<<U1>      <bool> <bool> <bool>
>>> f1 >= f2
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   True   False
q       False  False  False
r       False  False  False
s       False  False  False
<<U1>   <bool> <bool> <bool>
#end_Frame-__ge__()

#start_Frame-__gt__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 > 8
<Frame: x>
<Index>    a      b      c      <<U1>
<Index>
p          True   False  False
q          False  False  False
r          False  False  True
s          False  False  True
<<U1>      <bool> <bool> <bool>
>>> f1 > f2
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   True   False
q       False  False  False
r       False  False  False
s       False  False  False
<<U1>   <bool> <bool> <bool>
#end_Frame-__gt__()

#start_Frame-__le__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 <= 8
<Frame: x>
<Index>    a      b      c      <<U1>
<Index>
p          False  True   True
q          True   True   True
r          True   True   False
s          True   True   False
<<U1>      <bool> <bool> <bool>
>>> f1 <= f2
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       True   True   False
r       False  False  False
s       False  False  False
<<U1>   <bool> <bool> <bool>
#end_Frame-__le__()

#start_Frame-__lt__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 < 8
<Frame: x>
<Index>    a      b      c      <<U1>
<Index>
p          False  False  True
q          True   True   True
r          True   False  False
s          True   True   False
<<U1>      <bool> <bool> <bool>
>>> f1 < f2
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       True   True   False
r       False  False  False
s       False  False  False
<<U1>   <bool> <bool> <bool>
#end_Frame-__lt__()

#start_Frame-__matmul__()
>>> f1 = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f1 @ f2
<Frame>
<Index> x       y       <<U1>
<Index>
p       23      14
q       6       4
r       40      24
s       20      12
<<U1>   <int64> <int64>
#end_Frame-__matmul__()

#start_Frame-__mod__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 % 8
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          2       0       1
q          6       5       0
r          0       0       1
s          0       0       4
<<U1>      <int64> <int64> <int64>
>>> f1 % f2
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       0.0       2.0       nan
q       7.0       5.0       nan
r       nan       nan       nan
s       nan       nan       nan
<<U1>   <float64> <float64> <float64>
#end_Frame-__mod__()

#start_Frame-__mul__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 * 8
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          80      64      8
q          -16     -24     0
r          0       64      72
s          0       0       96
<<U1>      <int64> <int64> <int64>
>>> f1 * f2
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       20.0      24.0      nan
q       -18.0     -24.0     nan
r       nan       nan       nan
s       nan       nan       nan
<<U1>   <float64> <float64> <float64>
#end_Frame-__mul__()

#start_Frame-__ne__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 != 8
<Frame: x>
<Index>    a      b      c      <<U1>
<Index>
p          True   False  True
q          True   True   True
r          True   False  True
s          True   True   True
<<U1>      <bool> <bool> <bool>
>>> f1 != f2
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   True   True
q       True   True   True
r       True   True   True
s       True   True   True
<<U1>   <bool> <bool> <bool>
#end_Frame-__ne__()

#start_Frame-__or__()
>>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> f | True
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          True   True
q          True   True
r          True   True
<<U1>      <bool> <bool>
>>> f | (True, False)
<Frame>
<Index> a      b      <<U1>
<Index>
p       True   True
q       True   True
r       True   False
<<U1>   <bool> <bool>
#end_Frame-__or__()

#start_Frame-__pow__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 ** 8
<Frame: x>
<Index>    a         b        c         <<U1>
<Index>
p          100000000 16777216 1
q          256       6561     0
r          0         16777216 43046721
s          0         0        429981696
<<U1>      <int64>   <int64>  <int64>
>>> f1 ** f2
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       100.0     512.0     1.0
q       -512.0    6561.0    nan
r       nan       nan       nan
s       nan       nan       nan
<<U1>   <float64> <float64> <float64>
#end_Frame-__pow__()

#start_Frame-__radd__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 + f1
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          18      16      9
q          6       5       8
r          8       16      17
s          8       8       20
<<U1>      <int64> <int64> <int64>
#end_Frame-__radd__()

#start_Frame-__rfloordiv__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 // f1
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          0       1       8
q          -4      -3      0
r          0       1       0
s          0       0       0
<<U1>      <int64> <int64> <int64>
#end_Frame-__rfloordiv__()

#start_Frame-__rmatmul__()
>>> f1 = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f1 @ f2
<Frame>
<Index> x       y       <<U1>
<Index>
p       23      14
q       6       4
r       40      24
s       20      12
<<U1>   <int64> <int64>
#end_Frame-__rmatmul__()

#start_Frame-__rmul__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 * f1
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          80      64      8
q          -16     -24     0
r          0       64      72
s          0       0       96
<<U1>      <int64> <int64> <int64>
#end_Frame-__rmul__()

#start_Frame-__rshift__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f1 >> 1
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          5       4       0
q          -1      -2      0
r          0       4       4
s          0       0       6
<<U1>      <int64> <int64> <int64>
#end_Frame-__rshift__()

#start_Frame-__rsub__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 - f1
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          -2      0       7
q          10      11      8
r          8       0       -1
s          8       8       -4
<<U1>      <int64> <int64> <int64>
#end_Frame-__rsub__()

#start_Frame-__rtruediv__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 / f1
<Frame: x>
<Index>    a         b                   c                  <<U1>
<Index>
p          0.8       1.0                 8.0
q          -4.0      -2.6666666666666665 inf
r          inf       1.0                 0.8888888888888888
s          inf       inf                 0.6666666666666666
<<U1>      <float64> <float64>           <float64>
#end_Frame-__rtruediv__()

#start_Frame-__sub__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 - 8
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          2       0       -7
q          -10     -11     -8
r          -8      0       1
s          -8      -8      4
<<U1>      <int64> <int64> <int64>
>>> f1 - f2
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       8.0       5.0       nan
q       -11.0     -11.0     nan
r       nan       nan       nan
s       nan       nan       nan
<<U1>   <float64> <float64> <float64>
#end_Frame-__sub__()

#start_Frame-__truediv__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 / 8
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
p          1.25      1.0       0.125
q          -0.25     -0.375    0.0
r          0.0       1.0       1.125
s          0.0       0.0       1.5
<<U1>      <float64> <float64> <float64>
>>> f1 / f2
<Frame>
<Index> a                   b                  c         <<U1>
<Index>
p       5.0                 2.6666666666666665 nan
q       -0.2222222222222222 -0.375             nan
r       nan                 nan                nan
s       nan                 nan                nan
<<U1>   <float64>           <float64>          <float64>
#end_Frame-__truediv__()

#start_Frame-__xor__()
>>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> f ^ True
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          True   False
q          False  False
r          False  True
<<U1>      <bool> <bool>
>>> f ^ (True, False)
<Frame>
<Index> a      b      <<U1>
<Index>
p       True   True
q       False  True
r       False  False
<<U1>   <bool> <bool>
#end_Frame-__xor__()

#start_Frame-__abs__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> abs(f)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          2       3       0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
#end_Frame-__abs__()

#start_Frame-__invert__()
>>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> ~f
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          True   False
q          False  False
r          False  True
<<U1>      <bool> <bool>
#end_Frame-__invert__()

#start_Frame-__neg__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> -f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          -10     -8      -1
q          2       3       0
r          0       -8      -9
s          0       0       -12
<<U1>      <int64> <int64> <int64>
#end_Frame-__neg__()

#start_Frame-__pos__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> +f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
#end_Frame-__pos__()

#start_Frame-via_dt.year
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.year
<Frame>
<Index> a       b       <<U1>
<Index>
p       1517    2022
q       1517    2021
r       1517    2022
<<U1>   <int64> <int64>
#end_Frame-via_dt.year

#start_Frame-via_dt.month
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.month
<Frame>
<Index> a       b       <<U1>
<Index>
p       4       4
q       12      12
r       6       6
<<U1>   <int64> <int64>
#end_Frame-via_dt.month

#start_Frame-via_dt.day
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.day
<Frame>
<Index> a       b       <<U1>
<Index>
p       1       1
q       31      31
r       30      30
<<U1>   <int64> <int64>
#end_Frame-via_dt.day

#start_Frame-via_dt.hour
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.hour
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       0
q       0       0
r       0       0
<<U1>   <int64> <int64>
#end_Frame-via_dt.hour

#start_Frame-via_dt.minute
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.minute
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       0
q       0       0
r       0       0
<<U1>   <int64> <int64>
#end_Frame-via_dt.minute

#start_Frame-via_dt.second
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.second
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       0
q       0       0
r       0       0
<<U1>   <int64> <int64>
#end_Frame-via_dt.second

#start_Frame-via_dt.weekday()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.weekday()
<Frame>
<Index> a       b       <<U1>
<Index>
p       6       4
q       0       4
r       5       3
<<U1>   <int64> <int64>
#end_Frame-via_dt.weekday()

#start_Frame-via_dt.quarter()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.quarter()
<Frame>
<Index> a       b       <<U1>
<Index>
p       2       2
q       4       4
r       2       2
<<U1>   <int64> <int64>
#end_Frame-via_dt.quarter()

#start_Frame-via_dt.is_month_end()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_month_end()
<Frame>
<Index> a      b      <<U1>
<Index>
p       False  False
q       True   True
r       True   True
<<U1>   <bool> <bool>
#end_Frame-via_dt.is_month_end()

#start_Frame-via_dt.is_month_start()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_month_start()
<Frame>
<Index> a      b      <<U1>
<Index>
p       True   True
q       False  False
r       False  False
<<U1>   <bool> <bool>
#end_Frame-via_dt.is_month_start()

#start_Frame-via_dt.is_year_end()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_year_end()
<Frame>
<Index> a      b      <<U1>
<Index>
p       False  False
q       True   True
r       False  False
<<U1>   <bool> <bool>
#end_Frame-via_dt.is_year_end()

#start_Frame-via_dt.is_year_start()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_year_start()
<Frame>
<Index> a      b      <<U1>
<Index>
p       False  False
q       False  False
r       False  False
<<U1>   <bool> <bool>
#end_Frame-via_dt.is_year_start()

#start_Frame-via_dt.is_quarter_end()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_quarter_end()
<Frame>
<Index> a      b      <<U1>
<Index>
p       False  False
q       True   True
r       True   True
<<U1>   <bool> <bool>
#end_Frame-via_dt.is_quarter_end()

#start_Frame-via_dt.is_quarter_start()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_quarter_start()
<Frame>
<Index> a      b      <<U1>
<Index>
p       True   True
q       False  False
r       False  False
<<U1>   <bool> <bool>
#end_Frame-via_dt.is_quarter_start()

#start_Frame-via_dt.timetuple()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.timetuple()
<Frame>
<Index> a                    b                    <<U1>
<Index>
p       time.struct_time(... time.struct_time(...
q       time.struct_time(... time.struct_time(...
r       time.struct_time(... time.struct_time(...
<<U1>   <object>             <object>
#end_Frame-via_dt.timetuple()

#start_Frame-via_dt.isoformat()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.isoformat()
<Frame>
<Index> a          b          <<U1>
<Index>
p       1517-04-01 2022-04-01
q       1517-12-31 2021-12-31
r       1517-06-30 2022-06-30
<<U1>   <<U10>     <<U10>
#end_Frame-via_dt.isoformat()

#start_Frame-via_dt.fromisoformat()
>>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'))
>>> f.via_dt.fromisoformat()
<Frame>
<Index> a          b          <<U1>
<Index>
p       1517-04-01 2022-04-01
q       1517-12-31 2021-12-31
r       1517-06-30 2022-06-30
<<U1>   <object>   <object>
#end_Frame-via_dt.fromisoformat()

#start_Frame-via_dt.strftime()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.strftime("%A | %B")
<Frame>
<Index> a                 b                 <<U1>
<Index>
p       Sunday | April    Friday | April
q       Monday | December Friday | December
r       Saturday | June   Thursday | June
<<U1>   <<U17>            <<U17>
#end_Frame-via_dt.strftime()

#start_Frame-via_dt.strptime()
>>> f = sf.Frame.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))
>>> f.via_dt.strptime("%m/%d/%Y")
<Frame>
<Index> a                   b                   <<U1>
<Index>
p       1517-04-01 00:00:00 2022-04-01 00:00:00
q       1517-12-31 00:00:00 2021-12-31 00:00:00
r       1517-06-30 00:00:00 2022-06-30 00:00:00
<<U1>   <object>            <object>
#end_Frame-via_dt.strptime()

#start_Frame-via_dt.strpdate()
>>> f = sf.Frame.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))
>>> f.via_dt.strpdate("%m/%d/%Y")
<Frame>
<Index> a          b          <<U1>
<Index>
p       1517-04-01 2022-04-01
q       1517-12-31 2021-12-31
r       1517-06-30 2022-06-30
<<U1>   <object>   <object>
#end_Frame-via_dt.strpdate()

#start_Frame-via_str.__getitem__()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str[-1]
<Frame: x>
<Index>    a     b     <<U1>
<Index>
p          0
q          2     Z
r          8     3
s          3
<<U1>      <<U1> <<U1>
#end_Frame-via_str.__getitem__()

#start_Frame-via_str.capitalize()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.capitalize()
<Frame: x>
<Index>    a      b     <<U1>
<Index>
p          10     Qrs
q          2      Xyz
r          8      123
s          3       wx
<<U1>      <<U21> <<U4>
#end_Frame-via_str.capitalize()

#start_Frame-via_str.center()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.center(8)
<Frame: x>
<Index>    a        b        <<U1>
<Index>
p             10      qrs
q             2       XYZ
r             8       123
s             3        wX
<<U1>      <<U8>    <<U8>
#end_Frame-via_str.center()

#start_Frame-via_str.contains()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.contains('X')
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          False  False
q          False  True
r          False  False
s          False  True
<<U1>      <bool> <bool>
#end_Frame-via_str.contains()

#start_Frame-via_str.count()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.count('X')
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       0
q          0       1
r          0       0
s          0       1
<<U1>      <int64> <int64>
#end_Frame-via_str.count()

#start_Frame-via_str.decode()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x').astype(bytes)
>>> f
<Frame: x>
<Index>    a      b       <<U1>
<Index>
p          b'10'  b'qrs '
q          b'2'   b'XYZ'
r          b'8'   b'123'
s          b'3'   b' wX '
<<U1>      <|S21> <|S4>
>>> f.via_str.decode()
<Frame: x>
<Index>    a     b     <<U1>
<Index>
p          10    qrs
q          2     XYZ
r          8     123
s          3      wX
<<U1>      <<U2> <<U4>
#end_Frame-via_str.decode()

#start_Frame-via_str.encode()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.encode()
<Frame: x>
<Index>    a     b       <<U1>
<Index>
p          b'10' b'qrs '
q          b'2'  b'XYZ'
r          b'8'  b'123'
s          b'3'  b' wX '
<<U1>      <|S2> <|S4>
#end_Frame-via_str.encode()

#start_Frame-via_str.endswith()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.endswith(' ')
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          False  True
q          False  False
r          False  False
s          False  True
<<U1>      <bool> <bool>
#end_Frame-via_str.endswith()

#start_Frame-via_str.find()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.find('X')
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          -1      -1
q          -1      0
r          -1      -1
s          -1      2
<<U1>      <int64> <int64>
#end_Frame-via_str.find()

#start_Frame-via_str.format()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.format('{:-^10}')
<Frame: x>
<Index>    a          b          <<U1>
<Index>
p          ----10---- ---qrs ---
q          ----2----- ---XYZ----
r          ----8----- ---123----
s          ----3----- --- wX ---
<<U1>      <<U10>     <<U10>
#end_Frame-via_str.format()

#start_Frame-via_str.index()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.index('X')
ValueError('substring not found')
#end_Frame-via_str.index()

#start_Frame-via_str.isalnum()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.isalnum()
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          True   False
q          True   True
r          True   True
s          True   False
<<U1>      <bool> <bool>
#end_Frame-via_str.isalnum()

#start_Frame-via_str.isalpha()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.isalpha()
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          False  False
q          False  True
r          False  False
s          False  False
<<U1>      <bool> <bool>
#end_Frame-via_str.isalpha()

#start_Frame-via_str.isdecimal()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.isdecimal()
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          True   False
q          True   False
r          True   True
s          True   False
<<U1>      <bool> <bool>
#end_Frame-via_str.isdecimal()

#start_Frame-via_str.isdigit()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.isdigit()
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          True   False
q          True   False
r          True   True
s          True   False
<<U1>      <bool> <bool>
#end_Frame-via_str.isdigit()

#start_Frame-via_str.islower()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.islower()
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          False  True
q          False  False
r          False  False
s          False  False
<<U1>      <bool> <bool>
#end_Frame-via_str.islower()

#start_Frame-via_str.isnumeric()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.isnumeric()
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          True   False
q          True   False
r          True   True
s          True   False
<<U1>      <bool> <bool>
#end_Frame-via_str.isnumeric()

#start_Frame-via_str.isspace()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.isspace()
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          False  False
q          False  False
r          False  False
s          False  False
<<U1>      <bool> <bool>
#end_Frame-via_str.isspace()

#start_Frame-via_str.istitle()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.istitle()
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          False  False
q          False  False
r          False  False
s          False  False
<<U1>      <bool> <bool>
#end_Frame-via_str.istitle()

#start_Frame-via_str.isupper()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.isupper()
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          False  False
q          False  True
r          False  False
s          False  False
<<U1>      <bool> <bool>
#end_Frame-via_str.isupper()

#start_Frame-via_str.ljust()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.ljust(8)
<Frame: x>
<Index>    a        b        <<U1>
<Index>
p          10       qrs
q          2        XYZ
r          8        123
s          3         wX
<<U1>      <<U8>    <<U8>
#end_Frame-via_str.ljust()

#start_Frame-via_str.len()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.len()
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       4
q          1       3
r          1       3
s          1       4
<<U1>      <int64> <int64>
#end_Frame-via_str.len()

#start_Frame-via_str.lower()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.lower()
<Frame: x>
<Index>    a      b     <<U1>
<Index>
p          10     qrs
q          2      xyz
r          8      123
s          3       wx
<<U1>      <<U21> <<U4>
#end_Frame-via_str.lower()

#start_Frame-via_str.lstrip()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.lstrip()
<Frame: x>
<Index>    a      b     <<U1>
<Index>
p          10     qrs
q          2      XYZ
r          8      123
s          3      wX
<<U1>      <<U21> <<U4>
#end_Frame-via_str.lstrip()

#start_Frame-via_str.partition()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.partition('X')
<Frame: x>
<Index>    a              b                <<U1>
<Index>
p          ('10', '', '') ('qrs ', '', '')
q          ('2', '', '')  ('', 'X', 'YZ')
r          ('8', '', '')  ('123', '', '')
s          ('3', '', '')  (' w', 'X', ' ')
<<U1>      <object>       <object>
#end_Frame-via_str.partition()

#start_Frame-via_str.replace()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.replace('X', '*')
<Frame: x>
<Index>    a     b     <<U1>
<Index>
p          10    qrs
q          2     *YZ
r          8     123
s          3      w*
<<U1>      <<U2> <<U4>
#end_Frame-via_str.replace()

#start_Frame-via_str.rfind()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.rfind('X')
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          -1      -1
q          -1      0
r          -1      -1
s          -1      2
<<U1>      <int64> <int64>
#end_Frame-via_str.rfind()

#start_Frame-via_str.rindex()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.rindex('X')
ValueError('substring not found')
#end_Frame-via_str.rindex()

#start_Frame-via_str.rjust()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.rjust(8)
<Frame: x>
<Index>    a        b        <<U1>
<Index>
p                10     qrs
q                 2      XYZ
r                 8      123
s                 3      wX
<<U1>      <<U8>    <<U8>
#end_Frame-via_str.rjust()

#start_Frame-via_str.rpartition()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.rpartition('X')
<Frame: x>
<Index>    a              b                <<U1>
<Index>
p          ('', '', '10') ('', '', 'qrs ')
q          ('', '', '2')  ('', 'X', 'YZ')
r          ('', '', '8')  ('', '', '123')
s          ('', '', '3')  (' w', 'X', ' ')
<<U1>      <object>       <object>
#end_Frame-via_str.rpartition()

#start_Frame-via_str.rsplit()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.rsplit('X')
<Frame: x>
<Index>    a        b           <<U1>
<Index>
p          ('10',)  ('qrs ',)
q          ('2',)   ('', 'YZ')
r          ('8',)   ('123',)
s          ('3',)   (' w', ' ')
<<U1>      <object> <object>
#end_Frame-via_str.rsplit()

#start_Frame-via_str.rstrip()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.rstrip()
<Frame: x>
<Index>    a      b     <<U1>
<Index>
p          10     qrs
q          2      XYZ
r          8      123
s          3       wX
<<U1>      <<U21> <<U4>
#end_Frame-via_str.rstrip()

#start_Frame-via_str.split()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.split('X')
<Frame: x>
<Index>    a        b           <<U1>
<Index>
p          ('10',)  ('qrs ',)
q          ('2',)   ('', 'YZ')
r          ('8',)   ('123',)
s          ('3',)   (' w', ' ')
<<U1>      <object> <object>
#end_Frame-via_str.split()

#start_Frame-via_str.startswith()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.startswith('X')
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          False  False
q          False  True
r          False  False
s          False  False
<<U1>      <bool> <bool>
#end_Frame-via_str.startswith()

#start_Frame-via_str.strip()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.strip()
<Frame: x>
<Index>    a      b     <<U1>
<Index>
p          10     qrs
q          2      XYZ
r          8      123
s          3      wX
<<U1>      <<U21> <<U4>
#end_Frame-via_str.strip()

#start_Frame-via_str.swapcase()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.swapcase()
<Frame: x>
<Index>    a      b     <<U1>
<Index>
p          10     QRS
q          2      xyz
r          8      123
s          3       Wx
<<U1>      <<U21> <<U4>
#end_Frame-via_str.swapcase()

#start_Frame-via_str.title()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.title()
<Frame: x>
<Index>    a      b     <<U1>
<Index>
p          10     Qrs
q          2      Xyz
r          8      123
s          3       Wx
<<U1>      <<U21> <<U4>
#end_Frame-via_str.title()

#start_Frame-via_str.upper()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.upper()
<Frame: x>
<Index>    a      b     <<U1>
<Index>
p          10     QRS
q          2      XYZ
r          8      123
s          3       WX
<<U1>      <<U21> <<U4>
#end_Frame-via_str.upper()

#start_Frame-via_str.zfill()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.zfill(8)
<Frame: x>
<Index>    a        b        <<U1>
<Index>
p          00000010 0000qrs
q          00000002 00000XYZ
r          00000008 00000123
s          00000003 0000 wX
<<U1>      <<U8>    <<U8>
#end_Frame-via_str.zfill()

#start_Frame-via_T.via_fill_value()
>>> 
#end_Frame-via_T.via_fill_value()

#start_Frame-via_T.__add__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T + s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       10.0      8.0       1.0
q       -4.0      -5.0      -2.0
r       0.5       8.5       9.5
s       1.0       1.0       13.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__add__()

#start_Frame-via_T.__sub__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T - s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       10.0      8.0       1.0
q       0.0       -1.0      2.0
r       -0.5      7.5       8.5
s       -1.0      -1.0      11.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__sub__()

#start_Frame-via_T.__mul__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T * s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       0.0       0.0       0.0
q       4.0       6.0       -0.0
r       0.0       4.0       4.5
s       0.0       0.0       12.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__mul__()

#start_Frame-via_T.__truediv__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T / s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       inf       inf       inf
q       1.0       1.5       -0.0
r       0.0       16.0      18.0
s       0.0       0.0       12.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__truediv__()

#start_Frame-via_T.__floordiv__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T // s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       nan       nan       nan
q       1.0       1.0       -0.0
r       0.0       16.0      18.0
s       0.0       0.0       12.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__floordiv__()

#start_Frame-via_T.__mod__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T % s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       nan       nan       nan
q       -0.0      -1.0      -0.0
r       0.0       0.0       0.0
s       0.0       0.0       0.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__mod__()

#start_Frame-via_T.__pow__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T ** s
<Frame>
<Index> a         b                  c         <<U1>
<Index>
p       1.0       1.0                1.0
q       0.25      0.1111111111111111 inf
r       0.0       2.8284271247461903 3.0
s       0.0       0.0                12.0
<<U1>   <float64> <float64>          <float64>
#end_Frame-via_T.__pow__()

#start_Frame-via_T.__lshift__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T << s
<Frame>
<Index> a       b       c       <<U1>
<Index>
p       10      8       1
q       0       0       0
r       0       64      72
s       0       0       24
<<U1>   <int64> <int64> <int64>
#end_Frame-via_T.__lshift__()

#start_Frame-via_T.__rshift__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T >> s
<Frame>
<Index> a       b       c       <<U1>
<Index>
p       10      8       1
q       -1      -1      0
r       0       1       1
s       0       0       6
<<U1>   <int64> <int64> <int64>
#end_Frame-via_T.__rshift__()

#start_Frame-via_T.__and__()
>>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> f.via_T & s
<Frame>
<Index> a      b      <<U1>
<Index>
p       False  False
q       True   True
r       True   False
<<U1>   <bool> <bool>
#end_Frame-via_T.__and__()

#start_Frame-via_T.__xor__()
>>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> f.via_T ^ s
<Frame>
<Index> a      b      <<U1>
<Index>
p       False  True
q       False  False
r       False  True
<<U1>   <bool> <bool>
#end_Frame-via_T.__xor__()

#start_Frame-via_T.__or__()
>>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> f.via_T | s
<Frame>
<Index> a      b      <<U1>
<Index>
p       False  True
q       True   True
r       True   True
<<U1>   <bool> <bool>
#end_Frame-via_T.__or__()

#start_Frame-via_T.__lt__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T < s
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       False  True   False
r       True   False  False
s       True   True   False
<<U1>   <bool> <bool> <bool>
#end_Frame-via_T.__lt__()

#start_Frame-via_T.__le__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T <= s
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       True   True   False
r       True   False  False
s       True   True   False
<<U1>   <bool> <bool> <bool>
#end_Frame-via_T.__le__()

#start_Frame-via_T.__eq__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T == s
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       True   False  False
r       False  False  False
s       False  False  False
<<U1>   <bool> <bool> <bool>
#end_Frame-via_T.__eq__()

#start_Frame-via_T.__ne__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T != s
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   True   True
q       False  True   True
r       True   True   True
s       True   True   True
<<U1>   <bool> <bool> <bool>
#end_Frame-via_T.__ne__()

#start_Frame-via_T.__gt__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T > s
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   True   True
q       False  False  True
r       False  True   True
s       False  False  True
<<U1>   <bool> <bool> <bool>
#end_Frame-via_T.__gt__()

#start_Frame-via_T.__ge__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T >= s
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   True   True
q       True   False  True
r       False  True   True
s       False  False  True
<<U1>   <bool> <bool> <bool>
#end_Frame-via_T.__ge__()

#start_Frame-via_T.__radd__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T + s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       10.0      8.0       1.0
q       -4.0      -5.0      -2.0
r       0.5       8.5       9.5
s       1.0       1.0       13.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__radd__()

#start_Frame-via_T.__rsub__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T - s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       10.0      8.0       1.0
q       0.0       -1.0      2.0
r       -0.5      7.5       8.5
s       -1.0      -1.0      11.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__rsub__()

#start_Frame-via_T.__rmul__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T * s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       0.0       0.0       0.0
q       4.0       6.0       -0.0
r       0.0       4.0       4.5
s       0.0       0.0       12.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__rmul__()

#start_Frame-via_T.__rtruediv__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T / s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       inf       inf       inf
q       1.0       1.5       -0.0
r       0.0       16.0      18.0
s       0.0       0.0       12.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__rtruediv__()

#start_Frame-via_T.__rfloordiv__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T // s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       nan       nan       nan
q       1.0       1.0       -0.0
r       0.0       16.0      18.0
s       0.0       0.0       12.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__rfloordiv__()

#start_Frame-via_fill_value().loc
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f.via_fill_value(-1).loc[['a', 'b', 'd']]
<Frame: y>
<Index>    x       y       <<U1>
<Index>
a          3       2
b          0       0
d          -1      -1
<<U1>      <int64> <int64>
#end_Frame-via_fill_value().loc

#start_Frame-via_fill_value().__getitem__()
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f.via_fill_value(-1)[['z', 'x']]
<Frame: y>
<Index>    z       x       <<U1>
<Index>
a          -1      3
b          -1      0
c          -1      20
<<U1>      <int64> <int64>
#end_Frame-via_fill_value().__getitem__()

#start_Frame-via_fill_value().via_T
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> s = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> f.via_fill_value(-1).via_T * s
<Frame>
<Index> x       y       <<U1>
<Index>
a       -3      -2
b       0       0
c       160     96
d       -19     -19
<<U1>   <int64> <int64>
#end_Frame-via_fill_value().via_T

#start_Frame-via_fill_value().__add__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) + f2
<Frame>
<Index> x       y       <<U1>
<Index>
a       3       2
b       2       3
c       24      26
<<U1>   <int64> <int64>
#end_Frame-via_fill_value().__add__()

#start_Frame-via_fill_value().__sub__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) - f2
<Frame>
<Index> x       y       <<U1>
<Index>
a       3       2
b       -2      -3
c       16      -2
<<U1>   <int64> <int64>
#end_Frame-via_fill_value().__sub__()

#start_Frame-via_fill_value().__mul__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) * f2
<Frame>
<Index> x       y       <<U1>
<Index>
a       0       0
b       0       0
c       80      168
<<U1>   <int64> <int64>
#end_Frame-via_fill_value().__mul__()

#start_Frame-via_fill_value().__truediv__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) / f2
<Frame>
<Index> x         y                  <<U1>
<Index>
a       inf       inf
b       0.0       0.0
c       5.0       0.8571428571428571
<<U1>   <float64> <float64>
#end_Frame-via_fill_value().__truediv__()

#start_Frame-via_fill_value().__floordiv__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) // f2
<Frame>
<Index> x       y       <<U1>
<Index>
a       0       0
b       0       0
c       5       0
<<U1>   <int64> <int64>
#end_Frame-via_fill_value().__floordiv__()

#start_Frame-via_fill_value().__mod__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) % f2
<Frame>
<Index> x       y       <<U1>
<Index>
a       0       0
b       0       0
c       0       12
<<U1>   <int64> <int64>
#end_Frame-via_fill_value().__mod__()

#start_Frame-via_fill_value().__pow__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) ** f2
<Frame>
<Index> x       y                <<U1>
<Index>
a       1       1
b       0       0
c       160000  1283918464548864
<<U1>   <int64> <int64>
#end_Frame-via_fill_value().__pow__()

#start_Frame-via_fill_value().__lshift__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) << f2
<Frame>
<Index> x       y       <<U1>
<Index>
a       3       2
b       0       0
c       40      24
<<U1>   <int64> <int64>
#end_Frame-via_fill_value().__lshift__()

#start_Frame-via_fill_value().__rshift__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) >> f2
<Frame>
<Index> x       y       <<U1>
<Index>
a       3       2
b       0       0
c       10      6
<<U1>   <int64> <int64>
#end_Frame-via_fill_value().__rshift__()

#start_Frame-via_fill_value().__and__()
>>> f1 = sf.Frame.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(False) & f2
<Frame>
<Index> x      y      <<U1>
<Index>
a       False  False
b       False  False
c       True   True
<<U1>   <bool> <bool>
#end_Frame-via_fill_value().__and__()

#start_Frame-via_fill_value().__xor__()
>>> f1 = sf.Frame.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(False) ^ f2
<Frame>
<Index> x      y      <<U1>
<Index>
a       False  True
b       True   True
c       False  False
<<U1>   <bool> <bool>
#end_Frame-via_fill_value().__xor__()

#start_Frame-via_fill_value().__or__()
>>> f1 = sf.Frame.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(False) | f2
<Frame>
<Index> x      y      <<U1>
<Index>
a       False  True
b       True   True
c       True   True
<<U1>   <bool> <bool>
#end_Frame-via_fill_value().__or__()

#start_Frame-via_fill_value().__lt__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) < f2
<Frame>
<Index> x      y      <<U1>
<Index>
a       False  False
b       True   True
c       False  True
<<U1>   <bool> <bool>
#end_Frame-via_fill_value().__lt__()

#start_Frame-via_fill_value().__le__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) <= f2
<Frame>
<Index> x      y      <<U1>
<Index>
a       False  False
b       True   True
c       False  True
<<U1>   <bool> <bool>
#end_Frame-via_fill_value().__le__()

#start_Frame-via_fill_value().__eq__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) == f2
<Frame>
<Index> x      y      <<U1>
<Index>
a       False  False
b       False  False
c       False  False
<<U1>   <bool> <bool>
#end_Frame-via_fill_value().__eq__()

#start_Frame-via_fill_value().__ne__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) != f2
<Frame>
<Index> x      y      <<U1>
<Index>
a       True   True
b       True   True
c       True   True
<<U1>   <bool> <bool>
#end_Frame-via_fill_value().__ne__()

#start_Frame-via_fill_value().__gt__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) > f2
<Frame>
<Index> x      y      <<U1>
<Index>
a       True   True
b       False  False
c       True   False
<<U1>   <bool> <bool>
#end_Frame-via_fill_value().__gt__()

#start_Frame-via_fill_value().__ge__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) >= f2
<Frame>
<Index> x      y      <<U1>
<Index>
a       True   True
b       False  False
c       True   False
<<U1>   <bool> <bool>
#end_Frame-via_fill_value().__ge__()

#start_Frame-via_fill_value().__radd__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 + f1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_Frame-via_fill_value().__radd__()

#start_Frame-via_fill_value().__rsub__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 - f1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_Frame-via_fill_value().__rsub__()

#start_Frame-via_fill_value().__rmul__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 * f1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_Frame-via_fill_value().__rmul__()

#start_Frame-via_fill_value().__rtruediv__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 / f1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_Frame-via_fill_value().__rtruediv__()

#start_Frame-via_fill_value().__rfloordiv__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 // f1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_Frame-via_fill_value().__rfloordiv__()

#start_Frame-via_re().search()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          8       123   1517-12-31
3          3        wX   1517-06-30
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').search()
<Frame: x>
<Index>    a      b      c      <<U1>
<Index>
0          True   False  True
1          True   True   True
2          False  True   True
3          True   True   True
<int64>    <bool> <bool> <bool>
#end_Frame-via_re().search()

#start_Frame-via_re().match()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          8       123   1517-12-31
3          3        wX   1517-06-30
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').match()
<Frame: x>
<Index>    a      b      c      <<U1>
<Index>
0          True   False  True
1          True   True   True
2          False  True   True
3          True   False  True
<int64>    <bool> <bool> <bool>
#end_Frame-via_re().match()

#start_Frame-via_re().fullmatch()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          8       123   1517-12-31
3          3        wX   1517-06-30
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.via_re('123').fullmatch()
<Frame: x>
<Index>    a      b      c      <<U1>
<Index>
0          False  False  False
1          False  False  False
2          False  True   False
3          False  False  False
<int64>    <bool> <bool> <bool>
#end_Frame-via_re().fullmatch()

#start_Frame-via_re().split()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          8       123   1517-12-31
3          3        wX   1517-06-30
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').split()
<Frame: x>
<Index>    a         b                c                    <<U1>
<Index>
0          ('', '0') ('qrs ',)        ('', '5', '7-0', ...
1          ('', '')  ('', 'YZ')       ('', '5', '7-04-0...
2          ('8',)    ('', '', '', '') ('', '5', '7-', '...
3          ('', '')  (' w', ' ')      ('', '5', '7-06-'...
<int64>    <object>  <object>         <object>
#end_Frame-via_re().split()

#start_Frame-via_re().findall()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          8       123   1517-12-31
3          3        wX   1517-06-30
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').findall()
<Frame: x>
<Index>    a        b               c                    <<U1>
<Index>
0          ('1',)   ()              ('1', '1', '1', '1')
1          ('2',)   ('X',)          ('1', '1', '1')
2          ()       ('1', '2', '3') ('1', '1', '1', '...
3          ('3',)   ('X',)          ('1', '1', '3')
<int64>    <object> <object>        <object>
#end_Frame-via_re().findall()

#start_Frame-via_re().sub()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          8       123   1517-12-31
3          3        wX   1517-06-30
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').sub('==')
<Frame: x>
<Index>    a     b      c                <<U1>
<Index>
0          ==0   qrs    ==5==7-0==-0==
1          ==    ==YZ   ==5==7-04-0==
2          8     ====== ==5==7-====-====
3          ==     w==   ==5==7-06-==0
<int64>    <<U3> <<U6>  <<U16>
#end_Frame-via_re().sub()

#start_Frame-via_re().subn()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          8       123   1517-12-31
3          3        wX   1517-06-30
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').subn('==', 1)
<Frame: x>
<Index>    a          b            c                  <<U1>
<Index>
0          ('==0', 1) ('qrs ', 0)  ('==517-01-01', 1)
1          ('==', 1)  ('==YZ', 1)  ('==517-04-01', 1)
2          ('8', 0)   ('==23', 1)  ('==517-12-31', 1)
3          ('==', 1)  (' w== ', 1) ('==517-06-30', 1)
<int64>    <object>   <object>     <object>
#end_Frame-via_re().subn()

#start_Frame-via_values.apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.via_values.apply(np.sin)
<Frame: x>
<Index>    a                   b                   c                   <<U1>
<Index>
p          -0.5440211108893698 0.9893582466233818  0.8414709848078965
q          -0.9092974268256817 -0.1411200080598672 0.0
r          0.0                 0.9893582466233818  0.4121184852417566
s          0.0                 0.0                 -0.5365729180004349
<<U1>      <float64>           <float64>           <float64>
#end_Frame-via_values.apply()

#start_Frame-via_values.__array_ufunc__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> np.sin(f.via_values)
<Frame: x>
<Index>    a                   b                   c                   <<U1>
<Index>
p          -0.5440211108893698 0.9893582466233818  0.8414709848078965
q          -0.9092974268256817 -0.1411200080598672 0.0
r          0.0                 0.9893582466233818  0.4121184852417566
s          0.0                 0.0                 -0.5365729180004349
<<U1>      <float64>           <float64>           <float64>
#end_Frame-via_values.__array_ufunc__()

#start_Frame-via_values.__call__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> np.sin(f.via_values(unify_blocks=True))
<Frame: x>
<Index>    a                   b                   c                   <<U1>
<Index>
p          -0.5440211108893698 0.9893582466233818  0.8414709848078965
q          -0.9092974268256817 -0.1411200080598672 0.0
r          0.0                 0.9893582466233818  0.4121184852417566
s          0.0                 0.0                 -0.5365729180004349
<<U1>      <float64>           <float64>           <float64>
#end_Frame-via_values.__call__()

#start_FrameHE-__init__()
>>> sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            0       1
q            2       3
r            4       5
<<U1>        <int64> <int64>
#end_FrameHE-__init__()

#start_FrameHE-from_arrow()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> aw = f1.to_arrow()
>>> aw
pyarrow.Table
__index0__: string
a: int64
b: int64
----
__index0__: [["p","q","r"]]
a: [[0,2,4]]
b: [[1,3,5]]
>>> sf.FrameHE.from_arrow(aw, index_depth=1)
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<object>  <int64> <int64>
#end_FrameHE-from_arrow()

#start_FrameHE-from_clipboard()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_clipboard()
>>> sf.FrameHE.from_clipboard(index_depth=1)
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<<U1>     <int64> <int64>
#end_FrameHE-from_clipboard()

#start_FrameHE-from_concat()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameHE((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> sf.FrameHE.from_concat((f1, f2), axis=1)
<FrameHE>
<Index>   a       b       c      d      <<U1>
<Index>
p         0       1       False  True
q         2       3       False  True
r         4       5       False  True
<<U1>     <int64> <int64> <bool> <bool>
>>> sf.FrameHE.from_concat((f1, f2.relabel(columns=('a', 'b'))), axis=0, index=sf.IndexAutoFactory)
<FrameHE>
<Index>   a        b        <<U1>
<Index>
0         0        1
1         2        3
2         4        5
3         False    True
4         False    True
5         False    True
<int64>   <object> <object>
#end_FrameHE-from_concat()

#start_FrameHE-from_concat_items()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameHE((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> sf.FrameHE.from_concat_items(((f1.name, f1), (f2.name, f2)), axis=1)
<FrameHE>
<IndexHierarchy> x       x       y      y      <<U1>
                 a       b       c      d      <<U1>
<Index>
p                0       1       False  True
q                2       3       False  True
r                4       5       False  True
<<U1>            <int64> <int64> <bool> <bool>
>>> sf.FrameHE.from_concat_items(((f1.name, f1), (f2.name, f2.relabel(columns=('a', 'b')))), axis=0)
<FrameHE>
<Index>                a        b        <<U1>
<IndexHierarchy>
x                p     0        1
x                q     2        3
x                r     4        5
y                p     False    True
y                q     False    True
y                r     False    True
<<U1>            <<U1> <object> <object>
#end_FrameHE-from_concat_items()

#start_FrameHE-from_csv()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_csv('/tmp/f.csv')
>>> from pathlib import Path
>>> Path('/tmp/f.csv').read_text()
__index0__,a,b
p,0,1
q,2,3
r,4,5

>>> sf.FrameHE.from_csv('/tmp/f.csv', index_depth=1)
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<<U1>     <int64> <int64>
#end_FrameHE-from_csv()

#start_FrameHE-from_delimited()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_delimited('/tmp/f.psv', delimiter='|')
>>> from pathlib import Path
>>> Path('/tmp/f.psv').read_text()
__index0__|a|b
p|0|1
q|2|3
r|4|5

>>> sf.FrameHE.from_delimited('/tmp/f.psv', delimiter='|', index_depth=1)
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<<U1>     <int64> <int64>
#end_FrameHE-from_delimited()

#start_FrameHE-from_dict()
>>> sf.FrameHE.from_dict(mapping=dict(a=(10, 2, 8, 3), b=('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), dtypes=dict(b=np.datetime64), name='x')
<FrameHE: x>
<Index>      a       b               <<U1>
<Index>
0            10      1517-01-01
1            2       1517-04-01
2            8       1517-12-31
3            3       1517-06-30
<int64>      <int64> <datetime64[D]>
#end_FrameHE-from_dict()

#start_FrameHE-from_dict_fields()
>>> sf.FrameHE.from_dict_fields(records=(dict(a=False, b=False, c=True), dict(a='1517-04-01', b='1517-01-01', c='1517-04-01')), columns=('p', 'q'), dtypes=dict(q=np.datetime64), name='x')
TypeError("from_dict_fields() got an unexpected keyword argument 'records'")
#end_FrameHE-from_dict_fields()

#start_FrameHE-from_dict_records()
>>> sf.FrameHE.from_dict_records(records=(dict(a=10, b=False, c='1517-01-01'), dict(a=8, b=True, c='1517-04-01')), index=('p', 'q'), dtypes=dict(c=np.datetime64), name='x')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
#end_FrameHE-from_dict_records()

#start_FrameHE-from_dict_records_items()
>>> sf.FrameHE.from_dict_records_items(items=(('p', dict(a=10, b=False, c='1517-01-01')), ('q', dict(a=8, b=True, c='1517-04-01'))), dtypes=dict(c=np.datetime64), name='x')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
#end_FrameHE-from_dict_records_items()

#start_FrameHE-from_element()
>>> sf.FrameHE.from_element(0, index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            0       0
q            0       0
r            0       0
<<U1>        <int64> <int64>
#end_FrameHE-from_element()

#start_FrameHE-from_element_items()
>>> sf.FrameHE.from_element_items(((('a', 0), -1), (('b', 0), 10), (('a', 1), 3), (('b', 'a'), 1)), columns=(0, 1), index=('a', 'b'), name='x', axis=1)
ErrorInitTypeBlocks('mismatched row count: 1: 2')
#end_FrameHE-from_element_items()

#start_FrameHE-from_elements()
>>> sf.FrameHE.from_elements((10, 2, 8, 3), index=('p', 'q', 'r', 's'), columns=['a'], name='x')
<FrameHE: x>
<Index>      a       <<U1>
<Index>
p            10
q            2
r            8
s            3
<<U1>        <int64>
#end_FrameHE-from_elements()

#start_FrameHE-from_fields()
>>> sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-from_fields()

#start_FrameHE-from_hdf5()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f1.to_hdf5('/tmp/f.hdf5')
>>> f1.from_hdf5('/tmp/f.hdf5', label='x', index_depth=1)
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_FrameHE-from_hdf5()

#start_FrameHE-from_items()
>>> sf.FrameHE.from_items((('a', (10, 2, 8, 3)), ('b', ('qrs ', 'XYZ', '123', ' wX '))), index=('p', 'q', 'r', 's'), name='x')
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_FrameHE-from_items()

#start_FrameHE-from_json()
>>> sf.FrameHE.from_json('[{"a": 10, "b": false, "c": "1517-01-01"}, {"a": 8, "b": true, "c": "1517-04-01"}]', dtypes=dict(c=np.datetime64), name='x')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            8       True   1517-04-01
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-from_json()

#start_FrameHE-from_json_columns()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> msg = f.to_json_columns(indent=4)
>>> msg
{
    "a": {
        "0": 10,
        "1": 2,
        "2": 8,
        "3": 3
    },
    "b": {
        "0": false,
        "1": true,
        "2": true,
        "3": false
    },
    "c": {
        "0": "1517-01-01",
        "1": "1517-04-01",
        "2": "1517-12-31",
        "3": "1517-06-30"
    }
}
>>> sf.Frame.from_json_columns(msg, dtypes=dict(c=np.datetime64))
<Frame>
<Index> a       b      c          <<U1>
<Index>
0       10      False  1517-01-01
1       2       True   1517-04-01
2       8       True   1517-12-31
3       3       False  1517-06-30
<<U1>   <int64> <bool> <<U10>
#end_FrameHE-from_json_columns()

#start_FrameHE-from_json_index()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> msg = f.to_json_index(indent=4)
>>> msg
{
    "0": {
        "a": 10,
        "b": false,
        "c": "1517-01-01"
    },
    "1": {
        "a": 2,
        "b": true,
        "c": "1517-04-01"
    },
    "2": {
        "a": 8,
        "b": true,
        "c": "1517-12-31"
    },
    "3": {
        "a": 3,
        "b": false,
        "c": "1517-06-30"
    }
}
>>> sf.Frame.from_json_index(msg, dtypes=dict(c=np.datetime64))
<Frame>
<Index> a       b      c               <<U1>
<Index>
0       10      False  1517-01-01
1       2       True   1517-04-01
2       8       True   1517-12-31
3       3       False  1517-06-30
<<U1>   <int64> <bool> <datetime64[D]>
#end_FrameHE-from_json_index()

#start_FrameHE-from_json_records()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> msg = f.to_json_records(indent=4)
>>> msg
[
    {
        "a": 10,
        "b": false,
        "c": "1517-01-01"
    },
    {
        "a": 2,
        "b": true,
        "c": "1517-04-01"
    },
    {
        "a": 8,
        "b": true,
        "c": "1517-12-31"
    },
    {
        "a": 3,
        "b": false,
        "c": "1517-06-30"
    }
]
>>> sf.Frame.from_json_records(msg, dtypes=dict(c=np.datetime64))
<Frame>
<Index> a       b      c               <<U1>
<Index>
0       10      False  1517-01-01
1       2       True   1517-04-01
2       8       True   1517-12-31
3       3       False  1517-06-30
<int64> <int64> <bool> <datetime64[D]>
#end_FrameHE-from_json_records()

#start_FrameHE-from_json_split()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> msg = f.to_json_split(indent=4)
>>> msg
{
    "columns": [
        "a",
        "b",
        "c"
    ],
    "index": [
        0,
        1,
        2,
        3
    ],
    "data": [
        [
            10,
            false,
            "1517-01-01"
        ],
        [
            2,
            true,
            "1517-04-01"
        ],
        [
            8,
            true,
            "1517-12-31"
        ],
        [
            3,
            false,
            "1517-06-30"
        ]
    ]
}
>>> sf.Frame.from_json_split(msg, dtypes=dict(c=np.datetime64))
<Frame>
<Index> a       b      c               <<U1>
<Index>
0       10      False  1517-01-01
1       2       True   1517-04-01
2       8       True   1517-12-31
3       3       False  1517-06-30
<int64> <int64> <bool> <datetime64[D]>
#end_FrameHE-from_json_split()

#start_FrameHE-from_json_values()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> msg = f.to_json_values(indent=4)
>>> msg
[
    [
        10,
        false,
        "1517-01-01"
    ],
    [
        2,
        true,
        "1517-04-01"
    ],
    [
        8,
        true,
        "1517-12-31"
    ],
    [
        3,
        false,
        "1517-06-30"
    ]
]
>>> sf.Frame.from_json_values(msg, columns=tuple('abc'), dtypes=dict(c=np.datetime64))
<Frame>
<Index> a       b      c               <<U1>
<Index>
0       10      False  1517-01-01
1       2       True   1517-04-01
2       8       True   1517-12-31
3       3       False  1517-06-30
<int64> <int64> <bool> <datetime64[D]>
#end_FrameHE-from_json_values()

#start_FrameHE-from_msgpack()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> mb = f1.to_msgpack()
>>> mb
b'\x85\xc4\x02sf\xa7FrameHE\xc4\x04name\xa1x\xc4\x06blocks\xc4\xcd\x82\xc4\x02sf\xaaTypeBlocks\xc4\x06blocks\xc4\xb3\x92\x85\xc4\x02nd\xc3\xc4\x04type\xa3<i8\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4 \n\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U4\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4@q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00 \x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00\x00\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00w\x00\x00\x00X\x00\x00\x00 \x00\x00\x00\xc4\x05index\xc4S\x83\xc4\x02sf\xa5Index\xc4\x04name\xc0\xc4\x04data\xc49\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4\x10p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00\xc4\x07columns\xc4K\x83\xc4\x02sf\xa5Index\xc4\x04name\xc0\xc4\x04data\xc41\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x02\xc4\x04data\xc4\x08a\x00\x00\x00b\x00\x00\x00'
>>> sf.FrameHE.from_msgpack(mb)
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_FrameHE-from_msgpack()

#start_FrameHE-from_npy()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npy('/tmp/f.npy')
>>> sf.FrameHE.from_npy('/tmp/f.npy')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> import shutil
>>> shutil.rmtree('/tmp/f.npy')
#end_FrameHE-from_npy()

#start_FrameHE-from_npy_mmap()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npy('/tmp/f.npy')
>>> f2, closer = sf.FrameHE.from_npy_mmap('/tmp/f.npy')
>>> f2
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> closer() # close mmaps after usage
>>> import shutil
>>> shutil.rmtree('/tmp/f.npy')
#end_FrameHE-from_npy_mmap()

#start_FrameHE-from_npz()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npz('/tmp/f.npz')
>>> sf.FrameHE.from_npz('/tmp/f.npz')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-from_npz()

#start_FrameHE-from_overlay()
>>> f1 = sf.FrameHE.from_items((('a', (10, 2, np.nan, 3)), ('b', ('qrs ', 'XYZ', None, None))), index=('p', 'q', 'r', 's'), name='x')
>>> f1
<FrameHE: x>
<Index>      a         b        <<U1>
<Index>
p            10.0      qrs
q            2.0       XYZ
r            nan       None
s            3.0       None
<<U1>        <float64> <object>
>>> f2 = sf.FrameHE.from_items((('a', (8, 3)), ('b', ('123', ' wX '))), index=('r', 's'), name='y')
>>> f2
<FrameHE: y>
<Index>      a       b     <<U1>
<Index>
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> sf.FrameHE.from_overlay((f1, f2))
<FrameHE>
<Index>   a         b        <<U1>
<Index>
p         10.0      qrs
q         2.0       XYZ
r         8.0       123
s         3.0        wX
<<U1>     <float64> <object>
#end_FrameHE-from_overlay()

#start_FrameHE-from_pandas()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> df = f1.to_pandas()
>>> df
    a     b
p  10  qrs 
q   2   XYZ
r   8   123
s   3   wX 
>>> sf.FrameHE.from_pandas(df, dtypes=dict(b=str))
<FrameHE: x>
<Index>      a       b     <object>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<object>     <int64> <<U4>
#end_FrameHE-from_pandas()

#start_FrameHE-from_parquet()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f1.to_parquet('/tmp/f.parquet')
>>> sf.FrameHE.from_parquet('/tmp/f.parquet', index_depth=1)
<FrameHE>
<Index>   a       b        <<U1>
<Index>
p         10      qrs
q         2       XYZ
r         8       123
s         3        wX
<object>  <int64> <object>
#end_FrameHE-from_parquet()

#start_FrameHE-from_pickle()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_pickle('/tmp/f.pickle')
>>> sf.FrameHE.from_pickle('/tmp/f.pickle')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-from_pickle()

#start_FrameHE-from_records()
>>> sf.FrameHE.from_records(((10, False, '1517-01-01'), (8, True,'1517-04-01')), index=('p', 'q'), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
#end_FrameHE-from_records()

#start_FrameHE-from_records_items()
>>> sf.FrameHE.from_records_items((('p', (10, False, '1517-01-01')), ('q', (8, True,'1517-04-01'))), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
#end_FrameHE-from_records_items()

#start_FrameHE-from_series()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'), name='x')
>>> sf.FrameHE.from_series(s)
<FrameHE>
<Index>   x       <<U1>
<Index>
a         10
b         2
c         8
<<U1>     <int64>
#end_FrameHE-from_series()

#start_FrameHE-from_sql()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_sqlite('/tmp/f.db')
>>> import sqlite3
>>> conn = sqlite3.connect('/tmp/f.db')
>>> sf.FrameHE.from_sql("select * from x limit 2", connection=conn, index_depth=1)
<FrameHE>
<Index>   a       b       c          <<U1>
<Index>
0         10      0       1517-01-01
1         2       1       1517-04-01
<int64>   <int64> <int64> <<U10>
#end_FrameHE-from_sql()

#start_FrameHE-from_sqlite()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_sqlite('/tmp/f.db')
>>> sf.FrameHE.from_sqlite('/tmp/f.db', label=f1.name, index_depth=1)
<FrameHE: x>
<Index>      a       b      c          <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <<U10>
#end_FrameHE-from_sqlite()

#start_FrameHE-from_structured_array()
>>> sa = np.array([(False, 8), (True, 19)], dtype=[('a', bool), ('b', int)])
>>> sa
[(False,  8) ( True, 19)]
>>> sf.FrameHE.from_structured_array(sa)
<FrameHE>
<Index>   a      b       <<U1>
<Index>
0         False  8
1         True   19
<int64>   <bool> <int64>
#end_FrameHE-from_structured_array()

#start_FrameHE-from_tsv()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_tsv('/tmp/f.tsv')
>>> from pathlib import Path
>>> Path('/tmp/f.tsv').read_text()
__index0__	a	b
p	0	1
q	2	3
r	4	5

>>> sf.FrameHE.from_tsv('/tmp/f.tsv', index_depth=1)
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<<U1>     <int64> <int64>
#end_FrameHE-from_tsv()

#start_FrameHE-from_xlsx()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_xlsx('/tmp/f.xlsx')
>>> sf.FrameHE.from_xlsx('/tmp/f.xlsx', index_depth=1)
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<<U1>     <int64> <int64>
#end_FrameHE-from_xlsx()

#start_FrameHE-to_arrow()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_arrow()
pyarrow.Table
__index0__: string
a: int64
b: string
----
__index0__: [["p","q","r","s"]]
a: [[10,2,8,3]]
b: [["qrs ","XYZ","123"," wX "]]
#end_FrameHE-to_arrow()

#start_FrameHE-to_clipboard()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_clipboard()
#end_FrameHE-to_clipboard()

#start_FrameHE-to_csv()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_csv('/tmp/f.csv')
>>> from pathlib import Path
>>> Path('/tmp/f.csv').read_text()
__index0__,a,b
p,0,1
q,2,3
r,4,5

#end_FrameHE-to_csv()

#start_FrameHE-to_delimited()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_delimited('/tmp/f.psv', delimiter='|')
>>> from pathlib import Path
>>> Path('/tmp/f.psv').read_text()
__index0__|a|b
p|0|1
q|2|3
r|4|5

#end_FrameHE-to_delimited()

#start_FrameHE-to_frame()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_frame()
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
#end_FrameHE-to_frame()

#start_FrameHE-to_frame_go()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_frame_go()
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_FrameHE-to_frame_go()

#start_FrameHE-to_frame_he()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_frame_he()
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_FrameHE-to_frame_he()

#start_FrameHE-to_hdf5()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_hdf5('/tmp/f.h5')
#end_FrameHE-to_hdf5()

#start_FrameHE-to_json_columns()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.to_json_columns(indent=4)
{
    "a": {
        "0": 10,
        "1": 2,
        "2": 8,
        "3": 3
    },
    "b": {
        "0": false,
        "1": true,
        "2": true,
        "3": false
    },
    "c": {
        "0": "1517-01-01",
        "1": "1517-04-01",
        "2": "1517-12-31",
        "3": "1517-06-30"
    }
}
#end_FrameHE-to_json_columns()

#start_FrameHE-to_json_index()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.to_json_index(indent=4)
{
    "0": {
        "a": 10,
        "b": false,
        "c": "1517-01-01"
    },
    "1": {
        "a": 2,
        "b": true,
        "c": "1517-04-01"
    },
    "2": {
        "a": 8,
        "b": true,
        "c": "1517-12-31"
    },
    "3": {
        "a": 3,
        "b": false,
        "c": "1517-06-30"
    }
}
#end_FrameHE-to_json_index()

#start_FrameHE-to_json_records()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.to_json_records(indent=4)
[
    {
        "a": 10,
        "b": false,
        "c": "1517-01-01"
    },
    {
        "a": 2,
        "b": true,
        "c": "1517-04-01"
    },
    {
        "a": 8,
        "b": true,
        "c": "1517-12-31"
    },
    {
        "a": 3,
        "b": false,
        "c": "1517-06-30"
    }
]
#end_FrameHE-to_json_records()

#start_FrameHE-to_json_split()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.to_json_split(indent=4)
{
    "columns": [
        "a",
        "b",
        "c"
    ],
    "index": [
        0,
        1,
        2,
        3
    ],
    "data": [
        [
            10,
            false,
            "1517-01-01"
        ],
        [
            2,
            true,
            "1517-04-01"
        ],
        [
            8,
            true,
            "1517-12-31"
        ],
        [
            3,
            false,
            "1517-06-30"
        ]
    ]
}
#end_FrameHE-to_json_split()

#start_FrameHE-to_json_values()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.to_json_values(indent=4)
[
    [
        10,
        false,
        "1517-01-01"
    ],
    [
        2,
        true,
        "1517-04-01"
    ],
    [
        8,
        true,
        "1517-12-31"
    ],
    [
        3,
        false,
        "1517-06-30"
    ]
]
#end_FrameHE-to_json_values()

#start_FrameHE-to_latex()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_latex()
\begin{table}[ht]
\centering
\begin{tabular}{c c c}
\hline\hline
   & a   & b    \\
\hline
p  & 10  & qrs  \\
q  & 2   & XYZ  \\
r  & 8   & 123  \\
s  & 3   &  wX  \\
\hline\end{tabular}
\end{table}
#end_FrameHE-to_latex()

#start_FrameHE-to_markdown()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_markdown()
|  |a  |b   |
|--|---|----|
|p |10 |qrs |
|q |2  |XYZ |
|r |8  |123 |
|s |3  | wX |
#end_FrameHE-to_markdown()

#start_FrameHE-to_msgpack()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_msgpack()
b'\x85\xc4\x02sf\xa7FrameHE\xc4\x04name\xa1x\xc4\x06blocks\xc4\xcd\x82\xc4\x02sf\xaaTypeBlocks\xc4\x06blocks\xc4\xb3\x92\x85\xc4\x02nd\xc3\xc4\x04type\xa3<i8\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4 \n\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U4\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4@q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00 \x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00\x00\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00w\x00\x00\x00X\x00\x00\x00 \x00\x00\x00\xc4\x05index\xc4S\x83\xc4\x02sf\xa5Index\xc4\x04name\xc0\xc4\x04data\xc49\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4\x10p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00\xc4\x07columns\xc4K\x83\xc4\x02sf\xa5Index\xc4\x04name\xc0\xc4\x04data\xc41\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x02\xc4\x04data\xc4\x08a\x00\x00\x00b\x00\x00\x00'
#end_FrameHE-to_msgpack()

#start_FrameHE-to_npy()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npy('/tmp/f.npy')
>>> sf.Frame.from_npy('/tmp/f.npy')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> import shutil
>>> shutil.rmtree('/tmp/f.npy')
#end_FrameHE-to_npy()

#start_FrameHE-to_npz()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npz('/tmp/f.npz')
>>> sf.Frame.from_npz('/tmp/f.npz')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_FrameHE-to_npz()

#start_FrameHE-to_pairs()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_pairs()
(('a', (('p', 10), ('q', 2), ('r', 8), ('s', 3))), ('b', (('p', 'qrs '), ('q', 'XYZ'), ('r', '123'), ('s', ' wX '))))
#end_FrameHE-to_pairs()

#start_FrameHE-to_pandas()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_pandas()
    a     b
p  10  qrs 
q   2   XYZ
r   8   123
s   3   wX 
#end_FrameHE-to_pandas()

#start_FrameHE-to_parquet()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_parquet('/tmp/f.parquet')
#end_FrameHE-to_parquet()

#start_FrameHE-to_pickle()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_pickle('/tmp/f.pickle')
>>> sf.Frame.from_pickle('/tmp/f.pickle')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_FrameHE-to_pickle()

#start_FrameHE-to_rst()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_rst()
+--+---+----+
|  |a  |b   |
+==+===+====+
|p |10 |qrs |
+--+---+----+
|q |2  |XYZ |
+--+---+----+
|r |8  |123 |
+--+---+----+
|s |3  | wX |
+--+---+----+
#end_FrameHE-to_rst()

#start_FrameHE-to_series()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_series()
<Series: x>
<Index>
('p', 'a')  10
('p', 'b')  qrs
('q', 'a')  2
('q', 'b')  XYZ
('r', 'a')  8
('r', 'b')  123
('s', 'a')  3
('s', 'b')   wX
<object>    <object>
#end_FrameHE-to_series()

#start_FrameHE-to_sqlite()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_sqlite('/tmp/f.db')
>>> import sqlite3
>>> conn = sqlite3.connect('/tmp/f.db')
>>> sf.Frame.from_sql("select * from x limit 2", connection=conn, index_depth=1)
<Frame>
<Index> a       b       c          <<U1>
<Index>
0       10      0       1517-01-01
1       2       1       1517-04-01
<int64> <int64> <int64> <<U10>
#end_FrameHE-to_sqlite()

#start_FrameHE-to_tsv()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_tsv('/tmp/f.tsv')
>>> from pathlib import Path
>>> Path('/tmp/f.tsv').read_text()
__index0__	a	b
p	0	1
q	2	3
r	4	5

#end_FrameHE-to_tsv()

#start_FrameHE-to_xarray()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_xarray()
<xarray.Dataset>
Dimensions:     (__index0__: 4)
Coordinates:
  * __index0__  (__index0__) <U1 'p' 'q' 'r' 's'
Data variables:
    a           (__index0__) int64 10 2 8 3
    b           (__index0__) <U4 'qrs ' 'XYZ' '123' ' wX '
#end_FrameHE-to_xarray()

#start_FrameHE-to_xlsx()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_xlsx('/tmp/f.xlsx')
#end_FrameHE-to_xlsx()

#start_FrameHE-STATIC
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.STATIC
True
#end_FrameHE-STATIC

#start_FrameHE-T
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.T
<FrameHE: x>
<Index>      0          1          2          3          <int64>
<Index>
a            10         2          8          3
b            False      True       True       False
c            1517-01-01 1517-04-01 1517-12-31 1517-06-30
<<U1>        <object>   <object>   <object>   <object>
#end_FrameHE-T

#start_FrameHE-columns
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.columns
<Index>
a
b
c
<<U1>
#end_FrameHE-columns

#start_FrameHE-dtypes
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.dtypes
<Series: x>
<Index>
a           int64
b           bool
c           datetime64[D]
<<U1>       <object>
#end_FrameHE-dtypes

#start_FrameHE-index
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.index
<Index>
0
1
2
3
<int64>
#end_FrameHE-index

#start_FrameHE-memory
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.memory
        L    Lu    LM   LMu   LMD  LMDu  R     Ru    RM   RMu   RMD  RMDu
Name    50   B     50   B     50   B     50    B     50   B     50   B
Index   208  B     224  B     112  B     8.3   KB    256  B     144  B
Columns 756  B     788  B     564  B     8.83  KB    812  B     588  B
Blocks  1.4  KB    1.45 KB    1.12 KB    1.4   KB    1.45 KB    1.12 KB
Total   2.43 KB    2.53 KB    1.87 KB    10.53 KB    2.58 KB    1.92 KB
#end_FrameHE-memory

#start_FrameHE-name
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.name
x
#end_FrameHE-name

#start_FrameHE-nbytes
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.nbytes
68
#end_FrameHE-nbytes

#start_FrameHE-ndim
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.ndim
2
#end_FrameHE-ndim

#start_FrameHE-shape
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.shape
(4, 3)
#end_FrameHE-shape

#start_FrameHE-size
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.size
12
#end_FrameHE-size

#start_FrameHE-__array__()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.__array__()
[[0 1]
 [2 3]
 [4 5]]
#end_FrameHE-__array__()

#start_FrameHE-__array_ufunc__()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> np.array((1, 0)) * f
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       0
q         2       0
r         4       0
<<U1>     <int64> <int64>
#end_FrameHE-__array_ufunc__()

#start_FrameHE-__bool__()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> bool(f)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_FrameHE-__bool__()

#start_FrameHE-__dataframe__()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> dfi = f.__dataframe__()
>>> tuple(dfi.get_columns())
(<DFIColumn: shape=(3,) dtype=<i8>, <DFIColumn: shape=(3,) dtype=<i8>)
#end_FrameHE-__dataframe__()

#start_FrameHE-__deepcopy__()
>>> import copy
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> copy.deepcopy(f)
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            0       1
q            2       3
r            4       5
<<U1>        <int64> <int64>
#end_FrameHE-__deepcopy__()

#start_FrameHE-__len__()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> len(f)
3
#end_FrameHE-__len__()

#start_FrameHE-__round__()
>>> f = sf.FrameHE((np.arange(6).reshape(3,2) * 4/3), index=('p', 'q', 'r'), columns=('a', 'b'), name='y')
>>> f
<FrameHE: y>
<Index>      a                  b                  <<U1>
<Index>
p            0.0                1.3333333333333333
q            2.6666666666666665 4.0
r            5.333333333333333  6.666666666666667
<<U1>        <float64>          <float64>
>>> round(f, 1)
<FrameHE: y>
<Index>      a         b         <<U1>
<Index>
p            0.0       1.3
q            2.7       4.0
r            5.3       6.7
<<U1>        <float64> <float64>
#end_FrameHE-__round__()

#start_FrameHE-all()
>>> f = sf.FrameHE((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f.all()
<Series>
<Index>
c        False
d        True
<<U1>    <bool>
#end_FrameHE-all()

#start_FrameHE-any()
>>> f = sf.FrameHE((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f.any()
<Series>
<Index>
c        False
d        True
<<U1>    <bool>
#end_FrameHE-any()

#start_FrameHE-astype[]()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.astype['c'](object)
<FrameHE: x>
<Index>      a       b      c          <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <object>
#end_FrameHE-astype[]()

#start_FrameHE-astype()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            0       1
q            2       3
r            4       5
<<U1>        <int64> <int64>
>>> f.astype(float)
<FrameHE: x>
<Index>      a         b         <<U1>
<Index>
p            0.0       1.0
q            2.0       3.0
r            4.0       5.0
<<U1>        <float64> <float64>
#end_FrameHE-astype()

#start_FrameHE-clip()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            0       1
q            2       3
r            4       5
<<U1>        <int64> <int64>
>>> f.clip(lower=2, upper=4)
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       2
q            2       3
r            4       4
<<U1>        <int64> <int64>
#end_FrameHE-clip()

#start_FrameHE-corr()
>>> f1 = sf.FrameHE((np.concatenate((np.arange(8) * 2, np.arange(8) ** 2)).reshape(4,4)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c', 'd'), name='x')
>>> f1.corr()
<FrameHE: x>
<Index>      a                  b                  c                  d                  <<U1>
<Index>
a            1.0                0.9888513796308233 0.965581028730576  0.9340437381585037
b            0.9888513796308233 0.9999999999999999 0.9923448088115435 0.972134396307783
c            0.9655810287305759 0.9923448088115435 0.9999999999999999 0.9934089501944108
d            0.9340437381585037 0.9721343963077829 0.9934089501944108 1.0
<<U1>        <float64>          <float64>          <float64>          <float64>
#end_FrameHE-corr()

#start_FrameHE-count()
>>> f = sf.FrameHE.from_items((('a', (10, 2, np.nan, 3)), ('b', ('qrs ', 'XYZ', None, None))), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a         b        <<U1>
<Index>
p            10.0      qrs
q            2.0       XYZ
r            nan       None
s            3.0       None
<<U1>        <float64> <object>
>>> f.count(skipna=True)
<Series>
<Index>
a        3
b        2
<<U1>    <int64>
>>> f.count(unique=True)
<Series>
<Index>
a        3
b        2
<<U1>    <int64>
#end_FrameHE-count()

#start_FrameHE-cov()
>>> f1 = sf.FrameHE((np.concatenate((np.arange(8) * 2, np.arange(8) ** 2)).reshape(4,4)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c', 'd'), name='x')
>>> f1.cov()
<FrameHE: x>
<Index>      a                  b                  c                  d                  <<U1>
<Index>
a            58.666666666666664 84.0               112.0              142.66666666666666
b            84.0               123.0              166.66666666666666 215.0
c            112.0              166.66666666666666 229.33333333333331 300.0
d            142.66666666666666 215.0              300.0              397.66666666666663
<<U1>        <float64>          <float64>          <float64>          <float64>
#end_FrameHE-cov()

#start_FrameHE-cumprod()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.cumprod()
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       1
q         0       3
r         0       15
<<U1>     <int64> <int64>
#end_FrameHE-cumprod()

#start_FrameHE-cumsum()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.cumsum()
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       1
q         2       4
r         6       9
<<U1>     <int64> <int64>
#end_FrameHE-cumsum()

#start_FrameHE-drop_duplicated()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
1            2.0       True     1517-04-01
2            nan       None     NaT
3            2.0       True     1517-04-01
<int64>      <float64> <object> <datetime64[D]>
>>> f.drop_duplicated()
<FrameHE: x>
<Index>      a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
2            nan       None     NaT
<int64>      <float64> <object> <datetime64[D]>
#end_FrameHE-drop_duplicated()

#start_FrameHE-dropfalsy()
>>> f = sf.FrameHE.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            0             NaT
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.dropfalsy()
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
#end_FrameHE-dropfalsy()

#start_FrameHE-dropna()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
1            2.0       True     1517-04-01
2            nan       None     NaT
3            2.0       True     1517-04-01
<int64>      <float64> <object> <datetime64[D]>
>>> f.dropna()
<FrameHE: x>
<Index>      a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
1            2.0       True     1517-04-01
3            2.0       True     1517-04-01
<int64>      <float64> <object> <datetime64[D]>
#end_FrameHE-dropna()

#start_FrameHE-duplicated()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
1            2.0       True     1517-04-01
2            nan       None     NaT
3            2.0       True     1517-04-01
<int64>      <float64> <object> <datetime64[D]>
>>> f.duplicated()
<Series>
<Index>
0        False
1        True
2        False
3        True
<int64>  <bool>
#end_FrameHE-duplicated()

#start_FrameHE-equals()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameHE((np.arange(6).reshape(3,2) * 4/3), index=('p', 'q', 'r'), columns=('a', 'b'), name='y')
>>> f1.equals(f2)
False
#end_FrameHE-equals()

#start_FrameHE-fillfalsy()
>>> f = sf.FrameHE.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            0             NaT
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.fillfalsy(dict(a=1, b='abc', c=np.datetime64('2022-01-10')))
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            1       abc   2022-01-10
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
#end_FrameHE-fillfalsy()

#start_FrameHE-fillfalsy_backward()
>>> f = sf.FrameHE.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            0       20      0
1            0       18      0
2            10      -3      0
3            2       18      1
<int64>      <int64> <int64> <int64>
>>> f.fillfalsy_backward()
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            10      20      1
1            10      18      1
2            10      -3      1
3            2       18      1
<int64>      <int64> <int64> <int64>
#end_FrameHE-fillfalsy_backward()

#start_FrameHE-fillfalsy_forward()
>>> f = sf.FrameHE.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            10      8       1
1            2       3       0
2            0       8       0
3            0       0       0
<int64>      <int64> <int64> <int64>
>>> f.fillfalsy_forward()
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            10      8       1
1            2       3       1
2            2       8       1
3            2       8       1
<int64>      <int64> <int64> <int64>
#end_FrameHE-fillfalsy_forward()

#start_FrameHE-fillfalsy_leading()
>>> f = sf.FrameHE.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            0       20      0
1            0       18      0
2            10      -3      0
3            2       18      1
<int64>      <int64> <int64> <int64>
>>> f.fillfalsy_leading(-1)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            -1      20      -1
1            -1      18      -1
2            10      -3      -1
3            2       18      1
<int64>      <int64> <int64> <int64>
#end_FrameHE-fillfalsy_leading()

#start_FrameHE-fillfalsy_trailing()
>>> f = sf.FrameHE.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            10      8       1
1            2       3       0
2            0       8       0
3            0       0       0
<int64>      <int64> <int64> <int64>
>>> f.fillfalsy_trailing(-1)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            10      8       1
1            2       3       -1
2            -1      8       -1
3            -1      -1      -1
<int64>      <int64> <int64> <int64>
#end_FrameHE-fillfalsy_trailing()

#start_FrameHE-fillna()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a         b     c               <<U1>
<Index>
0            10.0      qrs   1517-01-01
1            2.0       XYZ   1517-04-01
2            nan             NaT
3            2.0       123   1517-04-01
<int64>      <float64> <<U4> <datetime64[D]>
>>> f.fillna(-1)
<FrameHE: x>
<Index>      a         b     c          <<U1>
<Index>
0            10.0      qrs   1517-01-01
1            2.0       XYZ   1517-04-01
2            -1.0            -1
3            2.0       123   1517-04-01
<int64>      <float64> <<U4> <object>
#end_FrameHE-fillna()

#start_FrameHE-fillna_backward()
>>> f = sf.FrameHE.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y')
>>> f
<FrameHE: y>
<Index>      a         b         c         <<U1>
<Index>
0            nan       nan       nan
1            nan       8.0       nan
2            10.0      3.0       nan
3            2.0       8.0       1.0
<int64>      <float64> <float64> <float64>
>>> f.fillna_backward()
<FrameHE: y>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            10.0      8.0       1.0
2            10.0      3.0       1.0
3            2.0       8.0       1.0
<int64>      <float64> <float64> <float64>
#end_FrameHE-fillna_backward()

#start_FrameHE-fillna_forward()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.fillna_forward()
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       1.0
2            2.0       8.0       1.0
3            2.0       8.0       1.0
<int64>      <float64> <float64> <float64>
#end_FrameHE-fillna_forward()

#start_FrameHE-fillna_leading()
>>> f = sf.FrameHE.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y')
>>> f
<FrameHE: y>
<Index>      a         b         c         <<U1>
<Index>
0            nan       nan       nan
1            nan       8.0       nan
2            10.0      3.0       nan
3            2.0       8.0       1.0
<int64>      <float64> <float64> <float64>
>>> f.fillna_leading(-1)
<FrameHE: y>
<Index>      a         b         c         <<U1>
<Index>
0            -1.0      -1.0      -1.0
1            -1.0      8.0       -1.0
2            10.0      3.0       -1.0
3            2.0       8.0       1.0
<int64>      <float64> <float64> <float64>
#end_FrameHE-fillna_leading()

#start_FrameHE-fillna_trailing()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.fillna_trailing(-1)
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       -1.0
2            -1.0      8.0       -1.0
3            -1.0      -1.0      -1.0
<int64>      <float64> <float64> <float64>
#end_FrameHE-fillna_trailing()

#start_FrameHE-head()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.head(2)
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-head()

#start_FrameHE-iloc_max()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.iloc_max()
<Series>
<Index>
a        0
b        0
c        0
<<U1>    <int64>
#end_FrameHE-iloc_max()

#start_FrameHE-iloc_min()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.iloc_min()
<Series>
<Index>
a        1
b        1
c        0
<<U1>    <int64>
#end_FrameHE-iloc_min()

#start_FrameHE-insert_after()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameHE((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f1.insert_after('b', f2)
<FrameHE: x>
<Index>      a       b       c      d      <<U1>
<Index>
p            0       1       False  True
q            2       3       False  True
r            4       5       False  True
<<U1>        <int64> <int64> <bool> <bool>
#end_FrameHE-insert_after()

#start_FrameHE-insert_before()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameHE((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f1.insert_before('b', f2)
<FrameHE: x>
<Index>      a       c      d      b       <<U1>
<Index>
p            0       False  True   1
q            2       False  True   3
r            4       False  True   5
<<U1>        <int64> <bool> <bool> <int64>
#end_FrameHE-insert_before()

#start_FrameHE-isfalsy()
>>> f = sf.FrameHE.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            0             NaT
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.isfalsy()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       False  False  False
1       False  False  False
2       True   True   True
3       False  False  False
<int64> <bool> <bool> <bool>
#end_FrameHE-isfalsy()

#start_FrameHE-isin()
>>> f = sf.FrameHE.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')
>>> f.isin((0, 8))
<FrameHE: x>
<Index>      a      b      c      <<U1>
<Index>
0            False  True   False
1            False  False  True
2            True   True   True
3            True   True   True
<int64>      <bool> <bool> <bool>
#end_FrameHE-isin()

#start_FrameHE-isna()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.isna()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       False  False  False
1       False  False  True
2       True   False  True
3       True   True   True
<int64> <bool> <bool> <bool>
#end_FrameHE-isna()

#start_FrameHE-join_inner()
>>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_inner(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_FrameHE-join_inner()

#start_FrameHE-join_left()
>>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_left(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_FrameHE-join_left()

#start_FrameHE-join_outer()
>>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_outer(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_FrameHE-join_outer()

#start_FrameHE-join_right()
>>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_right(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_FrameHE-join_right()

#start_FrameHE-loc_max()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.loc_max()
<Series>
<Index>
a        0
b        0
c        0
<<U1>    <int64>
#end_FrameHE-loc_max()

#start_FrameHE-loc_min()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.loc_min()
<Series>
<Index>
a        1
b        1
c        0
<<U1>    <int64>
#end_FrameHE-loc_min()

#start_FrameHE-max()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.max()
<Series>
<Index>
a        4
b        5
<<U1>    <int64>
#end_FrameHE-max()

#start_FrameHE-mean()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.mean()
<Series>
<Index>
a        2.0
b        3.0
<<U1>    <float64>
#end_FrameHE-mean()

#start_FrameHE-median()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.median()
<Series>
<Index>
a        2.0
b        3.0
<<U1>    <float64>
#end_FrameHE-median()

#start_FrameHE-min()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.min()
<Series>
<Index>
a        0
b        1
<<U1>    <int64>
#end_FrameHE-min()

#start_FrameHE-notfalsy()
>>> f = sf.FrameHE.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            0             NaT
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.notfalsy()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       True   True   True
1       True   True   True
2       False  False  False
3       True   True   True
<int64> <bool> <bool> <bool>
#end_FrameHE-notfalsy()

#start_FrameHE-notna()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.notna()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       True   True   True
1       True   True   False
2       False  True   False
3       False  False  False
<int64> <bool> <bool> <bool>
#end_FrameHE-notna()

#start_FrameHE-pivot()
>>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f1.pivot(index_fields='b', columns_fields='c')
<FrameHE>
<Index: c> 0         1         <int64>
<Index: b>
0          11.0      nan
3          10.0      nan
8          nan       6.0
<int64>    <float64> <float64>
#end_FrameHE-pivot()

#start_FrameHE-pivot_stack()
>>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f1.pivot_stack()
<FrameHE: x>
<Index>                0       <int64>
<IndexHierarchy>
0                a     11
0                b     0
0                c     0
1                a     4
1                b     8
1                c     1
2                a     10
2                b     3
2                c     0
3                a     2
3                b     8
3                c     1
<int64>          <<U1> <int64>
#end_FrameHE-pivot_stack()

#start_FrameHE-pivot_unstack()
>>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = f1.pivot_stack()
>>> f2
<FrameHE: x>
<Index>                0       <int64>
<IndexHierarchy>
0                a     11
0                b     0
0                c     0
1                a     4
1                b     8
1                c     1
2                a     10
2                b     3
2                c     0
3                a     2
3                b     8
3                c     1
<int64>          <<U1> <int64>
>>> f2.pivot_unstack()
<FrameHE: x>
<IndexHierarchy> 0       0       0       <int64>
                 a       b       c       <<U1>
<Index>
0                11      0       0
1                4       8       1
2                10      3       0
3                2       8       1
<int64>          <int64> <int64> <int64>
#end_FrameHE-pivot_unstack()

#start_FrameHE-prod()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.prod()
<Series>
<Index>
a        0
b        15
<<U1>    <int64>
#end_FrameHE-prod()

#start_FrameHE-rank_dense()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            11      0       0
1            4       8       1
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.rank_dense()
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            3       0       0
1            1       2       1
2            2       1       0
3            0       2       1
<int64>      <int64> <int64> <int64>
#end_FrameHE-rank_dense()

#start_FrameHE-rank_max()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            11      0       0
1            4       8       1
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.rank_max()
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            3       0       1
1            1       3       3
2            2       1       1
3            0       3       3
<int64>      <int64> <int64> <int64>
#end_FrameHE-rank_max()

#start_FrameHE-rank_mean()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            11      0       0
1            4       8       1
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.rank_mean()
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            3.0       0.0       0.5
1            1.0       2.5       2.5
2            2.0       1.0       0.5
3            0.0       2.5       2.5
<int64>      <float64> <float64> <float64>
#end_FrameHE-rank_mean()

#start_FrameHE-rank_min()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            11      0       0
1            4       8       1
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.rank_min()
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            3       0       0
1            1       2       2
2            2       1       0
3            0       2       2
<int64>      <int64> <int64> <int64>
#end_FrameHE-rank_min()

#start_FrameHE-rank_ordinal()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            11      0       0
1            4       8       1
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.rank_ordinal()
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            3       0       0
1            1       2       2
2            2       1       1
3            0       3       3
<int64>      <int64> <int64> <int64>
#end_FrameHE-rank_ordinal()

#start_FrameHE-rehierarch()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rehierarch((1, 0))
<FrameHE: x>
<Index>                  a       b      c               <<U1>
<IndexHierarchy>
p                0       10      False  1517-01-01
p                1       8       True   1517-12-31
q                0       2       True   1517-04-01
q                1       3       False  1517-06-30
<<U1>            <int64> <int64> <bool> <datetime64[D]>
#end_FrameHE-rehierarch()

#start_FrameHE-reindex()
>>> f = sf.FrameHE.from_items((('a', (10, 2, 8, 3)), ('b', ('qrs ', 'XYZ', '123', ' wX '))), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.reindex(('q', 't', 's', 'r'), fill_value=sf.FillValueAuto(i=-1, U=''))
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
q            2       XYZ
t            -1
s            3        wX
r            8       123
<<U1>        <int64> <<U4>
#end_FrameHE-reindex()

#start_FrameHE-relabel()
>>> f = sf.FrameHE.from_records(((10, False, '1517-01-01'), (8, True,'1517-04-01')), index=('p', 'q'), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
>>> f.relabel(('y', 'z'))
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
y            10      False  1517-01-01
z            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
>>> f.relabel(dict(q='x', p='y'))
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
y            10      False  1517-01-01
x            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
>>> f.relabel(lambda l: f'+{l.upper()}+')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
+P+          10      False  1517-01-01
+Q+          8       True   1517-04-01
<<U3>        <int64> <bool> <datetime64[D]>
#end_FrameHE-relabel()

#start_FrameHE-relabel_flat()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.relabel_flat(index=True)
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
(0, 'p')     10      False  1517-01-01
(0, 'q')     2       True   1517-04-01
(1, 'p')     8       True   1517-12-31
(1, 'q')     3       False  1517-06-30
<object>     <int64> <bool> <datetime64[D]>
#end_FrameHE-relabel_flat()

#start_FrameHE-relabel_level_add()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.relabel_level_add('I')
<FrameHE: x>
<Index>                        a       b      c               <<U1>
<IndexHierarchy>
I                0       p     10      False  1517-01-01
I                0       q     2       True   1517-04-01
I                1       p     8       True   1517-12-31
I                1       q     3       False  1517-06-30
<<U1>            <int64> <<U1> <int64> <bool> <datetime64[D]>
#end_FrameHE-relabel_level_add()

#start_FrameHE-relabel_level_drop()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.iloc[:2].relabel_level_drop(1)
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            2       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
#end_FrameHE-relabel_level_drop()

#start_FrameHE-relabel_shift_in()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.relabel_shift_in('a')
<FrameHE: x>
<Index>                                            b      c               <<U1>
<IndexHierarchy: ('__index0__', '...
0                                    p     10      False  1517-01-01
0                                    q     2       True   1517-04-01
1                                    p     8       True   1517-12-31
1                                    q     3       False  1517-06-30
<int64>                              <<U1> <int64> <bool> <datetime64[D]>
#end_FrameHE-relabel_shift_in()

#start_FrameHE-relabel_shift_out()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rename(index=('d', 'e')).relabel_shift_out([1, 0])
<FrameHE: x>
<Index>      e     d       a       b      c               <<U1>
<Index>
0            p     0       10      False  1517-01-01
1            q     0       2       True   1517-04-01
2            p     1       8       True   1517-12-31
3            q     1       3       False  1517-06-30
<int64>      <<U1> <int64> <int64> <bool> <datetime64[D]>
#end_FrameHE-relabel_shift_out()

#start_FrameHE-rename()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rename('y', index='p', columns='q')
<FrameHE: y>
<Index: q>                a       b      c               <<U1>
<IndexHierarchy: p>
0                   p     10      False  1517-01-01
0                   q     2       True   1517-04-01
1                   p     8       True   1517-12-31
1                   q     3       False  1517-06-30
<int64>             <<U1> <int64> <bool> <datetime64[D]>
#end_FrameHE-rename()

#start_FrameHE-roll()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.roll(3)
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            2       True   1517-04-01
1            8       True   1517-12-31
2            3       False  1517-06-30
3            10      False  1517-01-01
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-roll()

#start_FrameHE-sample()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.sample(2, 2, seed=0)
<FrameHE: x>
<Index>      b      c               <<U1>
<Index>
2            True   1517-12-31
3            False  1517-06-30
<int64>      <bool> <datetime64[D]>
#end_FrameHE-sample()

#start_FrameHE-set_columns()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.set_columns((1, 'p'), drop=True)
<FrameHE: x>
<Index: (1, 'p')>       8       True   1517-12-31      <object>
<IndexHierarchy>
0                 p     10      False  1517-01-01
0                 q     2       True   1517-04-01
1                 q     3       False  1517-06-30
<int64>           <<U1> <int64> <bool> <datetime64[D]>
#end_FrameHE-set_columns()

#start_FrameHE-set_columns_hierarchy()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.set_columns_hierarchy([(1, 'p'), (1, 'q')], drop=True)
<FrameHE: x>
<IndexHierarchy: ((1, 'p'), (1, '...       8       True   1517-12-31      <object>
                                           3       False  1517-06-30      <object>
<IndexHierarchy>
0                                    p     10      False  1517-01-01
0                                    q     2       True   1517-04-01
<int64>                              <<U1> <int64> <bool> <datetime64[D]>
#end_FrameHE-set_columns_hierarchy()

#start_FrameHE-set_index()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.set_index('c', drop=True, index_constructor=sf.IndexDate)
<FrameHE: x>
<Index>         a       b      <<U1>
<IndexDate: c>
1517-01-01      10      False
1517-04-01      2       True
1517-12-31      8       True
1517-06-30      3       False
<datetime64[D]> <int64> <bool>
#end_FrameHE-set_index()

#start_FrameHE-set_index_hierarchy()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.set_index_hierarchy(['b', 'c'], drop=True, index_constructors=(sf.Index, sf.IndexDate))
<FrameHE: x>
<Index>                                      a       <<U1>
<IndexHierarchy: ('b', 'c')>
False                        1517-01-01      10
True                         1517-04-01      2
True                         1517-12-31      8
False                        1517-06-30      3
<bool>                       <datetime64[D]> <int64>
#end_FrameHE-set_index_hierarchy()

#start_FrameHE-shift()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.shift(3, fill_value=sf.FillValueAuto)
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            0       False  NaT
1            0       False  NaT
2            0       False  NaT
3            10      False  1517-01-01
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-shift()

#start_FrameHE-sort_columns()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.sort_columns(ascending=False)
<FrameHE: x>
<Index>                c               b      a       <<U1>
<IndexHierarchy>
0                p     1517-01-01      False  10
0                q     1517-04-01      True   2
1                p     1517-12-31      True   8
1                q     1517-06-30      False  3
<int64>          <<U1> <datetime64[D]> <bool> <int64>
#end_FrameHE-sort_columns()

#start_FrameHE-sort_index()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.sort_index(ascending=False)
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                q     3       False  1517-06-30
1                p     8       True   1517-12-31
0                q     2       True   1517-04-01
0                p     10      False  1517-01-01
<int64>          <<U1> <int64> <bool> <datetime64[D]>
#end_FrameHE-sort_index()

#start_FrameHE-sort_values()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.sort_values('c')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
3            3       False  1517-06-30
2            8       True   1517-12-31
<int64>      <int64> <bool> <datetime64[D]>
>>> f.sort_values(['c', 'b'], ascending=False)
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
2            8       True   1517-12-31
3            3       False  1517-06-30
1            2       True   1517-04-01
0            10      False  1517-01-01
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-sort_values()

#start_FrameHE-std()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.std()
<Series>
<Index>
a        1.632993161855452
b        1.632993161855452
<<U1>    <float64>
#end_FrameHE-std()

#start_FrameHE-sum()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.sum()
<Series>
<Index>
a        6
b        9
<<U1>    <int64>
#end_FrameHE-sum()

#start_FrameHE-tail()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.tail(2)
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-tail()

#start_FrameHE-transpose()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.transpose()
<FrameHE: x>
<Index>      p       q       r       <<U1>
<Index>
a            0       2       4
b            1       3       5
<<U1>        <int64> <int64> <int64>
#end_FrameHE-transpose()

#start_FrameHE-unique()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
1            2.0       True     1517-04-01
2            nan       None     NaT
3            2.0       True     1517-04-01
<int64>      <float64> <object> <datetime64[D]>
>>> f.unique()
[10.0 False datetime.date(1517, 1, 1) 2.0 True datetime.date(1517, 4, 1)
 nan None]
#end_FrameHE-unique()

#start_FrameHE-unset_columns()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            0       1
q            2       3
r            4       5
<<U1>        <int64> <int64>
>>> f.rename(columns='o').unset_columns()
<FrameHE: x>
<Index>      0        1        <int64>
<Index>
o            a        b
p            0        1
q            2        3
r            4        5
<<U1>        <object> <object>
#end_FrameHE-unset_columns()

#start_FrameHE-unset_index()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rename(index=(('d', 'e'))).unset_index()
<FrameHE: x>
<Index>      d       e     a       b      c               <<U1>
<Index>
0            0       p     10      False  1517-01-01
1            0       q     2       True   1517-04-01
2            1       p     8       True   1517-12-31
3            1       q     3       False  1517-06-30
<int64>      <int64> <<U1> <int64> <bool> <datetime64[D]>
#end_FrameHE-unset_index()

#start_FrameHE-var()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.var()
<Series>
<Index>
a        2.6666666666666665
b        2.6666666666666665
<<U1>    <float64>
#end_FrameHE-var()

#start_FrameHE-__contains__()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.__contains__('a')
True
#end_FrameHE-__contains__()

#start_FrameHE-__iter__()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.__iter__())
('a', 'b', 'c')
#end_FrameHE-__iter__()

#start_FrameHE-__reversed__()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.__reversed__())
('c', 'b', 'a')
#end_FrameHE-__reversed__()

#start_FrameHE-get()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.get('a')
<Series: a>
<Index>
0           10
1           2
2           8
3           3
<int64>     <int64>
>>> f.get('z', -1)
-1
#end_FrameHE-get()

#start_FrameHE-items()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.items())
(('a', <Series: a>
<Index>
0           10
1           2
2           8
3           3
<int64>     <int64>), ('b', <Series: b>
<Index>
0           False
1           True
2           True
3           False
<int64>     <bool>), ('c', <Series: c>
<Index>
0           1517-01-01
1           1517-04-01
2           1517-12-31
3           1517-06-30
<int64>     <datetime64[D]>))
#end_FrameHE-items()

#start_FrameHE-keys()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.keys()
<Index>
a
b
c
<<U1>
#end_FrameHE-keys()

#start_FrameHE-values
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.values
[[10 False datetime.date(1517, 1, 1)]
 [2 True datetime.date(1517, 4, 1)]
 [8 True datetime.date(1517, 12, 31)]
 [3 False datetime.date(1517, 6, 30)]]
#end_FrameHE-values

#start_FrameHE-interface
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.interface
<Frame>
<Index>                              cls_name group                doc                  <<U18>
<Index: signature>
__init__(data, *, index, columns,... FrameHE  Constructor          Initializer. Args...
from_arrow(value, *, index_depth,... FrameHE  Constructor          Realize a Frame f...
from_clipboard(*, delimiter, inde... FrameHE  Constructor          Create a Frame fr...
from_concat(frames, *, axis, unio... FrameHE  Constructor          Concatenate multi...
from_concat_items(items, *, axis,... FrameHE  Constructor          Produce a Frame w...
from_csv(fp, *, index_depth, inde... FrameHE  Constructor          Specialized versi...
from_delimited(fp, *, delimiter, ... FrameHE  Constructor          Create a Frame fr...
from_dict(mapping, *, index, fill... FrameHE  Constructor          Create a Frame fr...
from_dict_fields(fields, *, colum... FrameHE  Constructor          Frame constructor...
from_dict_records(records, *, ind... FrameHE  Constructor          Frame constructor...
from_dict_records_items(items, *,... FrameHE  Constructor          Frame constructor...
from_element(element, *, index, c... FrameHE  Constructor          Create a Frame fr...
from_element_items(items, *, inde... FrameHE  Constructor          Create a Frame fr...
from_elements(elements, *, index,... FrameHE  Constructor          Create a Frame fr...
from_fields(fields, *, index, col... FrameHE  Constructor          Frame constructor...
from_hdf5(fp, *, label, index_dep... FrameHE  Constructor          Load Frame from t...
from_items(pairs, *, index, fill_... FrameHE  Constructor          Frame constructor...
...                                  ...      ...                  ...
via_fill_value(fill_value).__le__... FrameHE  Accessor Fill Value
via_fill_value(fill_value).__eq__... FrameHE  Accessor Fill Value
via_fill_value(fill_value).__ne__... FrameHE  Accessor Fill Value
via_fill_value(fill_value).__gt__... FrameHE  Accessor Fill Value
via_fill_value(fill_value).__ge__... FrameHE  Accessor Fill Value
via_fill_value(fill_value).__radd... FrameHE  Accessor Fill Value
via_fill_value(fill_value).__rsub... FrameHE  Accessor Fill Value
via_fill_value(fill_value).__rmul... FrameHE  Accessor Fill Value
via_fill_value(fill_value).__rtru... FrameHE  Accessor Fill Value
via_fill_value(fill_value).__rflo... FrameHE  Accessor Fill Value
via_re(pattern, flags).search(pos... FrameHE  Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... FrameHE  Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... FrameHE  Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... FrameHE  Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... FrameHE  Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... FrameHE  Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... FrameHE  Accessor Regular ... Perform the same ...
<<U89>                               <<U7>    <<U27>               <<U83>
#end_FrameHE-interface

#start_FrameHE-__repr__()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> repr(f)
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-__repr__()

#start_FrameHE-__str__()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> str(f)
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-__str__()

#start_FrameHE-display()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.display()
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.display(sf.DisplayConfig(type_show=False))
  a  b     c
0 10 False 1517-01-01
1 2  True  1517-04-01
2 8  True  1517-12-31
3 3  False 1517-06-30
#end_FrameHE-display()

#start_FrameHE-display_tall()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.display_tall()
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-display_tall()

#start_FrameHE-display_wide()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.display_wide()
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-display_wide()

#start_FrameHE-assign[]()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign['a'](-1)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            -1      8       1
q            -1      -3      0
r            -1      8       9
s            -1      0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign[['a', 'c']](-1)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            -1      8       -1
q            -1      -3      -1
r            -1      8       -1
s            -1      0       -1
<<U1>        <int64> <int64> <int64>
#end_FrameHE-assign[]()

#start_FrameHE-assign[].apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign['a'].apply(lambda s: s / 100)
<FrameHE: x>
<Index>      a         b       c       <<U1>
<Index>
p            0.1       8       1
q            -0.02     -3      0
r            0.0       8       9
s            0.0       0       12
<<U1>        <float64> <int64> <int64>
#end_FrameHE-assign[].apply()

#start_FrameHE-assign[].apply_element()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign['a'].apply_element(lambda e: e / 100 if e < 8 else e)
<FrameHE: x>
<Index>      a         b       c       <<U1>
<Index>
p            10.0      8       1
q            -0.02     -3      0
r            0.0       8       9
s            0.0       0       12
<<U1>        <float64> <int64> <int64>
#end_FrameHE-assign[].apply_element()

#start_FrameHE-assign[].apply_element_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign['a'].apply_element_items(lambda l, e: e / 100 if l == ('q', 'a') else e)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameHE-assign[].apply_element_items()

#start_FrameHE-assign.iloc[]()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.iloc[2]((-1, -2, -3))
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            -1      -2      -3
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.iloc[2:](-1)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            -1      -1      -1
s            -1      -1      -1
<<U1>        <int64> <int64> <int64>
>>> f.assign.iloc[[0, 3]](-1)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            -1      -1      -1
q            -2      -3      0
r            0       8       9
s            -1      -1      -1
<<U1>        <int64> <int64> <int64>
#end_FrameHE-assign.iloc[]()

#start_FrameHE-assign.iloc[].apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.iloc[2:].apply(lambda s: s / 100)
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
p            10.0      8.0       1.0
q            -2.0      -3.0      0.0
r            0.0       0.08      0.09
s            0.0       0.0       0.12
<<U1>        <float64> <float64> <float64>
#end_FrameHE-assign.iloc[].apply()

#start_FrameHE-assign.iloc[].apply_element()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.iloc[1:].apply_element(lambda e: e / 100 if e < 8 else e)
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
p            10.0      8.0       1.0
q            -0.02     -0.03     0.0
r            0.0       8.0       9.0
s            0.0       0.0       12.0
<<U1>        <float64> <float64> <float64>
#end_FrameHE-assign.iloc[].apply_element()

#start_FrameHE-assign.iloc[].apply_element_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.iloc[1:].apply_element_items(lambda l, e: e / 100 if l == ('q', 'a') else e)
<FrameHE: x>
<Index>      a         b       c       <<U1>
<Index>
p            10.0      8       1
q            -0.02     -3      0
r            0.0       8       9
s            0.0       0       12
<<U1>        <float64> <int64> <int64>
#end_FrameHE-assign.iloc[].apply_element_items()

#start_FrameHE-assign.loc[]()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.loc['r'](-1)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            -1      -1      -1
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.loc['r':](-1)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            -1      -1      -1
s            -1      -1      -1
<<U1>        <int64> <int64> <int64>
>>> f.assign.loc[['p', 's']](-1)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            -1      -1      -1
q            -2      -3      0
r            0       8       9
s            -1      -1      -1
<<U1>        <int64> <int64> <int64>
#end_FrameHE-assign.loc[]()

#start_FrameHE-assign.loc[].apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.loc['r':].apply(lambda s: s / 100)
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
p            10.0      8.0       1.0
q            -2.0      -3.0      0.0
r            0.0       0.08      0.09
s            0.0       0.0       0.12
<<U1>        <float64> <float64> <float64>
#end_FrameHE-assign.loc[].apply()

#start_FrameHE-assign.loc[].apply_element()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.loc['r':].apply_element(lambda e: e / 100 if e < 10 else e)
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
p            10.0      8.0       1.0
q            -2.0      -3.0      0.0
r            0.0       0.08      0.09
s            0.0       0.0       12.0
<<U1>        <float64> <float64> <float64>
#end_FrameHE-assign.loc[].apply_element()

#start_FrameHE-assign.loc[].apply_element_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.loc['r':].apply_element_items(lambda l, e: e / 100 if l[1] == 'c' else e)
<FrameHE: x>
<Index>      a       b       c         <<U1>
<Index>
p            10      8       1.0
q            -2      -3      0.0
r            0       8       0.09
s            0       0       0.12
<<U1>        <int64> <int64> <float64>
#end_FrameHE-assign.loc[].apply_element_items()

#start_FrameHE-assign.bloc[]()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.bloc[f > 5](-1)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            -1      -1      1
q            -2      -3      0
r            0       -1      -1
s            0       0       -1
<<U1>        <int64> <int64> <int64>
#end_FrameHE-assign.bloc[]()

#start_FrameHE-assign.bloc[].apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.bloc[f > 5].apply(lambda s: s * .01)
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
p            0.1       0.08      1.0
q            -2.0      -3.0      0.0
r            0.0       0.08      0.09
s            0.0       0.0       0.12
<<U1>        <float64> <float64> <float64>
#end_FrameHE-assign.bloc[].apply()

#start_FrameHE-assign.bloc[].apply_element()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.bloc[f > 5].apply_element(lambda e: e * .01 if e == 8 else e)
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
p            10.0      0.08      1.0
q            -2.0      -3.0      0.0
r            0.0       0.08      9.0
s            0.0       0.0       12.0
<<U1>        <float64> <float64> <float64>
#end_FrameHE-assign.bloc[].apply_element()

#start_FrameHE-assign.bloc[].apply_element_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.bloc[f > 5].apply_element_items(lambda e: e * .01 if l[1] == 'c' else e)
TypeError('<lambda>() takes 1 positional argument but 2 were given')
#end_FrameHE-assign.bloc[].apply_element_items()

#start_FrameHE-bloc[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.bloc[f > 5]
<Series>
<Index>
('p', 'a') 10
('p', 'b') 8
('r', 'b') 8
('r', 'c') 9
('s', 'c') 12
<object>   <int64>
#end_FrameHE-bloc[]

#start_FrameHE-drop[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.drop['c']
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            10      8
q            -2      -3
r            0       8
s            0       0
<<U1>        <int64> <int64>
>>> f.drop['b':]
<FrameHE: x>
<Index>      a       <<U1>
<Index>
p            10
q            -2
r            0
s            0
<<U1>        <int64>
>>> f.drop[['a', 'c']]
<FrameHE: x>
<Index>      b       <<U1>
<Index>
p            8
q            -3
r            8
s            0
<<U1>        <int64>
#end_FrameHE-drop[]

#start_FrameHE-drop.iloc[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.drop.iloc[1]
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.drop.iloc[1:]
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
<<U1>        <int64> <int64> <int64>
>>> f.drop.iloc[[0, 2]]
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
q            -2      -3      0
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameHE-drop.iloc[]

#start_FrameHE-drop.loc[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.drop.loc['r']
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.drop.loc['r':]
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
<<U1>        <int64> <int64> <int64>
>>> f.drop.loc[['p', 's']]
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
q            -2      -3      0
r            0       8       9
<<U1>        <int64> <int64> <int64>
#end_FrameHE-drop.loc[]

#start_FrameHE-mask[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.mask['c']
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  True
q         False  False  True
r         False  False  True
s         False  False  True
<<U1>     <bool> <bool> <bool>
>>> f.mask['b':]
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  True   True
q         False  True   True
r         False  True   True
s         False  True   True
<<U1>     <bool> <bool> <bool>
>>> f.mask[['a', 'c']]
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         True   False  True
q         True   False  True
r         True   False  True
s         True   False  True
<<U1>     <bool> <bool> <bool>
#end_FrameHE-mask[]

#start_FrameHE-mask.iloc[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.mask.iloc[1]
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  False
q         True   True   True
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
>>> f.mask.iloc[1:]
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  False
q         True   True   True
r         True   True   True
s         True   True   True
<<U1>     <bool> <bool> <bool>
>>> f.mask.iloc[[0, 2]]
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         True   True   True
q         False  False  False
r         True   True   True
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameHE-mask.iloc[]

#start_FrameHE-mask.loc[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.mask.loc['r']
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  False
q         False  False  False
r         True   True   True
s         False  False  False
<<U1>     <bool> <bool> <bool>
>>> f.mask.loc['r':]
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  False
q         False  False  False
r         True   True   True
s         True   True   True
<<U1>     <bool> <bool> <bool>
>>> f.mask.loc[['p', 's']]
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         True   True   True
q         False  False  False
r         False  False  False
s         True   True   True
<<U1>     <bool> <bool> <bool>
#end_FrameHE-mask.loc[]

#start_FrameHE-masked_array[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.masked_array['c']
[[10 8 --]
 [-2 -3 --]
 [0 8 --]
 [0 0 --]]
>>> f.masked_array['b':]
[[10 -- --]
 [-2 -- --]
 [0 -- --]
 [0 -- --]]
>>> f.masked_array[['a', 'c']]
[[-- 8 --]
 [-- -3 --]
 [-- 8 --]
 [-- 0 --]]
#end_FrameHE-masked_array[]

#start_FrameHE-masked_array.iloc[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.masked_array.iloc[1]
[[10 8 1]
 [-- -- --]
 [0 8 9]
 [0 0 12]]
>>> f.masked_array.iloc[1:]
[[10 8 1]
 [-- -- --]
 [-- -- --]
 [-- -- --]]
>>> f.masked_array.iloc[[0, 2]]
[[-- -- --]
 [-2 -3 0]
 [-- -- --]
 [0 0 12]]
#end_FrameHE-masked_array.iloc[]

#start_FrameHE-masked_array.loc[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.masked_array.loc['r']
[[10 8 1]
 [-2 -3 0]
 [-- -- --]
 [0 0 12]]
>>> f.masked_array.loc['r':]
[[10 8 1]
 [-2 -3 0]
 [-- -- --]
 [-- -- --]]
>>> f.masked_array.loc[['p', 's']]
[[-- -- --]
 [-2 -3 0]
 [0 8 9]
 [-- -- --]]
#end_FrameHE-masked_array.loc[]

#start_FrameHE-[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f['b']
<Series: b>
<Index>
p           8
q           -3
r           8
s           0
<<U1>       <int64>
>>> f['b':]
<FrameHE: x>
<Index>      b       c       <<U1>
<Index>
p            8       1
q            -3      0
r            8       9
s            0       12
<<U1>        <int64> <int64>
>>> f[['a', 'c']]
<FrameHE: x>
<Index>      a       c       <<U1>
<Index>
p            10      1
q            -2      0
r            0       9
s            0       12
<<U1>        <int64> <int64>
#end_FrameHE-[]

#start_FrameHE-iloc[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iloc[2]
<Series: r>
<Index>
a           0
b           8
c           9
<<U1>       <int64>
>>> f.iloc[2:]
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.iloc[[0, 3]]
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameHE-iloc[]

#start_FrameHE-loc[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.loc['r']
<Series: r>
<Index>
a           0
b           8
c           9
<<U1>       <int64>
>>> f.loc['r':]
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.loc[['p', 's']]
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameHE-loc[]

#start_FrameHE-iter_array()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array())
(array([10, -2,  0,  0]), array([ 8, -3,  8,  0]), array([ 1,  0,  9, 12]))
#end_FrameHE-iter_array()

#start_FrameHE-iter_array().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array().apply(lambda v: v.sum())
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_FrameHE-iter_array().apply()

#start_FrameHE-iter_array().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array().apply_iter(lambda v: v.sum()))
(8, 13, 22)
#end_FrameHE-iter_array().apply_iter()

#start_FrameHE-iter_array().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array().apply_iter_items(lambda v: v.sum()))
(('a', 8), ('b', 13), ('c', 22))
#end_FrameHE-iter_array().apply_iter_items()

#start_FrameHE-iter_array().apply_pool()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array().apply_pool(lambda v: v.sum(), use_threads=True)
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_FrameHE-iter_array().apply_pool()

#start_FrameHE-iter_array_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array_items())
(('a', array([10, -2,  0,  0])), ('b', array([ 8, -3,  8,  0])), ('c', array([ 1,  0,  9, 12])))
#end_FrameHE-iter_array_items()

#start_FrameHE-iter_array_items().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array_items().apply(lambda k, v: v.sum() if k != 'b' else -1)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_FrameHE-iter_array_items().apply()

#start_FrameHE-iter_array_items().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array_items().apply_iter(lambda k, v: v.sum() if k != 'b' else -1))
(8, -1, 22)
#end_FrameHE-iter_array_items().apply_iter()

#start_FrameHE-iter_array_items().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array_items().apply_iter_items(lambda k, v: v.sum() if k != 'b' else -1))
(('a', 8), ('b', -1), ('c', 22))
#end_FrameHE-iter_array_items().apply_iter_items()

#start_FrameHE-iter_array_items().apply_pool()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array_items().apply_pool(lambda pair: pair[1].sum() if pair[0] != 'b' else -1, use_threads=True)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_FrameHE-iter_array_items().apply_pool()

#start_FrameHE-iter_element()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element())
(10, 8, 1, -2, -3, 0, 0, 8, 9, 0, 0, 12)
#end_FrameHE-iter_element()

#start_FrameHE-iter_element().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element().apply(lambda e: e > 5)
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         True   True   False
q         False  False  False
r         False  True   True
s         False  False  True
<<U1>     <bool> <bool> <bool>
#end_FrameHE-iter_element().apply()

#start_FrameHE-iter_element().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element().apply_iter(lambda e: e > 10))
(False, False, False, False, False, False, False, False, False, False, False, True)
#end_FrameHE-iter_element().apply_iter()

#start_FrameHE-iter_element().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element().apply_iter_items(lambda e: e > 10))
((('p', 'a'), False), (('p', 'b'), False), (('p', 'c'), False), (('q', 'a'), False), (('q', 'b'), False), (('q', 'c'), False), (('r', 'a'), False), (('r', 'b'), False), (('r', 'c'), False), (('s', 'a'), False), (('s', 'b'), False), (('s', 'c'), True))
#end_FrameHE-iter_element().apply_iter_items()

#start_FrameHE-iter_element().apply_pool()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element().apply_pool(lambda e: e > 5, use_threads=True)
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         True   True   False
q         False  False  False
r         False  True   True
s         False  False  True
<<U1>     <bool> <bool> <bool>
#end_FrameHE-iter_element().apply_pool()

#start_FrameHE-iter_element().map_all()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> f.iter_element().map_all({0: 200, 1: -1, 2: 45})
<FrameHE>
<Index>   a       b       c       <<U1>
<Index>
p         -1      45      -1
q         45      -1      200
r         200     45      45
s         200     200     -1
<<U1>     <int64> <int64> <int64>
#end_FrameHE-iter_element().map_all()

#start_FrameHE-iter_element().map_all_iter()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_all_iter({0: 200, 1: -1, 2: 45}))
(-1, 45, -1, 45, -1, 200, 200, 45, 45, 200, 200, -1)
#end_FrameHE-iter_element().map_all_iter()

#start_FrameHE-iter_element().map_all_iter_items()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_all_iter_items({0: 200, 1: -1, 2: 45}))
((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), 200), (('r', 'a'), 200), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), 200), (('s', 'b'), 200), (('s', 'c'), -1))
#end_FrameHE-iter_element().map_all_iter_items()

#start_FrameHE-iter_element().map_any()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> f.iter_element().map_any({1: -1, 2: 45})
<FrameHE>
<Index>   a       b       c       <<U1>
<Index>
p         -1      45      -1
q         45      -1      0
r         0       45      45
s         0       0       -1
<<U1>     <int64> <int64> <int64>
#end_FrameHE-iter_element().map_any()

#start_FrameHE-iter_element().map_any_iter()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_any_iter({1: -1, 2: 45}))
(-1, 45, -1, 45, -1, 0, 0, 45, 45, 0, 0, -1)
#end_FrameHE-iter_element().map_any_iter()

#start_FrameHE-iter_element().map_any_iter_items()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_any_iter_items({1: -1, 2: 45}))
((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), 0), (('r', 'a'), 0), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), 0), (('s', 'b'), 0), (('s', 'c'), -1))
#end_FrameHE-iter_element().map_any_iter_items()

#start_FrameHE-iter_element().map_fill()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> f.iter_element().map_fill({1: -1, 2: 45}, fill_value=np.nan)
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         -1.0      45.0      -1.0
q         45.0      -1.0      nan
r         nan       45.0      45.0
s         nan       nan       -1.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-iter_element().map_fill()

#start_FrameHE-iter_element().map_fill_iter()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_fill_iter({1: -1, 2: 45}, fill_value=np.nan))
(-1, 45, -1, 45, -1, nan, nan, 45, 45, nan, nan, -1)
#end_FrameHE-iter_element().map_fill_iter()

#start_FrameHE-iter_element().map_fill_iter_items()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_fill_iter_items({1: -1, 2: 45}, fill_value=np.nan))
((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), nan), (('r', 'a'), nan), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), nan), (('s', 'b'), nan), (('s', 'c'), -1))
#end_FrameHE-iter_element().map_fill_iter_items()

#start_FrameHE-iter_element_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element_items())
((('p', 'a'), 10), (('p', 'b'), 8), (('p', 'c'), 1), (('q', 'a'), -2), (('q', 'b'), -3), (('q', 'c'), 0), (('r', 'a'), 0), (('r', 'b'), 8), (('r', 'c'), 9), (('s', 'a'), 0), (('s', 'b'), 0), (('s', 'c'), 12))
#end_FrameHE-iter_element_items()

#start_FrameHE-iter_element_items().apply()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element_items().apply(lambda k, v: v > 1 if k != ('q', 'b') else 'x')
<FrameHE>
<Index>   a      b        c      <<U1>
<Index>
p         False  True     False
q         True   x        False
r         False  True     True
s         False  False    False
<<U1>     <bool> <object> <bool>
#end_FrameHE-iter_element_items().apply()

#start_FrameHE-iter_element_items().apply_iter()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element_items().apply_iter(lambda k, v: v > 1 if k != ('q', 'b') else 'x'))
(False, True, False, True, 'x', False, False, True, True, False, False, False)
#end_FrameHE-iter_element_items().apply_iter()

#start_FrameHE-iter_element_items().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element_items().apply_iter_items(lambda k, v: v > 1 if k != ('q', 'b') else 'x'))
((('p', 'a'), False), (('p', 'b'), True), (('p', 'c'), False), (('q', 'a'), True), (('q', 'b'), 'x'), (('q', 'c'), False), (('r', 'a'), False), (('r', 'b'), True), (('r', 'c'), True), (('s', 'a'), False), (('s', 'b'), False), (('s', 'c'), False))
#end_FrameHE-iter_element_items().apply_iter_items()

#start_FrameHE-iter_element_items().apply_pool()
>>> def func(pair): return pair[1] > 0 and pair[0] == ('q', 'b')
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element_items().apply_pool(func, use_threads=True)
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  False
q         False  True   False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameHE-iter_element_items().apply_pool()

#start_FrameHE-iter_element_items().map_all()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_element_items().map_all({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1})
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         200     -1
q         45      1
<<U1>     <int64> <int64>
#end_FrameHE-iter_element_items().map_all()

#start_FrameHE-iter_element_items().map_all_iter()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_all_iter({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1}))
(200, -1, 45, 1)
#end_FrameHE-iter_element_items().map_all_iter()

#start_FrameHE-iter_element_items().map_all_iter_items()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_all_iter_items({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1}))
((('p', 'a'), 200), (('p', 'b'), -1), (('q', 'a'), 45), (('q', 'b'), 1))
#end_FrameHE-iter_element_items().map_all_iter_items()

#start_FrameHE-iter_element_items().map_any()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_element_items().map_any({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1})
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         200     3
q         9       1
<<U1>     <int64> <int64>
#end_FrameHE-iter_element_items().map_any()

#start_FrameHE-iter_element_items().map_any_iter()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_any_iter({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}))
(200, 3, 9, 1)
#end_FrameHE-iter_element_items().map_any_iter()

#start_FrameHE-iter_element_items().map_any_iter_items()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_any_iter_items({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}))
((('p', 'a'), 200), (('p', 'b'), 3), (('q', 'a'), 9), (('q', 'b'), 1))
#end_FrameHE-iter_element_items().map_any_iter_items()

#start_FrameHE-iter_element_items().map_fill()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_element_items().map_fill({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1)
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         200     -1
q         -1      1
<<U1>     <int64> <int64>
#end_FrameHE-iter_element_items().map_fill()

#start_FrameHE-iter_element_items().map_fill_iter()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_fill_iter({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1))
(200, -1, -1, 1)
#end_FrameHE-iter_element_items().map_fill_iter()

#start_FrameHE-iter_element_items().map_fill_iter_items()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_fill_iter_items({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1))
((('p', 'a'), 200), (('p', 'b'), -1), (('q', 'a'), -1), (('q', 'b'), 1))
#end_FrameHE-iter_element_items().map_fill_iter_items()

#start_FrameHE-iter_group()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group('c'))
(<FrameHE>
<Index>   a       b       c       <<U1>
<Index>
0         11      0       0
2         10      3       0
<int64>   <int64> <int64> <int64>, <FrameHE>
<Index>   a       b       c       <<U1>
<Index>
1         4       8       1
3         2       8       1
<int64>   <int64> <int64> <int64>)
#end_FrameHE-iter_group()

#start_FrameHE-iter_group().apply()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group('c').apply(lambda f: f['b'].sum())
<Series>
<Index: c>
0          3
1          16
<int64>    <int64>
#end_FrameHE-iter_group().apply()

#start_FrameHE-iter_group().apply_iter()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group('c').apply_iter(lambda f: f['b'].sum()))
(3, 16)
#end_FrameHE-iter_group().apply_iter()

#start_FrameHE-iter_group().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group('c').apply_iter_items(lambda f: f['b'].sum()))
((0, 3), (1, 16))
#end_FrameHE-iter_group().apply_iter_items()

#start_FrameHE-iter_group().apply_pool()
>>> def func(f): return f['b'].sum()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group('c').apply_pool(func, use_threads=True)
<Series>
<Index: c>
0          3
1          16
<int64>    <int64>
#end_FrameHE-iter_group().apply_pool()

#start_FrameHE-iter_group_array()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array('c'))
(array([[11,  0,  0],
       [10,  3,  0]]), array([[4, 8, 1],
       [2, 8, 1]]))
#end_FrameHE-iter_group_array()

#start_FrameHE-iter_group_array().apply()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_array('c').apply(lambda a: np.sum(a))
<Series>
<Index: c>
0          24
1          24
<int64>    <int64>
#end_FrameHE-iter_group_array().apply()

#start_FrameHE-iter_group_array().apply_iter()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array('c').apply_iter(lambda a: np.sum(a)))
(24, 24)
#end_FrameHE-iter_group_array().apply_iter()

#start_FrameHE-iter_group_array().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array('c').apply_iter_items(lambda a: np.sum(a)))
((0, 24), (1, 24))
#end_FrameHE-iter_group_array().apply_iter_items()

#start_FrameHE-iter_group_array().apply_pool()
>>> def func(a): return np.sum(a)
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_array('c').apply_pool(func, use_threads=True)
<Series>
<Index: c>
0          24
1          24
<int64>    <int64>
#end_FrameHE-iter_group_array().apply_pool()

#start_FrameHE-iter_group_array_items()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array_items('c'))
((0, array([[11,  0,  0],
       [10,  3,  0]])), (1, array([[4, 8, 1],
       [2, 8, 1]])))
#end_FrameHE-iter_group_array_items()

#start_FrameHE-iter_group_array_items().apply()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_array_items('c').apply(lambda k, v: np.sum(v) if k == 0 else v.shape)
<Series>
<Index: c>
0          24
1          (2, 3)
<int64>    <object>
#end_FrameHE-iter_group_array_items().apply()

#start_FrameHE-iter_group_array_items().apply_iter()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array_items('c').apply_iter(lambda k, v: np.sum(v) if k == 0 else v.shape))
(24, (2, 3))
#end_FrameHE-iter_group_array_items().apply_iter()

#start_FrameHE-iter_group_array_items().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array_items('c').apply_iter_items(lambda k, v: np.sum(v) if k == 0 else v.shape))
((0, 24), (1, (2, 3)))
#end_FrameHE-iter_group_array_items().apply_iter_items()

#start_FrameHE-iter_group_items()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_items('c'))
((0, <FrameHE>
<Index>   a       b       c       <<U1>
<Index>
0         11      0       0
2         10      3       0
<int64>   <int64> <int64> <int64>), (1, <FrameHE>
<Index>   a       b       c       <<U1>
<Index>
1         4       8       1
3         2       8       1
<int64>   <int64> <int64> <int64>))
#end_FrameHE-iter_group_items()

#start_FrameHE-iter_group_items().apply()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_items('c').apply(lambda k, v: v['b'].sum() if k == 0 else v.shape)
<Series>
<Index: c>
0          3
1          (2, 3)
<int64>    <object>
#end_FrameHE-iter_group_items().apply()

#start_FrameHE-iter_group_items().apply_iter()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_items('c').apply_iter(lambda k, v: v['b'].sum() if k == 0 else v.shape))
(3, (2, 3))
#end_FrameHE-iter_group_items().apply_iter()

#start_FrameHE-iter_group_items().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_items('c').apply_iter_items(lambda k, v: v['b'].sum() if k == 0 else v.shape))
((0, 3), (1, (2, 3)))
#end_FrameHE-iter_group_items().apply_iter_items()

#start_FrameHE-iter_group_labels()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels(1))
(<FrameHE>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
1                p     8       True   1517-12-31
<int64>          <<U1> <int64> <bool> <datetime64[D]>, <FrameHE>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                q     2       True   1517-04-01
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>)
#end_FrameHE-iter_group_labels()

#start_FrameHE-iter_group_labels().apply()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels(1).apply(lambda f: f['b'].sum())
<Series>
<Index>
p        1
q        1
<<U1>    <int64>
#end_FrameHE-iter_group_labels().apply()

#start_FrameHE-iter_group_labels().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels(1).apply_iter(lambda f: f['b'].sum()))
(1, 1)
#end_FrameHE-iter_group_labels().apply_iter()

#start_FrameHE-iter_group_labels().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels(1).apply_iter_items(lambda f: f['b'].sum()))
(('p', 1), ('q', 1))
#end_FrameHE-iter_group_labels().apply_iter_items()

#start_FrameHE-iter_group_labels_array()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array(1))
(array([[10, False, datetime.date(1517, 1, 1)],
       [8, True, datetime.date(1517, 12, 31)]], dtype=object), array([[2, True, datetime.date(1517, 4, 1)],
       [3, False, datetime.date(1517, 6, 30)]], dtype=object))
#end_FrameHE-iter_group_labels_array()

#start_FrameHE-iter_group_labels_array().apply()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels_array(1).apply(lambda a: np.sum(a[:, 0]))
<Series>
<Index>
p        18
q        5
<<U1>    <int64>
#end_FrameHE-iter_group_labels_array().apply()

#start_FrameHE-iter_group_labels_array().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array(1).apply_iter(lambda a: np.sum(a[:, 0])))
(18, 5)
#end_FrameHE-iter_group_labels_array().apply_iter()

#start_FrameHE-iter_group_labels_array().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array(1).apply_iter_items(lambda a: np.sum(a[:, 0])))
(('p', 18), ('q', 5))
#end_FrameHE-iter_group_labels_array().apply_iter_items()

#start_FrameHE-iter_group_labels_array_items()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array_items(1))
(('p', array([[10, False, datetime.date(1517, 1, 1)],
       [8, True, datetime.date(1517, 12, 31)]], dtype=object)), ('q', array([[2, True, datetime.date(1517, 4, 1)],
       [3, False, datetime.date(1517, 6, 30)]], dtype=object)))
#end_FrameHE-iter_group_labels_array_items()

#start_FrameHE-iter_group_labels_array_items().apply()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels_array_items(1).apply(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1)
<Series>
<Index>
p        -1
q        5
<<U1>    <int64>
#end_FrameHE-iter_group_labels_array_items().apply()

#start_FrameHE-iter_group_labels_array_items().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array_items(1).apply_iter(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1))
(-1, 5)
#end_FrameHE-iter_group_labels_array_items().apply_iter()

#start_FrameHE-iter_group_labels_array_items().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array_items(1).apply_iter_items(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1))
(('p', -1), ('q', 5))
#end_FrameHE-iter_group_labels_array_items().apply_iter_items()

#start_FrameHE-iter_group_labels_items()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_items(1))
(('p', <FrameHE>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
1                p     8       True   1517-12-31
<int64>          <<U1> <int64> <bool> <datetime64[D]>), ('q', <FrameHE>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                q     2       True   1517-04-01
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>))
#end_FrameHE-iter_group_labels_items()

#start_FrameHE-iter_group_labels_items().apply()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels_items(1).apply(lambda k, v: v['b'].sum() if k == 'p' else -1)
<Series>
<Index>
p        1
q        -1
<<U1>    <int64>
#end_FrameHE-iter_group_labels_items().apply()

#start_FrameHE-iter_group_labels_items().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_items(1).apply_iter(lambda k, v: v['b'].sum() if k == 'p' else -1))
(1, -1)
#end_FrameHE-iter_group_labels_items().apply_iter()

#start_FrameHE-iter_group_labels_items().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_items(1).apply_iter_items(lambda k, v: v['b'].sum() if k == 'p' else -1))
(('p', 1), ('q', -1))
#end_FrameHE-iter_group_labels_items().apply_iter_items()

#start_FrameHE-iter_series()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series())
(<Series: a>
<Index>
p           10
q           -2
r           0
s           0
<<U1>       <int64>, <Series: b>
<Index>
p           8
q           -3
r           8
s           0
<<U1>       <int64>, <Series: c>
<Index>
p           1
q           0
r           9
s           12
<<U1>       <int64>)
#end_FrameHE-iter_series()

#start_FrameHE-iter_series().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series().apply(lambda v: v.sum())
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_FrameHE-iter_series().apply()

#start_FrameHE-iter_series().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series().apply_iter(lambda v: v.sum()))
(8, 13, 22)
#end_FrameHE-iter_series().apply_iter()

#start_FrameHE-iter_series().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series().apply_iter_items(lambda v: v.sum()))
(('a', 8), ('b', 13), ('c', 22))
#end_FrameHE-iter_series().apply_iter_items()

#start_FrameHE-iter_series().apply_pool()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series().apply_pool(lambda v: v.sum(), use_threads=True)
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_FrameHE-iter_series().apply_pool()

#start_FrameHE-iter_series_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series_items())
(('a', <Series: a>
<Index>
p           10
q           -2
r           0
s           0
<<U1>       <int64>), ('b', <Series: b>
<Index>
p           8
q           -3
r           8
s           0
<<U1>       <int64>), ('c', <Series: c>
<Index>
p           1
q           0
r           9
s           12
<<U1>       <int64>))
#end_FrameHE-iter_series_items()

#start_FrameHE-iter_series_items().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series_items().apply(lambda k, v: v.sum() if k != 'b' else -1)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_FrameHE-iter_series_items().apply()

#start_FrameHE-iter_series_items().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series_items().apply_iter(lambda k, v: v.sum() if k != 'b' else -1))
(8, -1, 22)
#end_FrameHE-iter_series_items().apply_iter()

#start_FrameHE-iter_series_items().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series_items().apply_iter_items(lambda k, v: v.sum() if k != 'b' else -1))
(('a', 8), ('b', -1), ('c', 22))
#end_FrameHE-iter_series_items().apply_iter_items()

#start_FrameHE-iter_series_items().apply_pool()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series_items().apply_pool(lambda pair: pair[1].sum() if pair[0] != 'b' else -1, use_threads=True)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_FrameHE-iter_series_items().apply_pool()

#start_FrameHE-iter_tuple()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple())
(Axis(p=10, q=-2, r=0, s=0), Axis(p=8, q=-3, r=8, s=0), Axis(p=1, q=0, r=9, s=12))
#end_FrameHE-iter_tuple()

#start_FrameHE-iter_tuple().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_tuple().apply(lambda v: v.p + v.q)
<Series>
<Index>
a        8
b        5
c        1
<<U1>    <int64>
#end_FrameHE-iter_tuple().apply()

#start_FrameHE-iter_tuple().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple().apply_iter(lambda v: v.p + v.q))
(8, 5, 1)
#end_FrameHE-iter_tuple().apply_iter()

#start_FrameHE-iter_tuple().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple().apply_iter_items(lambda v: v.p + v.q))
(('a', 8), ('b', 5), ('c', 1))
#end_FrameHE-iter_tuple().apply_iter_items()

#start_FrameHE-iter_tuple().map_all()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_tuple().map_all({(2, 9): -1, (3, 8): -2})
<Series>
<Index>
a        -1
b        -2
<<U1>    <int64>
#end_FrameHE-iter_tuple().map_all()

#start_FrameHE-iter_tuple().map_all_iter()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_all_iter({(2, 9): -1, (3, 8): -2}))
(-1, -2)
#end_FrameHE-iter_tuple().map_all_iter()

#start_FrameHE-iter_tuple().map_all_iter_items()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_all_iter_items({(2, 9): -1, (3, 8): -2}))
(('a', -1), ('b', -2))
#end_FrameHE-iter_tuple().map_all_iter_items()

#start_FrameHE-iter_tuple().map_any()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_any({(2, 9): -1}))
('a', 'b')
#end_FrameHE-iter_tuple().map_any()

#start_FrameHE-iter_tuple().map_any_iter()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_any_iter({(2, 9): -1}))
(-1, Axis(p=3, q=8))
#end_FrameHE-iter_tuple().map_any_iter()

#start_FrameHE-iter_tuple().map_any_iter_items()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_any_iter_items({(2, 9): -1}))
(('a', -1), ('b', Axis(p=3, q=8)))
#end_FrameHE-iter_tuple().map_any_iter_items()

#start_FrameHE-iter_tuple().map_fill()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_tuple().map_fill({(2, 9): -1}, fill_value=np.nan)
<Series>
<Index>
a        -1.0
b        nan
<<U1>    <float64>
#end_FrameHE-iter_tuple().map_fill()

#start_FrameHE-iter_tuple().map_fill_iter()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_fill_iter({(2, 9): -1}, fill_value=np.nan))
(-1, nan)
#end_FrameHE-iter_tuple().map_fill_iter()

#start_FrameHE-iter_tuple().map_fill_iter_items()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_fill_iter_items({(2, 9): -1}, fill_value=np.nan))
(('a', -1), ('b', nan))
#end_FrameHE-iter_tuple().map_fill_iter_items()

#start_FrameHE-iter_tuple_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple_items())
(('a', Axis(p=10, q=-2, r=0, s=0)), ('b', Axis(p=8, q=-3, r=8, s=0)), ('c', Axis(p=1, q=0, r=9, s=12)))
#end_FrameHE-iter_tuple_items()

#start_FrameHE-iter_tuple_items().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_tuple_items().apply(lambda k, v: v.p + v.q if k == 'b' else -1)
<Series>
<Index>
a        -1
b        5
c        -1
<<U1>    <int64>
#end_FrameHE-iter_tuple_items().apply()

#start_FrameHE-iter_tuple_items().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple_items().apply_iter(lambda k, v: v.p + v.q if k == 'b' else -1))
(-1, 5, -1)
#end_FrameHE-iter_tuple_items().apply_iter()

#start_FrameHE-iter_tuple_items().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple_items().apply_iter_items(lambda k, v: v.p + v.q if k == 'b' else -1))
(('a', -1), ('b', 5), ('c', -1))
#end_FrameHE-iter_tuple_items().apply_iter_items()

#start_FrameHE-iter_tuple_items().map_all()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_tuple_items().map_all({('a', (2, 9)): -1, ('b', (3, 8)): -2})
<Series>
<Index>
a        -1
b        -2
<<U1>    <int64>
#end_FrameHE-iter_tuple_items().map_all()

#start_FrameHE-iter_tuple_items().map_all_iter()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_all_iter({('a', (2, 9)): -1, ('b', (3, 8)): -2}))
(-1, -2)
#end_FrameHE-iter_tuple_items().map_all_iter()

#start_FrameHE-iter_tuple_items().map_all_iter_items()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_all_iter_items({('a', (2, 9)): -1, ('b', (3, 8)): -2}))
(('a', -1), ('b', -2))
#end_FrameHE-iter_tuple_items().map_all_iter_items()

#start_FrameHE-iter_tuple_items().map_any()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_tuple_items().map_any({('a', (2, 9)): -1})
<Series>
<Index>
a        -1
b        Axis(p=3, q=8)
<<U1>    <object>
#end_FrameHE-iter_tuple_items().map_any()

#start_FrameHE-iter_tuple_items().map_any_iter()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_any_iter({('a', (2, 9)): -1}))
(-1, Axis(p=3, q=8))
#end_FrameHE-iter_tuple_items().map_any_iter()

#start_FrameHE-iter_tuple_items().map_any_iter_items()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_any_iter_items({('a', (2, 9)): -1}))
(('a', -1), ('b', Axis(p=3, q=8)))
#end_FrameHE-iter_tuple_items().map_any_iter_items()

#start_FrameHE-iter_tuple_items().map_fill()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_tuple_items().map_fill({('a', (2, 9)): -1}, fill_value=np.nan)
<Series>
<Index>
a        -1.0
b        nan
<<U1>    <float64>
#end_FrameHE-iter_tuple_items().map_fill()

#start_FrameHE-iter_tuple_items().map_fill_iter()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_fill_iter({('a', (2, 9)): -1}, fill_value=np.nan))
(-1, nan)
#end_FrameHE-iter_tuple_items().map_fill_iter()

#start_FrameHE-iter_tuple_items().map_fill_iter_items()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_fill_iter_items({('a', (2, 9)): -1}, fill_value=np.nan))
(('a', -1), ('b', nan))
#end_FrameHE-iter_tuple_items().map_fill_iter_items()

#start_FrameHE-iter_window()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window(size=2, step=1))
(<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
<<U1>        <int64> <int64> <int64>, <FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
q            -2      -3      0
r            0       8       9
<<U1>        <int64> <int64> <int64>, <FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>)
#end_FrameHE-iter_window()

#start_FrameHE-iter_window().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.iter_window(size=2, step=1).apply(lambda f: f.max().max())
<Series>
<Index>
q        10
r        9
s        12
<<U1>    <int64>
#end_FrameHE-iter_window().apply()

#start_FrameHE-iter_window().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window(size=2, step=1).apply_iter(lambda f: f.max().max()))
(10, 9, 12)
#end_FrameHE-iter_window().apply_iter()

#start_FrameHE-iter_window().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window(size=2, step=1).apply_iter_items(lambda f: f.max().max()))
(('q', 10), ('r', 9), ('s', 12))
#end_FrameHE-iter_window().apply_iter_items()

#start_FrameHE-iter_window_array()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array(size=2, step=1))
(array([[10,  8,  1],
       [-2, -3,  0]]), array([[-2, -3,  0],
       [ 0,  8,  9]]), array([[ 0,  8,  9],
       [ 0,  0, 12]]))
#end_FrameHE-iter_window_array()

#start_FrameHE-iter_window_array().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.iter_window_array(size=2, step=1).apply(lambda a: np.max(a))
<Series>
<Index>
q        10
r        9
s        12
<<U1>    <int64>
#end_FrameHE-iter_window_array().apply()

#start_FrameHE-iter_window_array().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array(size=2, step=1).apply_iter(lambda a: np.max(a)))
(10, 9, 12)
#end_FrameHE-iter_window_array().apply_iter()

#start_FrameHE-iter_window_array().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array(size=2, step=1).apply_iter_items(lambda a: np.max(a)))
(('q', 10), ('r', 9), ('s', 12))
#end_FrameHE-iter_window_array().apply_iter_items()

#start_FrameHE-iter_window_array_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array_items(size=2, step=1))
(('q', array([[10,  8,  1],
       [-2, -3,  0]])), ('r', array([[-2, -3,  0],
       [ 0,  8,  9]])), ('s', array([[ 0,  8,  9],
       [ 0,  0, 12]])))
#end_FrameHE-iter_window_array_items()

#start_FrameHE-iter_window_array_items().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.iter_window_array_items(size=2, step=1).apply(lambda k, v: np.max(v) if k == 'r' else np.min(v))
<Series>
<Index>
q        -3
r        9
s        0
<<U1>    <int64>
#end_FrameHE-iter_window_array_items().apply()

#start_FrameHE-iter_window_array_items().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array_items(size=2, step=1).apply_iter(lambda k, v: np.max(v) if k == 'r' else np.min(v)))
(-3, 9, 0)
#end_FrameHE-iter_window_array_items().apply_iter()

#start_FrameHE-iter_window_array_items().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array_items(size=2, step=1).apply_iter_items(lambda k, v: np.max(v) if k == 'r' else np.min(v)))
(('q', -3), ('r', 9), ('s', 0))
#end_FrameHE-iter_window_array_items().apply_iter_items()

#start_FrameHE-iter_window_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_items(size=2, step=1))
(('q', <FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
<<U1>        <int64> <int64> <int64>), ('r', <FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
q            -2      -3      0
r            0       8       9
<<U1>        <int64> <int64> <int64>), ('s', <FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>))
#end_FrameHE-iter_window_items()

#start_FrameHE-iter_window_items().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.iter_window_items(size=2, step=1).apply(lambda k, v: v.max().max() if k == 'r' else v.min().min())
<Series>
<Index>
q        -3
r        9
s        0
<<U1>    <int64>
#end_FrameHE-iter_window_items().apply()

#start_FrameHE-iter_window_items().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_items(size=2, step=1).apply_iter(lambda k, v: v.max().max() if k == 'r' else v.min().min()))
(-3, 9, 0)
#end_FrameHE-iter_window_items().apply_iter()

#start_FrameHE-iter_window_items().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_items(size=2, step=1).apply_iter_items(lambda k, v: v.max().max() if k == 'r' else v.min().min()))
(('q', -3), ('r', 9), ('s', 0))
#end_FrameHE-iter_window_items().apply_iter_items()

#start_FrameHE-__add__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 + 8
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            18      16      9
q            6       5       8
r            8       16      17
s            8       8       20
<<U1>        <int64> <int64> <int64>
>>> f1 + f2
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         12.0      11.0      nan
q         7.0       5.0       nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameHE-__add__()

#start_FrameHE-__and__()
>>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> f & True
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            False  True
q            True   True
r            True   False
<<U1>        <bool> <bool>
>>> f & (True, False)
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         False  False
q         True   False
r         True   False
<<U1>     <bool> <bool>
#end_FrameHE-__and__()

#start_FrameHE-__eq__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 == 8
False
>>> f1 == f2
False
#end_FrameHE-__eq__()

#start_FrameHE-__floordiv__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 // 8
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            1       1       0
q            -1      -1      0
r            0       1       1
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> f1 // f2
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         5.0       2.0       nan
q         -1.0      -1.0      nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameHE-__floordiv__()

#start_FrameHE-__ge__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 >= 8
<FrameHE: x>
<Index>      a      b      c      <<U1>
<Index>
p            True   True   False
q            False  False  False
r            False  True   True
s            False  False  True
<<U1>        <bool> <bool> <bool>
>>> f1 >= f2
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         True   True   False
q         False  False  False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameHE-__ge__()

#start_FrameHE-__gt__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 > 8
<FrameHE: x>
<Index>      a      b      c      <<U1>
<Index>
p            True   False  False
q            False  False  False
r            False  False  True
s            False  False  True
<<U1>        <bool> <bool> <bool>
>>> f1 > f2
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         True   True   False
q         False  False  False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameHE-__gt__()

#start_FrameHE-__le__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 <= 8
<FrameHE: x>
<Index>      a      b      c      <<U1>
<Index>
p            False  True   True
q            True   True   True
r            True   True   False
s            True   True   False
<<U1>        <bool> <bool> <bool>
>>> f1 <= f2
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  False
q         True   True   False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameHE-__le__()

#start_FrameHE-__lt__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 < 8
<FrameHE: x>
<Index>      a      b      c      <<U1>
<Index>
p            False  False  True
q            True   True   True
r            True   False  False
s            True   True   False
<<U1>        <bool> <bool> <bool>
>>> f1 < f2
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  False
q         True   True   False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameHE-__lt__()

#start_FrameHE-__matmul__()
>>> f1 = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f1 @ f2
<FrameHE>
<Index>   x       y       <<U1>
<Index>
p         23      14
q         6       4
r         40      24
s         20      12
<<U1>     <int64> <int64>
#end_FrameHE-__matmul__()

#start_FrameHE-__mod__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 % 8
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            2       0       1
q            6       5       0
r            0       0       1
s            0       0       4
<<U1>        <int64> <int64> <int64>
>>> f1 % f2
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         0.0       2.0       nan
q         7.0       5.0       nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameHE-__mod__()

#start_FrameHE-__mul__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 * 8
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            80      64      8
q            -16     -24     0
r            0       64      72
s            0       0       96
<<U1>        <int64> <int64> <int64>
>>> f1 * f2
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         20.0      24.0      nan
q         -18.0     -24.0     nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameHE-__mul__()

#start_FrameHE-__ne__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 != 8
True
>>> f1 != f2
True
#end_FrameHE-__ne__()

#start_FrameHE-__or__()
>>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> f | True
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            True   True
q            True   True
r            True   True
<<U1>        <bool> <bool>
>>> f | (True, False)
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         True   True
q         True   True
r         True   False
<<U1>     <bool> <bool>
#end_FrameHE-__or__()

#start_FrameHE-__pow__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 ** 8
<FrameHE: x>
<Index>      a         b        c         <<U1>
<Index>
p            100000000 16777216 1
q            256       6561     0
r            0         16777216 43046721
s            0         0        429981696
<<U1>        <int64>   <int64>  <int64>
>>> f1 ** f2
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         100.0     512.0     1.0
q         -512.0    6561.0    nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameHE-__pow__()

#start_FrameHE-__radd__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 + f1
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            18      16      9
q            6       5       8
r            8       16      17
s            8       8       20
<<U1>        <int64> <int64> <int64>
#end_FrameHE-__radd__()

#start_FrameHE-__rfloordiv__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 // f1
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            0       1       8
q            -4      -3      0
r            0       1       0
s            0       0       0
<<U1>        <int64> <int64> <int64>
#end_FrameHE-__rfloordiv__()

#start_FrameHE-__rmatmul__()
>>> f1 = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f1 @ f2
<FrameHE>
<Index>   x       y       <<U1>
<Index>
p         23      14
q         6       4
r         40      24
s         20      12
<<U1>     <int64> <int64>
#end_FrameHE-__rmatmul__()

#start_FrameHE-__rmul__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 * f1
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            80      64      8
q            -16     -24     0
r            0       64      72
s            0       0       96
<<U1>        <int64> <int64> <int64>
#end_FrameHE-__rmul__()

#start_FrameHE-__rshift__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f1 >> 1
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            5       4       0
q            -1      -2      0
r            0       4       4
s            0       0       6
<<U1>        <int64> <int64> <int64>
#end_FrameHE-__rshift__()

#start_FrameHE-__rsub__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 - f1
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            -2      0       7
q            10      11      8
r            8       0       -1
s            8       8       -4
<<U1>        <int64> <int64> <int64>
#end_FrameHE-__rsub__()

#start_FrameHE-__rtruediv__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 / f1
<FrameHE: x>
<Index>      a         b                   c                  <<U1>
<Index>
p            0.8       1.0                 8.0
q            -4.0      -2.6666666666666665 inf
r            inf       1.0                 0.8888888888888888
s            inf       inf                 0.6666666666666666
<<U1>        <float64> <float64>           <float64>
#end_FrameHE-__rtruediv__()

#start_FrameHE-__sub__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 - 8
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            2       0       -7
q            -10     -11     -8
r            -8      0       1
s            -8      -8      4
<<U1>        <int64> <int64> <int64>
>>> f1 - f2
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         8.0       5.0       nan
q         -11.0     -11.0     nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameHE-__sub__()

#start_FrameHE-__truediv__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 / 8
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
p            1.25      1.0       0.125
q            -0.25     -0.375    0.0
r            0.0       1.0       1.125
s            0.0       0.0       1.5
<<U1>        <float64> <float64> <float64>
>>> f1 / f2
<FrameHE>
<Index>   a                   b                  c         <<U1>
<Index>
p         5.0                 2.6666666666666665 nan
q         -0.2222222222222222 -0.375             nan
r         nan                 nan                nan
s         nan                 nan                nan
<<U1>     <float64>           <float64>          <float64>
#end_FrameHE-__truediv__()

#start_FrameHE-__xor__()
>>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> f ^ True
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            True   False
q            False  False
r            False  True
<<U1>        <bool> <bool>
>>> f ^ (True, False)
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         True   True
q         False  True
r         False  False
<<U1>     <bool> <bool>
#end_FrameHE-__xor__()

#start_FrameHE-__abs__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> abs(f)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            2       3       0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameHE-__abs__()

#start_FrameHE-__invert__()
>>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> ~f
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            True   False
q            False  False
r            False  True
<<U1>        <bool> <bool>
#end_FrameHE-__invert__()

#start_FrameHE-__neg__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> -f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            -10     -8      -1
q            2       3       0
r            0       -8      -9
s            0       0       -12
<<U1>        <int64> <int64> <int64>
#end_FrameHE-__neg__()

#start_FrameHE-__pos__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> +f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameHE-__pos__()

#start_FrameHE-via_dt.year
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.year
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         1517    2022
q         1517    2021
r         1517    2022
<<U1>     <int64> <int64>
#end_FrameHE-via_dt.year

#start_FrameHE-via_dt.month
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.month
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         4       4
q         12      12
r         6       6
<<U1>     <int64> <int64>
#end_FrameHE-via_dt.month

#start_FrameHE-via_dt.day
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.day
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         1       1
q         31      31
r         30      30
<<U1>     <int64> <int64>
#end_FrameHE-via_dt.day

#start_FrameHE-via_dt.hour
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.hour
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       0
q         0       0
r         0       0
<<U1>     <int64> <int64>
#end_FrameHE-via_dt.hour

#start_FrameHE-via_dt.minute
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.minute
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       0
q         0       0
r         0       0
<<U1>     <int64> <int64>
#end_FrameHE-via_dt.minute

#start_FrameHE-via_dt.second
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.second
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       0
q         0       0
r         0       0
<<U1>     <int64> <int64>
#end_FrameHE-via_dt.second

#start_FrameHE-via_dt.weekday()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.weekday()
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         6       4
q         0       4
r         5       3
<<U1>     <int64> <int64>
#end_FrameHE-via_dt.weekday()

#start_FrameHE-via_dt.quarter()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.quarter()
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         2       2
q         4       4
r         2       2
<<U1>     <int64> <int64>
#end_FrameHE-via_dt.quarter()

#start_FrameHE-via_dt.is_month_end()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_month_end()
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         False  False
q         True   True
r         True   True
<<U1>     <bool> <bool>
#end_FrameHE-via_dt.is_month_end()

#start_FrameHE-via_dt.is_month_start()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_month_start()
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         True   True
q         False  False
r         False  False
<<U1>     <bool> <bool>
#end_FrameHE-via_dt.is_month_start()

#start_FrameHE-via_dt.is_year_end()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_year_end()
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         False  False
q         True   True
r         False  False
<<U1>     <bool> <bool>
#end_FrameHE-via_dt.is_year_end()

#start_FrameHE-via_dt.is_year_start()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_year_start()
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         False  False
q         False  False
r         False  False
<<U1>     <bool> <bool>
#end_FrameHE-via_dt.is_year_start()

#start_FrameHE-via_dt.is_quarter_end()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_quarter_end()
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         False  False
q         True   True
r         True   True
<<U1>     <bool> <bool>
#end_FrameHE-via_dt.is_quarter_end()

#start_FrameHE-via_dt.is_quarter_start()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_quarter_start()
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         True   True
q         False  False
r         False  False
<<U1>     <bool> <bool>
#end_FrameHE-via_dt.is_quarter_start()

#start_FrameHE-via_dt.timetuple()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.timetuple()
<FrameHE>
<Index>   a                    b                    <<U1>
<Index>
p         time.struct_time(... time.struct_time(...
q         time.struct_time(... time.struct_time(...
r         time.struct_time(... time.struct_time(...
<<U1>     <object>             <object>
#end_FrameHE-via_dt.timetuple()

#start_FrameHE-via_dt.isoformat()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.isoformat()
<FrameHE>
<Index>   a          b          <<U1>
<Index>
p         1517-04-01 2022-04-01
q         1517-12-31 2021-12-31
r         1517-06-30 2022-06-30
<<U1>     <<U10>     <<U10>
#end_FrameHE-via_dt.isoformat()

#start_FrameHE-via_dt.fromisoformat()
>>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'))
>>> f.via_dt.fromisoformat()
<FrameHE>
<Index>   a          b          <<U1>
<Index>
p         1517-04-01 2022-04-01
q         1517-12-31 2021-12-31
r         1517-06-30 2022-06-30
<<U1>     <object>   <object>
#end_FrameHE-via_dt.fromisoformat()

#start_FrameHE-via_dt.strftime()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.strftime("%A | %B")
<FrameHE>
<Index>   a                 b                 <<U1>
<Index>
p         Sunday | April    Friday | April
q         Monday | December Friday | December
r         Saturday | June   Thursday | June
<<U1>     <<U17>            <<U17>
#end_FrameHE-via_dt.strftime()

#start_FrameHE-via_dt.strptime()
>>> f = sf.FrameHE.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))
>>> f.via_dt.strptime("%m/%d/%Y")
<FrameHE>
<Index>   a                   b                   <<U1>
<Index>
p         1517-04-01 00:00:00 2022-04-01 00:00:00
q         1517-12-31 00:00:00 2021-12-31 00:00:00
r         1517-06-30 00:00:00 2022-06-30 00:00:00
<<U1>     <object>            <object>
#end_FrameHE-via_dt.strptime()

#start_FrameHE-via_dt.strpdate()
>>> f = sf.FrameHE.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))
>>> f.via_dt.strpdate("%m/%d/%Y")
<FrameHE>
<Index>   a          b          <<U1>
<Index>
p         1517-04-01 2022-04-01
q         1517-12-31 2021-12-31
r         1517-06-30 2022-06-30
<<U1>     <object>   <object>
#end_FrameHE-via_dt.strpdate()

#start_FrameHE-via_str.__getitem__()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str[-1]
<FrameHE: x>
<Index>      a     b     <<U1>
<Index>
p            0
q            2     Z
r            8     3
s            3
<<U1>        <<U1> <<U1>
#end_FrameHE-via_str.__getitem__()

#start_FrameHE-via_str.capitalize()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.capitalize()
<FrameHE: x>
<Index>      a      b     <<U1>
<Index>
p            10     Qrs
q            2      Xyz
r            8      123
s            3       wx
<<U1>        <<U21> <<U4>
#end_FrameHE-via_str.capitalize()

#start_FrameHE-via_str.center()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.center(8)
<FrameHE: x>
<Index>      a        b        <<U1>
<Index>
p               10      qrs
q               2       XYZ
r               8       123
s               3        wX
<<U1>        <<U8>    <<U8>
#end_FrameHE-via_str.center()

#start_FrameHE-via_str.contains()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.contains('X')
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            False  False
q            False  True
r            False  False
s            False  True
<<U1>        <bool> <bool>
#end_FrameHE-via_str.contains()

#start_FrameHE-via_str.count()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.count('X')
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            0       0
q            0       1
r            0       0
s            0       1
<<U1>        <int64> <int64>
#end_FrameHE-via_str.count()

#start_FrameHE-via_str.decode()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x').astype(bytes)
>>> f
<FrameHE: x>
<Index>      a      b       <<U1>
<Index>
p            b'10'  b'qrs '
q            b'2'   b'XYZ'
r            b'8'   b'123'
s            b'3'   b' wX '
<<U1>        <|S21> <|S4>
>>> f.via_str.decode()
<FrameHE: x>
<Index>      a     b     <<U1>
<Index>
p            10    qrs
q            2     XYZ
r            8     123
s            3      wX
<<U1>        <<U2> <<U4>
#end_FrameHE-via_str.decode()

#start_FrameHE-via_str.encode()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.encode()
<FrameHE: x>
<Index>      a     b       <<U1>
<Index>
p            b'10' b'qrs '
q            b'2'  b'XYZ'
r            b'8'  b'123'
s            b'3'  b' wX '
<<U1>        <|S2> <|S4>
#end_FrameHE-via_str.encode()

#start_FrameHE-via_str.endswith()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.endswith(' ')
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            False  True
q            False  False
r            False  False
s            False  True
<<U1>        <bool> <bool>
#end_FrameHE-via_str.endswith()

#start_FrameHE-via_str.find()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.find('X')
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            -1      -1
q            -1      0
r            -1      -1
s            -1      2
<<U1>        <int64> <int64>
#end_FrameHE-via_str.find()

#start_FrameHE-via_str.format()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.format('{:-^10}')
<FrameHE: x>
<Index>      a          b          <<U1>
<Index>
p            ----10---- ---qrs ---
q            ----2----- ---XYZ----
r            ----8----- ---123----
s            ----3----- --- wX ---
<<U1>        <<U10>     <<U10>
#end_FrameHE-via_str.format()

#start_FrameHE-via_str.index()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.index('X')
ValueError('substring not found')
#end_FrameHE-via_str.index()

#start_FrameHE-via_str.isalnum()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isalnum()
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            True   False
q            True   True
r            True   True
s            True   False
<<U1>        <bool> <bool>
#end_FrameHE-via_str.isalnum()

#start_FrameHE-via_str.isalpha()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isalpha()
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            False  False
q            False  True
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameHE-via_str.isalpha()

#start_FrameHE-via_str.isdecimal()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isdecimal()
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            True   False
q            True   False
r            True   True
s            True   False
<<U1>        <bool> <bool>
#end_FrameHE-via_str.isdecimal()

#start_FrameHE-via_str.isdigit()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isdigit()
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            True   False
q            True   False
r            True   True
s            True   False
<<U1>        <bool> <bool>
#end_FrameHE-via_str.isdigit()

#start_FrameHE-via_str.islower()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.islower()
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            False  True
q            False  False
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameHE-via_str.islower()

#start_FrameHE-via_str.isnumeric()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isnumeric()
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            True   False
q            True   False
r            True   True
s            True   False
<<U1>        <bool> <bool>
#end_FrameHE-via_str.isnumeric()

#start_FrameHE-via_str.isspace()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isspace()
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            False  False
q            False  False
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameHE-via_str.isspace()

#start_FrameHE-via_str.istitle()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.istitle()
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            False  False
q            False  False
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameHE-via_str.istitle()

#start_FrameHE-via_str.isupper()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isupper()
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            False  False
q            False  True
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameHE-via_str.isupper()

#start_FrameHE-via_str.ljust()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.ljust(8)
<FrameHE: x>
<Index>      a        b        <<U1>
<Index>
p            10       qrs
q            2        XYZ
r            8        123
s            3         wX
<<U1>        <<U8>    <<U8>
#end_FrameHE-via_str.ljust()

#start_FrameHE-via_str.len()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.len()
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       4
q            1       3
r            1       3
s            1       4
<<U1>        <int64> <int64>
#end_FrameHE-via_str.len()

#start_FrameHE-via_str.lower()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.lower()
<FrameHE: x>
<Index>      a      b     <<U1>
<Index>
p            10     qrs
q            2      xyz
r            8      123
s            3       wx
<<U1>        <<U21> <<U4>
#end_FrameHE-via_str.lower()

#start_FrameHE-via_str.lstrip()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.lstrip()
<FrameHE: x>
<Index>      a      b     <<U1>
<Index>
p            10     qrs
q            2      XYZ
r            8      123
s            3      wX
<<U1>        <<U21> <<U4>
#end_FrameHE-via_str.lstrip()

#start_FrameHE-via_str.partition()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.partition('X')
<FrameHE: x>
<Index>      a              b                <<U1>
<Index>
p            ('10', '', '') ('qrs ', '', '')
q            ('2', '', '')  ('', 'X', 'YZ')
r            ('8', '', '')  ('123', '', '')
s            ('3', '', '')  (' w', 'X', ' ')
<<U1>        <object>       <object>
#end_FrameHE-via_str.partition()

#start_FrameHE-via_str.replace()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.replace('X', '*')
<FrameHE: x>
<Index>      a     b     <<U1>
<Index>
p            10    qrs
q            2     *YZ
r            8     123
s            3      w*
<<U1>        <<U2> <<U4>
#end_FrameHE-via_str.replace()

#start_FrameHE-via_str.rfind()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rfind('X')
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            -1      -1
q            -1      0
r            -1      -1
s            -1      2
<<U1>        <int64> <int64>
#end_FrameHE-via_str.rfind()

#start_FrameHE-via_str.rindex()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rindex('X')
ValueError('substring not found')
#end_FrameHE-via_str.rindex()

#start_FrameHE-via_str.rjust()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rjust(8)
<FrameHE: x>
<Index>      a        b        <<U1>
<Index>
p                  10     qrs
q                   2      XYZ
r                   8      123
s                   3      wX
<<U1>        <<U8>    <<U8>
#end_FrameHE-via_str.rjust()

#start_FrameHE-via_str.rpartition()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rpartition('X')
<FrameHE: x>
<Index>      a              b                <<U1>
<Index>
p            ('', '', '10') ('', '', 'qrs ')
q            ('', '', '2')  ('', 'X', 'YZ')
r            ('', '', '8')  ('', '', '123')
s            ('', '', '3')  (' w', 'X', ' ')
<<U1>        <object>       <object>
#end_FrameHE-via_str.rpartition()

#start_FrameHE-via_str.rsplit()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rsplit('X')
<FrameHE: x>
<Index>      a        b           <<U1>
<Index>
p            ('10',)  ('qrs ',)
q            ('2',)   ('', 'YZ')
r            ('8',)   ('123',)
s            ('3',)   (' w', ' ')
<<U1>        <object> <object>
#end_FrameHE-via_str.rsplit()

#start_FrameHE-via_str.rstrip()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rstrip()
<FrameHE: x>
<Index>      a      b     <<U1>
<Index>
p            10     qrs
q            2      XYZ
r            8      123
s            3       wX
<<U1>        <<U21> <<U4>
#end_FrameHE-via_str.rstrip()

#start_FrameHE-via_str.split()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.split('X')
<FrameHE: x>
<Index>      a        b           <<U1>
<Index>
p            ('10',)  ('qrs ',)
q            ('2',)   ('', 'YZ')
r            ('8',)   ('123',)
s            ('3',)   (' w', ' ')
<<U1>        <object> <object>
#end_FrameHE-via_str.split()

#start_FrameHE-via_str.startswith()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.startswith('X')
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            False  False
q            False  True
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameHE-via_str.startswith()

#start_FrameHE-via_str.strip()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.strip()
<FrameHE: x>
<Index>      a      b     <<U1>
<Index>
p            10     qrs
q            2      XYZ
r            8      123
s            3      wX
<<U1>        <<U21> <<U4>
#end_FrameHE-via_str.strip()

#start_FrameHE-via_str.swapcase()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.swapcase()
<FrameHE: x>
<Index>      a      b     <<U1>
<Index>
p            10     QRS
q            2      xyz
r            8      123
s            3       Wx
<<U1>        <<U21> <<U4>
#end_FrameHE-via_str.swapcase()

#start_FrameHE-via_str.title()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.title()
<FrameHE: x>
<Index>      a      b     <<U1>
<Index>
p            10     Qrs
q            2      Xyz
r            8      123
s            3       Wx
<<U1>        <<U21> <<U4>
#end_FrameHE-via_str.title()

#start_FrameHE-via_str.upper()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.upper()
<FrameHE: x>
<Index>      a      b     <<U1>
<Index>
p            10     QRS
q            2      XYZ
r            8      123
s            3       WX
<<U1>        <<U21> <<U4>
#end_FrameHE-via_str.upper()

#start_FrameHE-via_str.zfill()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.zfill(8)
<FrameHE: x>
<Index>      a        b        <<U1>
<Index>
p            00000010 0000qrs
q            00000002 00000XYZ
r            00000008 00000123
s            00000003 0000 wX
<<U1>        <<U8>    <<U8>
#end_FrameHE-via_str.zfill()

#start_FrameHE-via_T.via_fill_value()
>>> 
#end_FrameHE-via_T.via_fill_value()

#start_FrameHE-via_T.__add__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T + s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         10.0      8.0       1.0
q         -4.0      -5.0      -2.0
r         0.5       8.5       9.5
s         1.0       1.0       13.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__add__()

#start_FrameHE-via_T.__sub__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T - s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         10.0      8.0       1.0
q         0.0       -1.0      2.0
r         -0.5      7.5       8.5
s         -1.0      -1.0      11.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__sub__()

#start_FrameHE-via_T.__mul__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T * s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         0.0       0.0       0.0
q         4.0       6.0       -0.0
r         0.0       4.0       4.5
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__mul__()

#start_FrameHE-via_T.__truediv__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T / s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         inf       inf       inf
q         1.0       1.5       -0.0
r         0.0       16.0      18.0
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__truediv__()

#start_FrameHE-via_T.__floordiv__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T // s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         nan       nan       nan
q         1.0       1.0       -0.0
r         0.0       16.0      18.0
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__floordiv__()

#start_FrameHE-via_T.__mod__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T % s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         nan       nan       nan
q         -0.0      -1.0      -0.0
r         0.0       0.0       0.0
s         0.0       0.0       0.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__mod__()

#start_FrameHE-via_T.__pow__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T ** s
<FrameHE>
<Index>   a         b                  c         <<U1>
<Index>
p         1.0       1.0                1.0
q         0.25      0.1111111111111111 inf
r         0.0       2.8284271247461903 3.0
s         0.0       0.0                12.0
<<U1>     <float64> <float64>          <float64>
#end_FrameHE-via_T.__pow__()

#start_FrameHE-via_T.__lshift__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T << s
<FrameHE>
<Index>   a       b       c       <<U1>
<Index>
p         10      8       1
q         0       0       0
r         0       64      72
s         0       0       24
<<U1>     <int64> <int64> <int64>
#end_FrameHE-via_T.__lshift__()

#start_FrameHE-via_T.__rshift__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T >> s
<FrameHE>
<Index>   a       b       c       <<U1>
<Index>
p         10      8       1
q         -1      -1      0
r         0       1       1
s         0       0       6
<<U1>     <int64> <int64> <int64>
#end_FrameHE-via_T.__rshift__()

#start_FrameHE-via_T.__and__()
>>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> f.via_T & s
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         False  False
q         True   True
r         True   False
<<U1>     <bool> <bool>
#end_FrameHE-via_T.__and__()

#start_FrameHE-via_T.__xor__()
>>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> f.via_T ^ s
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         False  True
q         False  False
r         False  True
<<U1>     <bool> <bool>
#end_FrameHE-via_T.__xor__()

#start_FrameHE-via_T.__or__()
>>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> f.via_T | s
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         False  True
q         True   True
r         True   True
<<U1>     <bool> <bool>
#end_FrameHE-via_T.__or__()

#start_FrameHE-via_T.__lt__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T < s
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  False
q         False  True   False
r         True   False  False
s         True   True   False
<<U1>     <bool> <bool> <bool>
#end_FrameHE-via_T.__lt__()

#start_FrameHE-via_T.__le__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T <= s
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  False
q         True   True   False
r         True   False  False
s         True   True   False
<<U1>     <bool> <bool> <bool>
#end_FrameHE-via_T.__le__()

#start_FrameHE-via_T.__eq__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T == s
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  False
q         True   False  False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameHE-via_T.__eq__()

#start_FrameHE-via_T.__ne__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T != s
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         True   True   True
q         False  True   True
r         True   True   True
s         True   True   True
<<U1>     <bool> <bool> <bool>
#end_FrameHE-via_T.__ne__()

#start_FrameHE-via_T.__gt__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T > s
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         True   True   True
q         False  False  True
r         False  True   True
s         False  False  True
<<U1>     <bool> <bool> <bool>
#end_FrameHE-via_T.__gt__()

#start_FrameHE-via_T.__ge__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T >= s
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         True   True   True
q         True   False  True
r         False  True   True
s         False  False  True
<<U1>     <bool> <bool> <bool>
#end_FrameHE-via_T.__ge__()

#start_FrameHE-via_T.__radd__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T + s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         10.0      8.0       1.0
q         -4.0      -5.0      -2.0
r         0.5       8.5       9.5
s         1.0       1.0       13.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__radd__()

#start_FrameHE-via_T.__rsub__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T - s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         10.0      8.0       1.0
q         0.0       -1.0      2.0
r         -0.5      7.5       8.5
s         -1.0      -1.0      11.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__rsub__()

#start_FrameHE-via_T.__rmul__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T * s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         0.0       0.0       0.0
q         4.0       6.0       -0.0
r         0.0       4.0       4.5
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__rmul__()

#start_FrameHE-via_T.__rtruediv__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T / s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         inf       inf       inf
q         1.0       1.5       -0.0
r         0.0       16.0      18.0
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__rtruediv__()

#start_FrameHE-via_T.__rfloordiv__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T // s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         nan       nan       nan
q         1.0       1.0       -0.0
r         0.0       16.0      18.0
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__rfloordiv__()

#start_FrameHE-via_fill_value().loc
>>> f = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f.via_fill_value(-1).loc[['a', 'b', 'd']]
<FrameHE: y>
<Index>      x       y       <<U1>
<Index>
a            3       2
b            0       0
d            -1      -1
<<U1>        <int64> <int64>
#end_FrameHE-via_fill_value().loc

#start_FrameHE-via_fill_value().__getitem__()
>>> f = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f.via_fill_value(-1)[['z', 'x']]
<FrameHE: y>
<Index>      z       x       <<U1>
<Index>
a            -1      3
b            -1      0
c            -1      20
<<U1>        <int64> <int64>
#end_FrameHE-via_fill_value().__getitem__()

#start_FrameHE-via_fill_value().via_T
>>> f = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> s = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> f.via_fill_value(-1).via_T * s
<FrameHE>
<Index>   x       y       <<U1>
<Index>
a         -3      -2
b         0       0
c         160     96
d         -19     -19
<<U1>     <int64> <int64>
#end_FrameHE-via_fill_value().via_T

#start_FrameHE-via_fill_value().__add__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) + f2
<FrameHE>
<Index>   x       y       <<U1>
<Index>
a         3       2
b         2       3
c         24      26
<<U1>     <int64> <int64>
#end_FrameHE-via_fill_value().__add__()

#start_FrameHE-via_fill_value().__sub__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) - f2
<FrameHE>
<Index>   x       y       <<U1>
<Index>
a         3       2
b         -2      -3
c         16      -2
<<U1>     <int64> <int64>
#end_FrameHE-via_fill_value().__sub__()

#start_FrameHE-via_fill_value().__mul__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) * f2
<FrameHE>
<Index>   x       y       <<U1>
<Index>
a         0       0
b         0       0
c         80      168
<<U1>     <int64> <int64>
#end_FrameHE-via_fill_value().__mul__()

#start_FrameHE-via_fill_value().__truediv__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) / f2
<FrameHE>
<Index>   x         y                  <<U1>
<Index>
a         inf       inf
b         0.0       0.0
c         5.0       0.8571428571428571
<<U1>     <float64> <float64>
#end_FrameHE-via_fill_value().__truediv__()

#start_FrameHE-via_fill_value().__floordiv__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) // f2
<FrameHE>
<Index>   x       y       <<U1>
<Index>
a         0       0
b         0       0
c         5       0
<<U1>     <int64> <int64>
#end_FrameHE-via_fill_value().__floordiv__()

#start_FrameHE-via_fill_value().__mod__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) % f2
<FrameHE>
<Index>   x       y       <<U1>
<Index>
a         0       0
b         0       0
c         0       12
<<U1>     <int64> <int64>
#end_FrameHE-via_fill_value().__mod__()

#start_FrameHE-via_fill_value().__pow__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) ** f2
<FrameHE>
<Index>   x       y                <<U1>
<Index>
a         1       1
b         0       0
c         160000  1283918464548864
<<U1>     <int64> <int64>
#end_FrameHE-via_fill_value().__pow__()

#start_FrameHE-via_fill_value().__lshift__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) << f2
<FrameHE>
<Index>   x       y       <<U1>
<Index>
a         3       2
b         0       0
c         40      24
<<U1>     <int64> <int64>
#end_FrameHE-via_fill_value().__lshift__()

#start_FrameHE-via_fill_value().__rshift__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) >> f2
<FrameHE>
<Index>   x       y       <<U1>
<Index>
a         3       2
b         0       0
c         10      6
<<U1>     <int64> <int64>
#end_FrameHE-via_fill_value().__rshift__()

#start_FrameHE-via_fill_value().__and__()
>>> f1 = sf.FrameHE.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(False) & f2
<FrameHE>
<Index>   x      y      <<U1>
<Index>
a         False  False
b         False  False
c         True   True
<<U1>     <bool> <bool>
#end_FrameHE-via_fill_value().__and__()

#start_FrameHE-via_fill_value().__xor__()
>>> f1 = sf.FrameHE.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(False) ^ f2
<FrameHE>
<Index>   x      y      <<U1>
<Index>
a         False  True
b         True   True
c         False  False
<<U1>     <bool> <bool>
#end_FrameHE-via_fill_value().__xor__()

#start_FrameHE-via_fill_value().__or__()
>>> f1 = sf.FrameHE.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(False) | f2
<FrameHE>
<Index>   x      y      <<U1>
<Index>
a         False  True
b         True   True
c         True   True
<<U1>     <bool> <bool>
#end_FrameHE-via_fill_value().__or__()

#start_FrameHE-via_fill_value().__lt__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) < f2
<FrameHE>
<Index>   x      y      <<U1>
<Index>
a         False  False
b         True   True
c         False  True
<<U1>     <bool> <bool>
#end_FrameHE-via_fill_value().__lt__()

#start_FrameHE-via_fill_value().__le__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) <= f2
<FrameHE>
<Index>   x      y      <<U1>
<Index>
a         False  False
b         True   True
c         False  True
<<U1>     <bool> <bool>
#end_FrameHE-via_fill_value().__le__()

#start_FrameHE-via_fill_value().__eq__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) == f2
<FrameHE>
<Index>   x      y      <<U1>
<Index>
a         False  False
b         False  False
c         False  False
<<U1>     <bool> <bool>
#end_FrameHE-via_fill_value().__eq__()

#start_FrameHE-via_fill_value().__ne__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) != f2
<FrameHE>
<Index>   x      y      <<U1>
<Index>
a         True   True
b         True   True
c         True   True
<<U1>     <bool> <bool>
#end_FrameHE-via_fill_value().__ne__()

#start_FrameHE-via_fill_value().__gt__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) > f2
<FrameHE>
<Index>   x      y      <<U1>
<Index>
a         True   True
b         False  False
c         True   False
<<U1>     <bool> <bool>
#end_FrameHE-via_fill_value().__gt__()

#start_FrameHE-via_fill_value().__ge__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) >= f2
<FrameHE>
<Index>   x      y      <<U1>
<Index>
a         True   True
b         False  False
c         True   False
<<U1>     <bool> <bool>
#end_FrameHE-via_fill_value().__ge__()

#start_FrameHE-via_fill_value().__radd__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 + f1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_FrameHE-via_fill_value().__radd__()

#start_FrameHE-via_fill_value().__rsub__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 - f1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_FrameHE-via_fill_value().__rsub__()

#start_FrameHE-via_fill_value().__rmul__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 * f1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_FrameHE-via_fill_value().__rmul__()

#start_FrameHE-via_fill_value().__rtruediv__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 / f1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_FrameHE-via_fill_value().__rtruediv__()

#start_FrameHE-via_fill_value().__rfloordiv__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 // f1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_FrameHE-via_fill_value().__rfloordiv__()

#start_FrameHE-via_re().search()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').search()
<FrameHE: x>
<Index>      a      b      c      <<U1>
<Index>
0            True   False  True
1            True   True   True
2            False  True   True
3            True   True   True
<int64>      <bool> <bool> <bool>
#end_FrameHE-via_re().search()

#start_FrameHE-via_re().match()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').match()
<FrameHE: x>
<Index>      a      b      c      <<U1>
<Index>
0            True   False  True
1            True   True   True
2            False  True   True
3            True   False  True
<int64>      <bool> <bool> <bool>
#end_FrameHE-via_re().match()

#start_FrameHE-via_re().fullmatch()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('123').fullmatch()
<FrameHE: x>
<Index>      a      b      c      <<U1>
<Index>
0            False  False  False
1            False  False  False
2            False  True   False
3            False  False  False
<int64>      <bool> <bool> <bool>
#end_FrameHE-via_re().fullmatch()

#start_FrameHE-via_re().split()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').split()
<FrameHE: x>
<Index>      a         b                c                    <<U1>
<Index>
0            ('', '0') ('qrs ',)        ('', '5', '7-0', ...
1            ('', '')  ('', 'YZ')       ('', '5', '7-04-0...
2            ('8',)    ('', '', '', '') ('', '5', '7-', '...
3            ('', '')  (' w', ' ')      ('', '5', '7-06-'...
<int64>      <object>  <object>         <object>
#end_FrameHE-via_re().split()

#start_FrameHE-via_re().findall()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').findall()
<FrameHE: x>
<Index>      a        b               c                    <<U1>
<Index>
0            ('1',)   ()              ('1', '1', '1', '1')
1            ('2',)   ('X',)          ('1', '1', '1')
2            ()       ('1', '2', '3') ('1', '1', '1', '...
3            ('3',)   ('X',)          ('1', '1', '3')
<int64>      <object> <object>        <object>
#end_FrameHE-via_re().findall()

#start_FrameHE-via_re().sub()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').sub('==')
<FrameHE: x>
<Index>      a     b      c                <<U1>
<Index>
0            ==0   qrs    ==5==7-0==-0==
1            ==    ==YZ   ==5==7-04-0==
2            8     ====== ==5==7-====-====
3            ==     w==   ==5==7-06-==0
<int64>      <<U3> <<U6>  <<U16>
#end_FrameHE-via_re().sub()

#start_FrameHE-via_re().subn()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').subn('==', 1)
<FrameHE: x>
<Index>      a          b            c                  <<U1>
<Index>
0            ('==0', 1) ('qrs ', 0)  ('==517-01-01', 1)
1            ('==', 1)  ('==YZ', 1)  ('==517-04-01', 1)
2            ('8', 0)   ('==23', 1)  ('==517-12-31', 1)
3            ('==', 1)  (' w== ', 1) ('==517-06-30', 1)
<int64>      <object>   <object>     <object>
#end_FrameHE-via_re().subn()

#start_FrameHE-via_values.apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.via_values.apply(np.sin)
<FrameHE: x>
<Index>      a                   b                   c                   <<U1>
<Index>
p            -0.5440211108893698 0.9893582466233818  0.8414709848078965
q            -0.9092974268256817 -0.1411200080598672 0.0
r            0.0                 0.9893582466233818  0.4121184852417566
s            0.0                 0.0                 -0.5365729180004349
<<U1>        <float64>           <float64>           <float64>
#end_FrameHE-via_values.apply()

#start_FrameHE-via_values.__array_ufunc__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> np.sin(f.via_values)
<FrameHE: x>
<Index>      a                   b                   c                   <<U1>
<Index>
p            -0.5440211108893698 0.9893582466233818  0.8414709848078965
q            -0.9092974268256817 -0.1411200080598672 0.0
r            0.0                 0.9893582466233818  0.4121184852417566
s            0.0                 0.0                 -0.5365729180004349
<<U1>        <float64>           <float64>           <float64>
#end_FrameHE-via_values.__array_ufunc__()

#start_FrameHE-via_values.__call__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> np.sin(f.via_values(unify_blocks=True))
<FrameHE: x>
<Index>      a                   b                   c                   <<U1>
<Index>
p            -0.5440211108893698 0.9893582466233818  0.8414709848078965
q            -0.9092974268256817 -0.1411200080598672 0.0
r            0.0                 0.9893582466233818  0.4121184852417566
s            0.0                 0.0                 -0.5365729180004349
<<U1>        <float64>           <float64>           <float64>
#end_FrameHE-via_values.__call__()

#start_FrameGO-__init__()
>>> sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            0       1
q            2       3
r            4       5
<<U1>        <int64> <int64>
#end_FrameGO-__init__()

#start_FrameGO-from_arrow()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> aw = f1.to_arrow()
>>> aw
pyarrow.Table
__index0__: string
a: int64
b: int64
----
__index0__: [["p","q","r"]]
a: [[0,2,4]]
b: [[1,3,5]]
>>> sf.FrameGO.from_arrow(aw, index_depth=1)
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<object>  <int64> <int64>
#end_FrameGO-from_arrow()

#start_FrameGO-from_clipboard()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_clipboard()
>>> sf.FrameGO.from_clipboard(index_depth=1)
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<<U1>     <int64> <int64>
#end_FrameGO-from_clipboard()

#start_FrameGO-from_concat()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> sf.FrameGO.from_concat((f1, f2), axis=1)
<FrameGO>
<IndexGO> a       b       c      d      <<U1>
<Index>
p         0       1       False  True
q         2       3       False  True
r         4       5       False  True
<<U1>     <int64> <int64> <bool> <bool>
>>> sf.FrameGO.from_concat((f1, f2.relabel(columns=('a', 'b'))), axis=0, index=sf.IndexAutoFactory)
<FrameGO>
<IndexGO> a        b        <<U1>
<Index>
0         0        1
1         2        3
2         4        5
3         False    True
4         False    True
5         False    True
<int64>   <object> <object>
#end_FrameGO-from_concat()

#start_FrameGO-from_concat_items()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> sf.FrameGO.from_concat_items(((f1.name, f1), (f2.name, f2)), axis=1)
<FrameGO>
<IndexHierarchyGO> x       x       y      y      <<U1>
                   a       b       c      d      <<U1>
<Index>
p                  0       1       False  True
q                  2       3       False  True
r                  4       5       False  True
<<U1>              <int64> <int64> <bool> <bool>
>>> sf.FrameGO.from_concat_items(((f1.name, f1), (f2.name, f2.relabel(columns=('a', 'b')))), axis=0)
<FrameGO>
<IndexGO>              a        b        <<U1>
<IndexHierarchy>
x                p     0        1
x                q     2        3
x                r     4        5
y                p     False    True
y                q     False    True
y                r     False    True
<<U1>            <<U1> <object> <object>
#end_FrameGO-from_concat_items()

#start_FrameGO-from_csv()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_csv('/tmp/f.csv')
>>> from pathlib import Path
>>> Path('/tmp/f.csv').read_text()
__index0__,a,b
p,0,1
q,2,3
r,4,5

>>> sf.FrameGO.from_csv('/tmp/f.csv', index_depth=1)
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<<U1>     <int64> <int64>
#end_FrameGO-from_csv()

#start_FrameGO-from_delimited()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_delimited('/tmp/f.psv', delimiter='|')
>>> from pathlib import Path
>>> Path('/tmp/f.psv').read_text()
__index0__|a|b
p|0|1
q|2|3
r|4|5

>>> sf.FrameGO.from_delimited('/tmp/f.psv', delimiter='|', index_depth=1)
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<<U1>     <int64> <int64>
#end_FrameGO-from_delimited()

#start_FrameGO-from_dict()
>>> sf.FrameGO.from_dict(mapping=dict(a=(10, 2, 8, 3), b=('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), dtypes=dict(b=np.datetime64), name='x')
<FrameGO: x>
<IndexGO>    a       b               <<U1>
<Index>
0            10      1517-01-01
1            2       1517-04-01
2            8       1517-12-31
3            3       1517-06-30
<int64>      <int64> <datetime64[D]>
#end_FrameGO-from_dict()

#start_FrameGO-from_dict_fields()
>>> sf.FrameGO.from_dict_fields(records=(dict(a=False, b=False, c=True), dict(a='1517-04-01', b='1517-01-01', c='1517-04-01')), columns=('p', 'q'), dtypes=dict(q=np.datetime64), name='x')
TypeError("from_dict_fields() got an unexpected keyword argument 'records'")
#end_FrameGO-from_dict_fields()

#start_FrameGO-from_dict_records()
>>> sf.FrameGO.from_dict_records(records=(dict(a=10, b=False, c='1517-01-01'), dict(a=8, b=True, c='1517-04-01')), index=('p', 'q'), dtypes=dict(c=np.datetime64), name='x')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
#end_FrameGO-from_dict_records()

#start_FrameGO-from_dict_records_items()
>>> sf.FrameGO.from_dict_records_items(items=(('p', dict(a=10, b=False, c='1517-01-01')), ('q', dict(a=8, b=True, c='1517-04-01'))), dtypes=dict(c=np.datetime64), name='x')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
#end_FrameGO-from_dict_records_items()

#start_FrameGO-from_element()
>>> sf.FrameGO.from_element(0, index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            0       0
q            0       0
r            0       0
<<U1>        <int64> <int64>
#end_FrameGO-from_element()

#start_FrameGO-from_element_items()
>>> sf.FrameGO.from_element_items(((('a', 0), -1), (('b', 0), 10), (('a', 1), 3), (('b', 'a'), 1)), columns=(0, 1), index=('a', 'b'), name='x', axis=1)
ErrorInitTypeBlocks('mismatched row count: 1: 2')
#end_FrameGO-from_element_items()

#start_FrameGO-from_elements()
>>> sf.FrameGO.from_elements((10, 2, 8, 3), index=('p', 'q', 'r', 's'), columns=['a'], name='x')
<FrameGO: x>
<IndexGO>    a       <<U1>
<Index>
p            10
q            2
r            8
s            3
<<U1>        <int64>
#end_FrameGO-from_elements()

#start_FrameGO-from_fields()
>>> sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-from_fields()

#start_FrameGO-from_hdf5()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f1.to_hdf5('/tmp/f.hdf5')
>>> f1.from_hdf5('/tmp/f.hdf5', label='x', index_depth=1)
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_FrameGO-from_hdf5()

#start_FrameGO-from_items()
>>> sf.FrameGO.from_items((('a', (10, 2, 8, 3)), ('b', ('qrs ', 'XYZ', '123', ' wX '))), index=('p', 'q', 'r', 's'), name='x')
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_FrameGO-from_items()

#start_FrameGO-from_json()
>>> sf.FrameGO.from_json('[{"a": 10, "b": false, "c": "1517-01-01"}, {"a": 8, "b": true, "c": "1517-04-01"}]', dtypes=dict(c=np.datetime64), name='x')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            8       True   1517-04-01
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-from_json()

#start_FrameGO-from_json_columns()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> msg = f.to_json_columns(indent=4)
>>> msg
{
    "a": {
        "0": 10,
        "1": 2,
        "2": 8,
        "3": 3
    },
    "b": {
        "0": false,
        "1": true,
        "2": true,
        "3": false
    },
    "c": {
        "0": "1517-01-01",
        "1": "1517-04-01",
        "2": "1517-12-31",
        "3": "1517-06-30"
    }
}
>>> sf.Frame.from_json_columns(msg, dtypes=dict(c=np.datetime64))
<Frame>
<Index> a       b      c          <<U1>
<Index>
0       10      False  1517-01-01
1       2       True   1517-04-01
2       8       True   1517-12-31
3       3       False  1517-06-30
<<U1>   <int64> <bool> <<U10>
#end_FrameGO-from_json_columns()

#start_FrameGO-from_json_index()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> msg = f.to_json_index(indent=4)
>>> msg
{
    "0": {
        "a": 10,
        "b": false,
        "c": "1517-01-01"
    },
    "1": {
        "a": 2,
        "b": true,
        "c": "1517-04-01"
    },
    "2": {
        "a": 8,
        "b": true,
        "c": "1517-12-31"
    },
    "3": {
        "a": 3,
        "b": false,
        "c": "1517-06-30"
    }
}
>>> sf.Frame.from_json_index(msg, dtypes=dict(c=np.datetime64))
<Frame>
<Index> a       b      c               <<U1>
<Index>
0       10      False  1517-01-01
1       2       True   1517-04-01
2       8       True   1517-12-31
3       3       False  1517-06-30
<<U1>   <int64> <bool> <datetime64[D]>
#end_FrameGO-from_json_index()

#start_FrameGO-from_json_records()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> msg = f.to_json_records(indent=4)
>>> msg
[
    {
        "a": 10,
        "b": false,
        "c": "1517-01-01"
    },
    {
        "a": 2,
        "b": true,
        "c": "1517-04-01"
    },
    {
        "a": 8,
        "b": true,
        "c": "1517-12-31"
    },
    {
        "a": 3,
        "b": false,
        "c": "1517-06-30"
    }
]
>>> sf.Frame.from_json_records(msg, dtypes=dict(c=np.datetime64))
<Frame>
<Index> a       b      c               <<U1>
<Index>
0       10      False  1517-01-01
1       2       True   1517-04-01
2       8       True   1517-12-31
3       3       False  1517-06-30
<int64> <int64> <bool> <datetime64[D]>
#end_FrameGO-from_json_records()

#start_FrameGO-from_json_split()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> msg = f.to_json_split(indent=4)
>>> msg
{
    "columns": [
        "a",
        "b",
        "c"
    ],
    "index": [
        0,
        1,
        2,
        3
    ],
    "data": [
        [
            10,
            false,
            "1517-01-01"
        ],
        [
            2,
            true,
            "1517-04-01"
        ],
        [
            8,
            true,
            "1517-12-31"
        ],
        [
            3,
            false,
            "1517-06-30"
        ]
    ]
}
>>> sf.Frame.from_json_split(msg, dtypes=dict(c=np.datetime64))
<Frame>
<Index> a       b      c               <<U1>
<Index>
0       10      False  1517-01-01
1       2       True   1517-04-01
2       8       True   1517-12-31
3       3       False  1517-06-30
<int64> <int64> <bool> <datetime64[D]>
#end_FrameGO-from_json_split()

#start_FrameGO-from_json_values()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> msg = f.to_json_values(indent=4)
>>> msg
[
    [
        10,
        false,
        "1517-01-01"
    ],
    [
        2,
        true,
        "1517-04-01"
    ],
    [
        8,
        true,
        "1517-12-31"
    ],
    [
        3,
        false,
        "1517-06-30"
    ]
]
>>> sf.Frame.from_json_values(msg, columns=tuple('abc'), dtypes=dict(c=np.datetime64))
<Frame>
<Index> a       b      c               <<U1>
<Index>
0       10      False  1517-01-01
1       2       True   1517-04-01
2       8       True   1517-12-31
3       3       False  1517-06-30
<int64> <int64> <bool> <datetime64[D]>
#end_FrameGO-from_json_values()

#start_FrameGO-from_msgpack()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> mb = f1.to_msgpack()
>>> mb
b'\x85\xc4\x02sf\xa7FrameGO\xc4\x04name\xa1x\xc4\x06blocks\xc4\xcd\x82\xc4\x02sf\xaaTypeBlocks\xc4\x06blocks\xc4\xb3\x92\x85\xc4\x02nd\xc3\xc4\x04type\xa3<i8\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4 \n\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U4\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4@q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00 \x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00\x00\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00w\x00\x00\x00X\x00\x00\x00 \x00\x00\x00\xc4\x05index\xc4S\x83\xc4\x02sf\xa5Index\xc4\x04name\xc0\xc4\x04data\xc49\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4\x10p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00\xc4\x07columns\xc4M\x83\xc4\x02sf\xa7IndexGO\xc4\x04name\xc0\xc4\x04data\xc41\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x02\xc4\x04data\xc4\x08a\x00\x00\x00b\x00\x00\x00'
>>> sf.FrameGO.from_msgpack(mb)
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_FrameGO-from_msgpack()

#start_FrameGO-from_npy()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npy('/tmp/f.npy')
>>> sf.FrameGO.from_npy('/tmp/f.npy')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> import shutil
>>> shutil.rmtree('/tmp/f.npy')
#end_FrameGO-from_npy()

#start_FrameGO-from_npy_mmap()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npy('/tmp/f.npy')
>>> f2, closer = sf.FrameGO.from_npy_mmap('/tmp/f.npy')
>>> f2
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> closer() # close mmaps after usage
>>> import shutil
>>> shutil.rmtree('/tmp/f.npy')
#end_FrameGO-from_npy_mmap()

#start_FrameGO-from_npz()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npz('/tmp/f.npz')
>>> sf.FrameGO.from_npz('/tmp/f.npz')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-from_npz()

#start_FrameGO-from_overlay()
>>> f1 = sf.FrameGO.from_items((('a', (10, 2, np.nan, 3)), ('b', ('qrs ', 'XYZ', None, None))), index=('p', 'q', 'r', 's'), name='x')
>>> f1
<FrameGO: x>
<IndexGO>    a         b        <<U1>
<Index>
p            10.0      qrs
q            2.0       XYZ
r            nan       None
s            3.0       None
<<U1>        <float64> <object>
>>> f2 = sf.FrameGO.from_items((('a', (8, 3)), ('b', ('123', ' wX '))), index=('r', 's'), name='y')
>>> f2
<FrameGO: y>
<IndexGO>    a       b     <<U1>
<Index>
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> sf.FrameGO.from_overlay((f1, f2))
<FrameGO>
<IndexGO> a         b        <<U1>
<Index>
p         10.0      qrs
q         2.0       XYZ
r         8.0       123
s         3.0        wX
<<U1>     <float64> <object>
#end_FrameGO-from_overlay()

#start_FrameGO-from_pandas()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> df = f1.to_pandas()
>>> df
    a     b
p  10  qrs 
q   2   XYZ
r   8   123
s   3   wX 
>>> sf.FrameGO.from_pandas(df, dtypes=dict(b=str))
<FrameGO: x>
<IndexGO>    a       b     <object>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<object>     <int64> <<U4>
#end_FrameGO-from_pandas()

#start_FrameGO-from_parquet()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f1.to_parquet('/tmp/f.parquet')
>>> sf.FrameGO.from_parquet('/tmp/f.parquet', index_depth=1)
<FrameGO>
<IndexGO> a       b        <<U1>
<Index>
p         10      qrs
q         2       XYZ
r         8       123
s         3        wX
<object>  <int64> <object>
#end_FrameGO-from_parquet()

#start_FrameGO-from_pickle()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_pickle('/tmp/f.pickle')
>>> sf.FrameGO.from_pickle('/tmp/f.pickle')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-from_pickle()

#start_FrameGO-from_records()
>>> sf.FrameGO.from_records(((10, False, '1517-01-01'), (8, True,'1517-04-01')), index=('p', 'q'), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
#end_FrameGO-from_records()

#start_FrameGO-from_records_items()
>>> sf.FrameGO.from_records_items((('p', (10, False, '1517-01-01')), ('q', (8, True,'1517-04-01'))), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
#end_FrameGO-from_records_items()

#start_FrameGO-from_series()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'), name='x')
>>> sf.FrameGO.from_series(s)
<FrameGO>
<IndexGO> x       <<U1>
<Index>
a         10
b         2
c         8
<<U1>     <int64>
#end_FrameGO-from_series()

#start_FrameGO-from_sql()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_sqlite('/tmp/f.db')
>>> import sqlite3
>>> conn = sqlite3.connect('/tmp/f.db')
>>> sf.FrameGO.from_sql("select * from x limit 2", connection=conn, index_depth=1)
<FrameGO>
<IndexGO> a       b       c          <<U1>
<Index>
0         10      0       1517-01-01
1         2       1       1517-04-01
<int64>   <int64> <int64> <<U10>
#end_FrameGO-from_sql()

#start_FrameGO-from_sqlite()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_sqlite('/tmp/f.db')
>>> sf.FrameGO.from_sqlite('/tmp/f.db', label=f1.name, index_depth=1)
<FrameGO: x>
<IndexGO>    a       b      c          <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <<U10>
#end_FrameGO-from_sqlite()

#start_FrameGO-from_structured_array()
>>> sa = np.array([(False, 8), (True, 19)], dtype=[('a', bool), ('b', int)])
>>> sa
[(False,  8) ( True, 19)]
>>> sf.FrameGO.from_structured_array(sa)
<FrameGO>
<IndexGO> a      b       <<U1>
<Index>
0         False  8
1         True   19
<int64>   <bool> <int64>
#end_FrameGO-from_structured_array()

#start_FrameGO-from_tsv()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_tsv('/tmp/f.tsv')
>>> from pathlib import Path
>>> Path('/tmp/f.tsv').read_text()
__index0__	a	b
p	0	1
q	2	3
r	4	5

>>> sf.FrameGO.from_tsv('/tmp/f.tsv', index_depth=1)
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<<U1>     <int64> <int64>
#end_FrameGO-from_tsv()

#start_FrameGO-from_xlsx()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_xlsx('/tmp/f.xlsx')
>>> sf.FrameGO.from_xlsx('/tmp/f.xlsx', index_depth=1)
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<<U1>     <int64> <int64>
#end_FrameGO-from_xlsx()

#start_FrameGO-to_arrow()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_arrow()
pyarrow.Table
__index0__: string
a: int64
b: string
----
__index0__: [["p","q","r","s"]]
a: [[10,2,8,3]]
b: [["qrs ","XYZ","123"," wX "]]
#end_FrameGO-to_arrow()

#start_FrameGO-to_clipboard()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_clipboard()
#end_FrameGO-to_clipboard()

#start_FrameGO-to_csv()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_csv('/tmp/f.csv')
>>> from pathlib import Path
>>> Path('/tmp/f.csv').read_text()
__index0__,a,b
p,0,1
q,2,3
r,4,5

#end_FrameGO-to_csv()

#start_FrameGO-to_delimited()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_delimited('/tmp/f.psv', delimiter='|')
>>> from pathlib import Path
>>> Path('/tmp/f.psv').read_text()
__index0__|a|b
p|0|1
q|2|3
r|4|5

#end_FrameGO-to_delimited()

#start_FrameGO-to_frame()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_frame()
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
#end_FrameGO-to_frame()

#start_FrameGO-to_frame_go()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_frame_go()
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_FrameGO-to_frame_go()

#start_FrameGO-to_frame_he()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_frame_he()
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_FrameGO-to_frame_he()

#start_FrameGO-to_hdf5()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_hdf5('/tmp/f.h5')
#end_FrameGO-to_hdf5()

#start_FrameGO-to_json_columns()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.to_json_columns(indent=4)
{
    "a": {
        "0": 10,
        "1": 2,
        "2": 8,
        "3": 3
    },
    "b": {
        "0": false,
        "1": true,
        "2": true,
        "3": false
    },
    "c": {
        "0": "1517-01-01",
        "1": "1517-04-01",
        "2": "1517-12-31",
        "3": "1517-06-30"
    }
}
#end_FrameGO-to_json_columns()

#start_FrameGO-to_json_index()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.to_json_index(indent=4)
{
    "0": {
        "a": 10,
        "b": false,
        "c": "1517-01-01"
    },
    "1": {
        "a": 2,
        "b": true,
        "c": "1517-04-01"
    },
    "2": {
        "a": 8,
        "b": true,
        "c": "1517-12-31"
    },
    "3": {
        "a": 3,
        "b": false,
        "c": "1517-06-30"
    }
}
#end_FrameGO-to_json_index()

#start_FrameGO-to_json_records()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.to_json_records(indent=4)
[
    {
        "a": 10,
        "b": false,
        "c": "1517-01-01"
    },
    {
        "a": 2,
        "b": true,
        "c": "1517-04-01"
    },
    {
        "a": 8,
        "b": true,
        "c": "1517-12-31"
    },
    {
        "a": 3,
        "b": false,
        "c": "1517-06-30"
    }
]
#end_FrameGO-to_json_records()

#start_FrameGO-to_json_split()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.to_json_split(indent=4)
{
    "columns": [
        "a",
        "b",
        "c"
    ],
    "index": [
        0,
        1,
        2,
        3
    ],
    "data": [
        [
            10,
            false,
            "1517-01-01"
        ],
        [
            2,
            true,
            "1517-04-01"
        ],
        [
            8,
            true,
            "1517-12-31"
        ],
        [
            3,
            false,
            "1517-06-30"
        ]
    ]
}
#end_FrameGO-to_json_split()

#start_FrameGO-to_json_values()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.to_json_values(indent=4)
[
    [
        10,
        false,
        "1517-01-01"
    ],
    [
        2,
        true,
        "1517-04-01"
    ],
    [
        8,
        true,
        "1517-12-31"
    ],
    [
        3,
        false,
        "1517-06-30"
    ]
]
#end_FrameGO-to_json_values()

#start_FrameGO-to_latex()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_latex()
\begin{table}[ht]
\centering
\begin{tabular}{c c c}
\hline\hline
   & a   & b    \\
\hline
p  & 10  & qrs  \\
q  & 2   & XYZ  \\
r  & 8   & 123  \\
s  & 3   &  wX  \\
\hline\end{tabular}
\end{table}
#end_FrameGO-to_latex()

#start_FrameGO-to_markdown()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_markdown()
|  |a  |b   |
|--|---|----|
|p |10 |qrs |
|q |2  |XYZ |
|r |8  |123 |
|s |3  | wX |
#end_FrameGO-to_markdown()

#start_FrameGO-to_msgpack()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_msgpack()
b'\x85\xc4\x02sf\xa7FrameGO\xc4\x04name\xa1x\xc4\x06blocks\xc4\xcd\x82\xc4\x02sf\xaaTypeBlocks\xc4\x06blocks\xc4\xb3\x92\x85\xc4\x02nd\xc3\xc4\x04type\xa3<i8\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4 \n\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U4\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4@q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00 \x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00\x00\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00w\x00\x00\x00X\x00\x00\x00 \x00\x00\x00\xc4\x05index\xc4S\x83\xc4\x02sf\xa5Index\xc4\x04name\xc0\xc4\x04data\xc49\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4\x10p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00\xc4\x07columns\xc4M\x83\xc4\x02sf\xa7IndexGO\xc4\x04name\xc0\xc4\x04data\xc41\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x02\xc4\x04data\xc4\x08a\x00\x00\x00b\x00\x00\x00'
#end_FrameGO-to_msgpack()

#start_FrameGO-to_npy()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npy('/tmp/f.npy')
>>> sf.Frame.from_npy('/tmp/f.npy')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> import shutil
>>> shutil.rmtree('/tmp/f.npy')
#end_FrameGO-to_npy()

#start_FrameGO-to_npz()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npz('/tmp/f.npz')
>>> sf.Frame.from_npz('/tmp/f.npz')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_FrameGO-to_npz()

#start_FrameGO-to_pairs()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_pairs()
(('a', (('p', 10), ('q', 2), ('r', 8), ('s', 3))), ('b', (('p', 'qrs '), ('q', 'XYZ'), ('r', '123'), ('s', ' wX '))))
#end_FrameGO-to_pairs()

#start_FrameGO-to_pandas()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_pandas()
    a     b
p  10  qrs 
q   2   XYZ
r   8   123
s   3   wX 
#end_FrameGO-to_pandas()

#start_FrameGO-to_parquet()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_parquet('/tmp/f.parquet')
#end_FrameGO-to_parquet()

#start_FrameGO-to_pickle()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_pickle('/tmp/f.pickle')
>>> sf.Frame.from_pickle('/tmp/f.pickle')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_FrameGO-to_pickle()

#start_FrameGO-to_rst()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_rst()
+--+---+----+
|  |a  |b   |
+==+===+====+
|p |10 |qrs |
+--+---+----+
|q |2  |XYZ |
+--+---+----+
|r |8  |123 |
+--+---+----+
|s |3  | wX |
+--+---+----+
#end_FrameGO-to_rst()

#start_FrameGO-to_series()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_series()
<Series: x>
<Index>
('p', 'a')  10
('p', 'b')  qrs
('q', 'a')  2
('q', 'b')  XYZ
('r', 'a')  8
('r', 'b')  123
('s', 'a')  3
('s', 'b')   wX
<object>    <object>
#end_FrameGO-to_series()

#start_FrameGO-to_sqlite()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_sqlite('/tmp/f.db')
>>> import sqlite3
>>> conn = sqlite3.connect('/tmp/f.db')
>>> sf.Frame.from_sql("select * from x limit 2", connection=conn, index_depth=1)
<Frame>
<Index> a       b       c          <<U1>
<Index>
0       10      0       1517-01-01
1       2       1       1517-04-01
<int64> <int64> <int64> <<U10>
#end_FrameGO-to_sqlite()

#start_FrameGO-to_tsv()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_tsv('/tmp/f.tsv')
>>> from pathlib import Path
>>> Path('/tmp/f.tsv').read_text()
__index0__	a	b
p	0	1
q	2	3
r	4	5

#end_FrameGO-to_tsv()

#start_FrameGO-to_xarray()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_xarray()
<xarray.Dataset>
Dimensions:     (__index0__: 4)
Coordinates:
  * __index0__  (__index0__) <U1 'p' 'q' 'r' 's'
Data variables:
    a           (__index0__) int64 10 2 8 3
    b           (__index0__) <U4 'qrs ' 'XYZ' '123' ' wX '
#end_FrameGO-to_xarray()

#start_FrameGO-to_xlsx()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_xlsx('/tmp/f.xlsx')
#end_FrameGO-to_xlsx()

#start_FrameGO-STATIC
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.STATIC
False
#end_FrameGO-STATIC

#start_FrameGO-T
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.T
<FrameGO: x>
<IndexGO>    0          1          2          3          <int64>
<Index>
a            10         2          8          3
b            False      True       True       False
c            1517-01-01 1517-04-01 1517-12-31 1517-06-30
<<U1>        <object>   <object>   <object>   <object>
#end_FrameGO-T

#start_FrameGO-columns
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.columns
<IndexGO>
a
b
c
<<U1>
#end_FrameGO-columns

#start_FrameGO-dtypes
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.dtypes
<Series: x>
<Index>
a           int64
b           bool
c           datetime64[D]
<<U1>       <object>
#end_FrameGO-dtypes

#start_FrameGO-index
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.index
<Index>
0
1
2
3
<int64>
#end_FrameGO-index

#start_FrameGO-memory
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.memory
        L    Lu    LM   LMu   LMD  LMDu  R     Ru    RM   RMu   RMD  RMDu
Name    50   B     50   B     50   B     50    B     50   B     50   B
Index   208  B     224  B     112  B     8.3   KB    256  B     144  B
Columns 1.11 KB    1.14 KB    942  B     9.2   KB    1.16 KB    966  B
Blocks  1.4  KB    1.45 KB    1.12 KB    1.4   KB    1.45 KB    1.12 KB
Total   2.77 KB    2.86 KB    2.2  KB    10.86 KB    2.91 KB    2.26 KB
#end_FrameGO-memory

#start_FrameGO-name
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.name
x
#end_FrameGO-name

#start_FrameGO-nbytes
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.nbytes
68
#end_FrameGO-nbytes

#start_FrameGO-ndim
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.ndim
2
#end_FrameGO-ndim

#start_FrameGO-shape
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.shape
(4, 3)
#end_FrameGO-shape

#start_FrameGO-size
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.size
12
#end_FrameGO-size

#start_FrameGO-__array__()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.__array__()
[[0 1]
 [2 3]
 [4 5]]
#end_FrameGO-__array__()

#start_FrameGO-__array_ufunc__()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> np.array((1, 0)) * f
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       0
q         2       0
r         4       0
<<U1>     <int64> <int64>
#end_FrameGO-__array_ufunc__()

#start_FrameGO-__bool__()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> bool(f)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_FrameGO-__bool__()

#start_FrameGO-__dataframe__()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> dfi = f.__dataframe__()
>>> tuple(dfi.get_columns())
(<DFIColumn: shape=(3,) dtype=<i8>, <DFIColumn: shape=(3,) dtype=<i8>)
#end_FrameGO-__dataframe__()

#start_FrameGO-__deepcopy__()
>>> import copy
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> copy.deepcopy(f)
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            0       1
q            2       3
r            4       5
<<U1>        <int64> <int64>
#end_FrameGO-__deepcopy__()

#start_FrameGO-__len__()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> len(f)
3
#end_FrameGO-__len__()

#start_FrameGO-__round__()
>>> f = sf.FrameGO((np.arange(6).reshape(3,2) * 4/3), index=('p', 'q', 'r'), columns=('a', 'b'), name='y')
>>> f
<FrameGO: y>
<IndexGO>    a                  b                  <<U1>
<Index>
p            0.0                1.3333333333333333
q            2.6666666666666665 4.0
r            5.333333333333333  6.666666666666667
<<U1>        <float64>          <float64>
>>> round(f, 1)
<FrameGO: y>
<IndexGO>    a         b         <<U1>
<Index>
p            0.0       1.3
q            2.7       4.0
r            5.3       6.7
<<U1>        <float64> <float64>
#end_FrameGO-__round__()

#start_FrameGO-all()
>>> f = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f.all()
<Series>
<Index>
c        False
d        True
<<U1>    <bool>
#end_FrameGO-all()

#start_FrameGO-any()
>>> f = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f.any()
<Series>
<Index>
c        False
d        True
<<U1>    <bool>
#end_FrameGO-any()

#start_FrameGO-astype[]()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.astype['c'](object)
<FrameGO: x>
<IndexGO>    a       b      c          <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <object>
#end_FrameGO-astype[]()

#start_FrameGO-astype()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            0       1
q            2       3
r            4       5
<<U1>        <int64> <int64>
>>> f.astype(float)
<FrameGO: x>
<IndexGO>    a         b         <<U1>
<Index>
p            0.0       1.0
q            2.0       3.0
r            4.0       5.0
<<U1>        <float64> <float64>
#end_FrameGO-astype()

#start_FrameGO-clip()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            0       1
q            2       3
r            4       5
<<U1>        <int64> <int64>
>>> f.clip(lower=2, upper=4)
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       2
q            2       3
r            4       4
<<U1>        <int64> <int64>
#end_FrameGO-clip()

#start_FrameGO-corr()
>>> f1 = sf.FrameGO((np.concatenate((np.arange(8) * 2, np.arange(8) ** 2)).reshape(4,4)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c', 'd'), name='x')
>>> f1.corr()
<FrameGO: x>
<IndexGO>    a                  b                  c                  d                  <<U1>
<Index>
a            1.0                0.9888513796308233 0.965581028730576  0.9340437381585037
b            0.9888513796308233 0.9999999999999999 0.9923448088115435 0.972134396307783
c            0.9655810287305759 0.9923448088115435 0.9999999999999999 0.9934089501944108
d            0.9340437381585037 0.9721343963077829 0.9934089501944108 1.0
<<U1>        <float64>          <float64>          <float64>          <float64>
#end_FrameGO-corr()

#start_FrameGO-count()
>>> f = sf.FrameGO.from_items((('a', (10, 2, np.nan, 3)), ('b', ('qrs ', 'XYZ', None, None))), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b        <<U1>
<Index>
p            10.0      qrs
q            2.0       XYZ
r            nan       None
s            3.0       None
<<U1>        <float64> <object>
>>> f.count(skipna=True)
<Series>
<Index>
a        3
b        2
<<U1>    <int64>
>>> f.count(unique=True)
<Series>
<Index>
a        3
b        2
<<U1>    <int64>
#end_FrameGO-count()

#start_FrameGO-cov()
>>> f1 = sf.FrameGO((np.concatenate((np.arange(8) * 2, np.arange(8) ** 2)).reshape(4,4)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c', 'd'), name='x')
>>> f1.cov()
<FrameGO: x>
<IndexGO>    a                  b                  c                  d                  <<U1>
<Index>
a            58.666666666666664 84.0               112.0              142.66666666666666
b            84.0               123.0              166.66666666666666 215.0
c            112.0              166.66666666666666 229.33333333333331 300.0
d            142.66666666666666 215.0              300.0              397.66666666666663
<<U1>        <float64>          <float64>          <float64>          <float64>
#end_FrameGO-cov()

#start_FrameGO-cumprod()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.cumprod()
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       1
q         0       3
r         0       15
<<U1>     <int64> <int64>
#end_FrameGO-cumprod()

#start_FrameGO-cumsum()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.cumsum()
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       1
q         2       4
r         6       9
<<U1>     <int64> <int64>
#end_FrameGO-cumsum()

#start_FrameGO-drop_duplicated()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
1            2.0       True     1517-04-01
2            nan       None     NaT
3            2.0       True     1517-04-01
<int64>      <float64> <object> <datetime64[D]>
>>> f.drop_duplicated()
<FrameGO: x>
<IndexGO>    a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
2            nan       None     NaT
<int64>      <float64> <object> <datetime64[D]>
#end_FrameGO-drop_duplicated()

#start_FrameGO-dropfalsy()
>>> f = sf.FrameGO.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            0             NaT
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.dropfalsy()
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
#end_FrameGO-dropfalsy()

#start_FrameGO-dropna()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
1            2.0       True     1517-04-01
2            nan       None     NaT
3            2.0       True     1517-04-01
<int64>      <float64> <object> <datetime64[D]>
>>> f.dropna()
<FrameGO: x>
<IndexGO>    a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
1            2.0       True     1517-04-01
3            2.0       True     1517-04-01
<int64>      <float64> <object> <datetime64[D]>
#end_FrameGO-dropna()

#start_FrameGO-duplicated()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
1            2.0       True     1517-04-01
2            nan       None     NaT
3            2.0       True     1517-04-01
<int64>      <float64> <object> <datetime64[D]>
>>> f.duplicated()
<Series>
<Index>
0        False
1        True
2        False
3        True
<int64>  <bool>
#end_FrameGO-duplicated()

#start_FrameGO-equals()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameGO((np.arange(6).reshape(3,2) * 4/3), index=('p', 'q', 'r'), columns=('a', 'b'), name='y')
>>> f1.equals(f2)
False
#end_FrameGO-equals()

#start_FrameGO-extend()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f1.extend(f2)
>>> f1
<FrameGO: x>
<IndexGO>    a       b       c      d      <<U1>
<Index>
p            0       1       False  True
q            2       3       False  True
r            4       5       False  True
<<U1>        <int64> <int64> <bool> <bool>
#end_FrameGO-extend()

#start_FrameGO-extend_items()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.extend_items((('d', (1, 2, 3)), ('e', (4, 5, 6))))
>>> f1
<FrameGO: x>
<IndexGO>    a       b       d       e       <<U1>
<Index>
p            0       1       1       4
q            2       3       2       5
r            4       5       3       6
<<U1>        <int64> <int64> <int64> <int64>
#end_FrameGO-extend_items()

#start_FrameGO-fillfalsy()
>>> f = sf.FrameGO.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            0             NaT
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.fillfalsy(dict(a=1, b='abc', c=np.datetime64('2022-01-10')))
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            1       abc   2022-01-10
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
#end_FrameGO-fillfalsy()

#start_FrameGO-fillfalsy_backward()
>>> f = sf.FrameGO.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            0       20      0
1            0       18      0
2            10      -3      0
3            2       18      1
<int64>      <int64> <int64> <int64>
>>> f.fillfalsy_backward()
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            10      20      1
1            10      18      1
2            10      -3      1
3            2       18      1
<int64>      <int64> <int64> <int64>
#end_FrameGO-fillfalsy_backward()

#start_FrameGO-fillfalsy_forward()
>>> f = sf.FrameGO.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            10      8       1
1            2       3       0
2            0       8       0
3            0       0       0
<int64>      <int64> <int64> <int64>
>>> f.fillfalsy_forward()
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            10      8       1
1            2       3       1
2            2       8       1
3            2       8       1
<int64>      <int64> <int64> <int64>
#end_FrameGO-fillfalsy_forward()

#start_FrameGO-fillfalsy_leading()
>>> f = sf.FrameGO.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            0       20      0
1            0       18      0
2            10      -3      0
3            2       18      1
<int64>      <int64> <int64> <int64>
>>> f.fillfalsy_leading(-1)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            -1      20      -1
1            -1      18      -1
2            10      -3      -1
3            2       18      1
<int64>      <int64> <int64> <int64>
#end_FrameGO-fillfalsy_leading()

#start_FrameGO-fillfalsy_trailing()
>>> f = sf.FrameGO.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            10      8       1
1            2       3       0
2            0       8       0
3            0       0       0
<int64>      <int64> <int64> <int64>
>>> f.fillfalsy_trailing(-1)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            10      8       1
1            2       3       -1
2            -1      8       -1
3            -1      -1      -1
<int64>      <int64> <int64> <int64>
#end_FrameGO-fillfalsy_trailing()

#start_FrameGO-fillna()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b     c               <<U1>
<Index>
0            10.0      qrs   1517-01-01
1            2.0       XYZ   1517-04-01
2            nan             NaT
3            2.0       123   1517-04-01
<int64>      <float64> <<U4> <datetime64[D]>
>>> f.fillna(-1)
<FrameGO: x>
<IndexGO>    a         b     c          <<U1>
<Index>
0            10.0      qrs   1517-01-01
1            2.0       XYZ   1517-04-01
2            -1.0            -1
3            2.0       123   1517-04-01
<int64>      <float64> <<U4> <object>
#end_FrameGO-fillna()

#start_FrameGO-fillna_backward()
>>> f = sf.FrameGO.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y')
>>> f
<FrameGO: y>
<IndexGO>    a         b         c         <<U1>
<Index>
0            nan       nan       nan
1            nan       8.0       nan
2            10.0      3.0       nan
3            2.0       8.0       1.0
<int64>      <float64> <float64> <float64>
>>> f.fillna_backward()
<FrameGO: y>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            10.0      8.0       1.0
2            10.0      3.0       1.0
3            2.0       8.0       1.0
<int64>      <float64> <float64> <float64>
#end_FrameGO-fillna_backward()

#start_FrameGO-fillna_forward()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.fillna_forward()
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       1.0
2            2.0       8.0       1.0
3            2.0       8.0       1.0
<int64>      <float64> <float64> <float64>
#end_FrameGO-fillna_forward()

#start_FrameGO-fillna_leading()
>>> f = sf.FrameGO.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y')
>>> f
<FrameGO: y>
<IndexGO>    a         b         c         <<U1>
<Index>
0            nan       nan       nan
1            nan       8.0       nan
2            10.0      3.0       nan
3            2.0       8.0       1.0
<int64>      <float64> <float64> <float64>
>>> f.fillna_leading(-1)
<FrameGO: y>
<IndexGO>    a         b         c         <<U1>
<Index>
0            -1.0      -1.0      -1.0
1            -1.0      8.0       -1.0
2            10.0      3.0       -1.0
3            2.0       8.0       1.0
<int64>      <float64> <float64> <float64>
#end_FrameGO-fillna_leading()

#start_FrameGO-fillna_trailing()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.fillna_trailing(-1)
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       -1.0
2            -1.0      8.0       -1.0
3            -1.0      -1.0      -1.0
<int64>      <float64> <float64> <float64>
#end_FrameGO-fillna_trailing()

#start_FrameGO-head()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.head(2)
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-head()

#start_FrameGO-iloc_max()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.iloc_max()
<Series>
<Index>
a        0
b        0
c        0
<<U1>    <int64>
#end_FrameGO-iloc_max()

#start_FrameGO-iloc_min()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.iloc_min()
<Series>
<Index>
a        1
b        1
c        0
<<U1>    <int64>
#end_FrameGO-iloc_min()

#start_FrameGO-insert_after()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f1.insert_after('b', f2)
<FrameGO: x>
<IndexGO>    a       b       c      d      <<U1>
<Index>
p            0       1       False  True
q            2       3       False  True
r            4       5       False  True
<<U1>        <int64> <int64> <bool> <bool>
#end_FrameGO-insert_after()

#start_FrameGO-insert_before()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f1.insert_before('b', f2)
<FrameGO: x>
<IndexGO>    a       c      d      b       <<U1>
<Index>
p            0       False  True   1
q            2       False  True   3
r            4       False  True   5
<<U1>        <int64> <bool> <bool> <int64>
#end_FrameGO-insert_before()

#start_FrameGO-isfalsy()
>>> f = sf.FrameGO.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            0             NaT
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.isfalsy()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       False  False  False
1       False  False  False
2       True   True   True
3       False  False  False
<int64> <bool> <bool> <bool>
#end_FrameGO-isfalsy()

#start_FrameGO-isin()
>>> f = sf.FrameGO.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')
>>> f.isin((0, 8))
<FrameGO: x>
<IndexGO>    a      b      c      <<U1>
<Index>
0            False  True   False
1            False  False  True
2            True   True   True
3            True   True   True
<int64>      <bool> <bool> <bool>
#end_FrameGO-isin()

#start_FrameGO-isna()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.isna()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       False  False  False
1       False  False  True
2       True   False  True
3       True   True   True
<int64> <bool> <bool> <bool>
#end_FrameGO-isna()

#start_FrameGO-join_inner()
>>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_inner(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_FrameGO-join_inner()

#start_FrameGO-join_left()
>>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_left(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_FrameGO-join_left()

#start_FrameGO-join_outer()
>>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_outer(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_FrameGO-join_outer()

#start_FrameGO-join_right()
>>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_right(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_FrameGO-join_right()

#start_FrameGO-loc_max()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.loc_max()
<Series>
<Index>
a        0
b        0
c        0
<<U1>    <int64>
#end_FrameGO-loc_max()

#start_FrameGO-loc_min()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.loc_min()
<Series>
<Index>
a        1
b        1
c        0
<<U1>    <int64>
#end_FrameGO-loc_min()

#start_FrameGO-max()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.max()
<Series>
<Index>
a        4
b        5
<<U1>    <int64>
#end_FrameGO-max()

#start_FrameGO-mean()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.mean()
<Series>
<Index>
a        2.0
b        3.0
<<U1>    <float64>
#end_FrameGO-mean()

#start_FrameGO-median()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.median()
<Series>
<Index>
a        2.0
b        3.0
<<U1>    <float64>
#end_FrameGO-median()

#start_FrameGO-min()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.min()
<Series>
<Index>
a        0
b        1
<<U1>    <int64>
#end_FrameGO-min()

#start_FrameGO-notfalsy()
>>> f = sf.FrameGO.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            0             NaT
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.notfalsy()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       True   True   True
1       True   True   True
2       False  False  False
3       True   True   True
<int64> <bool> <bool> <bool>
#end_FrameGO-notfalsy()

#start_FrameGO-notna()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.notna()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       True   True   True
1       True   True   False
2       False  True   False
3       False  False  False
<int64> <bool> <bool> <bool>
#end_FrameGO-notna()

#start_FrameGO-pivot()
>>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f1.pivot(index_fields='b', columns_fields='c')
<FrameGO>
<IndexGO: c> 0         1         <int64>
<Index: b>
0            11.0      nan
3            10.0      nan
8            nan       6.0
<int64>      <float64> <float64>
#end_FrameGO-pivot()

#start_FrameGO-pivot_stack()
>>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f1.pivot_stack()
<FrameGO: x>
<IndexGO>              0       <int64>
<IndexHierarchy>
0                a     11
0                b     0
0                c     0
1                a     4
1                b     8
1                c     1
2                a     10
2                b     3
2                c     0
3                a     2
3                b     8
3                c     1
<int64>          <<U1> <int64>
#end_FrameGO-pivot_stack()

#start_FrameGO-pivot_unstack()
>>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = f1.pivot_stack()
>>> f2
<FrameGO: x>
<IndexGO>              0       <int64>
<IndexHierarchy>
0                a     11
0                b     0
0                c     0
1                a     4
1                b     8
1                c     1
2                a     10
2                b     3
2                c     0
3                a     2
3                b     8
3                c     1
<int64>          <<U1> <int64>
>>> f2.pivot_unstack()
<FrameGO: x>
<IndexHierarchyGO> 0       0       0       <int64>
                   a       b       c       <<U1>
<Index>
0                  11      0       0
1                  4       8       1
2                  10      3       0
3                  2       8       1
<int64>            <int64> <int64> <int64>
#end_FrameGO-pivot_unstack()

#start_FrameGO-prod()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.prod()
<Series>
<Index>
a        0
b        15
<<U1>    <int64>
#end_FrameGO-prod()

#start_FrameGO-rank_dense()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            11      0       0
1            4       8       1
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.rank_dense()
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            3       0       0
1            1       2       1
2            2       1       0
3            0       2       1
<int64>      <int64> <int64> <int64>
#end_FrameGO-rank_dense()

#start_FrameGO-rank_max()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            11      0       0
1            4       8       1
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.rank_max()
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            3       0       1
1            1       3       3
2            2       1       1
3            0       3       3
<int64>      <int64> <int64> <int64>
#end_FrameGO-rank_max()

#start_FrameGO-rank_mean()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            11      0       0
1            4       8       1
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.rank_mean()
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            3.0       0.0       0.5
1            1.0       2.5       2.5
2            2.0       1.0       0.5
3            0.0       2.5       2.5
<int64>      <float64> <float64> <float64>
#end_FrameGO-rank_mean()

#start_FrameGO-rank_min()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            11      0       0
1            4       8       1
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.rank_min()
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            3       0       0
1            1       2       2
2            2       1       0
3            0       2       2
<int64>      <int64> <int64> <int64>
#end_FrameGO-rank_min()

#start_FrameGO-rank_ordinal()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            11      0       0
1            4       8       1
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.rank_ordinal()
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            3       0       0
1            1       2       2
2            2       1       1
3            0       3       3
<int64>      <int64> <int64> <int64>
#end_FrameGO-rank_ordinal()

#start_FrameGO-rehierarch()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rehierarch((1, 0))
<FrameGO: x>
<IndexGO>                a       b      c               <<U1>
<IndexHierarchy>
p                0       10      False  1517-01-01
p                1       8       True   1517-12-31
q                0       2       True   1517-04-01
q                1       3       False  1517-06-30
<<U1>            <int64> <int64> <bool> <datetime64[D]>
#end_FrameGO-rehierarch()

#start_FrameGO-reindex()
>>> f = sf.FrameGO.from_items((('a', (10, 2, 8, 3)), ('b', ('qrs ', 'XYZ', '123', ' wX '))), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.reindex(('q', 't', 's', 'r'), fill_value=sf.FillValueAuto(i=-1, U=''))
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
q            2       XYZ
t            -1
s            3        wX
r            8       123
<<U1>        <int64> <<U4>
#end_FrameGO-reindex()

#start_FrameGO-relabel()
>>> f = sf.FrameGO.from_records(((10, False, '1517-01-01'), (8, True,'1517-04-01')), index=('p', 'q'), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
>>> f.relabel(('y', 'z'))
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
y            10      False  1517-01-01
z            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
>>> f.relabel(dict(q='x', p='y'))
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
y            10      False  1517-01-01
x            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
>>> f.relabel(lambda l: f'+{l.upper()}+')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
+P+          10      False  1517-01-01
+Q+          8       True   1517-04-01
<<U3>        <int64> <bool> <datetime64[D]>
#end_FrameGO-relabel()

#start_FrameGO-relabel_flat()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.relabel_flat(index=True)
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
(0, 'p')     10      False  1517-01-01
(0, 'q')     2       True   1517-04-01
(1, 'p')     8       True   1517-12-31
(1, 'q')     3       False  1517-06-30
<object>     <int64> <bool> <datetime64[D]>
#end_FrameGO-relabel_flat()

#start_FrameGO-relabel_level_add()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.relabel_level_add('I')
<FrameGO: x>
<IndexGO>                      a       b      c               <<U1>
<IndexHierarchy>
I                0       p     10      False  1517-01-01
I                0       q     2       True   1517-04-01
I                1       p     8       True   1517-12-31
I                1       q     3       False  1517-06-30
<<U1>            <int64> <<U1> <int64> <bool> <datetime64[D]>
#end_FrameGO-relabel_level_add()

#start_FrameGO-relabel_level_drop()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.iloc[:2].relabel_level_drop(1)
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            2       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
#end_FrameGO-relabel_level_drop()

#start_FrameGO-relabel_shift_in()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.relabel_shift_in('a')
<FrameGO: x>
<IndexGO>                                          b      c               <<U1>
<IndexHierarchy: ('__index0__', '...
0                                    p     10      False  1517-01-01
0                                    q     2       True   1517-04-01
1                                    p     8       True   1517-12-31
1                                    q     3       False  1517-06-30
<int64>                              <<U1> <int64> <bool> <datetime64[D]>
#end_FrameGO-relabel_shift_in()

#start_FrameGO-relabel_shift_out()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rename(index=('d', 'e')).relabel_shift_out([1, 0])
<FrameGO: x>
<IndexGO>    e     d       a       b      c               <<U1>
<Index>
0            p     0       10      False  1517-01-01
1            q     0       2       True   1517-04-01
2            p     1       8       True   1517-12-31
3            q     1       3       False  1517-06-30
<int64>      <<U1> <int64> <int64> <bool> <datetime64[D]>
#end_FrameGO-relabel_shift_out()

#start_FrameGO-rename()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rename('y', index='p', columns='q')
<FrameGO: y>
<IndexGO: q>              a       b      c               <<U1>
<IndexHierarchy: p>
0                   p     10      False  1517-01-01
0                   q     2       True   1517-04-01
1                   p     8       True   1517-12-31
1                   q     3       False  1517-06-30
<int64>             <<U1> <int64> <bool> <datetime64[D]>
#end_FrameGO-rename()

#start_FrameGO-roll()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.roll(3)
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            2       True   1517-04-01
1            8       True   1517-12-31
2            3       False  1517-06-30
3            10      False  1517-01-01
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-roll()

#start_FrameGO-sample()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.sample(2, 2, seed=0)
<FrameGO: x>
<IndexGO>    b      c               <<U1>
<Index>
2            True   1517-12-31
3            False  1517-06-30
<int64>      <bool> <datetime64[D]>
#end_FrameGO-sample()

#start_FrameGO-set_columns()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.set_columns((1, 'p'), drop=True)
<FrameGO: x>
<IndexGO: (1, 'p')>       8       True   1517-12-31      <object>
<IndexHierarchy>
0                   p     10      False  1517-01-01
0                   q     2       True   1517-04-01
1                   q     3       False  1517-06-30
<int64>             <<U1> <int64> <bool> <datetime64[D]>
#end_FrameGO-set_columns()

#start_FrameGO-set_columns_hierarchy()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.set_columns_hierarchy([(1, 'p'), (1, 'q')], drop=True)
<FrameGO: x>
<IndexHierarchyGO: ((1, 'p'), (1,...       8       True   1517-12-31      <object>
                                           3       False  1517-06-30      <object>
<IndexHierarchy>
0                                    p     10      False  1517-01-01
0                                    q     2       True   1517-04-01
<int64>                              <<U1> <int64> <bool> <datetime64[D]>
#end_FrameGO-set_columns_hierarchy()

#start_FrameGO-set_index()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.set_index('c', drop=True, index_constructor=sf.IndexDate)
<FrameGO: x>
<IndexGO>       a       b      <<U1>
<IndexDate: c>
1517-01-01      10      False
1517-04-01      2       True
1517-12-31      8       True
1517-06-30      3       False
<datetime64[D]> <int64> <bool>
#end_FrameGO-set_index()

#start_FrameGO-set_index_hierarchy()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.set_index_hierarchy(['b', 'c'], drop=True, index_constructors=(sf.Index, sf.IndexDate))
<FrameGO: x>
<IndexGO>                                    a       <<U1>
<IndexHierarchy: ('b', 'c')>
False                        1517-01-01      10
True                         1517-04-01      2
True                         1517-12-31      8
False                        1517-06-30      3
<bool>                       <datetime64[D]> <int64>
#end_FrameGO-set_index_hierarchy()

#start_FrameGO-shift()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.shift(3, fill_value=sf.FillValueAuto)
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            0       False  NaT
1            0       False  NaT
2            0       False  NaT
3            10      False  1517-01-01
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-shift()

#start_FrameGO-sort_columns()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.sort_columns(ascending=False)
<FrameGO: x>
<IndexGO>              c               b      a       <<U1>
<IndexHierarchy>
0                p     1517-01-01      False  10
0                q     1517-04-01      True   2
1                p     1517-12-31      True   8
1                q     1517-06-30      False  3
<int64>          <<U1> <datetime64[D]> <bool> <int64>
#end_FrameGO-sort_columns()

#start_FrameGO-sort_index()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.sort_index(ascending=False)
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
1                q     3       False  1517-06-30
1                p     8       True   1517-12-31
0                q     2       True   1517-04-01
0                p     10      False  1517-01-01
<int64>          <<U1> <int64> <bool> <datetime64[D]>
#end_FrameGO-sort_index()

#start_FrameGO-sort_values()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.sort_values('c')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
3            3       False  1517-06-30
2            8       True   1517-12-31
<int64>      <int64> <bool> <datetime64[D]>
>>> f.sort_values(['c', 'b'], ascending=False)
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
2            8       True   1517-12-31
3            3       False  1517-06-30
1            2       True   1517-04-01
0            10      False  1517-01-01
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-sort_values()

#start_FrameGO-std()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.std()
<Series>
<Index>
a        1.632993161855452
b        1.632993161855452
<<U1>    <float64>
#end_FrameGO-std()

#start_FrameGO-sum()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.sum()
<Series>
<Index>
a        6
b        9
<<U1>    <int64>
#end_FrameGO-sum()

#start_FrameGO-tail()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.tail(2)
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-tail()

#start_FrameGO-transpose()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.transpose()
<FrameGO: x>
<IndexGO>    p       q       r       <<U1>
<Index>
a            0       2       4
b            1       3       5
<<U1>        <int64> <int64> <int64>
#end_FrameGO-transpose()

#start_FrameGO-unique()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
1            2.0       True     1517-04-01
2            nan       None     NaT
3            2.0       True     1517-04-01
<int64>      <float64> <object> <datetime64[D]>
>>> f.unique()
[10.0 False datetime.date(1517, 1, 1) 2.0 True datetime.date(1517, 4, 1)
 nan None]
#end_FrameGO-unique()

#start_FrameGO-unset_columns()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            0       1
q            2       3
r            4       5
<<U1>        <int64> <int64>
>>> f.rename(columns='o').unset_columns()
<FrameGO: x>
<IndexGO>    0        1        <int64>
<Index>
o            a        b
p            0        1
q            2        3
r            4        5
<<U1>        <object> <object>
#end_FrameGO-unset_columns()

#start_FrameGO-unset_index()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rename(index=(('d', 'e'))).unset_index()
<FrameGO: x>
<IndexGO>    d       e     a       b      c               <<U1>
<Index>
0            0       p     10      False  1517-01-01
1            0       q     2       True   1517-04-01
2            1       p     8       True   1517-12-31
3            1       q     3       False  1517-06-30
<int64>      <int64> <<U1> <int64> <bool> <datetime64[D]>
#end_FrameGO-unset_index()

#start_FrameGO-var()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.var()
<Series>
<Index>
a        2.6666666666666665
b        2.6666666666666665
<<U1>    <float64>
#end_FrameGO-var()

#start_FrameGO-__contains__()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.__contains__('a')
True
#end_FrameGO-__contains__()

#start_FrameGO-__iter__()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.__iter__())
('a', 'b', 'c')
#end_FrameGO-__iter__()

#start_FrameGO-__reversed__()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.__reversed__())
('c', 'b', 'a')
#end_FrameGO-__reversed__()

#start_FrameGO-get()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.get('a')
<Series: a>
<Index>
0           10
1           2
2           8
3           3
<int64>     <int64>
>>> f.get('z', -1)
-1
#end_FrameGO-get()

#start_FrameGO-items()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.items())
(('a', <Series: a>
<Index>
0           10
1           2
2           8
3           3
<int64>     <int64>), ('b', <Series: b>
<Index>
0           False
1           True
2           True
3           False
<int64>     <bool>), ('c', <Series: c>
<Index>
0           1517-01-01
1           1517-04-01
2           1517-12-31
3           1517-06-30
<int64>     <datetime64[D]>))
#end_FrameGO-items()

#start_FrameGO-keys()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.keys()
<IndexGO>
a
b
c
<<U1>
#end_FrameGO-keys()

#start_FrameGO-values
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.values
[[10 False datetime.date(1517, 1, 1)]
 [2 True datetime.date(1517, 4, 1)]
 [8 True datetime.date(1517, 12, 31)]
 [3 False datetime.date(1517, 6, 30)]]
#end_FrameGO-values

#start_FrameGO-interface
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.interface
<Frame>
<Index>                              cls_name group                doc                  <<U18>
<Index: signature>
__init__(data, *, index, columns,... FrameGO  Constructor          Initializer. Args...
from_arrow(value, *, index_depth,... FrameGO  Constructor          Realize a Frame f...
from_clipboard(*, delimiter, inde... FrameGO  Constructor          Create a Frame fr...
from_concat(frames, *, axis, unio... FrameGO  Constructor          Concatenate multi...
from_concat_items(items, *, axis,... FrameGO  Constructor          Produce a Frame w...
from_csv(fp, *, index_depth, inde... FrameGO  Constructor          Specialized versi...
from_delimited(fp, *, delimiter, ... FrameGO  Constructor          Create a Frame fr...
from_dict(mapping, *, index, fill... FrameGO  Constructor          Create a Frame fr...
from_dict_fields(fields, *, colum... FrameGO  Constructor          Frame constructor...
from_dict_records(records, *, ind... FrameGO  Constructor          Frame constructor...
from_dict_records_items(items, *,... FrameGO  Constructor          Frame constructor...
from_element(element, *, index, c... FrameGO  Constructor          Create a Frame fr...
from_element_items(items, *, inde... FrameGO  Constructor          Create a Frame fr...
from_elements(elements, *, index,... FrameGO  Constructor          Create a Frame fr...
from_fields(fields, *, index, col... FrameGO  Constructor          Frame constructor...
from_hdf5(fp, *, label, index_dep... FrameGO  Constructor          Load Frame from t...
from_items(pairs, *, index, fill_... FrameGO  Constructor          Frame constructor...
...                                  ...      ...                  ...
via_fill_value(fill_value).__le__... FrameGO  Accessor Fill Value
via_fill_value(fill_value).__eq__... FrameGO  Accessor Fill Value
via_fill_value(fill_value).__ne__... FrameGO  Accessor Fill Value
via_fill_value(fill_value).__gt__... FrameGO  Accessor Fill Value
via_fill_value(fill_value).__ge__... FrameGO  Accessor Fill Value
via_fill_value(fill_value).__radd... FrameGO  Accessor Fill Value
via_fill_value(fill_value).__rsub... FrameGO  Accessor Fill Value
via_fill_value(fill_value).__rmul... FrameGO  Accessor Fill Value
via_fill_value(fill_value).__rtru... FrameGO  Accessor Fill Value
via_fill_value(fill_value).__rflo... FrameGO  Accessor Fill Value
via_re(pattern, flags).search(pos... FrameGO  Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... FrameGO  Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... FrameGO  Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... FrameGO  Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... FrameGO  Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... FrameGO  Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... FrameGO  Accessor Regular ... Perform the same ...
<<U89>                               <<U7>    <<U27>               <<U83>
#end_FrameGO-interface

#start_FrameGO-__repr__()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> repr(f)
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-__repr__()

#start_FrameGO-__str__()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> str(f)
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-__str__()

#start_FrameGO-display()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.display()
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.display(sf.DisplayConfig(type_show=False))
  a  b     c
0 10 False 1517-01-01
1 2  True  1517-04-01
2 8  True  1517-12-31
3 3  False 1517-06-30
#end_FrameGO-display()

#start_FrameGO-display_tall()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.display_tall()
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-display_tall()

#start_FrameGO-display_wide()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.display_wide()
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-display_wide()

#start_FrameGO-assign[]()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign['a'](-1)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            -1      8       1
q            -1      -3      0
r            -1      8       9
s            -1      0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign[['a', 'c']](-1)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            -1      8       -1
q            -1      -3      -1
r            -1      8       -1
s            -1      0       -1
<<U1>        <int64> <int64> <int64>
#end_FrameGO-assign[]()

#start_FrameGO-assign[].apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign['a'].apply(lambda s: s / 100)
<FrameGO: x>
<IndexGO>    a         b       c       <<U1>
<Index>
p            0.1       8       1
q            -0.02     -3      0
r            0.0       8       9
s            0.0       0       12
<<U1>        <float64> <int64> <int64>
#end_FrameGO-assign[].apply()

#start_FrameGO-assign[].apply_element()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign['a'].apply_element(lambda e: e / 100 if e < 8 else e)
<FrameGO: x>
<IndexGO>    a         b       c       <<U1>
<Index>
p            10.0      8       1
q            -0.02     -3      0
r            0.0       8       9
s            0.0       0       12
<<U1>        <float64> <int64> <int64>
#end_FrameGO-assign[].apply_element()

#start_FrameGO-assign[].apply_element_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign['a'].apply_element_items(lambda l, e: e / 100 if l == ('q', 'a') else e)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameGO-assign[].apply_element_items()

#start_FrameGO-assign.iloc[]()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.iloc[2]((-1, -2, -3))
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            -1      -2      -3
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.iloc[2:](-1)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            -1      -1      -1
s            -1      -1      -1
<<U1>        <int64> <int64> <int64>
>>> f.assign.iloc[[0, 3]](-1)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            -1      -1      -1
q            -2      -3      0
r            0       8       9
s            -1      -1      -1
<<U1>        <int64> <int64> <int64>
#end_FrameGO-assign.iloc[]()

#start_FrameGO-assign.iloc[].apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.iloc[2:].apply(lambda s: s / 100)
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
p            10.0      8.0       1.0
q            -2.0      -3.0      0.0
r            0.0       0.08      0.09
s            0.0       0.0       0.12
<<U1>        <float64> <float64> <float64>
#end_FrameGO-assign.iloc[].apply()

#start_FrameGO-assign.iloc[].apply_element()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.iloc[1:].apply_element(lambda e: e / 100 if e < 8 else e)
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
p            10.0      8.0       1.0
q            -0.02     -0.03     0.0
r            0.0       8.0       9.0
s            0.0       0.0       12.0
<<U1>        <float64> <float64> <float64>
#end_FrameGO-assign.iloc[].apply_element()

#start_FrameGO-assign.iloc[].apply_element_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.iloc[1:].apply_element_items(lambda l, e: e / 100 if l == ('q', 'a') else e)
<FrameGO: x>
<IndexGO>    a         b       c       <<U1>
<Index>
p            10.0      8       1
q            -0.02     -3      0
r            0.0       8       9
s            0.0       0       12
<<U1>        <float64> <int64> <int64>
#end_FrameGO-assign.iloc[].apply_element_items()

#start_FrameGO-assign.loc[]()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.loc['r'](-1)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            -1      -1      -1
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.loc['r':](-1)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            -1      -1      -1
s            -1      -1      -1
<<U1>        <int64> <int64> <int64>
>>> f.assign.loc[['p', 's']](-1)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            -1      -1      -1
q            -2      -3      0
r            0       8       9
s            -1      -1      -1
<<U1>        <int64> <int64> <int64>
#end_FrameGO-assign.loc[]()

#start_FrameGO-assign.loc[].apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.loc['r':].apply(lambda s: s / 100)
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
p            10.0      8.0       1.0
q            -2.0      -3.0      0.0
r            0.0       0.08      0.09
s            0.0       0.0       0.12
<<U1>        <float64> <float64> <float64>
#end_FrameGO-assign.loc[].apply()

#start_FrameGO-assign.loc[].apply_element()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.loc['r':].apply_element(lambda e: e / 100 if e < 10 else e)
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
p            10.0      8.0       1.0
q            -2.0      -3.0      0.0
r            0.0       0.08      0.09
s            0.0       0.0       12.0
<<U1>        <float64> <float64> <float64>
#end_FrameGO-assign.loc[].apply_element()

#start_FrameGO-assign.loc[].apply_element_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.loc['r':].apply_element_items(lambda l, e: e / 100 if l[1] == 'c' else e)
<FrameGO: x>
<IndexGO>    a       b       c         <<U1>
<Index>
p            10      8       1.0
q            -2      -3      0.0
r            0       8       0.09
s            0       0       0.12
<<U1>        <int64> <int64> <float64>
#end_FrameGO-assign.loc[].apply_element_items()

#start_FrameGO-assign.bloc[]()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.bloc[f > 5](-1)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            -1      -1      1
q            -2      -3      0
r            0       -1      -1
s            0       0       -1
<<U1>        <int64> <int64> <int64>
#end_FrameGO-assign.bloc[]()

#start_FrameGO-assign.bloc[].apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.bloc[f > 5].apply(lambda s: s * .01)
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
p            0.1       0.08      1.0
q            -2.0      -3.0      0.0
r            0.0       0.08      0.09
s            0.0       0.0       0.12
<<U1>        <float64> <float64> <float64>
#end_FrameGO-assign.bloc[].apply()

#start_FrameGO-assign.bloc[].apply_element()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.bloc[f > 5].apply_element(lambda e: e * .01 if e == 8 else e)
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
p            10.0      0.08      1.0
q            -2.0      -3.0      0.0
r            0.0       0.08      9.0
s            0.0       0.0       12.0
<<U1>        <float64> <float64> <float64>
#end_FrameGO-assign.bloc[].apply_element()

#start_FrameGO-assign.bloc[].apply_element_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.bloc[f > 5].apply_element_items(lambda e: e * .01 if l[1] == 'c' else e)
TypeError('<lambda>() takes 1 positional argument but 2 were given')
#end_FrameGO-assign.bloc[].apply_element_items()

#start_FrameGO-bloc[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.bloc[f > 5]
<Series>
<Index>
('p', 'a') 10
('p', 'b') 8
('r', 'b') 8
('r', 'c') 9
('s', 'c') 12
<object>   <int64>
#end_FrameGO-bloc[]

#start_FrameGO-drop[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.drop['c']
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            10      8
q            -2      -3
r            0       8
s            0       0
<<U1>        <int64> <int64>
>>> f.drop['b':]
<FrameGO: x>
<IndexGO>    a       <<U1>
<Index>
p            10
q            -2
r            0
s            0
<<U1>        <int64>
>>> f.drop[['a', 'c']]
<FrameGO: x>
<IndexGO>    b       <<U1>
<Index>
p            8
q            -3
r            8
s            0
<<U1>        <int64>
#end_FrameGO-drop[]

#start_FrameGO-drop.iloc[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.drop.iloc[1]
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.drop.iloc[1:]
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
<<U1>        <int64> <int64> <int64>
>>> f.drop.iloc[[0, 2]]
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
q            -2      -3      0
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameGO-drop.iloc[]

#start_FrameGO-drop.loc[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.drop.loc['r']
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.drop.loc['r':]
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
<<U1>        <int64> <int64> <int64>
>>> f.drop.loc[['p', 's']]
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
q            -2      -3      0
r            0       8       9
<<U1>        <int64> <int64> <int64>
#end_FrameGO-drop.loc[]

#start_FrameGO-mask[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.mask['c']
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  True
q         False  False  True
r         False  False  True
s         False  False  True
<<U1>     <bool> <bool> <bool>
>>> f.mask['b':]
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  True   True
q         False  True   True
r         False  True   True
s         False  True   True
<<U1>     <bool> <bool> <bool>
>>> f.mask[['a', 'c']]
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   False  True
q         True   False  True
r         True   False  True
s         True   False  True
<<U1>     <bool> <bool> <bool>
#end_FrameGO-mask[]

#start_FrameGO-mask.iloc[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.mask.iloc[1]
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         True   True   True
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
>>> f.mask.iloc[1:]
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         True   True   True
r         True   True   True
s         True   True   True
<<U1>     <bool> <bool> <bool>
>>> f.mask.iloc[[0, 2]]
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   True   True
q         False  False  False
r         True   True   True
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameGO-mask.iloc[]

#start_FrameGO-mask.loc[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.mask.loc['r']
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         False  False  False
r         True   True   True
s         False  False  False
<<U1>     <bool> <bool> <bool>
>>> f.mask.loc['r':]
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         False  False  False
r         True   True   True
s         True   True   True
<<U1>     <bool> <bool> <bool>
>>> f.mask.loc[['p', 's']]
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   True   True
q         False  False  False
r         False  False  False
s         True   True   True
<<U1>     <bool> <bool> <bool>
#end_FrameGO-mask.loc[]

#start_FrameGO-masked_array[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.masked_array['c']
[[10 8 --]
 [-2 -3 --]
 [0 8 --]
 [0 0 --]]
>>> f.masked_array['b':]
[[10 -- --]
 [-2 -- --]
 [0 -- --]
 [0 -- --]]
>>> f.masked_array[['a', 'c']]
[[-- 8 --]
 [-- -3 --]
 [-- 8 --]
 [-- 0 --]]
#end_FrameGO-masked_array[]

#start_FrameGO-masked_array.iloc[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.masked_array.iloc[1]
[[10 8 1]
 [-- -- --]
 [0 8 9]
 [0 0 12]]
>>> f.masked_array.iloc[1:]
[[10 8 1]
 [-- -- --]
 [-- -- --]
 [-- -- --]]
>>> f.masked_array.iloc[[0, 2]]
[[-- -- --]
 [-2 -3 0]
 [-- -- --]
 [0 0 12]]
#end_FrameGO-masked_array.iloc[]

#start_FrameGO-masked_array.loc[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.masked_array.loc['r']
[[10 8 1]
 [-2 -3 0]
 [-- -- --]
 [0 0 12]]
>>> f.masked_array.loc['r':]
[[10 8 1]
 [-2 -3 0]
 [-- -- --]
 [-- -- --]]
>>> f.masked_array.loc[['p', 's']]
[[-- -- --]
 [-2 -3 0]
 [0 8 9]
 [-- -- --]]
#end_FrameGO-masked_array.loc[]

#start_FrameGO-[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f['b']
<Series: b>
<Index>
p           8
q           -3
r           8
s           0
<<U1>       <int64>
>>> f['b':]
<FrameGO: x>
<IndexGO>    b       c       <<U1>
<Index>
p            8       1
q            -3      0
r            8       9
s            0       12
<<U1>        <int64> <int64>
>>> f[['a', 'c']]
<FrameGO: x>
<IndexGO>    a       c       <<U1>
<Index>
p            10      1
q            -2      0
r            0       9
s            0       12
<<U1>        <int64> <int64>
#end_FrameGO-[]

#start_FrameGO-iloc[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iloc[2]
<Series: r>
<Index>
a           0
b           8
c           9
<<U1>       <int64>
>>> f.iloc[2:]
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.iloc[[0, 3]]
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameGO-iloc[]

#start_FrameGO-loc[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.loc['r']
<Series: r>
<Index>
a           0
b           8
c           9
<<U1>       <int64>
>>> f.loc['r':]
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.loc[['p', 's']]
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameGO-loc[]

#start_FrameGO-iter_array()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array())
(array([10, -2,  0,  0]), array([ 8, -3,  8,  0]), array([ 1,  0,  9, 12]))
#end_FrameGO-iter_array()

#start_FrameGO-iter_array().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array().apply(lambda v: v.sum())
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_FrameGO-iter_array().apply()

#start_FrameGO-iter_array().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array().apply_iter(lambda v: v.sum()))
(8, 13, 22)
#end_FrameGO-iter_array().apply_iter()

#start_FrameGO-iter_array().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array().apply_iter_items(lambda v: v.sum()))
(('a', 8), ('b', 13), ('c', 22))
#end_FrameGO-iter_array().apply_iter_items()

#start_FrameGO-iter_array().apply_pool()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array().apply_pool(lambda v: v.sum(), use_threads=True)
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_FrameGO-iter_array().apply_pool()

#start_FrameGO-iter_array_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array_items())
(('a', array([10, -2,  0,  0])), ('b', array([ 8, -3,  8,  0])), ('c', array([ 1,  0,  9, 12])))
#end_FrameGO-iter_array_items()

#start_FrameGO-iter_array_items().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array_items().apply(lambda k, v: v.sum() if k != 'b' else -1)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_FrameGO-iter_array_items().apply()

#start_FrameGO-iter_array_items().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array_items().apply_iter(lambda k, v: v.sum() if k != 'b' else -1))
(8, -1, 22)
#end_FrameGO-iter_array_items().apply_iter()

#start_FrameGO-iter_array_items().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array_items().apply_iter_items(lambda k, v: v.sum() if k != 'b' else -1))
(('a', 8), ('b', -1), ('c', 22))
#end_FrameGO-iter_array_items().apply_iter_items()

#start_FrameGO-iter_array_items().apply_pool()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array_items().apply_pool(lambda pair: pair[1].sum() if pair[0] != 'b' else -1, use_threads=True)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_FrameGO-iter_array_items().apply_pool()

#start_FrameGO-iter_element()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element())
(10, 8, 1, -2, -3, 0, 0, 8, 9, 0, 0, 12)
#end_FrameGO-iter_element()

#start_FrameGO-iter_element().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element().apply(lambda e: e > 5)
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   True   False
q         False  False  False
r         False  True   True
s         False  False  True
<<U1>     <bool> <bool> <bool>
#end_FrameGO-iter_element().apply()

#start_FrameGO-iter_element().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element().apply_iter(lambda e: e > 10))
(False, False, False, False, False, False, False, False, False, False, False, True)
#end_FrameGO-iter_element().apply_iter()

#start_FrameGO-iter_element().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element().apply_iter_items(lambda e: e > 10))
((('p', 'a'), False), (('p', 'b'), False), (('p', 'c'), False), (('q', 'a'), False), (('q', 'b'), False), (('q', 'c'), False), (('r', 'a'), False), (('r', 'b'), False), (('r', 'c'), False), (('s', 'a'), False), (('s', 'b'), False), (('s', 'c'), True))
#end_FrameGO-iter_element().apply_iter_items()

#start_FrameGO-iter_element().apply_pool()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element().apply_pool(lambda e: e > 5, use_threads=True)
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   True   False
q         False  False  False
r         False  True   True
s         False  False  True
<<U1>     <bool> <bool> <bool>
#end_FrameGO-iter_element().apply_pool()

#start_FrameGO-iter_element().map_all()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> f.iter_element().map_all({0: 200, 1: -1, 2: 45})
<FrameGO>
<IndexGO> a       b       c       <<U1>
<Index>
p         -1      45      -1
q         45      -1      200
r         200     45      45
s         200     200     -1
<<U1>     <int64> <int64> <int64>
#end_FrameGO-iter_element().map_all()

#start_FrameGO-iter_element().map_all_iter()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_all_iter({0: 200, 1: -1, 2: 45}))
(-1, 45, -1, 45, -1, 200, 200, 45, 45, 200, 200, -1)
#end_FrameGO-iter_element().map_all_iter()

#start_FrameGO-iter_element().map_all_iter_items()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_all_iter_items({0: 200, 1: -1, 2: 45}))
((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), 200), (('r', 'a'), 200), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), 200), (('s', 'b'), 200), (('s', 'c'), -1))
#end_FrameGO-iter_element().map_all_iter_items()

#start_FrameGO-iter_element().map_any()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> f.iter_element().map_any({1: -1, 2: 45})
<FrameGO>
<IndexGO> a       b       c       <<U1>
<Index>
p         -1      45      -1
q         45      -1      0
r         0       45      45
s         0       0       -1
<<U1>     <int64> <int64> <int64>
#end_FrameGO-iter_element().map_any()

#start_FrameGO-iter_element().map_any_iter()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_any_iter({1: -1, 2: 45}))
(-1, 45, -1, 45, -1, 0, 0, 45, 45, 0, 0, -1)
#end_FrameGO-iter_element().map_any_iter()

#start_FrameGO-iter_element().map_any_iter_items()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_any_iter_items({1: -1, 2: 45}))
((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), 0), (('r', 'a'), 0), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), 0), (('s', 'b'), 0), (('s', 'c'), -1))
#end_FrameGO-iter_element().map_any_iter_items()

#start_FrameGO-iter_element().map_fill()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> f.iter_element().map_fill({1: -1, 2: 45}, fill_value=np.nan)
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         -1.0      45.0      -1.0
q         45.0      -1.0      nan
r         nan       45.0      45.0
s         nan       nan       -1.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-iter_element().map_fill()

#start_FrameGO-iter_element().map_fill_iter()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_fill_iter({1: -1, 2: 45}, fill_value=np.nan))
(-1, 45, -1, 45, -1, nan, nan, 45, 45, nan, nan, -1)
#end_FrameGO-iter_element().map_fill_iter()

#start_FrameGO-iter_element().map_fill_iter_items()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_fill_iter_items({1: -1, 2: 45}, fill_value=np.nan))
((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), nan), (('r', 'a'), nan), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), nan), (('s', 'b'), nan), (('s', 'c'), -1))
#end_FrameGO-iter_element().map_fill_iter_items()

#start_FrameGO-iter_element_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element_items())
((('p', 'a'), 10), (('p', 'b'), 8), (('p', 'c'), 1), (('q', 'a'), -2), (('q', 'b'), -3), (('q', 'c'), 0), (('r', 'a'), 0), (('r', 'b'), 8), (('r', 'c'), 9), (('s', 'a'), 0), (('s', 'b'), 0), (('s', 'c'), 12))
#end_FrameGO-iter_element_items()

#start_FrameGO-iter_element_items().apply()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element_items().apply(lambda k, v: v > 1 if k != ('q', 'b') else 'x')
<FrameGO>
<IndexGO> a      b        c      <<U1>
<Index>
p         False  True     False
q         True   x        False
r         False  True     True
s         False  False    False
<<U1>     <bool> <object> <bool>
#end_FrameGO-iter_element_items().apply()

#start_FrameGO-iter_element_items().apply_iter()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element_items().apply_iter(lambda k, v: v > 1 if k != ('q', 'b') else 'x'))
(False, True, False, True, 'x', False, False, True, True, False, False, False)
#end_FrameGO-iter_element_items().apply_iter()

#start_FrameGO-iter_element_items().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element_items().apply_iter_items(lambda k, v: v > 1 if k != ('q', 'b') else 'x'))
((('p', 'a'), False), (('p', 'b'), True), (('p', 'c'), False), (('q', 'a'), True), (('q', 'b'), 'x'), (('q', 'c'), False), (('r', 'a'), False), (('r', 'b'), True), (('r', 'c'), True), (('s', 'a'), False), (('s', 'b'), False), (('s', 'c'), False))
#end_FrameGO-iter_element_items().apply_iter_items()

#start_FrameGO-iter_element_items().apply_pool()
>>> def func(pair): return pair[1] > 0 and pair[0] == ('q', 'b')
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element_items().apply_pool(func, use_threads=True)
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         False  True   False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameGO-iter_element_items().apply_pool()

#start_FrameGO-iter_element_items().map_all()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_element_items().map_all({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1})
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         200     -1
q         45      1
<<U1>     <int64> <int64>
#end_FrameGO-iter_element_items().map_all()

#start_FrameGO-iter_element_items().map_all_iter()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_all_iter({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1}))
(200, -1, 45, 1)
#end_FrameGO-iter_element_items().map_all_iter()

#start_FrameGO-iter_element_items().map_all_iter_items()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_all_iter_items({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1}))
((('p', 'a'), 200), (('p', 'b'), -1), (('q', 'a'), 45), (('q', 'b'), 1))
#end_FrameGO-iter_element_items().map_all_iter_items()

#start_FrameGO-iter_element_items().map_any()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_element_items().map_any({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1})
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         200     3
q         9       1
<<U1>     <int64> <int64>
#end_FrameGO-iter_element_items().map_any()

#start_FrameGO-iter_element_items().map_any_iter()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_any_iter({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}))
(200, 3, 9, 1)
#end_FrameGO-iter_element_items().map_any_iter()

#start_FrameGO-iter_element_items().map_any_iter_items()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_any_iter_items({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}))
((('p', 'a'), 200), (('p', 'b'), 3), (('q', 'a'), 9), (('q', 'b'), 1))
#end_FrameGO-iter_element_items().map_any_iter_items()

#start_FrameGO-iter_element_items().map_fill()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_element_items().map_fill({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1)
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         200     -1
q         -1      1
<<U1>     <int64> <int64>
#end_FrameGO-iter_element_items().map_fill()

#start_FrameGO-iter_element_items().map_fill_iter()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_fill_iter({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1))
(200, -1, -1, 1)
#end_FrameGO-iter_element_items().map_fill_iter()

#start_FrameGO-iter_element_items().map_fill_iter_items()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_fill_iter_items({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1))
((('p', 'a'), 200), (('p', 'b'), -1), (('q', 'a'), -1), (('q', 'b'), 1))
#end_FrameGO-iter_element_items().map_fill_iter_items()

#start_FrameGO-iter_group()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group('c'))
(<FrameGO>
<IndexGO> a       b       c       <<U1>
<Index>
0         11      0       0
2         10      3       0
<int64>   <int64> <int64> <int64>, <FrameGO>
<IndexGO> a       b       c       <<U1>
<Index>
1         4       8       1
3         2       8       1
<int64>   <int64> <int64> <int64>)
#end_FrameGO-iter_group()

#start_FrameGO-iter_group().apply()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group('c').apply(lambda f: f['b'].sum())
<Series>
<Index: c>
0          3
1          16
<int64>    <int64>
#end_FrameGO-iter_group().apply()

#start_FrameGO-iter_group().apply_iter()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group('c').apply_iter(lambda f: f['b'].sum()))
(3, 16)
#end_FrameGO-iter_group().apply_iter()

#start_FrameGO-iter_group().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group('c').apply_iter_items(lambda f: f['b'].sum()))
((0, 3), (1, 16))
#end_FrameGO-iter_group().apply_iter_items()

#start_FrameGO-iter_group().apply_pool()
>>> def func(f): return f['b'].sum()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group('c').apply_pool(func, use_threads=True)
<Series>
<Index: c>
0          3
1          16
<int64>    <int64>
#end_FrameGO-iter_group().apply_pool()

#start_FrameGO-iter_group_array()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array('c'))
(array([[11,  0,  0],
       [10,  3,  0]]), array([[4, 8, 1],
       [2, 8, 1]]))
#end_FrameGO-iter_group_array()

#start_FrameGO-iter_group_array().apply()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_array('c').apply(lambda a: np.sum(a))
<Series>
<Index: c>
0          24
1          24
<int64>    <int64>
#end_FrameGO-iter_group_array().apply()

#start_FrameGO-iter_group_array().apply_iter()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array('c').apply_iter(lambda a: np.sum(a)))
(24, 24)
#end_FrameGO-iter_group_array().apply_iter()

#start_FrameGO-iter_group_array().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array('c').apply_iter_items(lambda a: np.sum(a)))
((0, 24), (1, 24))
#end_FrameGO-iter_group_array().apply_iter_items()

#start_FrameGO-iter_group_array().apply_pool()
>>> def func(a): return np.sum(a)
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_array('c').apply_pool(func, use_threads=True)
<Series>
<Index: c>
0          24
1          24
<int64>    <int64>
#end_FrameGO-iter_group_array().apply_pool()

#start_FrameGO-iter_group_array_items()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array_items('c'))
((0, array([[11,  0,  0],
       [10,  3,  0]])), (1, array([[4, 8, 1],
       [2, 8, 1]])))
#end_FrameGO-iter_group_array_items()

#start_FrameGO-iter_group_array_items().apply()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_array_items('c').apply(lambda k, v: np.sum(v) if k == 0 else v.shape)
<Series>
<Index: c>
0          24
1          (2, 3)
<int64>    <object>
#end_FrameGO-iter_group_array_items().apply()

#start_FrameGO-iter_group_array_items().apply_iter()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array_items('c').apply_iter(lambda k, v: np.sum(v) if k == 0 else v.shape))
(24, (2, 3))
#end_FrameGO-iter_group_array_items().apply_iter()

#start_FrameGO-iter_group_array_items().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array_items('c').apply_iter_items(lambda k, v: np.sum(v) if k == 0 else v.shape))
((0, 24), (1, (2, 3)))
#end_FrameGO-iter_group_array_items().apply_iter_items()

#start_FrameGO-iter_group_items()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_items('c'))
((0, <FrameGO>
<IndexGO> a       b       c       <<U1>
<Index>
0         11      0       0
2         10      3       0
<int64>   <int64> <int64> <int64>), (1, <FrameGO>
<IndexGO> a       b       c       <<U1>
<Index>
1         4       8       1
3         2       8       1
<int64>   <int64> <int64> <int64>))
#end_FrameGO-iter_group_items()

#start_FrameGO-iter_group_items().apply()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_items('c').apply(lambda k, v: v['b'].sum() if k == 0 else v.shape)
<Series>
<Index: c>
0          3
1          (2, 3)
<int64>    <object>
#end_FrameGO-iter_group_items().apply()

#start_FrameGO-iter_group_items().apply_iter()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_items('c').apply_iter(lambda k, v: v['b'].sum() if k == 0 else v.shape))
(3, (2, 3))
#end_FrameGO-iter_group_items().apply_iter()

#start_FrameGO-iter_group_items().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_items('c').apply_iter_items(lambda k, v: v['b'].sum() if k == 0 else v.shape))
((0, 3), (1, (2, 3)))
#end_FrameGO-iter_group_items().apply_iter_items()

#start_FrameGO-iter_group_labels()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels(1))
(<FrameGO>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
1                p     8       True   1517-12-31
<int64>          <<U1> <int64> <bool> <datetime64[D]>, <FrameGO>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
0                q     2       True   1517-04-01
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>)
#end_FrameGO-iter_group_labels()

#start_FrameGO-iter_group_labels().apply()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels(1).apply(lambda f: f['b'].sum())
<Series>
<Index>
p        1
q        1
<<U1>    <int64>
#end_FrameGO-iter_group_labels().apply()

#start_FrameGO-iter_group_labels().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels(1).apply_iter(lambda f: f['b'].sum()))
(1, 1)
#end_FrameGO-iter_group_labels().apply_iter()

#start_FrameGO-iter_group_labels().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels(1).apply_iter_items(lambda f: f['b'].sum()))
(('p', 1), ('q', 1))
#end_FrameGO-iter_group_labels().apply_iter_items()

#start_FrameGO-iter_group_labels_array()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array(1))
(array([[10, False, datetime.date(1517, 1, 1)],
       [8, True, datetime.date(1517, 12, 31)]], dtype=object), array([[2, True, datetime.date(1517, 4, 1)],
       [3, False, datetime.date(1517, 6, 30)]], dtype=object))
#end_FrameGO-iter_group_labels_array()

#start_FrameGO-iter_group_labels_array().apply()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels_array(1).apply(lambda a: np.sum(a[:, 0]))
<Series>
<Index>
p        18
q        5
<<U1>    <int64>
#end_FrameGO-iter_group_labels_array().apply()

#start_FrameGO-iter_group_labels_array().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array(1).apply_iter(lambda a: np.sum(a[:, 0])))
(18, 5)
#end_FrameGO-iter_group_labels_array().apply_iter()

#start_FrameGO-iter_group_labels_array().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array(1).apply_iter_items(lambda a: np.sum(a[:, 0])))
(('p', 18), ('q', 5))
#end_FrameGO-iter_group_labels_array().apply_iter_items()

#start_FrameGO-iter_group_labels_array_items()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array_items(1))
(('p', array([[10, False, datetime.date(1517, 1, 1)],
       [8, True, datetime.date(1517, 12, 31)]], dtype=object)), ('q', array([[2, True, datetime.date(1517, 4, 1)],
       [3, False, datetime.date(1517, 6, 30)]], dtype=object)))
#end_FrameGO-iter_group_labels_array_items()

#start_FrameGO-iter_group_labels_array_items().apply()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels_array_items(1).apply(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1)
<Series>
<Index>
p        -1
q        5
<<U1>    <int64>
#end_FrameGO-iter_group_labels_array_items().apply()

#start_FrameGO-iter_group_labels_array_items().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array_items(1).apply_iter(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1))
(-1, 5)
#end_FrameGO-iter_group_labels_array_items().apply_iter()

#start_FrameGO-iter_group_labels_array_items().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array_items(1).apply_iter_items(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1))
(('p', -1), ('q', 5))
#end_FrameGO-iter_group_labels_array_items().apply_iter_items()

#start_FrameGO-iter_group_labels_items()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_items(1))
(('p', <FrameGO>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
1                p     8       True   1517-12-31
<int64>          <<U1> <int64> <bool> <datetime64[D]>), ('q', <FrameGO>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
0                q     2       True   1517-04-01
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>))
#end_FrameGO-iter_group_labels_items()

#start_FrameGO-iter_group_labels_items().apply()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels_items(1).apply(lambda k, v: v['b'].sum() if k == 'p' else -1)
<Series>
<Index>
p        1
q        -1
<<U1>    <int64>
#end_FrameGO-iter_group_labels_items().apply()

#start_FrameGO-iter_group_labels_items().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_items(1).apply_iter(lambda k, v: v['b'].sum() if k == 'p' else -1))
(1, -1)
#end_FrameGO-iter_group_labels_items().apply_iter()

#start_FrameGO-iter_group_labels_items().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_items(1).apply_iter_items(lambda k, v: v['b'].sum() if k == 'p' else -1))
(('p', 1), ('q', -1))
#end_FrameGO-iter_group_labels_items().apply_iter_items()

#start_FrameGO-iter_series()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series())
(<Series: a>
<Index>
p           10
q           -2
r           0
s           0
<<U1>       <int64>, <Series: b>
<Index>
p           8
q           -3
r           8
s           0
<<U1>       <int64>, <Series: c>
<Index>
p           1
q           0
r           9
s           12
<<U1>       <int64>)
#end_FrameGO-iter_series()

#start_FrameGO-iter_series().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series().apply(lambda v: v.sum())
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_FrameGO-iter_series().apply()

#start_FrameGO-iter_series().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series().apply_iter(lambda v: v.sum()))
(8, 13, 22)
#end_FrameGO-iter_series().apply_iter()

#start_FrameGO-iter_series().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series().apply_iter_items(lambda v: v.sum()))
(('a', 8), ('b', 13), ('c', 22))
#end_FrameGO-iter_series().apply_iter_items()

#start_FrameGO-iter_series().apply_pool()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series().apply_pool(lambda v: v.sum(), use_threads=True)
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_FrameGO-iter_series().apply_pool()

#start_FrameGO-iter_series_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series_items())
(('a', <Series: a>
<Index>
p           10
q           -2
r           0
s           0
<<U1>       <int64>), ('b', <Series: b>
<Index>
p           8
q           -3
r           8
s           0
<<U1>       <int64>), ('c', <Series: c>
<Index>
p           1
q           0
r           9
s           12
<<U1>       <int64>))
#end_FrameGO-iter_series_items()

#start_FrameGO-iter_series_items().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series_items().apply(lambda k, v: v.sum() if k != 'b' else -1)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_FrameGO-iter_series_items().apply()

#start_FrameGO-iter_series_items().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series_items().apply_iter(lambda k, v: v.sum() if k != 'b' else -1))
(8, -1, 22)
#end_FrameGO-iter_series_items().apply_iter()

#start_FrameGO-iter_series_items().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series_items().apply_iter_items(lambda k, v: v.sum() if k != 'b' else -1))
(('a', 8), ('b', -1), ('c', 22))
#end_FrameGO-iter_series_items().apply_iter_items()

#start_FrameGO-iter_series_items().apply_pool()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series_items().apply_pool(lambda pair: pair[1].sum() if pair[0] != 'b' else -1, use_threads=True)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_FrameGO-iter_series_items().apply_pool()

#start_FrameGO-iter_tuple()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple())
(Axis(p=10, q=-2, r=0, s=0), Axis(p=8, q=-3, r=8, s=0), Axis(p=1, q=0, r=9, s=12))
#end_FrameGO-iter_tuple()

#start_FrameGO-iter_tuple().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_tuple().apply(lambda v: v.p + v.q)
<Series>
<Index>
a        8
b        5
c        1
<<U1>    <int64>
#end_FrameGO-iter_tuple().apply()

#start_FrameGO-iter_tuple().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple().apply_iter(lambda v: v.p + v.q))
(8, 5, 1)
#end_FrameGO-iter_tuple().apply_iter()

#start_FrameGO-iter_tuple().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple().apply_iter_items(lambda v: v.p + v.q))
(('a', 8), ('b', 5), ('c', 1))
#end_FrameGO-iter_tuple().apply_iter_items()

#start_FrameGO-iter_tuple().map_all()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_tuple().map_all({(2, 9): -1, (3, 8): -2})
<Series>
<Index>
a        -1
b        -2
<<U1>    <int64>
#end_FrameGO-iter_tuple().map_all()

#start_FrameGO-iter_tuple().map_all_iter()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_all_iter({(2, 9): -1, (3, 8): -2}))
(-1, -2)
#end_FrameGO-iter_tuple().map_all_iter()

#start_FrameGO-iter_tuple().map_all_iter_items()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_all_iter_items({(2, 9): -1, (3, 8): -2}))
(('a', -1), ('b', -2))
#end_FrameGO-iter_tuple().map_all_iter_items()

#start_FrameGO-iter_tuple().map_any()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_any({(2, 9): -1}))
('a', 'b')
#end_FrameGO-iter_tuple().map_any()

#start_FrameGO-iter_tuple().map_any_iter()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_any_iter({(2, 9): -1}))
(-1, Axis(p=3, q=8))
#end_FrameGO-iter_tuple().map_any_iter()

#start_FrameGO-iter_tuple().map_any_iter_items()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_any_iter_items({(2, 9): -1}))
(('a', -1), ('b', Axis(p=3, q=8)))
#end_FrameGO-iter_tuple().map_any_iter_items()

#start_FrameGO-iter_tuple().map_fill()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_tuple().map_fill({(2, 9): -1}, fill_value=np.nan)
<Series>
<Index>
a        -1.0
b        nan
<<U1>    <float64>
#end_FrameGO-iter_tuple().map_fill()

#start_FrameGO-iter_tuple().map_fill_iter()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_fill_iter({(2, 9): -1}, fill_value=np.nan))
(-1, nan)
#end_FrameGO-iter_tuple().map_fill_iter()

#start_FrameGO-iter_tuple().map_fill_iter_items()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_fill_iter_items({(2, 9): -1}, fill_value=np.nan))
(('a', -1), ('b', nan))
#end_FrameGO-iter_tuple().map_fill_iter_items()

#start_FrameGO-iter_tuple_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple_items())
(('a', Axis(p=10, q=-2, r=0, s=0)), ('b', Axis(p=8, q=-3, r=8, s=0)), ('c', Axis(p=1, q=0, r=9, s=12)))
#end_FrameGO-iter_tuple_items()

#start_FrameGO-iter_tuple_items().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_tuple_items().apply(lambda k, v: v.p + v.q if k == 'b' else -1)
<Series>
<Index>
a        -1
b        5
c        -1
<<U1>    <int64>
#end_FrameGO-iter_tuple_items().apply()

#start_FrameGO-iter_tuple_items().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple_items().apply_iter(lambda k, v: v.p + v.q if k == 'b' else -1))
(-1, 5, -1)
#end_FrameGO-iter_tuple_items().apply_iter()

#start_FrameGO-iter_tuple_items().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple_items().apply_iter_items(lambda k, v: v.p + v.q if k == 'b' else -1))
(('a', -1), ('b', 5), ('c', -1))
#end_FrameGO-iter_tuple_items().apply_iter_items()

#start_FrameGO-iter_tuple_items().map_all()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_tuple_items().map_all({('a', (2, 9)): -1, ('b', (3, 8)): -2})
<Series>
<Index>
a        -1
b        -2
<<U1>    <int64>
#end_FrameGO-iter_tuple_items().map_all()

#start_FrameGO-iter_tuple_items().map_all_iter()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_all_iter({('a', (2, 9)): -1, ('b', (3, 8)): -2}))
(-1, -2)
#end_FrameGO-iter_tuple_items().map_all_iter()

#start_FrameGO-iter_tuple_items().map_all_iter_items()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_all_iter_items({('a', (2, 9)): -1, ('b', (3, 8)): -2}))
(('a', -1), ('b', -2))
#end_FrameGO-iter_tuple_items().map_all_iter_items()

#start_FrameGO-iter_tuple_items().map_any()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_tuple_items().map_any({('a', (2, 9)): -1})
<Series>
<Index>
a        -1
b        Axis(p=3, q=8)
<<U1>    <object>
#end_FrameGO-iter_tuple_items().map_any()

#start_FrameGO-iter_tuple_items().map_any_iter()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_any_iter({('a', (2, 9)): -1}))
(-1, Axis(p=3, q=8))
#end_FrameGO-iter_tuple_items().map_any_iter()

#start_FrameGO-iter_tuple_items().map_any_iter_items()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_any_iter_items({('a', (2, 9)): -1}))
(('a', -1), ('b', Axis(p=3, q=8)))
#end_FrameGO-iter_tuple_items().map_any_iter_items()

#start_FrameGO-iter_tuple_items().map_fill()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_tuple_items().map_fill({('a', (2, 9)): -1}, fill_value=np.nan)
<Series>
<Index>
a        -1.0
b        nan
<<U1>    <float64>
#end_FrameGO-iter_tuple_items().map_fill()

#start_FrameGO-iter_tuple_items().map_fill_iter()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_fill_iter({('a', (2, 9)): -1}, fill_value=np.nan))
(-1, nan)
#end_FrameGO-iter_tuple_items().map_fill_iter()

#start_FrameGO-iter_tuple_items().map_fill_iter_items()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_fill_iter_items({('a', (2, 9)): -1}, fill_value=np.nan))
(('a', -1), ('b', nan))
#end_FrameGO-iter_tuple_items().map_fill_iter_items()

#start_FrameGO-iter_window()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window(size=2, step=1))
(<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
<<U1>        <int64> <int64> <int64>, <FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
q            -2      -3      0
r            0       8       9
<<U1>        <int64> <int64> <int64>, <FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>)
#end_FrameGO-iter_window()

#start_FrameGO-iter_window().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.iter_window(size=2, step=1).apply(lambda f: f.max().max())
<Series>
<Index>
q        10
r        9
s        12
<<U1>    <int64>
#end_FrameGO-iter_window().apply()

#start_FrameGO-iter_window().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window(size=2, step=1).apply_iter(lambda f: f.max().max()))
(10, 9, 12)
#end_FrameGO-iter_window().apply_iter()

#start_FrameGO-iter_window().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window(size=2, step=1).apply_iter_items(lambda f: f.max().max()))
(('q', 10), ('r', 9), ('s', 12))
#end_FrameGO-iter_window().apply_iter_items()

#start_FrameGO-iter_window_array()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array(size=2, step=1))
(array([[10,  8,  1],
       [-2, -3,  0]]), array([[-2, -3,  0],
       [ 0,  8,  9]]), array([[ 0,  8,  9],
       [ 0,  0, 12]]))
#end_FrameGO-iter_window_array()

#start_FrameGO-iter_window_array().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.iter_window_array(size=2, step=1).apply(lambda a: np.max(a))
<Series>
<Index>
q        10
r        9
s        12
<<U1>    <int64>
#end_FrameGO-iter_window_array().apply()

#start_FrameGO-iter_window_array().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array(size=2, step=1).apply_iter(lambda a: np.max(a)))
(10, 9, 12)
#end_FrameGO-iter_window_array().apply_iter()

#start_FrameGO-iter_window_array().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array(size=2, step=1).apply_iter_items(lambda a: np.max(a)))
(('q', 10), ('r', 9), ('s', 12))
#end_FrameGO-iter_window_array().apply_iter_items()

#start_FrameGO-iter_window_array_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array_items(size=2, step=1))
(('q', array([[10,  8,  1],
       [-2, -3,  0]])), ('r', array([[-2, -3,  0],
       [ 0,  8,  9]])), ('s', array([[ 0,  8,  9],
       [ 0,  0, 12]])))
#end_FrameGO-iter_window_array_items()

#start_FrameGO-iter_window_array_items().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.iter_window_array_items(size=2, step=1).apply(lambda k, v: np.max(v) if k == 'r' else np.min(v))
<Series>
<Index>
q        -3
r        9
s        0
<<U1>    <int64>
#end_FrameGO-iter_window_array_items().apply()

#start_FrameGO-iter_window_array_items().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array_items(size=2, step=1).apply_iter(lambda k, v: np.max(v) if k == 'r' else np.min(v)))
(-3, 9, 0)
#end_FrameGO-iter_window_array_items().apply_iter()

#start_FrameGO-iter_window_array_items().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array_items(size=2, step=1).apply_iter_items(lambda k, v: np.max(v) if k == 'r' else np.min(v)))
(('q', -3), ('r', 9), ('s', 0))
#end_FrameGO-iter_window_array_items().apply_iter_items()

#start_FrameGO-iter_window_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_items(size=2, step=1))
(('q', <FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
<<U1>        <int64> <int64> <int64>), ('r', <FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
q            -2      -3      0
r            0       8       9
<<U1>        <int64> <int64> <int64>), ('s', <FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>))
#end_FrameGO-iter_window_items()

#start_FrameGO-iter_window_items().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.iter_window_items(size=2, step=1).apply(lambda k, v: v.max().max() if k == 'r' else v.min().min())
<Series>
<Index>
q        -3
r        9
s        0
<<U1>    <int64>
#end_FrameGO-iter_window_items().apply()

#start_FrameGO-iter_window_items().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_items(size=2, step=1).apply_iter(lambda k, v: v.max().max() if k == 'r' else v.min().min()))
(-3, 9, 0)
#end_FrameGO-iter_window_items().apply_iter()

#start_FrameGO-iter_window_items().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_items(size=2, step=1).apply_iter_items(lambda k, v: v.max().max() if k == 'r' else v.min().min()))
(('q', -3), ('r', 9), ('s', 0))
#end_FrameGO-iter_window_items().apply_iter_items()

#start_FrameGO-__add__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 + 8
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            18      16      9
q            6       5       8
r            8       16      17
s            8       8       20
<<U1>        <int64> <int64> <int64>
>>> f1 + f2
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         12.0      11.0      nan
q         7.0       5.0       nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameGO-__add__()

#start_FrameGO-__and__()
>>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> f & True
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            False  True
q            True   True
r            True   False
<<U1>        <bool> <bool>
>>> f & (True, False)
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         False  False
q         True   False
r         True   False
<<U1>     <bool> <bool>
#end_FrameGO-__and__()

#start_FrameGO-__eq__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 == 8
<FrameGO: x>
<IndexGO>    a      b      c      <<U1>
<Index>
p            False  True   False
q            False  False  False
r            False  True   False
s            False  False  False
<<U1>        <bool> <bool> <bool>
>>> f1 == f2
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         False  False  False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameGO-__eq__()

#start_FrameGO-__floordiv__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 // 8
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            1       1       0
q            -1      -1      0
r            0       1       1
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> f1 // f2
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         5.0       2.0       nan
q         -1.0      -1.0      nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameGO-__floordiv__()

#start_FrameGO-__ge__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 >= 8
<FrameGO: x>
<IndexGO>    a      b      c      <<U1>
<Index>
p            True   True   False
q            False  False  False
r            False  True   True
s            False  False  True
<<U1>        <bool> <bool> <bool>
>>> f1 >= f2
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   True   False
q         False  False  False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameGO-__ge__()

#start_FrameGO-__gt__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 > 8
<FrameGO: x>
<IndexGO>    a      b      c      <<U1>
<Index>
p            True   False  False
q            False  False  False
r            False  False  True
s            False  False  True
<<U1>        <bool> <bool> <bool>
>>> f1 > f2
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   True   False
q         False  False  False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameGO-__gt__()

#start_FrameGO-__le__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 <= 8
<FrameGO: x>
<IndexGO>    a      b      c      <<U1>
<Index>
p            False  True   True
q            True   True   True
r            True   True   False
s            True   True   False
<<U1>        <bool> <bool> <bool>
>>> f1 <= f2
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         True   True   False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameGO-__le__()

#start_FrameGO-__lt__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 < 8
<FrameGO: x>
<IndexGO>    a      b      c      <<U1>
<Index>
p            False  False  True
q            True   True   True
r            True   False  False
s            True   True   False
<<U1>        <bool> <bool> <bool>
>>> f1 < f2
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         True   True   False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameGO-__lt__()

#start_FrameGO-__matmul__()
>>> f1 = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f1 @ f2
<FrameGO>
<IndexGO> x       y       <<U1>
<Index>
p         23      14
q         6       4
r         40      24
s         20      12
<<U1>     <int64> <int64>
#end_FrameGO-__matmul__()

#start_FrameGO-__mod__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 % 8
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            2       0       1
q            6       5       0
r            0       0       1
s            0       0       4
<<U1>        <int64> <int64> <int64>
>>> f1 % f2
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         0.0       2.0       nan
q         7.0       5.0       nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameGO-__mod__()

#start_FrameGO-__mul__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 * 8
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            80      64      8
q            -16     -24     0
r            0       64      72
s            0       0       96
<<U1>        <int64> <int64> <int64>
>>> f1 * f2
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         20.0      24.0      nan
q         -18.0     -24.0     nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameGO-__mul__()

#start_FrameGO-__ne__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 != 8
<FrameGO: x>
<IndexGO>    a      b      c      <<U1>
<Index>
p            True   False  True
q            True   True   True
r            True   False  True
s            True   True   True
<<U1>        <bool> <bool> <bool>
>>> f1 != f2
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   True   True
q         True   True   True
r         True   True   True
s         True   True   True
<<U1>     <bool> <bool> <bool>
#end_FrameGO-__ne__()

#start_FrameGO-__or__()
>>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> f | True
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            True   True
q            True   True
r            True   True
<<U1>        <bool> <bool>
>>> f | (True, False)
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         True   True
q         True   True
r         True   False
<<U1>     <bool> <bool>
#end_FrameGO-__or__()

#start_FrameGO-__pow__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 ** 8
<FrameGO: x>
<IndexGO>    a         b        c         <<U1>
<Index>
p            100000000 16777216 1
q            256       6561     0
r            0         16777216 43046721
s            0         0        429981696
<<U1>        <int64>   <int64>  <int64>
>>> f1 ** f2
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         100.0     512.0     1.0
q         -512.0    6561.0    nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameGO-__pow__()

#start_FrameGO-__radd__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 + f1
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            18      16      9
q            6       5       8
r            8       16      17
s            8       8       20
<<U1>        <int64> <int64> <int64>
#end_FrameGO-__radd__()

#start_FrameGO-__rfloordiv__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 // f1
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            0       1       8
q            -4      -3      0
r            0       1       0
s            0       0       0
<<U1>        <int64> <int64> <int64>
#end_FrameGO-__rfloordiv__()

#start_FrameGO-__rmatmul__()
>>> f1 = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f1 @ f2
<FrameGO>
<IndexGO> x       y       <<U1>
<Index>
p         23      14
q         6       4
r         40      24
s         20      12
<<U1>     <int64> <int64>
#end_FrameGO-__rmatmul__()

#start_FrameGO-__rmul__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 * f1
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            80      64      8
q            -16     -24     0
r            0       64      72
s            0       0       96
<<U1>        <int64> <int64> <int64>
#end_FrameGO-__rmul__()

#start_FrameGO-__rshift__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f1 >> 1
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            5       4       0
q            -1      -2      0
r            0       4       4
s            0       0       6
<<U1>        <int64> <int64> <int64>
#end_FrameGO-__rshift__()

#start_FrameGO-__rsub__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 - f1
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            -2      0       7
q            10      11      8
r            8       0       -1
s            8       8       -4
<<U1>        <int64> <int64> <int64>
#end_FrameGO-__rsub__()

#start_FrameGO-__rtruediv__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 / f1
<FrameGO: x>
<IndexGO>    a         b                   c                  <<U1>
<Index>
p            0.8       1.0                 8.0
q            -4.0      -2.6666666666666665 inf
r            inf       1.0                 0.8888888888888888
s            inf       inf                 0.6666666666666666
<<U1>        <float64> <float64>           <float64>
#end_FrameGO-__rtruediv__()

#start_FrameGO-__sub__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 - 8
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            2       0       -7
q            -10     -11     -8
r            -8      0       1
s            -8      -8      4
<<U1>        <int64> <int64> <int64>
>>> f1 - f2
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         8.0       5.0       nan
q         -11.0     -11.0     nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameGO-__sub__()

#start_FrameGO-__truediv__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 / 8
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
p            1.25      1.0       0.125
q            -0.25     -0.375    0.0
r            0.0       1.0       1.125
s            0.0       0.0       1.5
<<U1>        <float64> <float64> <float64>
>>> f1 / f2
<FrameGO>
<IndexGO> a                   b                  c         <<U1>
<Index>
p         5.0                 2.6666666666666665 nan
q         -0.2222222222222222 -0.375             nan
r         nan                 nan                nan
s         nan                 nan                nan
<<U1>     <float64>           <float64>          <float64>
#end_FrameGO-__truediv__()

#start_FrameGO-__xor__()
>>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> f ^ True
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            True   False
q            False  False
r            False  True
<<U1>        <bool> <bool>
>>> f ^ (True, False)
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         True   True
q         False  True
r         False  False
<<U1>     <bool> <bool>
#end_FrameGO-__xor__()

#start_FrameGO-__abs__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> abs(f)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            2       3       0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameGO-__abs__()

#start_FrameGO-__invert__()
>>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> ~f
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            True   False
q            False  False
r            False  True
<<U1>        <bool> <bool>
#end_FrameGO-__invert__()

#start_FrameGO-__neg__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> -f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            -10     -8      -1
q            2       3       0
r            0       -8      -9
s            0       0       -12
<<U1>        <int64> <int64> <int64>
#end_FrameGO-__neg__()

#start_FrameGO-__pos__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> +f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameGO-__pos__()

#start_FrameGO-via_dt.year
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.year
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         1517    2022
q         1517    2021
r         1517    2022
<<U1>     <int64> <int64>
#end_FrameGO-via_dt.year

#start_FrameGO-via_dt.month
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.month
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         4       4
q         12      12
r         6       6
<<U1>     <int64> <int64>
#end_FrameGO-via_dt.month

#start_FrameGO-via_dt.day
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.day
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         1       1
q         31      31
r         30      30
<<U1>     <int64> <int64>
#end_FrameGO-via_dt.day

#start_FrameGO-via_dt.hour
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.hour
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       0
q         0       0
r         0       0
<<U1>     <int64> <int64>
#end_FrameGO-via_dt.hour

#start_FrameGO-via_dt.minute
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.minute
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       0
q         0       0
r         0       0
<<U1>     <int64> <int64>
#end_FrameGO-via_dt.minute

#start_FrameGO-via_dt.second
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.second
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       0
q         0       0
r         0       0
<<U1>     <int64> <int64>
#end_FrameGO-via_dt.second

#start_FrameGO-via_dt.weekday()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.weekday()
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         6       4
q         0       4
r         5       3
<<U1>     <int64> <int64>
#end_FrameGO-via_dt.weekday()

#start_FrameGO-via_dt.quarter()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.quarter()
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         2       2
q         4       4
r         2       2
<<U1>     <int64> <int64>
#end_FrameGO-via_dt.quarter()

#start_FrameGO-via_dt.is_month_end()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_month_end()
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         False  False
q         True   True
r         True   True
<<U1>     <bool> <bool>
#end_FrameGO-via_dt.is_month_end()

#start_FrameGO-via_dt.is_month_start()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_month_start()
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         True   True
q         False  False
r         False  False
<<U1>     <bool> <bool>
#end_FrameGO-via_dt.is_month_start()

#start_FrameGO-via_dt.is_year_end()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_year_end()
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         False  False
q         True   True
r         False  False
<<U1>     <bool> <bool>
#end_FrameGO-via_dt.is_year_end()

#start_FrameGO-via_dt.is_year_start()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_year_start()
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         False  False
q         False  False
r         False  False
<<U1>     <bool> <bool>
#end_FrameGO-via_dt.is_year_start()

#start_FrameGO-via_dt.is_quarter_end()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_quarter_end()
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         False  False
q         True   True
r         True   True
<<U1>     <bool> <bool>
#end_FrameGO-via_dt.is_quarter_end()

#start_FrameGO-via_dt.is_quarter_start()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_quarter_start()
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         True   True
q         False  False
r         False  False
<<U1>     <bool> <bool>
#end_FrameGO-via_dt.is_quarter_start()

#start_FrameGO-via_dt.timetuple()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.timetuple()
<FrameGO>
<IndexGO> a                    b                    <<U1>
<Index>
p         time.struct_time(... time.struct_time(...
q         time.struct_time(... time.struct_time(...
r         time.struct_time(... time.struct_time(...
<<U1>     <object>             <object>
#end_FrameGO-via_dt.timetuple()

#start_FrameGO-via_dt.isoformat()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.isoformat()
<FrameGO>
<IndexGO> a          b          <<U1>
<Index>
p         1517-04-01 2022-04-01
q         1517-12-31 2021-12-31
r         1517-06-30 2022-06-30
<<U1>     <<U10>     <<U10>
#end_FrameGO-via_dt.isoformat()

#start_FrameGO-via_dt.fromisoformat()
>>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'))
>>> f.via_dt.fromisoformat()
<FrameGO>
<IndexGO> a          b          <<U1>
<Index>
p         1517-04-01 2022-04-01
q         1517-12-31 2021-12-31
r         1517-06-30 2022-06-30
<<U1>     <object>   <object>
#end_FrameGO-via_dt.fromisoformat()

#start_FrameGO-via_dt.strftime()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.strftime("%A | %B")
<FrameGO>
<IndexGO> a                 b                 <<U1>
<Index>
p         Sunday | April    Friday | April
q         Monday | December Friday | December
r         Saturday | June   Thursday | June
<<U1>     <<U17>            <<U17>
#end_FrameGO-via_dt.strftime()

#start_FrameGO-via_dt.strptime()
>>> f = sf.FrameGO.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))
>>> f.via_dt.strptime("%m/%d/%Y")
<FrameGO>
<IndexGO> a                   b                   <<U1>
<Index>
p         1517-04-01 00:00:00 2022-04-01 00:00:00
q         1517-12-31 00:00:00 2021-12-31 00:00:00
r         1517-06-30 00:00:00 2022-06-30 00:00:00
<<U1>     <object>            <object>
#end_FrameGO-via_dt.strptime()

#start_FrameGO-via_dt.strpdate()
>>> f = sf.FrameGO.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))
>>> f.via_dt.strpdate("%m/%d/%Y")
<FrameGO>
<IndexGO> a          b          <<U1>
<Index>
p         1517-04-01 2022-04-01
q         1517-12-31 2021-12-31
r         1517-06-30 2022-06-30
<<U1>     <object>   <object>
#end_FrameGO-via_dt.strpdate()

#start_FrameGO-via_str.__getitem__()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str[-1]
<FrameGO: x>
<IndexGO>    a     b     <<U1>
<Index>
p            0
q            2     Z
r            8     3
s            3
<<U1>        <<U1> <<U1>
#end_FrameGO-via_str.__getitem__()

#start_FrameGO-via_str.capitalize()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.capitalize()
<FrameGO: x>
<IndexGO>    a      b     <<U1>
<Index>
p            10     Qrs
q            2      Xyz
r            8      123
s            3       wx
<<U1>        <<U21> <<U4>
#end_FrameGO-via_str.capitalize()

#start_FrameGO-via_str.center()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.center(8)
<FrameGO: x>
<IndexGO>    a        b        <<U1>
<Index>
p               10      qrs
q               2       XYZ
r               8       123
s               3        wX
<<U1>        <<U8>    <<U8>
#end_FrameGO-via_str.center()

#start_FrameGO-via_str.contains()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.contains('X')
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            False  False
q            False  True
r            False  False
s            False  True
<<U1>        <bool> <bool>
#end_FrameGO-via_str.contains()

#start_FrameGO-via_str.count()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.count('X')
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            0       0
q            0       1
r            0       0
s            0       1
<<U1>        <int64> <int64>
#end_FrameGO-via_str.count()

#start_FrameGO-via_str.decode()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x').astype(bytes)
>>> f
<FrameGO: x>
<IndexGO>    a      b       <<U1>
<Index>
p            b'10'  b'qrs '
q            b'2'   b'XYZ'
r            b'8'   b'123'
s            b'3'   b' wX '
<<U1>        <|S21> <|S4>
>>> f.via_str.decode()
<FrameGO: x>
<IndexGO>    a     b     <<U1>
<Index>
p            10    qrs
q            2     XYZ
r            8     123
s            3      wX
<<U1>        <<U2> <<U4>
#end_FrameGO-via_str.decode()

#start_FrameGO-via_str.encode()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.encode()
<FrameGO: x>
<IndexGO>    a     b       <<U1>
<Index>
p            b'10' b'qrs '
q            b'2'  b'XYZ'
r            b'8'  b'123'
s            b'3'  b' wX '
<<U1>        <|S2> <|S4>
#end_FrameGO-via_str.encode()

#start_FrameGO-via_str.endswith()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.endswith(' ')
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            False  True
q            False  False
r            False  False
s            False  True
<<U1>        <bool> <bool>
#end_FrameGO-via_str.endswith()

#start_FrameGO-via_str.find()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.find('X')
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            -1      -1
q            -1      0
r            -1      -1
s            -1      2
<<U1>        <int64> <int64>
#end_FrameGO-via_str.find()

#start_FrameGO-via_str.format()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.format('{:-^10}')
<FrameGO: x>
<IndexGO>    a          b          <<U1>
<Index>
p            ----10---- ---qrs ---
q            ----2----- ---XYZ----
r            ----8----- ---123----
s            ----3----- --- wX ---
<<U1>        <<U10>     <<U10>
#end_FrameGO-via_str.format()

#start_FrameGO-via_str.index()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.index('X')
ValueError('substring not found')
#end_FrameGO-via_str.index()

#start_FrameGO-via_str.isalnum()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isalnum()
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            True   False
q            True   True
r            True   True
s            True   False
<<U1>        <bool> <bool>
#end_FrameGO-via_str.isalnum()

#start_FrameGO-via_str.isalpha()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isalpha()
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            False  False
q            False  True
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameGO-via_str.isalpha()

#start_FrameGO-via_str.isdecimal()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isdecimal()
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            True   False
q            True   False
r            True   True
s            True   False
<<U1>        <bool> <bool>
#end_FrameGO-via_str.isdecimal()

#start_FrameGO-via_str.isdigit()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isdigit()
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            True   False
q            True   False
r            True   True
s            True   False
<<U1>        <bool> <bool>
#end_FrameGO-via_str.isdigit()

#start_FrameGO-via_str.islower()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.islower()
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            False  True
q            False  False
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameGO-via_str.islower()

#start_FrameGO-via_str.isnumeric()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isnumeric()
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            True   False
q            True   False
r            True   True
s            True   False
<<U1>        <bool> <bool>
#end_FrameGO-via_str.isnumeric()

#start_FrameGO-via_str.isspace()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isspace()
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            False  False
q            False  False
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameGO-via_str.isspace()

#start_FrameGO-via_str.istitle()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.istitle()
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            False  False
q            False  False
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameGO-via_str.istitle()

#start_FrameGO-via_str.isupper()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isupper()
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            False  False
q            False  True
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameGO-via_str.isupper()

#start_FrameGO-via_str.ljust()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.ljust(8)
<FrameGO: x>
<IndexGO>    a        b        <<U1>
<Index>
p            10       qrs
q            2        XYZ
r            8        123
s            3         wX
<<U1>        <<U8>    <<U8>
#end_FrameGO-via_str.ljust()

#start_FrameGO-via_str.len()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.len()
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       4
q            1       3
r            1       3
s            1       4
<<U1>        <int64> <int64>
#end_FrameGO-via_str.len()

#start_FrameGO-via_str.lower()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.lower()
<FrameGO: x>
<IndexGO>    a      b     <<U1>
<Index>
p            10     qrs
q            2      xyz
r            8      123
s            3       wx
<<U1>        <<U21> <<U4>
#end_FrameGO-via_str.lower()

#start_FrameGO-via_str.lstrip()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.lstrip()
<FrameGO: x>
<IndexGO>    a      b     <<U1>
<Index>
p            10     qrs
q            2      XYZ
r            8      123
s            3      wX
<<U1>        <<U21> <<U4>
#end_FrameGO-via_str.lstrip()

#start_FrameGO-via_str.partition()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.partition('X')
<FrameGO: x>
<IndexGO>    a              b                <<U1>
<Index>
p            ('10', '', '') ('qrs ', '', '')
q            ('2', '', '')  ('', 'X', 'YZ')
r            ('8', '', '')  ('123', '', '')
s            ('3', '', '')  (' w', 'X', ' ')
<<U1>        <object>       <object>
#end_FrameGO-via_str.partition()

#start_FrameGO-via_str.replace()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.replace('X', '*')
<FrameGO: x>
<IndexGO>    a     b     <<U1>
<Index>
p            10    qrs
q            2     *YZ
r            8     123
s            3      w*
<<U1>        <<U2> <<U4>
#end_FrameGO-via_str.replace()

#start_FrameGO-via_str.rfind()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rfind('X')
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            -1      -1
q            -1      0
r            -1      -1
s            -1      2
<<U1>        <int64> <int64>
#end_FrameGO-via_str.rfind()

#start_FrameGO-via_str.rindex()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rindex('X')
ValueError('substring not found')
#end_FrameGO-via_str.rindex()

#start_FrameGO-via_str.rjust()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rjust(8)
<FrameGO: x>
<IndexGO>    a        b        <<U1>
<Index>
p                  10     qrs
q                   2      XYZ
r                   8      123
s                   3      wX
<<U1>        <<U8>    <<U8>
#end_FrameGO-via_str.rjust()

#start_FrameGO-via_str.rpartition()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rpartition('X')
<FrameGO: x>
<IndexGO>    a              b                <<U1>
<Index>
p            ('', '', '10') ('', '', 'qrs ')
q            ('', '', '2')  ('', 'X', 'YZ')
r            ('', '', '8')  ('', '', '123')
s            ('', '', '3')  (' w', 'X', ' ')
<<U1>        <object>       <object>
#end_FrameGO-via_str.rpartition()

#start_FrameGO-via_str.rsplit()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rsplit('X')
<FrameGO: x>
<IndexGO>    a        b           <<U1>
<Index>
p            ('10',)  ('qrs ',)
q            ('2',)   ('', 'YZ')
r            ('8',)   ('123',)
s            ('3',)   (' w', ' ')
<<U1>        <object> <object>
#end_FrameGO-via_str.rsplit()

#start_FrameGO-via_str.rstrip()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rstrip()
<FrameGO: x>
<IndexGO>    a      b     <<U1>
<Index>
p            10     qrs
q            2      XYZ
r            8      123
s            3       wX
<<U1>        <<U21> <<U4>
#end_FrameGO-via_str.rstrip()

#start_FrameGO-via_str.split()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.split('X')
<FrameGO: x>
<IndexGO>    a        b           <<U1>
<Index>
p            ('10',)  ('qrs ',)
q            ('2',)   ('', 'YZ')
r            ('8',)   ('123',)
s            ('3',)   (' w', ' ')
<<U1>        <object> <object>
#end_FrameGO-via_str.split()

#start_FrameGO-via_str.startswith()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.startswith('X')
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            False  False
q            False  True
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameGO-via_str.startswith()

#start_FrameGO-via_str.strip()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.strip()
<FrameGO: x>
<IndexGO>    a      b     <<U1>
<Index>
p            10     qrs
q            2      XYZ
r            8      123
s            3      wX
<<U1>        <<U21> <<U4>
#end_FrameGO-via_str.strip()

#start_FrameGO-via_str.swapcase()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.swapcase()
<FrameGO: x>
<IndexGO>    a      b     <<U1>
<Index>
p            10     QRS
q            2      xyz
r            8      123
s            3       Wx
<<U1>        <<U21> <<U4>
#end_FrameGO-via_str.swapcase()

#start_FrameGO-via_str.title()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.title()
<FrameGO: x>
<IndexGO>    a      b     <<U1>
<Index>
p            10     Qrs
q            2      Xyz
r            8      123
s            3       Wx
<<U1>        <<U21> <<U4>
#end_FrameGO-via_str.title()

#start_FrameGO-via_str.upper()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.upper()
<FrameGO: x>
<IndexGO>    a      b     <<U1>
<Index>
p            10     QRS
q            2      XYZ
r            8      123
s            3       WX
<<U1>        <<U21> <<U4>
#end_FrameGO-via_str.upper()

#start_FrameGO-via_str.zfill()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.zfill(8)
<FrameGO: x>
<IndexGO>    a        b        <<U1>
<Index>
p            00000010 0000qrs
q            00000002 00000XYZ
r            00000008 00000123
s            00000003 0000 wX
<<U1>        <<U8>    <<U8>
#end_FrameGO-via_str.zfill()

#start_FrameGO-via_T.via_fill_value()
>>> 
#end_FrameGO-via_T.via_fill_value()

#start_FrameGO-via_T.__add__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T + s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         10.0      8.0       1.0
q         -4.0      -5.0      -2.0
r         0.5       8.5       9.5
s         1.0       1.0       13.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__add__()

#start_FrameGO-via_T.__sub__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T - s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         10.0      8.0       1.0
q         0.0       -1.0      2.0
r         -0.5      7.5       8.5
s         -1.0      -1.0      11.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__sub__()

#start_FrameGO-via_T.__mul__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T * s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         0.0       0.0       0.0
q         4.0       6.0       -0.0
r         0.0       4.0       4.5
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__mul__()

#start_FrameGO-via_T.__truediv__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T / s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         inf       inf       inf
q         1.0       1.5       -0.0
r         0.0       16.0      18.0
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__truediv__()

#start_FrameGO-via_T.__floordiv__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T // s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         nan       nan       nan
q         1.0       1.0       -0.0
r         0.0       16.0      18.0
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__floordiv__()

#start_FrameGO-via_T.__mod__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T % s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         nan       nan       nan
q         -0.0      -1.0      -0.0
r         0.0       0.0       0.0
s         0.0       0.0       0.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__mod__()

#start_FrameGO-via_T.__pow__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T ** s
<FrameGO>
<IndexGO> a         b                  c         <<U1>
<Index>
p         1.0       1.0                1.0
q         0.25      0.1111111111111111 inf
r         0.0       2.8284271247461903 3.0
s         0.0       0.0                12.0
<<U1>     <float64> <float64>          <float64>
#end_FrameGO-via_T.__pow__()

#start_FrameGO-via_T.__lshift__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T << s
<FrameGO>
<IndexGO> a       b       c       <<U1>
<Index>
p         10      8       1
q         0       0       0
r         0       64      72
s         0       0       24
<<U1>     <int64> <int64> <int64>
#end_FrameGO-via_T.__lshift__()

#start_FrameGO-via_T.__rshift__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T >> s
<FrameGO>
<IndexGO> a       b       c       <<U1>
<Index>
p         10      8       1
q         -1      -1      0
r         0       1       1
s         0       0       6
<<U1>     <int64> <int64> <int64>
#end_FrameGO-via_T.__rshift__()

#start_FrameGO-via_T.__and__()
>>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> f.via_T & s
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         False  False
q         True   True
r         True   False
<<U1>     <bool> <bool>
#end_FrameGO-via_T.__and__()

#start_FrameGO-via_T.__xor__()
>>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> f.via_T ^ s
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         False  True
q         False  False
r         False  True
<<U1>     <bool> <bool>
#end_FrameGO-via_T.__xor__()

#start_FrameGO-via_T.__or__()
>>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> f.via_T | s
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         False  True
q         True   True
r         True   True
<<U1>     <bool> <bool>
#end_FrameGO-via_T.__or__()

#start_FrameGO-via_T.__lt__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T < s
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         False  True   False
r         True   False  False
s         True   True   False
<<U1>     <bool> <bool> <bool>
#end_FrameGO-via_T.__lt__()

#start_FrameGO-via_T.__le__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T <= s
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         True   True   False
r         True   False  False
s         True   True   False
<<U1>     <bool> <bool> <bool>
#end_FrameGO-via_T.__le__()

#start_FrameGO-via_T.__eq__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T == s
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         True   False  False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameGO-via_T.__eq__()

#start_FrameGO-via_T.__ne__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T != s
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   True   True
q         False  True   True
r         True   True   True
s         True   True   True
<<U1>     <bool> <bool> <bool>
#end_FrameGO-via_T.__ne__()

#start_FrameGO-via_T.__gt__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T > s
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   True   True
q         False  False  True
r         False  True   True
s         False  False  True
<<U1>     <bool> <bool> <bool>
#end_FrameGO-via_T.__gt__()

#start_FrameGO-via_T.__ge__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T >= s
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   True   True
q         True   False  True
r         False  True   True
s         False  False  True
<<U1>     <bool> <bool> <bool>
#end_FrameGO-via_T.__ge__()

#start_FrameGO-via_T.__radd__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T + s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         10.0      8.0       1.0
q         -4.0      -5.0      -2.0
r         0.5       8.5       9.5
s         1.0       1.0       13.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__radd__()

#start_FrameGO-via_T.__rsub__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T - s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         10.0      8.0       1.0
q         0.0       -1.0      2.0
r         -0.5      7.5       8.5
s         -1.0      -1.0      11.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__rsub__()

#start_FrameGO-via_T.__rmul__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T * s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         0.0       0.0       0.0
q         4.0       6.0       -0.0
r         0.0       4.0       4.5
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__rmul__()

#start_FrameGO-via_T.__rtruediv__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T / s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         inf       inf       inf
q         1.0       1.5       -0.0
r         0.0       16.0      18.0
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__rtruediv__()

#start_FrameGO-via_T.__rfloordiv__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T // s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         nan       nan       nan
q         1.0       1.0       -0.0
r         0.0       16.0      18.0
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__rfloordiv__()

#start_FrameGO-via_fill_value().loc
>>> f = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f.via_fill_value(-1).loc[['a', 'b', 'd']]
<FrameGO: y>
<IndexGO>    x       y       <<U1>
<Index>
a            3       2
b            0       0
d            -1      -1
<<U1>        <int64> <int64>
#end_FrameGO-via_fill_value().loc

#start_FrameGO-via_fill_value().__getitem__()
>>> f = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f.via_fill_value(-1)[['z', 'x']]
<FrameGO: y>
<IndexGO>    z       x       <<U1>
<Index>
a            -1      3
b            -1      0
c            -1      20
<<U1>        <int64> <int64>
#end_FrameGO-via_fill_value().__getitem__()

#start_FrameGO-via_fill_value().via_T
>>> f = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> s = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> f.via_fill_value(-1).via_T * s
<FrameGO>
<IndexGO> x       y       <<U1>
<Index>
a         -3      -2
b         0       0
c         160     96
d         -19     -19
<<U1>     <int64> <int64>
#end_FrameGO-via_fill_value().via_T

#start_FrameGO-via_fill_value().__add__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) + f2
<FrameGO>
<IndexGO> x       y       <<U1>
<Index>
a         3       2
b         2       3
c         24      26
<<U1>     <int64> <int64>
#end_FrameGO-via_fill_value().__add__()

#start_FrameGO-via_fill_value().__sub__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) - f2
<FrameGO>
<IndexGO> x       y       <<U1>
<Index>
a         3       2
b         -2      -3
c         16      -2
<<U1>     <int64> <int64>
#end_FrameGO-via_fill_value().__sub__()

#start_FrameGO-via_fill_value().__mul__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) * f2
<FrameGO>
<IndexGO> x       y       <<U1>
<Index>
a         0       0
b         0       0
c         80      168
<<U1>     <int64> <int64>
#end_FrameGO-via_fill_value().__mul__()

#start_FrameGO-via_fill_value().__truediv__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) / f2
<FrameGO>
<IndexGO> x         y                  <<U1>
<Index>
a         inf       inf
b         0.0       0.0
c         5.0       0.8571428571428571
<<U1>     <float64> <float64>
#end_FrameGO-via_fill_value().__truediv__()

#start_FrameGO-via_fill_value().__floordiv__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) // f2
<FrameGO>
<IndexGO> x       y       <<U1>
<Index>
a         0       0
b         0       0
c         5       0
<<U1>     <int64> <int64>
#end_FrameGO-via_fill_value().__floordiv__()

#start_FrameGO-via_fill_value().__mod__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) % f2
<FrameGO>
<IndexGO> x       y       <<U1>
<Index>
a         0       0
b         0       0
c         0       12
<<U1>     <int64> <int64>
#end_FrameGO-via_fill_value().__mod__()

#start_FrameGO-via_fill_value().__pow__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) ** f2
<FrameGO>
<IndexGO> x       y                <<U1>
<Index>
a         1       1
b         0       0
c         160000  1283918464548864
<<U1>     <int64> <int64>
#end_FrameGO-via_fill_value().__pow__()

#start_FrameGO-via_fill_value().__lshift__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) << f2
<FrameGO>
<IndexGO> x       y       <<U1>
<Index>
a         3       2
b         0       0
c         40      24
<<U1>     <int64> <int64>
#end_FrameGO-via_fill_value().__lshift__()

#start_FrameGO-via_fill_value().__rshift__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) >> f2
<FrameGO>
<IndexGO> x       y       <<U1>
<Index>
a         3       2
b         0       0
c         10      6
<<U1>     <int64> <int64>
#end_FrameGO-via_fill_value().__rshift__()

#start_FrameGO-via_fill_value().__and__()
>>> f1 = sf.FrameGO.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(False) & f2
<FrameGO>
<IndexGO> x      y      <<U1>
<Index>
a         False  False
b         False  False
c         True   True
<<U1>     <bool> <bool>
#end_FrameGO-via_fill_value().__and__()

#start_FrameGO-via_fill_value().__xor__()
>>> f1 = sf.FrameGO.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(False) ^ f2
<FrameGO>
<IndexGO> x      y      <<U1>
<Index>
a         False  True
b         True   True
c         False  False
<<U1>     <bool> <bool>
#end_FrameGO-via_fill_value().__xor__()

#start_FrameGO-via_fill_value().__or__()
>>> f1 = sf.FrameGO.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(False) | f2
<FrameGO>
<IndexGO> x      y      <<U1>
<Index>
a         False  True
b         True   True
c         True   True
<<U1>     <bool> <bool>
#end_FrameGO-via_fill_value().__or__()

#start_FrameGO-via_fill_value().__lt__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) < f2
<FrameGO>
<IndexGO> x      y      <<U1>
<Index>
a         False  False
b         True   True
c         False  True
<<U1>     <bool> <bool>
#end_FrameGO-via_fill_value().__lt__()

#start_FrameGO-via_fill_value().__le__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) <= f2
<FrameGO>
<IndexGO> x      y      <<U1>
<Index>
a         False  False
b         True   True
c         False  True
<<U1>     <bool> <bool>
#end_FrameGO-via_fill_value().__le__()

#start_FrameGO-via_fill_value().__eq__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) == f2
<FrameGO>
<IndexGO> x      y      <<U1>
<Index>
a         False  False
b         False  False
c         False  False
<<U1>     <bool> <bool>
#end_FrameGO-via_fill_value().__eq__()

#start_FrameGO-via_fill_value().__ne__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) != f2
<FrameGO>
<IndexGO> x      y      <<U1>
<Index>
a         True   True
b         True   True
c         True   True
<<U1>     <bool> <bool>
#end_FrameGO-via_fill_value().__ne__()

#start_FrameGO-via_fill_value().__gt__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) > f2
<FrameGO>
<IndexGO> x      y      <<U1>
<Index>
a         True   True
b         False  False
c         True   False
<<U1>     <bool> <bool>
#end_FrameGO-via_fill_value().__gt__()

#start_FrameGO-via_fill_value().__ge__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) >= f2
<FrameGO>
<IndexGO> x      y      <<U1>
<Index>
a         True   True
b         False  False
c         True   False
<<U1>     <bool> <bool>
#end_FrameGO-via_fill_value().__ge__()

#start_FrameGO-via_fill_value().__radd__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 + f1.via_fill_value(0)
<FrameGO: y>
<IndexGO>    x        y        <<U1>
<Index>
b            FrameGO  FrameGO
c            FrameGO  FrameGO
<<U1>        <object> <object>
#end_FrameGO-via_fill_value().__radd__()

#start_FrameGO-via_fill_value().__rsub__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 - f1.via_fill_value(0)
<FrameGO: y>
<IndexGO>    x        y        <<U1>
<Index>
b            FrameGO  FrameGO
c            FrameGO  FrameGO
<<U1>        <object> <object>
#end_FrameGO-via_fill_value().__rsub__()

#start_FrameGO-via_fill_value().__rmul__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 * f1.via_fill_value(0)
<FrameGO: y>
<IndexGO>    x        y        <<U1>
<Index>
b            FrameGO  FrameGO
c            FrameGO  FrameGO
<<U1>        <object> <object>
#end_FrameGO-via_fill_value().__rmul__()

#start_FrameGO-via_fill_value().__rtruediv__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 / f1.via_fill_value(0)
<FrameGO: y>
<IndexGO>    x        y        <<U1>
<Index>
b            FrameGO  FrameGO
c            FrameGO  FrameGO
<<U1>        <object> <object>
#end_FrameGO-via_fill_value().__rtruediv__()

#start_FrameGO-via_fill_value().__rfloordiv__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 // f1.via_fill_value(0)
<FrameGO: y>
<IndexGO>    x        y        <<U1>
<Index>
b            FrameGO  FrameGO
c            FrameGO  FrameGO
<<U1>        <object> <object>
#end_FrameGO-via_fill_value().__rfloordiv__()

#start_FrameGO-via_re().search()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').search()
<FrameGO: x>
<IndexGO>    a      b      c      <<U1>
<Index>
0            True   False  True
1            True   True   True
2            False  True   True
3            True   True   True
<int64>      <bool> <bool> <bool>
#end_FrameGO-via_re().search()

#start_FrameGO-via_re().match()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').match()
<FrameGO: x>
<IndexGO>    a      b      c      <<U1>
<Index>
0            True   False  True
1            True   True   True
2            False  True   True
3            True   False  True
<int64>      <bool> <bool> <bool>
#end_FrameGO-via_re().match()

#start_FrameGO-via_re().fullmatch()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('123').fullmatch()
<FrameGO: x>
<IndexGO>    a      b      c      <<U1>
<Index>
0            False  False  False
1            False  False  False
2            False  True   False
3            False  False  False
<int64>      <bool> <bool> <bool>
#end_FrameGO-via_re().fullmatch()

#start_FrameGO-via_re().split()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').split()
<FrameGO: x>
<IndexGO>    a         b                c                    <<U1>
<Index>
0            ('', '0') ('qrs ',)        ('', '5', '7-0', ...
1            ('', '')  ('', 'YZ')       ('', '5', '7-04-0...
2            ('8',)    ('', '', '', '') ('', '5', '7-', '...
3            ('', '')  (' w', ' ')      ('', '5', '7-06-'...
<int64>      <object>  <object>         <object>
#end_FrameGO-via_re().split()

#start_FrameGO-via_re().findall()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').findall()
<FrameGO: x>
<IndexGO>    a        b               c                    <<U1>
<Index>
0            ('1',)   ()              ('1', '1', '1', '1')
1            ('2',)   ('X',)          ('1', '1', '1')
2            ()       ('1', '2', '3') ('1', '1', '1', '...
3            ('3',)   ('X',)          ('1', '1', '3')
<int64>      <object> <object>        <object>
#end_FrameGO-via_re().findall()

#start_FrameGO-via_re().sub()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').sub('==')
<FrameGO: x>
<IndexGO>    a     b      c                <<U1>
<Index>
0            ==0   qrs    ==5==7-0==-0==
1            ==    ==YZ   ==5==7-04-0==
2            8     ====== ==5==7-====-====
3            ==     w==   ==5==7-06-==0
<int64>      <<U3> <<U6>  <<U16>
#end_FrameGO-via_re().sub()

#start_FrameGO-via_re().subn()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').subn('==', 1)
<FrameGO: x>
<IndexGO>    a          b            c                  <<U1>
<Index>
0            ('==0', 1) ('qrs ', 0)  ('==517-01-01', 1)
1            ('==', 1)  ('==YZ', 1)  ('==517-04-01', 1)
2            ('8', 0)   ('==23', 1)  ('==517-12-31', 1)
3            ('==', 1)  (' w== ', 1) ('==517-06-30', 1)
<int64>      <object>   <object>     <object>
#end_FrameGO-via_re().subn()

#start_FrameGO-via_values.apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.via_values.apply(np.sin)
<FrameGO: x>
<IndexGO>    a                   b                   c                   <<U1>
<Index>
p            -0.5440211108893698 0.9893582466233818  0.8414709848078965
q            -0.9092974268256817 -0.1411200080598672 0.0
r            0.0                 0.9893582466233818  0.4121184852417566
s            0.0                 0.0                 -0.5365729180004349
<<U1>        <float64>           <float64>           <float64>
#end_FrameGO-via_values.apply()

#start_FrameGO-via_values.__array_ufunc__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> np.sin(f.via_values)
<FrameGO: x>
<IndexGO>    a                   b                   c                   <<U1>
<Index>
p            -0.5440211108893698 0.9893582466233818  0.8414709848078965
q            -0.9092974268256817 -0.1411200080598672 0.0
r            0.0                 0.9893582466233818  0.4121184852417566
s            0.0                 0.0                 -0.5365729180004349
<<U1>        <float64>           <float64>           <float64>
#end_FrameGO-via_values.__array_ufunc__()

#start_FrameGO-via_values.__call__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> np.sin(f.via_values(unify_blocks=True))
<FrameGO: x>
<IndexGO>    a                   b                   c                   <<U1>
<Index>
p            -0.5440211108893698 0.9893582466233818  0.8414709848078965
q            -0.9092974268256817 -0.1411200080598672 0.0
r            0.0                 0.9893582466233818  0.4121184852417566
s            0.0                 0.0                 -0.5365729180004349
<<U1>        <float64>           <float64>           <float64>
#end_FrameGO-via_values.__call__()

#start_Index-__init__()
>>> sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
<Index: x>
a
b
c
d
e
<<U1>
#end_Index-__init__()

#start_Index-from_labels()
>>> sf.Index.from_labels(('a', 'b', 'c', 'd', 'e'), name='x')
<Index: x>
a
b
c
d
e
<<U1>
#end_Index-from_labels()

#start_Index-from_pandas()
>>> ix = pd.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> sf.Index.from_pandas(ix)
<Index: x>
a
b
c
d
e
<object>
#end_Index-from_pandas()

#start_Index-to_pandas()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.to_pandas()
Index(['a', 'b', 'c', 'd', 'e'], dtype='object', name='x')
#end_Index-to_pandas()

#start_Index-to_series()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.to_series()
<Series: x>
<Index>
0           a
1           b
2           c
3           d
4           e
<int64>     <<U1>
#end_Index-to_series()

#start_Index-STATIC
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.STATIC
True
#end_Index-STATIC

#start_Index-depth
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.depth
1
#end_Index-depth

#start_Index-dtype
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.dtype
<U1
#end_Index-dtype

#start_Index-index_types
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.index_types
<Series>
<Index>
x        <Index>
<<U1>    <object>
#end_Index-index_types

#start_Index-memory
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.memory
          L   Lu    LM  LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu
Name      50  B     50  B     50  B     50   B     50  B     50  B
Map       520 B     520 B     520 B     520  B     520 B     520 B
Labels    116 B     132 B     20  B     116  B     132 B     20  B
Positions 96  B     112 B     0   B     8.19 KB    152 B     40  B
Total     878 B     910 B     686 B     8.95 KB    950 B     726 B
#end_Index-memory

#start_Index-name
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.name
x
#end_Index-name

#start_Index-names
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.names
('x',)
#end_Index-names

#start_Index-nbytes
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.nbytes
20
#end_Index-nbytes

#start_Index-ndim
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.ndim
1
#end_Index-ndim

#start_Index-positions
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.positions
[0 1 2 3 4]
#end_Index-positions

#start_Index-shape
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.shape
(5,)
#end_Index-shape

#start_Index-size
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.size
5
#end_Index-size

#start_Index-__array__()
>>> ix = sf.Index((1024, 2048, 4096), name='y')
>>> ix.__array__()
[1024 2048 4096]
#end_Index-__array__()

#start_Index-__array_ufunc__()
>>> ix = sf.Index((1024, 2048, 4096), name='y')
>>> ix
<Index: y>
1024
2048
4096
<int64>
>>> np.array((0, 1, 0)) * ix
[   0 2048    0]
#end_Index-__array_ufunc__()

#start_Index-__bool__()
>>> s = sf.Index((1024, 2048, 4096), name='y')
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_Index-__bool__()

#start_Index-__copy__()
>>> import copy
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> copy.copy(ix)
<Index: x>
a
b
c
d
e
<<U1>
#end_Index-__copy__()

#start_Index-__deepcopy__()
>>> import copy
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> copy.deepcopy(ix)
<Index: x>
a
b
c
d
e
<<U1>
#end_Index-__deepcopy__()

#start_Index-__len__()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> len(ix)
5
#end_Index-__len__()

#start_Index-all()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> ix.all()
False
#end_Index-all()

#start_Index-any()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> ix.any()
True
#end_Index-any()

#start_Index-astype()
>>> ix = sf.Index((1024, 2048, 4096), name='y')
>>> ix
<Index: y>
1024
2048
4096
<int64>
>>> ix.astype(float)
<Index: y>
1024.0
2048.0
4096.0
<float64>
#end_Index-astype()

#start_Index-copy()
>>> ix = sf.Index((1024, 2048, 4096), name='y')
>>> ix.copy()
<Index: y>
1024
2048
4096
<int64>
#end_Index-copy()

#start_Index-cumprod()
>>> ix = sf.Index((1024, 2048, 4096), name='y')
>>> ix.cumprod()
[      1024    2097152 8589934592]
#end_Index-cumprod()

#start_Index-cumsum()
>>> ix = sf.Index((1024, 2048, 4096), name='y')
>>> ix.cumsum()
[1024 3072 7168]
#end_Index-cumsum()

#start_Index-difference()
>>> ix1 = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix2 = sf.Index(('c', 'd', 'e', 'f'), name='y')
>>> ix1.difference(ix2)
<Index>
a
b
<<U1>
#end_Index-difference()

#start_Index-dropfalsy()
>>> ix = sf.Index(('', 'b', 'c', 'd'))
>>> ix
<Index>

b
c
d
<<U1>
>>> ix.dropfalsy()
<Index>
b
c
d
<<U1>
#end_Index-dropfalsy()

#start_Index-dropna()
>>> ix = sf.Index((None, 'A', 1024, True), name='x')
>>> ix
<Index: x>
None
A
1024
True
<object>
>>> ix.dropna()
<Index: x>
A
1024
True
<object>
#end_Index-dropna()

#start_Index-equals()
>>> ix1 = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix2 = sf.Index((1024, 2048, 4096), name='y')
>>> ix1.equals(ix2)
False
#end_Index-equals()

#start_Index-fillfalsy()
>>> ix = sf.Index(('', 'b', 'c', 'd'))
>>> ix
<Index>

b
c
d
<<U1>
>>> ix.fillfalsy('A')
<Index>
A
b
c
d
<<U1>
#end_Index-fillfalsy()

#start_Index-fillna()
>>> ix = sf.Index((None, 'A', 1024, True), name='x')
>>> ix
<Index: x>
None
A
1024
True
<object>
>>> ix.fillna(0)
<Index: x>
0
A
1024
True
<object>
#end_Index-fillna()

#start_Index-head()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix
<Index: x>
a
b
c
d
e
<<U1>
>>> ix.head(2)
<Index: x>
a
b
<<U1>
#end_Index-head()

#start_Index-iloc_searchsorted()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix
<Index: x>
a
b
c
d
e
<<U1>
>>> ix.iloc_searchsorted('c')
2
#end_Index-iloc_searchsorted()

#start_Index-intersection()
>>> ix1 = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix2 = sf.Index(('c', 'd', 'e', 'f'), name='y')
>>> ix1.intersection(ix2)
<Index>
c
d
e
<<U1>
#end_Index-intersection()

#start_Index-isin()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.isin(('a', 'e'))
[ True False False False  True]
#end_Index-isin()

#start_Index-label_widths_at_depth()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix
<Index: x>
a
b
c
d
e
<<U1>
>>> tuple(ix.label_widths_at_depth(0))
(('a', 1), ('b', 1), ('c', 1), ('d', 1), ('e', 1))
#end_Index-label_widths_at_depth()

#start_Index-level_add()
>>> ix = sf.Index((1024, 2048, 4096), name='y')
>>> ix
<Index: y>
1024
2048
4096
<int64>
>>> ix.level_add('A')
<IndexHierarchy: y>
A                   1024
A                   2048
A                   4096
<<U1>               <int64>
#end_Index-level_add()

#start_Index-loc_searchsorted()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix
<Index: x>
a
b
c
d
e
<<U1>
>>> ix.loc_searchsorted('c')
c
#end_Index-loc_searchsorted()

#start_Index-loc_to_iloc()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix
<Index: x>
a
b
c
d
e
<<U1>
>>> ix.loc_to_iloc('d')
3
>>> ix.loc_to_iloc(['a', 'e'])
[0, 4]
>>> ix.loc_to_iloc(slice('c', None))
slice(2, None, None)
#end_Index-loc_to_iloc()

#start_Index-max()
>>> ix = sf.Index((1024, 2048, 4096), name='y')
>>> ix.max()
4096
#end_Index-max()

#start_Index-mean()
>>> ix = sf.Index((1024, 2048, 4096), name='y')
>>> ix.mean()
2389.3333333333335
#end_Index-mean()

#start_Index-median()
>>> ix = sf.Index((1024, 2048, 4096), name='y')
>>> ix.median()
2048.0
#end_Index-median()

#start_Index-min()
>>> ix = sf.Index((1024, 2048, 4096), name='y')
>>> ix.min()
1024
#end_Index-min()

#start_Index-prod()
>>> ix = sf.Index((1024, 2048, 4096), name='y')
>>> ix.prod()
8589934592
#end_Index-prod()

#start_Index-relabel()
>>> ix = sf.Index(('a', 'b', 'c'), name='x')
>>> ix
<Index: x>
a
b
c
<<U1>
>>> ix.relabel(dict(a='x', c='y'))
<Index: x>
x
b
y
<<U1>
>>> ix.relabel(lambda l: l.upper() if l != 'b' else l)
<Index: x>
A
b
C
<<U1>
#end_Index-relabel()

#start_Index-rename()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.rename('y')
<Index: y>
a
b
c
d
e
<<U1>
#end_Index-rename()

#start_Index-roll()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix
<Index: x>
a
b
c
d
e
<<U1>
>>> ix.roll(2)
<Index: x>
d
e
a
b
c
<<U1>
#end_Index-roll()

#start_Index-sample()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix
<Index: x>
a
b
c
d
e
<<U1>
>>> ix.sample(2, seed=0)
<Index: x>
a
c
<<U1>
#end_Index-sample()

#start_Index-sort()
>>> ix = sf.Index(('b', 'e', 'c', 'a', 'd'), name='x')
>>> ix
<Index: x>
b
e
c
a
d
<<U1>
>>> ix.sort()
<Index: x>
a
b
c
d
e
<<U1>
>>> ix.sort(ascending=False)
<Index: x>
e
d
c
b
a
<<U1>
#end_Index-sort()

#start_Index-std()
>>> ix = sf.Index((1024, 2048, 4096), name='y')
>>> ix.std()
1277.1523880188386
#end_Index-std()

#start_Index-sum()
>>> ix = sf.Index((1024, 2048, 4096), name='y')
>>> ix.sum()
7168
#end_Index-sum()

#start_Index-tail()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix
<Index: x>
a
b
c
d
e
<<U1>
>>> ix.tail(2)
<Index: x>
d
e
<<U1>
#end_Index-tail()

#start_Index-union()
>>> ix1 = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix2 = sf.Index(('c', 'd', 'e', 'f'), name='y')
>>> ix1.union(ix2)
<Index>
a
b
c
d
e
f
<<U1>
#end_Index-union()

#start_Index-unique()
>>> ix = sf.Index((None, 'A', 1024, True), name='x')
>>> ix
<Index: x>
None
A
1024
True
<object>
>>> ix.unique()
[None 'A' 1024 True]
#end_Index-unique()

#start_Index-values_at_depth()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.values_at_depth(0)
['a' 'b' 'c' 'd' 'e']
#end_Index-values_at_depth()

#start_Index-var()
>>> ix = sf.Index((1024, 2048, 4096), name='y')
>>> ix.var()
1631118.222222222
#end_Index-var()

#start_Index-__contains__()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.__contains__('a')
True
#end_Index-__contains__()

#start_Index-__iter__()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> tuple(ix.__iter__())
('a', 'b', 'c', 'd', 'e')
#end_Index-__iter__()

#start_Index-__reversed__()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> tuple(ix.__reversed__())
('e', 'd', 'c', 'b', 'a')
#end_Index-__reversed__()

#start_Index-values
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.values
['a' 'b' 'c' 'd' 'e']
#end_Index-values

#start_Index-interface
>>> ix = sf.Index((None, 'A', 1024, True), name='x')
>>> ix.interface
<Frame>
<Index>                              cls_name group                doc                  <<U18>
<Index: signature>
__init__(labels, *, loc_is_iloc, ... Index    Constructor          Initializer. Args...
from_labels(labels, *, name)         Index    Constructor          Construct an Inde...
from_pandas(value)                   Index    Constructor          Given a Pandas in...
to_html(config, style_config)        Index    Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... Index    Exporter             Return a complete...
to_pandas()                          Index    Exporter             Return a Pandas I...
to_series()                          Index    Exporter             Return a Series w...
to_visidata()                        Index    Exporter             Open an interacti...
STATIC                               Index    Attribute            bool(x) -> bool R...
depth                                Index    Attribute            int([x]) -> integ...
dtype                                Index    Attribute            Return the dtype ...
index_types                          Index    Attribute            Return a Series o...
memory                               Index    Attribute            Return a MemoryDi...
mloc                                 Index    Attribute            The memory locati...
name                                 Index    Attribute            A hashable label ...
names                                Index    Attribute            Provide a suitabl...
nbytes                               Index    Attribute            Return the total ...
...                                  ...      ...                  ...
via_str.rpartition(sep)              Index    Accessor String      Partition (split)...
via_str.rsplit(sep, maxsplit)        Index    Accessor String      For each element,...
via_str.rstrip(chars)                Index    Accessor String      For each element,...
via_str.split(sep, maxsplit)         Index    Accessor String      For each element,...
via_str.startswith(prefix, start,... Index    Accessor String      Returns a contain...
via_str.strip(chars)                 Index    Accessor String      For each element,...
via_str.swapcase()                   Index    Accessor String      Return a containe...
via_str.title()                      Index    Accessor String      Return a containe...
via_str.upper()                      Index    Accessor String      Return a containe...
via_str.zfill(width)                 Index    Accessor String      Return the string...
via_re(pattern, flags).search(pos... Index    Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... Index    Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... Index    Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... Index    Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... Index    Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... Index    Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... Index    Accessor Regular ... Perform the same ...
<<U63>                               <<U5>    <<U27>               <<U83>
#end_Index-interface

#start_Index-__repr__()
>>> ix = sf.Index((None, 'A', 1024, True), name='x')
>>> repr(ix)
<Index: x>
None
A
1024
True
<object>
#end_Index-__repr__()

#start_Index-__str__()
>>> ix = sf.Index((None, 'A', 1024, True), name='x')
>>> str(ix)
<Index: x>
None
A
1024
True
<object>
#end_Index-__str__()

#start_Index-display()
>>> ix = sf.Index((None, 'A', 1024, True), name='x')
>>> ix.display()
<Index: x>
None
A
1024
True
<object>
>>> ix.display(sf.DisplayConfig(type_show=False))
None
A
1024
True
#end_Index-display()

#start_Index-display_tall()
>>> ix = sf.Index((None, 'A', 1024, True), name='x')
>>> ix.display_tall()
<Index: x>
None
A
1024
True
<object>
#end_Index-display_tall()

#start_Index-display_wide()
>>> ix = sf.Index((None, 'A', 1024, True), name='x')
>>> ix.display_wide()
<Index: x>
None
A
1024
True
<object>
#end_Index-display_wide()

#start_Index-drop.iloc[]
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.drop.iloc[2]
<Index: x>
a
b
d
e
<<U1>
>>> ix.drop.iloc[2:]
<Index: x>
a
b
<<U1>
>>> ix.drop.iloc[[0, 3]]
<Index: x>
b
c
e
<<U1>
#end_Index-drop.iloc[]

#start_Index-drop.loc[]
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.drop.loc['c']
<Index: x>
a
b
d
e
<<U1>
>>> ix.drop.loc['c':]
<Index: x>
a
b
<<U1>
>>> ix.drop.loc[['a', 'd']]
<Index: x>
b
c
e
<<U1>
#end_Index-drop.loc[]

#start_Index-[]
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix[2]
c
>>> ix[2:]
<Index: x>
c
d
e
<<U1>
>>> ix[[0, 3]]
<Index: x>
a
d
<<U1>
#end_Index-[]

#start_Index-iloc[]
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.iloc[2]
c
>>> ix.iloc[2:]
<Index: x>
c
d
e
<<U1>
>>> ix.iloc[[0, 3]]
<Index: x>
a
d
<<U1>
#end_Index-iloc[]

#start_Index-loc[]
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.loc['c']
c
>>> ix.loc['c':]
<Index: x>
c
d
e
<<U1>
>>> ix.loc[['a', 'e']]
<Index: x>
a
e
<<U1>
#end_Index-loc[]

#start_Index-iter_label()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> tuple(ix.iter_label())
('a', 'b', 'c', 'd', 'e')
#end_Index-iter_label()

#start_Index-iter_label().apply()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.iter_label().apply(lambda l: l if l == 'b' else l.upper())
['A' 'b' 'C' 'D' 'E']
#end_Index-iter_label().apply()

#start_Index-iter_label().apply_iter()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> tuple(ix.iter_label().apply_iter(lambda l: l if l == 'b' else l.upper()))
('A', 'b', 'C', 'D', 'E')
#end_Index-iter_label().apply_iter()

#start_Index-iter_label().apply_iter_items()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> tuple(ix.iter_label().apply_iter_items(lambda l: l if l == 'b' else l.upper()))
((0, 'A'), (1, 'b'), (2, 'C'), (3, 'D'), (4, 'E'))
#end_Index-iter_label().apply_iter_items()

#start_Index-iter_label().apply_pool()
>>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.iter_label().apply_pool(lambda l: l if l == 'b' else l.upper(), use_threads=True)
['A' 'b' 'C' 'D' 'E']
#end_Index-iter_label().apply_pool()

#start_Index-__add__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> ix + 8
[    8  1032 -2040  4104]
#end_Index-__add__()

#start_Index-__and__()
>>> ix = sf.Index((False, True), name='x')
>>> ix & True
[False  True]
>>> ix & (False, True)
[False  True]
#end_Index-__and__()

#start_Index-__eq__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> ix == 8
[False False False False]
#end_Index-__eq__()

#start_Index-__floordiv__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> ix // 8
[   0  128 -256  512]
#end_Index-__floordiv__()

#start_Index-__ge__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> ix >= 8
[False  True False  True]
#end_Index-__ge__()

#start_Index-__gt__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> ix > 8
[False  True False  True]
#end_Index-__gt__()

#start_Index-__le__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> ix <= 8
[ True False  True False]
#end_Index-__le__()

#start_Index-__lt__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> ix < 8
[ True False  True False]
#end_Index-__lt__()

#start_Index-__matmul__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> ix @ (3, 0, 4, 0)
-8192
#end_Index-__matmul__()

#start_Index-__mod__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> ix % 8
[0 0 0 0]
#end_Index-__mod__()

#start_Index-__mul__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> ix * 8
[     0   8192 -16384  32768]
#end_Index-__mul__()

#start_Index-__ne__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> ix != 8
[ True  True  True  True]
#end_Index-__ne__()

#start_Index-__or__()
>>> ix = sf.Index((False, True), name='x')
>>> ix | True
[ True  True]
>>> ix | (False, True)
[False  True]
#end_Index-__or__()

#start_Index-__pow__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> ix ** 8
[0 0 0 0]
#end_Index-__pow__()

#start_Index-__radd__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> 8 + ix
[    8  1032 -2040  4104]
#end_Index-__radd__()

#start_Index-__rfloordiv__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> 8 // ix
[ 0  0 -1  0]
#end_Index-__rfloordiv__()

#start_Index-__rmatmul__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> ix @ (3, 0, 4, 0)
-8192
#end_Index-__rmatmul__()

#start_Index-__rmul__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> 8 * ix
[     0   8192 -16384  32768]
#end_Index-__rmul__()

#start_Index-__rshift__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> ix >> 1
[    0   512 -1024  2048]
#end_Index-__rshift__()

#start_Index-__rsub__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> 8 - ix
[    8 -1016  2056 -4088]
#end_Index-__rsub__()

#start_Index-__rtruediv__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> 8 / ix
[        inf  0.0078125  -0.00390625  0.00195312]
#end_Index-__rtruediv__()

#start_Index-__sub__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> ix - 8
[   -8  1016 -2056  4088]
#end_Index-__sub__()

#start_Index-__truediv__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> ix / 8
[   0.  128. -256.  512.]
#end_Index-__truediv__()

#start_Index-__xor__()
>>> ix = sf.Index((False, True), name='x')
>>> ix ^ True
[ True False]
>>> ix ^ (False, True)
[False False]
#end_Index-__xor__()

#start_Index-__abs__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> abs(ix)
[   0 1024 2048 4096]
#end_Index-__abs__()

#start_Index-__invert__()
>>> ix = sf.Index((False, True), name='x')
>>> ~ix
[ True False]
#end_Index-__invert__()

#start_Index-__neg__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> -ix
[    0 -1024  2048 -4096]
#end_Index-__neg__()

#start_Index-__pos__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> +ix
[    0  1024 -2048  4096]
#end_Index-__pos__()

#start_Index-via_dt.year
>>> import datetime
>>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.year
[1517 1517]
#end_Index-via_dt.year

#start_Index-via_dt.month
>>> import datetime
>>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.month
[1 4]
#end_Index-via_dt.month

#start_Index-via_dt.day
>>> import datetime
>>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.day
[1 1]
#end_Index-via_dt.day

#start_Index-via_dt.hour
>>> import datetime
>>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.hour
[0 8]
#end_Index-via_dt.hour

#start_Index-via_dt.minute
>>> import datetime
>>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.minute
[ 0 30]
#end_Index-via_dt.minute

#start_Index-via_dt.second
>>> import datetime
>>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.second
[ 0 59]
#end_Index-via_dt.second

#start_Index-via_dt.weekday()
>>> import datetime
>>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.weekday()
[0 6]
#end_Index-via_dt.weekday()

#start_Index-via_dt.quarter()
>>> import datetime
>>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.quarter()
[1 2]
#end_Index-via_dt.quarter()

#start_Index-via_dt.is_month_end()
>>> import datetime
>>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.is_month_end()
[False False]
#end_Index-via_dt.is_month_end()

#start_Index-via_dt.is_month_start()
>>> import datetime
>>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.is_month_start()
[ True  True]
#end_Index-via_dt.is_month_start()

#start_Index-via_dt.is_year_end()
>>> import datetime
>>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.is_year_end()
[False False]
#end_Index-via_dt.is_year_end()

#start_Index-via_dt.is_year_start()
>>> import datetime
>>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.is_year_start()
[ True False]
#end_Index-via_dt.is_year_start()

#start_Index-via_dt.is_quarter_end()
>>> import datetime
>>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.is_quarter_end()
[False False]
#end_Index-via_dt.is_quarter_end()

#start_Index-via_dt.is_quarter_start()
>>> import datetime
>>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.is_quarter_start()
[ True  True]
#end_Index-via_dt.is_quarter_start()

#start_Index-via_dt.timetuple()
>>> import datetime
>>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.timetuple()
[time.struct_time(tm_year=1517, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=1, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=8, tm_min=30, tm_sec=59, tm_wday=6, tm_yday=91, tm_isdst=-1)]
#end_Index-via_dt.timetuple()

#start_Index-via_dt.isoformat()
>>> import datetime
>>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.isoformat()
['1517-01-01T00:00:00' '1517-04-01T08:30:59']
#end_Index-via_dt.isoformat()

#start_Index-via_dt.fromisoformat()
>>> ix = sf.Index(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'))
>>> ix.via_dt.fromisoformat()
[datetime.date(1517, 1, 1) datetime.date(1517, 4, 1)
 datetime.date(1517, 12, 31) datetime.date(1517, 6, 30)
 datetime.date(1517, 10, 1)]
#end_Index-via_dt.fromisoformat()

#start_Index-via_dt.strftime()
>>> import datetime
>>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.strftime("%A | %B")
['Monday | January' 'Sunday | April']
#end_Index-via_dt.strftime()

#start_Index-via_dt.strptime()
>>> ix = sf.Index(('1/1/1517', '4/1/1517', '6/30/1517'))
>>> ix.via_dt.strptime("%m/%d/%Y")
[datetime.datetime(1517, 1, 1, 0, 0) datetime.datetime(1517, 4, 1, 0, 0)
 datetime.datetime(1517, 6, 30, 0, 0)]
#end_Index-via_dt.strptime()

#start_Index-via_dt.strpdate()
>>> ix = sf.Index(('1/1/1517', '4/1/1517', '6/30/1517'))
>>> ix.via_dt.strpdate("%m/%d/%Y")
[datetime.date(1517, 1, 1) datetime.date(1517, 4, 1)
 datetime.date(1517, 6, 30)]
#end_Index-via_dt.strpdate()

#start_Index-via_str.__getitem__()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str[-1]
[' ' 'Z' '3' ' ']
#end_Index-via_str.__getitem__()

#start_Index-via_str.capitalize()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.capitalize()
['Qrs ' 'Xyz' '123' ' wx ']
#end_Index-via_str.capitalize()

#start_Index-via_str.center()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.center(8)
['  qrs   ' '  XYZ   ' '  123   ' '   wX   ']
#end_Index-via_str.center()

#start_Index-via_str.contains()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.contains('X')
[False  True False  True]
#end_Index-via_str.contains()

#start_Index-via_str.count()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.count('X')
[0 1 0 1]
#end_Index-via_str.count()

#start_Index-via_str.decode()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX ')).astype(bytes)
>>> ix
<Index>
b'qrs '
b'XYZ'
b'123'
b' wX '
<|S4>
>>> ix.via_str.decode()
['qrs ' 'XYZ' '123' ' wX ']
#end_Index-via_str.decode()

#start_Index-via_str.encode()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.encode()
[b'qrs ' b'XYZ' b'123' b' wX ']
#end_Index-via_str.encode()

#start_Index-via_str.endswith()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.endswith(' ')
[ True False False  True]
#end_Index-via_str.endswith()

#start_Index-via_str.find()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.find('X')
[-1  0 -1  2]
#end_Index-via_str.find()

#start_Index-via_str.format()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.format('{:-^10}')
['---qrs ---' '---XYZ----' '---123----' '--- wX ---']
#end_Index-via_str.format()

#start_Index-via_str.index()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.index('X')
ValueError('substring not found')
#end_Index-via_str.index()

#start_Index-via_str.isalnum()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.isalnum()
[False  True  True False]
#end_Index-via_str.isalnum()

#start_Index-via_str.isalpha()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.isalpha()
[False  True False False]
#end_Index-via_str.isalpha()

#start_Index-via_str.isdecimal()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.isdecimal()
[False False  True False]
#end_Index-via_str.isdecimal()

#start_Index-via_str.isdigit()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.isdigit()
[False False  True False]
#end_Index-via_str.isdigit()

#start_Index-via_str.islower()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.islower()
[ True False False False]
#end_Index-via_str.islower()

#start_Index-via_str.isnumeric()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.isnumeric()
[False False  True False]
#end_Index-via_str.isnumeric()

#start_Index-via_str.isspace()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.isspace()
[False False False False]
#end_Index-via_str.isspace()

#start_Index-via_str.istitle()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.istitle()
[False False False False]
#end_Index-via_str.istitle()

#start_Index-via_str.isupper()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.isupper()
[False  True False False]
#end_Index-via_str.isupper()

#start_Index-via_str.ljust()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.ljust(8)
['qrs     ' 'XYZ     ' '123     ' ' wX     ']
#end_Index-via_str.ljust()

#start_Index-via_str.len()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.len()
[4 3 3 4]
#end_Index-via_str.len()

#start_Index-via_str.lower()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.lower()
['qrs ' 'xyz' '123' ' wx ']
#end_Index-via_str.lower()

#start_Index-via_str.lstrip()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.lstrip()
['qrs ' 'XYZ' '123' 'wX ']
#end_Index-via_str.lstrip()

#start_Index-via_str.partition()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.partition('X')
[('qrs ', '', '') ('', 'X', 'YZ') ('123', '', '') (' w', 'X', ' ')]
#end_Index-via_str.partition()

#start_Index-via_str.replace()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.replace('X', '*')
['qrs ' '*YZ' '123' ' w* ']
#end_Index-via_str.replace()

#start_Index-via_str.rfind()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.rfind('X')
[-1  0 -1  2]
#end_Index-via_str.rfind()

#start_Index-via_str.rindex()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.rindex('X')
ValueError('substring not found')
#end_Index-via_str.rindex()

#start_Index-via_str.rjust()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.rjust(8)
['    qrs ' '     XYZ' '     123' '     wX ']
#end_Index-via_str.rjust()

#start_Index-via_str.rpartition()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.rpartition('X')
[('', '', 'qrs ') ('', 'X', 'YZ') ('', '', '123') (' w', 'X', ' ')]
#end_Index-via_str.rpartition()

#start_Index-via_str.rsplit()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.rsplit('X')
[('qrs ',) ('', 'YZ') ('123',) (' w', ' ')]
#end_Index-via_str.rsplit()

#start_Index-via_str.rstrip()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.rstrip()
['qrs' 'XYZ' '123' ' wX']
#end_Index-via_str.rstrip()

#start_Index-via_str.split()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.split('X')
[('qrs ',) ('', 'YZ') ('123',) (' w', ' ')]
#end_Index-via_str.split()

#start_Index-via_str.startswith()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.startswith('X')
[False  True False False]
#end_Index-via_str.startswith()

#start_Index-via_str.strip()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.strip()
['qrs' 'XYZ' '123' 'wX']
#end_Index-via_str.strip()

#start_Index-via_str.swapcase()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.swapcase()
['QRS ' 'xyz' '123' ' Wx ']
#end_Index-via_str.swapcase()

#start_Index-via_str.title()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.title()
['Qrs ' 'Xyz' '123' ' Wx ']
#end_Index-via_str.title()

#start_Index-via_str.upper()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.upper()
['QRS ' 'XYZ' '123' ' WX ']
#end_Index-via_str.upper()

#start_Index-via_str.zfill()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.zfill(8)
['0000qrs ' '00000XYZ' '00000123' '0000 wX ']
#end_Index-via_str.zfill()

#start_Index-via_re().search()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_re('[X123]').search()
[False  True  True  True]
#end_Index-via_re().search()

#start_Index-via_re().match()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_re('[X123]').match()
[False  True  True False]
#end_Index-via_re().match()

#start_Index-via_re().fullmatch()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_re('123').fullmatch()
[False False  True False]
#end_Index-via_re().fullmatch()

#start_Index-via_re().split()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_re('[X123]').split()
[('qrs ',) ('', 'YZ') ('', '', '', '') (' w', ' ')]
#end_Index-via_re().split()

#start_Index-via_re().findall()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_re('[X123]').findall()
[() ('X',) ('1', '2', '3') ('X',)]
#end_Index-via_re().findall()

#start_Index-via_re().sub()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_re('[X123]').sub('==')
['qrs ' '==YZ' '======' ' w== ']
#end_Index-via_re().sub()

#start_Index-via_re().subn()
>>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<Index>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_re('[X123]').subn('==', 1)
[('qrs ', 0) ('==YZ', 1) ('==23', 1) (' w== ', 1)]
#end_Index-via_re().subn()

#start_Index-via_values.apply()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> ix.via_values.apply(np.sin)
<Index>
0.0
-0.15853338004399595
0.31305701279012343
-0.5946419876082146
<float64>
#end_Index-via_values.apply()

#start_Index-via_values.__array_ufunc__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> np.sin(ix.via_values)
<Index>
0.0
-0.15853338004399595
0.31305701279012343
-0.5946419876082146
<float64>
#end_Index-via_values.__array_ufunc__()

#start_Index-via_values.__call__()
>>> ix = sf.Index((0, 1024, -2048, 4096))
>>> np.sin(ix.via_values(unify_blocks=True))
<Index>
0.0
-0.15853338004399595
0.31305701279012343
-0.5946419876082146
<float64>
#end_Index-via_values.__call__()

#start_IndexGO-__init__()
>>> sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
<IndexGO: x>
a
b
c
d
e
<<U1>
#end_IndexGO-__init__()

#start_IndexGO-from_labels()
>>> sf.IndexGO.from_labels(('a', 'b', 'c', 'd', 'e'), name='x')
<IndexGO: x>
a
b
c
d
e
<<U1>
#end_IndexGO-from_labels()

#start_IndexGO-from_pandas()
>>> ix = pd.Index(('a', 'b', 'c', 'd', 'e'), name='x')
>>> sf.IndexGO.from_pandas(ix)
<IndexGO: x>
a
b
c
d
e
<object>
#end_IndexGO-from_pandas()

#start_IndexGO-to_pandas()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.to_pandas()
Index(['a', 'b', 'c', 'd', 'e'], dtype='object', name='x')
#end_IndexGO-to_pandas()

#start_IndexGO-to_series()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.to_series()
<Series: x>
<Index>
0           a
1           b
2           c
3           d
4           e
<int64>     <<U1>
#end_IndexGO-to_series()

#start_IndexGO-STATIC
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.STATIC
False
#end_IndexGO-STATIC

#start_IndexGO-depth
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.depth
1
#end_IndexGO-depth

#start_IndexGO-dtype
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.dtype
<U1
#end_IndexGO-dtype

#start_IndexGO-index_types
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.index_types
<Series>
<Index>
x        <IndexGO>
<<U1>    <object>
#end_IndexGO-index_types

#start_IndexGO-memory
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.memory
          L    Lu    LM   LMu   LMD  LMDu  R    Ru    RM   RMu   RMD  RMDu
Name      50   B     50   B     50   B     50   B     50   B     50   B
Map       520  B     520  B     520  B     520  B     520  B     520  B
Labels    116  B     132  B     20   B     116  B     132  B     20   B
Positions 96   B     112  B     0    B     8.19 KB    152  B     40   B
Total     1.34 KB    1.37 KB    1.15 KB    9.43 KB    1.41 KB    1.19 KB
#end_IndexGO-memory

#start_IndexGO-name
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.name
x
#end_IndexGO-name

#start_IndexGO-names
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.names
('x',)
#end_IndexGO-names

#start_IndexGO-nbytes
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.nbytes
20
#end_IndexGO-nbytes

#start_IndexGO-ndim
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.ndim
1
#end_IndexGO-ndim

#start_IndexGO-positions
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.positions
[0 1 2 3 4]
#end_IndexGO-positions

#start_IndexGO-shape
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.shape
(5,)
#end_IndexGO-shape

#start_IndexGO-size
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.size
5
#end_IndexGO-size

#start_IndexGO-__array__()
>>> ix = sf.IndexGO((1024, 2048, 4096), name='y')
>>> ix.__array__()
[1024 2048 4096]
#end_IndexGO-__array__()

#start_IndexGO-__array_ufunc__()
>>> ix = sf.IndexGO((1024, 2048, 4096), name='y')
>>> ix
<IndexGO: y>
1024
2048
4096
<int64>
>>> np.array((0, 1, 0)) * ix
[   0 2048    0]
#end_IndexGO-__array_ufunc__()

#start_IndexGO-__bool__()
>>> s = sf.IndexGO((1024, 2048, 4096), name='y')
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexGO-__bool__()

#start_IndexGO-__copy__()
>>> import copy
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> copy.copy(ix)
<IndexGO: x>
a
b
c
d
e
<<U1>
#end_IndexGO-__copy__()

#start_IndexGO-__deepcopy__()
>>> import copy
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> copy.deepcopy(ix)
<IndexGO: x>
a
b
c
d
e
<<U1>
#end_IndexGO-__deepcopy__()

#start_IndexGO-__len__()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> len(ix)
5
#end_IndexGO-__len__()

#start_IndexGO-all()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> ix.all()
False
#end_IndexGO-all()

#start_IndexGO-any()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> ix.any()
True
#end_IndexGO-any()

#start_IndexGO-append()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.append('f')
>>> ix
<IndexGO: x>
a
b
c
d
e
f
<<U1>
#end_IndexGO-append()

#start_IndexGO-astype()
>>> ix = sf.IndexGO((1024, 2048, 4096), name='y')
>>> ix
<IndexGO: y>
1024
2048
4096
<int64>
>>> ix.astype(float)
<IndexGO: y>
1024.0
2048.0
4096.0
<float64>
#end_IndexGO-astype()

#start_IndexGO-copy()
>>> ix = sf.IndexGO((1024, 2048, 4096), name='y')
>>> ix.copy()
<IndexGO: y>
1024
2048
4096
<int64>
#end_IndexGO-copy()

#start_IndexGO-cumprod()
>>> ix = sf.IndexGO((1024, 2048, 4096), name='y')
>>> ix.cumprod()
[      1024    2097152 8589934592]
#end_IndexGO-cumprod()

#start_IndexGO-cumsum()
>>> ix = sf.IndexGO((1024, 2048, 4096), name='y')
>>> ix.cumsum()
[1024 3072 7168]
#end_IndexGO-cumsum()

#start_IndexGO-difference()
>>> ix1 = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix2 = sf.IndexGO(('c', 'd', 'e', 'f'), name='y')
>>> ix1.difference(ix2)
<IndexGO>
a
b
<<U1>
#end_IndexGO-difference()

#start_IndexGO-dropfalsy()
>>> ix = sf.IndexGO(('', 'b', 'c', 'd'))
>>> ix
<IndexGO>

b
c
d
<<U1>
>>> ix.dropfalsy()
<IndexGO>
b
c
d
<<U1>
#end_IndexGO-dropfalsy()

#start_IndexGO-dropna()
>>> ix = sf.IndexGO((None, 'A', 1024, True), name='x')
>>> ix
<IndexGO: x>
None
A
1024
True
<object>
>>> ix.dropna()
<IndexGO: x>
A
1024
True
<object>
#end_IndexGO-dropna()

#start_IndexGO-equals()
>>> ix1 = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix2 = sf.IndexGO((1024, 2048, 4096), name='y')
>>> ix1.equals(ix2)
False
#end_IndexGO-equals()

#start_IndexGO-extend()
>>> ix1 = sf.IndexGO(('a', 'b', 'c'), name='x')
>>> ix2 = sf.IndexGO(('d', 'e', 'f'))
>>> ix1.extend(ix2)
>>> ix1
<IndexGO: x>
a
b
c
d
e
f
<<U1>
#end_IndexGO-extend()

#start_IndexGO-fillfalsy()
>>> ix = sf.IndexGO(('', 'b', 'c', 'd'))
>>> ix
<IndexGO>

b
c
d
<<U1>
>>> ix.fillfalsy('A')
<IndexGO>
A
b
c
d
<<U1>
#end_IndexGO-fillfalsy()

#start_IndexGO-fillna()
>>> ix = sf.IndexGO((None, 'A', 1024, True), name='x')
>>> ix
<IndexGO: x>
None
A
1024
True
<object>
>>> ix.fillna(0)
<IndexGO: x>
0
A
1024
True
<object>
#end_IndexGO-fillna()

#start_IndexGO-head()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix
<IndexGO: x>
a
b
c
d
e
<<U1>
>>> ix.head(2)
<IndexGO: x>
a
b
<<U1>
#end_IndexGO-head()

#start_IndexGO-iloc_searchsorted()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix
<IndexGO: x>
a
b
c
d
e
<<U1>
>>> ix.iloc_searchsorted('c')
2
#end_IndexGO-iloc_searchsorted()

#start_IndexGO-intersection()
>>> ix1 = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix2 = sf.IndexGO(('c', 'd', 'e', 'f'), name='y')
>>> ix1.intersection(ix2)
<IndexGO>
c
d
e
<<U1>
#end_IndexGO-intersection()

#start_IndexGO-isin()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.isin(('a', 'e'))
[ True False False False  True]
#end_IndexGO-isin()

#start_IndexGO-label_widths_at_depth()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix
<IndexGO: x>
a
b
c
d
e
<<U1>
>>> tuple(ix.label_widths_at_depth(0))
(('a', 1), ('b', 1), ('c', 1), ('d', 1), ('e', 1))
#end_IndexGO-label_widths_at_depth()

#start_IndexGO-level_add()
>>> ix = sf.IndexGO((1024, 2048, 4096), name='y')
>>> ix
<IndexGO: y>
1024
2048
4096
<int64>
>>> ix.level_add('A')
<IndexHierarchyGO: y>
A                     1024
A                     2048
A                     4096
<<U1>                 <int64>
#end_IndexGO-level_add()

#start_IndexGO-loc_searchsorted()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix
<IndexGO: x>
a
b
c
d
e
<<U1>
>>> ix.loc_searchsorted('c')
c
#end_IndexGO-loc_searchsorted()

#start_IndexGO-loc_to_iloc()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix
<IndexGO: x>
a
b
c
d
e
<<U1>
>>> ix.loc_to_iloc('d')
3
>>> ix.loc_to_iloc(['a', 'e'])
[0, 4]
>>> ix.loc_to_iloc(slice('c', None))
slice(2, None, None)
#end_IndexGO-loc_to_iloc()

#start_IndexGO-max()
>>> ix = sf.IndexGO((1024, 2048, 4096), name='y')
>>> ix.max()
4096
#end_IndexGO-max()

#start_IndexGO-mean()
>>> ix = sf.IndexGO((1024, 2048, 4096), name='y')
>>> ix.mean()
2389.3333333333335
#end_IndexGO-mean()

#start_IndexGO-median()
>>> ix = sf.IndexGO((1024, 2048, 4096), name='y')
>>> ix.median()
2048.0
#end_IndexGO-median()

#start_IndexGO-min()
>>> ix = sf.IndexGO((1024, 2048, 4096), name='y')
>>> ix.min()
1024
#end_IndexGO-min()

#start_IndexGO-prod()
>>> ix = sf.IndexGO((1024, 2048, 4096), name='y')
>>> ix.prod()
8589934592
#end_IndexGO-prod()

#start_IndexGO-relabel()
>>> ix = sf.IndexGO(('a', 'b', 'c'), name='x')
>>> ix
<IndexGO: x>
a
b
c
<<U1>
>>> ix.relabel(dict(a='x', c='y'))
<IndexGO: x>
x
b
y
<<U1>
>>> ix.relabel(lambda l: l.upper() if l != 'b' else l)
<IndexGO: x>
A
b
C
<<U1>
#end_IndexGO-relabel()

#start_IndexGO-rename()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.rename('y')
<IndexGO: y>
a
b
c
d
e
<<U1>
#end_IndexGO-rename()

#start_IndexGO-roll()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix
<IndexGO: x>
a
b
c
d
e
<<U1>
>>> ix.roll(2)
<IndexGO: x>
d
e
a
b
c
<<U1>
#end_IndexGO-roll()

#start_IndexGO-sample()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix
<IndexGO: x>
a
b
c
d
e
<<U1>
>>> ix.sample(2, seed=0)
<IndexGO: x>
a
c
<<U1>
#end_IndexGO-sample()

#start_IndexGO-sort()
>>> ix = sf.IndexGO(('b', 'e', 'c', 'a', 'd'), name='x')
>>> ix
<IndexGO: x>
b
e
c
a
d
<<U1>
>>> ix.sort()
<IndexGO: x>
a
b
c
d
e
<<U1>
>>> ix.sort(ascending=False)
<IndexGO: x>
e
d
c
b
a
<<U1>
#end_IndexGO-sort()

#start_IndexGO-std()
>>> ix = sf.IndexGO((1024, 2048, 4096), name='y')
>>> ix.std()
1277.1523880188386
#end_IndexGO-std()

#start_IndexGO-sum()
>>> ix = sf.IndexGO((1024, 2048, 4096), name='y')
>>> ix.sum()
7168
#end_IndexGO-sum()

#start_IndexGO-tail()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix
<IndexGO: x>
a
b
c
d
e
<<U1>
>>> ix.tail(2)
<IndexGO: x>
d
e
<<U1>
#end_IndexGO-tail()

#start_IndexGO-union()
>>> ix1 = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix2 = sf.IndexGO(('c', 'd', 'e', 'f'), name='y')
>>> ix1.union(ix2)
<IndexGO>
a
b
c
d
e
f
<<U1>
#end_IndexGO-union()

#start_IndexGO-unique()
>>> ix = sf.IndexGO((None, 'A', 1024, True), name='x')
>>> ix
<IndexGO: x>
None
A
1024
True
<object>
>>> ix.unique()
[None 'A' 1024 True]
#end_IndexGO-unique()

#start_IndexGO-values_at_depth()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.values_at_depth(0)
['a' 'b' 'c' 'd' 'e']
#end_IndexGO-values_at_depth()

#start_IndexGO-var()
>>> ix = sf.IndexGO((1024, 2048, 4096), name='y')
>>> ix.var()
1631118.222222222
#end_IndexGO-var()

#start_IndexGO-__contains__()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.__contains__('a')
True
#end_IndexGO-__contains__()

#start_IndexGO-__iter__()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> tuple(ix.__iter__())
('a', 'b', 'c', 'd', 'e')
#end_IndexGO-__iter__()

#start_IndexGO-__reversed__()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> tuple(ix.__reversed__())
('e', 'd', 'c', 'b', 'a')
#end_IndexGO-__reversed__()

#start_IndexGO-values
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.values
['a' 'b' 'c' 'd' 'e']
#end_IndexGO-values

#start_IndexGO-interface
>>> ix = sf.IndexGO((None, 'A', 1024, True), name='x')
>>> ix.interface
<Frame>
<Index>                              cls_name group                doc                  <<U18>
<Index: signature>
__init__(labels, *, loc_is_iloc, ... IndexGO  Constructor          Initializer. Args...
from_labels(labels, *, name)         IndexGO  Constructor          Construct an Inde...
from_pandas(value)                   IndexGO  Constructor          Given a Pandas in...
to_html(config, style_config)        IndexGO  Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexGO  Exporter             Return a complete...
to_pandas()                          IndexGO  Exporter             Return a Pandas I...
to_series()                          IndexGO  Exporter             Return a Series w...
to_visidata()                        IndexGO  Exporter             Open an interacti...
STATIC                               IndexGO  Attribute            bool(x) -> bool R...
depth                                IndexGO  Attribute            int([x]) -> integ...
dtype                                IndexGO  Attribute            Return the dtype ...
index_types                          IndexGO  Attribute            Return a Series o...
memory                               IndexGO  Attribute            Return a MemoryDi...
mloc                                 IndexGO  Attribute            The memory locati...
name                                 IndexGO  Attribute            A hashable label ...
names                                IndexGO  Attribute            Provide a suitabl...
nbytes                               IndexGO  Attribute            Return the total ...
...                                  ...      ...                  ...
via_str.rpartition(sep)              IndexGO  Accessor String      Partition (split)...
via_str.rsplit(sep, maxsplit)        IndexGO  Accessor String      For each element,...
via_str.rstrip(chars)                IndexGO  Accessor String      For each element,...
via_str.split(sep, maxsplit)         IndexGO  Accessor String      For each element,...
via_str.startswith(prefix, start,... IndexGO  Accessor String      Returns a contain...
via_str.strip(chars)                 IndexGO  Accessor String      For each element,...
via_str.swapcase()                   IndexGO  Accessor String      Return a containe...
via_str.title()                      IndexGO  Accessor String      Return a containe...
via_str.upper()                      IndexGO  Accessor String      Return a containe...
via_str.zfill(width)                 IndexGO  Accessor String      Return the string...
via_re(pattern, flags).search(pos... IndexGO  Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexGO  Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexGO  Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexGO  Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexGO  Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexGO  Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexGO  Accessor Regular ... Perform the same ...
<<U63>                               <<U7>    <<U27>               <<U83>
#end_IndexGO-interface

#start_IndexGO-__repr__()
>>> ix = sf.IndexGO((None, 'A', 1024, True), name='x')
>>> repr(ix)
<IndexGO: x>
None
A
1024
True
<object>
#end_IndexGO-__repr__()

#start_IndexGO-__str__()
>>> ix = sf.IndexGO((None, 'A', 1024, True), name='x')
>>> str(ix)
<IndexGO: x>
None
A
1024
True
<object>
#end_IndexGO-__str__()

#start_IndexGO-display()
>>> ix = sf.IndexGO((None, 'A', 1024, True), name='x')
>>> ix.display()
<IndexGO: x>
None
A
1024
True
<object>
>>> ix.display(sf.DisplayConfig(type_show=False))
None
A
1024
True
#end_IndexGO-display()

#start_IndexGO-display_tall()
>>> ix = sf.IndexGO((None, 'A', 1024, True), name='x')
>>> ix.display_tall()
<IndexGO: x>
None
A
1024
True
<object>
#end_IndexGO-display_tall()

#start_IndexGO-display_wide()
>>> ix = sf.IndexGO((None, 'A', 1024, True), name='x')
>>> ix.display_wide()
<IndexGO: x>
None
A
1024
True
<object>
#end_IndexGO-display_wide()

#start_IndexGO-drop.iloc[]
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.drop.iloc[2]
<IndexGO: x>
a
b
d
e
<<U1>
>>> ix.drop.iloc[2:]
<IndexGO: x>
a
b
<<U1>
>>> ix.drop.iloc[[0, 3]]
<IndexGO: x>
b
c
e
<<U1>
#end_IndexGO-drop.iloc[]

#start_IndexGO-drop.loc[]
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.drop.loc['c']
<IndexGO: x>
a
b
d
e
<<U1>
>>> ix.drop.loc['c':]
<IndexGO: x>
a
b
<<U1>
>>> ix.drop.loc[['a', 'd']]
<IndexGO: x>
b
c
e
<<U1>
#end_IndexGO-drop.loc[]

#start_IndexGO-[]
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix[2]
c
>>> ix[2:]
<IndexGO: x>
c
d
e
<<U1>
>>> ix[[0, 3]]
<IndexGO: x>
a
d
<<U1>
#end_IndexGO-[]

#start_IndexGO-iloc[]
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.iloc[2]
c
>>> ix.iloc[2:]
<IndexGO: x>
c
d
e
<<U1>
>>> ix.iloc[[0, 3]]
<IndexGO: x>
a
d
<<U1>
#end_IndexGO-iloc[]

#start_IndexGO-loc[]
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.loc['c']
c
>>> ix.loc['c':]
<IndexGO: x>
c
d
e
<<U1>
>>> ix.loc[['a', 'e']]
<IndexGO: x>
a
e
<<U1>
#end_IndexGO-loc[]

#start_IndexGO-iter_label()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> tuple(ix.iter_label())
('a', 'b', 'c', 'd', 'e')
#end_IndexGO-iter_label()

#start_IndexGO-iter_label().apply()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.iter_label().apply(lambda l: l if l == 'b' else l.upper())
['A' 'b' 'C' 'D' 'E']
#end_IndexGO-iter_label().apply()

#start_IndexGO-iter_label().apply_iter()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> tuple(ix.iter_label().apply_iter(lambda l: l if l == 'b' else l.upper()))
('A', 'b', 'C', 'D', 'E')
#end_IndexGO-iter_label().apply_iter()

#start_IndexGO-iter_label().apply_iter_items()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> tuple(ix.iter_label().apply_iter_items(lambda l: l if l == 'b' else l.upper()))
((0, 'A'), (1, 'b'), (2, 'C'), (3, 'D'), (4, 'E'))
#end_IndexGO-iter_label().apply_iter_items()

#start_IndexGO-iter_label().apply_pool()
>>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')
>>> ix.iter_label().apply_pool(lambda l: l if l == 'b' else l.upper(), use_threads=True)
['A' 'b' 'C' 'D' 'E']
#end_IndexGO-iter_label().apply_pool()

#start_IndexGO-__add__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> ix + 8
[    8  1032 -2040  4104]
#end_IndexGO-__add__()

#start_IndexGO-__and__()
>>> ix = sf.IndexGO((False, True), name='x')
>>> ix & True
[False  True]
>>> ix & (False, True)
[False  True]
#end_IndexGO-__and__()

#start_IndexGO-__eq__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> ix == 8
[False False False False]
#end_IndexGO-__eq__()

#start_IndexGO-__floordiv__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> ix // 8
[   0  128 -256  512]
#end_IndexGO-__floordiv__()

#start_IndexGO-__ge__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> ix >= 8
[False  True False  True]
#end_IndexGO-__ge__()

#start_IndexGO-__gt__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> ix > 8
[False  True False  True]
#end_IndexGO-__gt__()

#start_IndexGO-__le__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> ix <= 8
[ True False  True False]
#end_IndexGO-__le__()

#start_IndexGO-__lt__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> ix < 8
[ True False  True False]
#end_IndexGO-__lt__()

#start_IndexGO-__matmul__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> ix @ (3, 0, 4, 0)
-8192
#end_IndexGO-__matmul__()

#start_IndexGO-__mod__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> ix % 8
[0 0 0 0]
#end_IndexGO-__mod__()

#start_IndexGO-__mul__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> ix * 8
[     0   8192 -16384  32768]
#end_IndexGO-__mul__()

#start_IndexGO-__ne__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> ix != 8
[ True  True  True  True]
#end_IndexGO-__ne__()

#start_IndexGO-__or__()
>>> ix = sf.IndexGO((False, True), name='x')
>>> ix | True
[ True  True]
>>> ix | (False, True)
[False  True]
#end_IndexGO-__or__()

#start_IndexGO-__pow__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> ix ** 8
[0 0 0 0]
#end_IndexGO-__pow__()

#start_IndexGO-__radd__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> 8 + ix
[    8  1032 -2040  4104]
#end_IndexGO-__radd__()

#start_IndexGO-__rfloordiv__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> 8 // ix
[ 0  0 -1  0]
#end_IndexGO-__rfloordiv__()

#start_IndexGO-__rmatmul__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> ix @ (3, 0, 4, 0)
-8192
#end_IndexGO-__rmatmul__()

#start_IndexGO-__rmul__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> 8 * ix
[     0   8192 -16384  32768]
#end_IndexGO-__rmul__()

#start_IndexGO-__rshift__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> ix >> 1
[    0   512 -1024  2048]
#end_IndexGO-__rshift__()

#start_IndexGO-__rsub__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> 8 - ix
[    8 -1016  2056 -4088]
#end_IndexGO-__rsub__()

#start_IndexGO-__rtruediv__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> 8 / ix
[        inf  0.0078125  -0.00390625  0.00195312]
#end_IndexGO-__rtruediv__()

#start_IndexGO-__sub__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> ix - 8
[   -8  1016 -2056  4088]
#end_IndexGO-__sub__()

#start_IndexGO-__truediv__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> ix / 8
[   0.  128. -256.  512.]
#end_IndexGO-__truediv__()

#start_IndexGO-__xor__()
>>> ix = sf.IndexGO((False, True), name='x')
>>> ix ^ True
[ True False]
>>> ix ^ (False, True)
[False False]
#end_IndexGO-__xor__()

#start_IndexGO-__abs__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> abs(ix)
[   0 1024 2048 4096]
#end_IndexGO-__abs__()

#start_IndexGO-__invert__()
>>> ix = sf.IndexGO((False, True), name='x')
>>> ~ix
[ True False]
#end_IndexGO-__invert__()

#start_IndexGO-__neg__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> -ix
[    0 -1024  2048 -4096]
#end_IndexGO-__neg__()

#start_IndexGO-__pos__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> +ix
[    0  1024 -2048  4096]
#end_IndexGO-__pos__()

#start_IndexGO-via_dt.year
>>> import datetime
>>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.year
[1517 1517]
#end_IndexGO-via_dt.year

#start_IndexGO-via_dt.month
>>> import datetime
>>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.month
[1 4]
#end_IndexGO-via_dt.month

#start_IndexGO-via_dt.day
>>> import datetime
>>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.day
[1 1]
#end_IndexGO-via_dt.day

#start_IndexGO-via_dt.hour
>>> import datetime
>>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.hour
[0 8]
#end_IndexGO-via_dt.hour

#start_IndexGO-via_dt.minute
>>> import datetime
>>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.minute
[ 0 30]
#end_IndexGO-via_dt.minute

#start_IndexGO-via_dt.second
>>> import datetime
>>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.second
[ 0 59]
#end_IndexGO-via_dt.second

#start_IndexGO-via_dt.weekday()
>>> import datetime
>>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.weekday()
[0 6]
#end_IndexGO-via_dt.weekday()

#start_IndexGO-via_dt.quarter()
>>> import datetime
>>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.quarter()
[1 2]
#end_IndexGO-via_dt.quarter()

#start_IndexGO-via_dt.is_month_end()
>>> import datetime
>>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.is_month_end()
[False False]
#end_IndexGO-via_dt.is_month_end()

#start_IndexGO-via_dt.is_month_start()
>>> import datetime
>>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.is_month_start()
[ True  True]
#end_IndexGO-via_dt.is_month_start()

#start_IndexGO-via_dt.is_year_end()
>>> import datetime
>>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.is_year_end()
[False False]
#end_IndexGO-via_dt.is_year_end()

#start_IndexGO-via_dt.is_year_start()
>>> import datetime
>>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.is_year_start()
[ True False]
#end_IndexGO-via_dt.is_year_start()

#start_IndexGO-via_dt.is_quarter_end()
>>> import datetime
>>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.is_quarter_end()
[False False]
#end_IndexGO-via_dt.is_quarter_end()

#start_IndexGO-via_dt.is_quarter_start()
>>> import datetime
>>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.is_quarter_start()
[ True  True]
#end_IndexGO-via_dt.is_quarter_start()

#start_IndexGO-via_dt.timetuple()
>>> import datetime
>>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.timetuple()
[time.struct_time(tm_year=1517, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=1, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=8, tm_min=30, tm_sec=59, tm_wday=6, tm_yday=91, tm_isdst=-1)]
#end_IndexGO-via_dt.timetuple()

#start_IndexGO-via_dt.isoformat()
>>> import datetime
>>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.isoformat()
['1517-01-01T00:00:00' '1517-04-01T08:30:59']
#end_IndexGO-via_dt.isoformat()

#start_IndexGO-via_dt.fromisoformat()
>>> ix = sf.IndexGO(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'))
>>> ix.via_dt.fromisoformat()
[datetime.date(1517, 1, 1) datetime.date(1517, 4, 1)
 datetime.date(1517, 12, 31) datetime.date(1517, 6, 30)
 datetime.date(1517, 10, 1)]
#end_IndexGO-via_dt.fromisoformat()

#start_IndexGO-via_dt.strftime()
>>> import datetime
>>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))
>>> ix.via_dt.strftime("%A | %B")
['Monday | January' 'Sunday | April']
#end_IndexGO-via_dt.strftime()

#start_IndexGO-via_dt.strptime()
>>> ix = sf.IndexGO(('1/1/1517', '4/1/1517', '6/30/1517'))
>>> ix.via_dt.strptime("%m/%d/%Y")
[datetime.datetime(1517, 1, 1, 0, 0) datetime.datetime(1517, 4, 1, 0, 0)
 datetime.datetime(1517, 6, 30, 0, 0)]
#end_IndexGO-via_dt.strptime()

#start_IndexGO-via_dt.strpdate()
>>> ix = sf.IndexGO(('1/1/1517', '4/1/1517', '6/30/1517'))
>>> ix.via_dt.strpdate("%m/%d/%Y")
[datetime.date(1517, 1, 1) datetime.date(1517, 4, 1)
 datetime.date(1517, 6, 30)]
#end_IndexGO-via_dt.strpdate()

#start_IndexGO-via_str.__getitem__()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str[-1]
[' ' 'Z' '3' ' ']
#end_IndexGO-via_str.__getitem__()

#start_IndexGO-via_str.capitalize()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.capitalize()
['Qrs ' 'Xyz' '123' ' wx ']
#end_IndexGO-via_str.capitalize()

#start_IndexGO-via_str.center()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.center(8)
['  qrs   ' '  XYZ   ' '  123   ' '   wX   ']
#end_IndexGO-via_str.center()

#start_IndexGO-via_str.contains()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.contains('X')
[False  True False  True]
#end_IndexGO-via_str.contains()

#start_IndexGO-via_str.count()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.count('X')
[0 1 0 1]
#end_IndexGO-via_str.count()

#start_IndexGO-via_str.decode()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX ')).astype(bytes)
>>> ix
<IndexGO>
b'qrs '
b'XYZ'
b'123'
b' wX '
<|S4>
>>> ix.via_str.decode()
['qrs ' 'XYZ' '123' ' wX ']
#end_IndexGO-via_str.decode()

#start_IndexGO-via_str.encode()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.encode()
[b'qrs ' b'XYZ' b'123' b' wX ']
#end_IndexGO-via_str.encode()

#start_IndexGO-via_str.endswith()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.endswith(' ')
[ True False False  True]
#end_IndexGO-via_str.endswith()

#start_IndexGO-via_str.find()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.find('X')
[-1  0 -1  2]
#end_IndexGO-via_str.find()

#start_IndexGO-via_str.format()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.format('{:-^10}')
['---qrs ---' '---XYZ----' '---123----' '--- wX ---']
#end_IndexGO-via_str.format()

#start_IndexGO-via_str.index()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.index('X')
ValueError('substring not found')
#end_IndexGO-via_str.index()

#start_IndexGO-via_str.isalnum()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.isalnum()
[False  True  True False]
#end_IndexGO-via_str.isalnum()

#start_IndexGO-via_str.isalpha()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.isalpha()
[False  True False False]
#end_IndexGO-via_str.isalpha()

#start_IndexGO-via_str.isdecimal()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.isdecimal()
[False False  True False]
#end_IndexGO-via_str.isdecimal()

#start_IndexGO-via_str.isdigit()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.isdigit()
[False False  True False]
#end_IndexGO-via_str.isdigit()

#start_IndexGO-via_str.islower()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.islower()
[ True False False False]
#end_IndexGO-via_str.islower()

#start_IndexGO-via_str.isnumeric()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.isnumeric()
[False False  True False]
#end_IndexGO-via_str.isnumeric()

#start_IndexGO-via_str.isspace()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.isspace()
[False False False False]
#end_IndexGO-via_str.isspace()

#start_IndexGO-via_str.istitle()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.istitle()
[False False False False]
#end_IndexGO-via_str.istitle()

#start_IndexGO-via_str.isupper()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.isupper()
[False  True False False]
#end_IndexGO-via_str.isupper()

#start_IndexGO-via_str.ljust()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.ljust(8)
['qrs     ' 'XYZ     ' '123     ' ' wX     ']
#end_IndexGO-via_str.ljust()

#start_IndexGO-via_str.len()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.len()
[4 3 3 4]
#end_IndexGO-via_str.len()

#start_IndexGO-via_str.lower()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.lower()
['qrs ' 'xyz' '123' ' wx ']
#end_IndexGO-via_str.lower()

#start_IndexGO-via_str.lstrip()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.lstrip()
['qrs ' 'XYZ' '123' 'wX ']
#end_IndexGO-via_str.lstrip()

#start_IndexGO-via_str.partition()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.partition('X')
[('qrs ', '', '') ('', 'X', 'YZ') ('123', '', '') (' w', 'X', ' ')]
#end_IndexGO-via_str.partition()

#start_IndexGO-via_str.replace()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.replace('X', '*')
['qrs ' '*YZ' '123' ' w* ']
#end_IndexGO-via_str.replace()

#start_IndexGO-via_str.rfind()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.rfind('X')
[-1  0 -1  2]
#end_IndexGO-via_str.rfind()

#start_IndexGO-via_str.rindex()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.rindex('X')
ValueError('substring not found')
#end_IndexGO-via_str.rindex()

#start_IndexGO-via_str.rjust()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.rjust(8)
['    qrs ' '     XYZ' '     123' '     wX ']
#end_IndexGO-via_str.rjust()

#start_IndexGO-via_str.rpartition()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.rpartition('X')
[('', '', 'qrs ') ('', 'X', 'YZ') ('', '', '123') (' w', 'X', ' ')]
#end_IndexGO-via_str.rpartition()

#start_IndexGO-via_str.rsplit()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.rsplit('X')
[('qrs ',) ('', 'YZ') ('123',) (' w', ' ')]
#end_IndexGO-via_str.rsplit()

#start_IndexGO-via_str.rstrip()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.rstrip()
['qrs' 'XYZ' '123' ' wX']
#end_IndexGO-via_str.rstrip()

#start_IndexGO-via_str.split()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.split('X')
[('qrs ',) ('', 'YZ') ('123',) (' w', ' ')]
#end_IndexGO-via_str.split()

#start_IndexGO-via_str.startswith()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.startswith('X')
[False  True False False]
#end_IndexGO-via_str.startswith()

#start_IndexGO-via_str.strip()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.strip()
['qrs' 'XYZ' '123' 'wX']
#end_IndexGO-via_str.strip()

#start_IndexGO-via_str.swapcase()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.swapcase()
['QRS ' 'xyz' '123' ' Wx ']
#end_IndexGO-via_str.swapcase()

#start_IndexGO-via_str.title()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.title()
['Qrs ' 'Xyz' '123' ' Wx ']
#end_IndexGO-via_str.title()

#start_IndexGO-via_str.upper()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.upper()
['QRS ' 'XYZ' '123' ' WX ']
#end_IndexGO-via_str.upper()

#start_IndexGO-via_str.zfill()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_str.zfill(8)
['0000qrs ' '00000XYZ' '00000123' '0000 wX ']
#end_IndexGO-via_str.zfill()

#start_IndexGO-via_re().search()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_re('[X123]').search()
[False  True  True  True]
#end_IndexGO-via_re().search()

#start_IndexGO-via_re().match()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_re('[X123]').match()
[False  True  True False]
#end_IndexGO-via_re().match()

#start_IndexGO-via_re().fullmatch()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_re('123').fullmatch()
[False False  True False]
#end_IndexGO-via_re().fullmatch()

#start_IndexGO-via_re().split()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_re('[X123]').split()
[('qrs ',) ('', 'YZ') ('', '', '', '') (' w', ' ')]
#end_IndexGO-via_re().split()

#start_IndexGO-via_re().findall()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_re('[X123]').findall()
[() ('X',) ('1', '2', '3') ('X',)]
#end_IndexGO-via_re().findall()

#start_IndexGO-via_re().sub()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_re('[X123]').sub('==')
['qrs ' '==YZ' '======' ' w== ']
#end_IndexGO-via_re().sub()

#start_IndexGO-via_re().subn()
>>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))
>>> ix
<IndexGO>
qrs
XYZ
123
 wX
<<U4>
>>> ix.via_re('[X123]').subn('==', 1)
[('qrs ', 0) ('==YZ', 1) ('==23', 1) (' w== ', 1)]
#end_IndexGO-via_re().subn()

#start_IndexGO-via_values.apply()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> ix.via_values.apply(np.sin)
<IndexGO>
0.0
-0.15853338004399595
0.31305701279012343
-0.5946419876082146
<float64>
#end_IndexGO-via_values.apply()

#start_IndexGO-via_values.__array_ufunc__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> np.sin(ix.via_values)
<IndexGO>
0.0
-0.15853338004399595
0.31305701279012343
-0.5946419876082146
<float64>
#end_IndexGO-via_values.__array_ufunc__()

#start_IndexGO-via_values.__call__()
>>> ix = sf.IndexGO((0, 1024, -2048, 4096))
>>> np.sin(ix.via_values(unify_blocks=True))
<IndexGO>
0.0
-0.15853338004399595
0.31305701279012343
-0.5946419876082146
<float64>
#end_IndexGO-via_values.__call__()

#start_IndexYear-__init__()
>>> sf.IndexYear(('1517', '1520', '1518'))
<IndexYear>
1517
1520
1518
<datetime64[Y]>
#end_IndexYear-__init__()

#start_IndexYear-from_date_range()
>>> sf.IndexYear.from_date_range('2021-12-30', '2022-01-02')
<IndexYear>
2021
2022
<datetime64[Y]>
#end_IndexYear-from_date_range()

#start_IndexYear-from_labels()
>>> sf.IndexYear.from_labels(('1517', '1520', '1518'))
<IndexYear>
1517
1520
1518
<datetime64[Y]>
#end_IndexYear-from_labels()

#start_IndexYear-from_pandas()
>>> ix = pd.Index(('1517', '1520', '1518'))
>>> sf.IndexYear.from_pandas(ix)
<Index>
1517
1520
1518
<object>
#end_IndexYear-from_pandas()

#start_IndexYear-from_year_month_range()
>>> sf.IndexYear.from_year_month_range('2021-12', '2022-01')
<IndexYear>
2021
2022
<datetime64[Y]>
#end_IndexYear-from_year_month_range()

#start_IndexYear-from_year_range()
>>> sf.IndexYear.from_year_range('2021', '2022')
<IndexYear>
2021
2022
<datetime64[Y]>
#end_IndexYear-from_year_range()

#start_IndexYear-to_pandas()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.to_pandas()
NotImplementedError('Pandas does not support a year type, and it is ambiguous if a date proxy should be the first of the year or the last of the year.')
#end_IndexYear-to_pandas()

#start_IndexYear-to_series()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.to_series()
<Series>
<Index>
0        1517
1        1520
2        1518
<int64>  <datetime64[Y]>
#end_IndexYear-to_series()

#start_IndexYear-STATIC
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.STATIC
True
#end_IndexYear-STATIC

#start_IndexYear-depth
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.depth
1
#end_IndexYear-depth

#start_IndexYear-dtype
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.dtype
datetime64[Y]
#end_IndexYear-dtype

#start_IndexYear-index_types
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.index_types
<Series>
<Index>
None     <IndexYear>
<object> <object>
#end_IndexYear-index_types

#start_IndexYear-memory
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.memory
          L   Lu    LM  LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu
Name      16  B     16  B     16  B     16   B     16  B     16  B
Map       440 B     440 B     440 B     440  B     440 B     440 B
Labels    120 B     136 B     24  B     120  B     136 B     24  B
Positions 96  B     112 B     0   B     8.19 KB    136 B     24  B
Total     768 B     800 B     576 B     8.84 KB    824 B     600 B
#end_IndexYear-memory

#start_IndexYear-name
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.name
#end_IndexYear-name

#start_IndexYear-names
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.names
('__index0__',)
#end_IndexYear-names

#start_IndexYear-nbytes
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.nbytes
24
#end_IndexYear-nbytes

#start_IndexYear-ndim
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.ndim
1
#end_IndexYear-ndim

#start_IndexYear-positions
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.positions
[0 1 2]
#end_IndexYear-positions

#start_IndexYear-shape
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.shape
(3,)
#end_IndexYear-shape

#start_IndexYear-size
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.size
3
#end_IndexYear-size

#start_IndexYear-__array__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.__array__()
['1517' '1520' '1518']
#end_IndexYear-__array__()

#start_IndexYear-__array_ufunc__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> np.array((0, 1, 0)) * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[Y]')))
#end_IndexYear-__array_ufunc__()

#start_IndexYear-__bool__()
>>> s = sf.IndexYear(('1517', '1520', '1518'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexYear-__bool__()

#start_IndexYear-__copy__()
>>> import copy
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> copy.copy(ix)
<IndexYear>
1517
1520
1518
<datetime64[Y]>
#end_IndexYear-__copy__()

#start_IndexYear-__deepcopy__()
>>> import copy
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> copy.deepcopy(ix)
<IndexYear>
1517
1520
1518
<datetime64[Y]>
#end_IndexYear-__deepcopy__()

#start_IndexYear-__len__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> len(ix)
3
#end_IndexYear-__len__()

#start_IndexYear-all()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.all()
True
#end_IndexYear-all()

#start_IndexYear-any()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.any()
True
#end_IndexYear-any()

#start_IndexYear-astype()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.astype(str)
<Index>
1517
1520
1518
<<U22>
#end_IndexYear-astype()

#start_IndexYear-copy()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.copy()
<IndexYear>
1517
1520
1518
<datetime64[Y]>
#end_IndexYear-copy()

#start_IndexYear-cumprod()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.cumprod()
ValueError("could not find a matching type for multiply.accumulate, requested type has type code 'M'")
#end_IndexYear-cumprod()

#start_IndexYear-cumsum()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.cumsum()
ValueError("could not find a matching type for add.accumulate, requested type has type code 'M'")
#end_IndexYear-cumsum()

#start_IndexYear-difference()
>>> ix1 = sf.IndexYear(('1517', '1520', '1518'))
>>> ix2 = sf.IndexYear(('2022', '2021', '2018'))
>>> ix1.difference(ix2)
<IndexYear>
1517
1520
1518
<datetime64[Y]>
#end_IndexYear-difference()

#start_IndexYear-dropfalsy()
>>> ix = sf.IndexYear(('1620', 'NaT', '1619'))
>>> ix
<IndexYear>
1620
NaT
1619
<datetime64[Y]>
>>> ix.dropfalsy()
<IndexYear>
1620
1619
<datetime64[Y]>
#end_IndexYear-dropfalsy()

#start_IndexYear-dropna()
>>> ix = sf.IndexYear(('1620', 'NaT', '1619'))
>>> ix
<IndexYear>
1620
NaT
1619
<datetime64[Y]>
>>> ix.dropna()
<IndexYear>
1620
1619
<datetime64[Y]>
#end_IndexYear-dropna()

#start_IndexYear-equals()
>>> ix1 = sf.IndexYear(('1517', '1520', '1518'))
>>> ix2 = sf.IndexYear(('2022', '2021', '2018'))
>>> ix1.equals(ix2)
False
#end_IndexYear-equals()

#start_IndexYear-fillfalsy()
>>> ix = sf.IndexYear(('1620', 'NaT', '1619'))
>>> ix
<IndexYear>
1620
NaT
1619
<datetime64[Y]>
>>> ix.fillfalsy('A')
ValueError('Error parsing datetime string "A" at position 0')
#end_IndexYear-fillfalsy()

#start_IndexYear-fillna()
>>> ix = sf.IndexYear(('1620', 'NaT', '1619'))
>>> ix
<IndexYear>
1620
NaT
1619
<datetime64[Y]>
>>> ix.fillna(0)
<IndexYear>
1620
1970
1619
<datetime64[Y]>
#end_IndexYear-fillna()

#start_IndexYear-head()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.head(2)
<IndexYear>
1517
1520
<datetime64[Y]>
#end_IndexYear-head()

#start_IndexYear-iloc_searchsorted()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.iloc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexYear-iloc_searchsorted()

#start_IndexYear-intersection()
>>> ix1 = sf.IndexYear(('1517', '1520', '1518'))
>>> ix2 = sf.IndexYear(('2022', '2021', '2018'))
>>> ix1.intersection(ix2)
<IndexYear>
<datetime64[Y]>
#end_IndexYear-intersection()

#start_IndexYear-isin()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.isin(('1518',))
[False False False]
#end_IndexYear-isin()

#start_IndexYear-label_widths_at_depth()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> tuple(ix.label_widths_at_depth(0))
((numpy.datetime64('1517'), 1), (numpy.datetime64('1520'), 1), (numpy.datetime64('1518'), 1))
#end_IndexYear-label_widths_at_depth()

#start_IndexYear-level_add()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.level_add('A')
<IndexHierarchy>
A                1517
A                1520
A                1518
<<U1>            <datetime64[Y]>
#end_IndexYear-level_add()

#start_IndexYear-loc_searchsorted()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.loc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexYear-loc_searchsorted()

#start_IndexYear-loc_to_iloc()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.loc_to_iloc('d')
ValueError('Error parsing datetime string "d" at position 0')
>>> ix.loc_to_iloc(['a', 'e'])
ValueError('Cannot create a NumPy datetime other than NaT with generic units')
>>> ix.loc_to_iloc(slice('c', None))
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexYear-loc_to_iloc()

#start_IndexYear-max()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.max()
1520
#end_IndexYear-max()

#start_IndexYear-mean()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.mean()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYear-mean()

#start_IndexYear-median()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.median()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYear-median()

#start_IndexYear-min()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.min()
1517
#end_IndexYear-min()

#start_IndexYear-prod()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.prod()
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYear-prod()

#start_IndexYear-relabel()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)
ErrorInitIndexNonUnique('Labels have non-unique values. Details from iterators not available.')
#end_IndexYear-relabel()

#start_IndexYear-rename()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.rename('y')
<IndexYear: y>
1517
1520
1518
<datetime64[Y]>
#end_IndexYear-rename()

#start_IndexYear-roll()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.roll(2)
<IndexYear>
1520
1518
1517
<datetime64[Y]>
#end_IndexYear-roll()

#start_IndexYear-sample()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.sample(2, seed=0)
<IndexYear>
1520
1518
<datetime64[Y]>
#end_IndexYear-sample()

#start_IndexYear-sort()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.sort()
<IndexYear>
1517
1518
1520
<datetime64[Y]>
>>> ix.sort(ascending=False)
<IndexYear>
1520
1518
1517
<datetime64[Y]>
#end_IndexYear-sort()

#start_IndexYear-std()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.std()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYear-std()

#start_IndexYear-sum()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.sum()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYear-sum()

#start_IndexYear-tail()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.tail(2)
<IndexYear>
1520
1518
<datetime64[Y]>
#end_IndexYear-tail()

#start_IndexYear-union()
>>> ix1 = sf.IndexYear(('1517', '1520', '1518'))
>>> ix2 = sf.IndexYear(('2022', '2021', '2018'))
>>> ix1.union(ix2)
<IndexYear>
1517
1518
1520
2018
2021
2022
<datetime64[Y]>
#end_IndexYear-union()

#start_IndexYear-unique()
>>> ix = sf.IndexYear(('1620', 'NaT', '1619'))
>>> ix
<IndexYear>
1620
NaT
1619
<datetime64[Y]>
>>> ix.unique()
['1620'  'NaT' '1619']
#end_IndexYear-unique()

#start_IndexYear-values_at_depth()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.values_at_depth(0)
['1517' '1520' '1518']
#end_IndexYear-values_at_depth()

#start_IndexYear-var()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.var()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYear-var()

#start_IndexYear-__contains__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.__contains__('a')
ValueError('Error parsing datetime string "a" at position 0')
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.__contains__('1518')
True
#end_IndexYear-__contains__()

#start_IndexYear-__iter__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517'), numpy.datetime64('1520'), numpy.datetime64('1518'))
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517'), numpy.datetime64('1520'), numpy.datetime64('1518'))
#end_IndexYear-__iter__()

#start_IndexYear-__reversed__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1518'), numpy.datetime64('1520'), numpy.datetime64('1517'))
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1518'), numpy.datetime64('1520'), numpy.datetime64('1517'))
#end_IndexYear-__reversed__()

#start_IndexYear-values
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.values
['1517' '1520' '1518']
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.values
['1517' '1520' '1518']
#end_IndexYear-values

#start_IndexYear-interface
>>> ix = sf.IndexYear(('1620', 'NaT', '1619'))
>>> ix.interface
<Frame>
<Index>                              cls_name  group                doc                  <<U18>
<Index: signature>
__init__(labels, *, name, loc_is_... IndexYear Constructor          Initializer. Args...
from_date_range(start, stop, step... IndexYear Constructor          Get an IndexYearM...
from_labels(labels, *, name)         IndexYear Constructor          Construct an Inde...
from_pandas(value)                   IndexYear Constructor          Given a Pandas in...
from_year_month_range(start, stop... IndexYear Constructor          Get an IndexYearM...
from_year_range(start, stop, step... IndexYear Constructor          Get an IndexDate ...
to_html(config, style_config)        IndexYear Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexYear Exporter             Return a complete...
to_pandas()                          IndexYear Exporter             Return a Pandas I...
to_series()                          IndexYear Exporter             Return a Series w...
to_visidata()                        IndexYear Exporter             Open an interacti...
STATIC                               IndexYear Attribute            bool(x) -> bool R...
depth                                IndexYear Attribute            int([x]) -> integ...
dtype                                IndexYear Attribute            Return the dtype ...
index_types                          IndexYear Attribute            Return a Series o...
memory                               IndexYear Attribute            Return a MemoryDi...
mloc                                 IndexYear Attribute            The memory locati...
...                                  ...       ...                  ...
via_str.rpartition(sep)              IndexYear Accessor String      Partition (split)...
via_str.rsplit(sep, maxsplit)        IndexYear Accessor String      For each element,...
via_str.rstrip(chars)                IndexYear Accessor String      For each element,...
via_str.split(sep, maxsplit)         IndexYear Accessor String      For each element,...
via_str.startswith(prefix, start,... IndexYear Accessor String      Returns a contain...
via_str.strip(chars)                 IndexYear Accessor String      For each element,...
via_str.swapcase()                   IndexYear Accessor String      Return a containe...
via_str.title()                      IndexYear Accessor String      Return a containe...
via_str.upper()                      IndexYear Accessor String      Return a containe...
via_str.zfill(width)                 IndexYear Accessor String      Return the string...
via_re(pattern, flags).search(pos... IndexYear Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexYear Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexYear Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexYear Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexYear Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexYear Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexYear Accessor Regular ... Perform the same ...
<<U63>                               <<U9>     <<U27>               <<U83>
#end_IndexYear-interface

#start_IndexYear-__repr__()
>>> ix = sf.IndexYear(('1620', 'NaT', '1619'))
>>> repr(ix)
<IndexYear>
1620
NaT
1619
<datetime64[Y]>
#end_IndexYear-__repr__()

#start_IndexYear-__str__()
>>> ix = sf.IndexYear(('1620', 'NaT', '1619'))
>>> str(ix)
<IndexYear>
1620
NaT
1619
<datetime64[Y]>
#end_IndexYear-__str__()

#start_IndexYear-display()
>>> ix = sf.IndexYear(('1620', 'NaT', '1619'))
>>> ix.display()
<IndexYear>
1620
NaT
1619
<datetime64[Y]>
>>> ix.display(sf.DisplayConfig(type_show=False))
1620
NaT
1619
#end_IndexYear-display()

#start_IndexYear-display_tall()
>>> ix = sf.IndexYear(('1620', 'NaT', '1619'))
>>> ix.display_tall()
<IndexYear>
1620
NaT
1619
<datetime64[Y]>
#end_IndexYear-display_tall()

#start_IndexYear-display_wide()
>>> ix = sf.IndexYear(('1620', 'NaT', '1619'))
>>> ix.display_wide()
<IndexYear>
1620
NaT
1619
<datetime64[Y]>
#end_IndexYear-display_wide()

#start_IndexYear-drop.iloc[]
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.drop.iloc[1]
<IndexYear>
1517
1518
<datetime64[Y]>
>>> ix.drop.iloc[1:]
<IndexYear>
1517
<datetime64[Y]>
>>> ix.drop.iloc[[0, 2]]
<IndexYear>
1520
<datetime64[Y]>
#end_IndexYear-drop.iloc[]

#start_IndexYear-drop.loc[]
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.drop.loc['1518']
<IndexYear>
1517
1520
<datetime64[Y]>
>>> ix.drop.loc['1518':]
<IndexYear>
1517
1520
<datetime64[Y]>
#end_IndexYear-drop.loc[]

#start_IndexYear-[]
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix[1]
1520
>>> ix[1:]
<IndexYear>
1520
1518
<datetime64[Y]>
>>> ix[[0, 2]]
<IndexYear>
1517
1518
<datetime64[Y]>
#end_IndexYear-[]

#start_IndexYear-iloc[]
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.iloc[1]
1520
>>> ix.iloc[1:]
<IndexYear>
1520
1518
<datetime64[Y]>
>>> ix.iloc[[0, 2]]
<IndexYear>
1517
1518
<datetime64[Y]>
#end_IndexYear-iloc[]

#start_IndexYear-loc[]
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.loc['1518']
1518
>>> ix.loc['1518':]
<IndexYear>
1518
<datetime64[Y]>
#end_IndexYear-loc[]

#start_IndexYear-iter_label()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> tuple(ix.iter_label())
(numpy.datetime64('1517'), numpy.datetime64('1520'), numpy.datetime64('1518'))
#end_IndexYear-iter_label()

#start_IndexYear-iter_label().apply()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)
[1517 1520 1518]
#end_IndexYear-iter_label().apply()

#start_IndexYear-iter_label().apply_iter()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))
(datetime.datetime(1517, 1, 1, 0, 0), datetime.datetime(1520, 1, 1, 0, 0), datetime.datetime(1518, 1, 1, 0, 0))
#end_IndexYear-iter_label().apply_iter()

#start_IndexYear-iter_label().apply_iter_items()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))
((0, datetime.datetime(1517, 1, 1, 0, 0)), (1, datetime.datetime(1520, 1, 1, 0, 0)), (2, datetime.datetime(1518, 1, 1, 0, 0)))
#end_IndexYear-iter_label().apply_iter_items()

#start_IndexYear-iter_label().apply_pool()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)
[1 1 1]
#end_IndexYear-iter_label().apply_pool()

#start_IndexYear-__add__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix + 2
['1519' '1522' '1520']
#end_IndexYear-__add__()

#start_IndexYear-__and__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix & True
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix & (False, True)
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYear-__and__()

#start_IndexYear-__eq__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix == '1518'
[False False  True]
#end_IndexYear-__eq__()

#start_IndexYear-__floordiv__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix // '1518'
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYear-__floordiv__()

#start_IndexYear-__ge__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix >= '1518'
[False  True  True]
#end_IndexYear-__ge__()

#start_IndexYear-__gt__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix > '1518'
[False  True False]
#end_IndexYear-__gt__()

#start_IndexYear-__le__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix <= '1518'
[ True False  True]
#end_IndexYear-__le__()

#start_IndexYear-__lt__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix < '1518'
[ True False False]
#end_IndexYear-__lt__()

#start_IndexYear-__matmul__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexYear-__matmul__()

#start_IndexYear-__mod__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix % '1518'
UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYear-__mod__()

#start_IndexYear-__mul__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix * '1518'
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYear-__mul__()

#start_IndexYear-__ne__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix != '1518'
[ True  True False]
#end_IndexYear-__ne__()

#start_IndexYear-__or__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix | True
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix | (False, True)
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYear-__or__()

#start_IndexYear-__pow__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix ** '1518'
TypeError("ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYear-__pow__()

#start_IndexYear-__radd__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> '1518' + ix
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYear-__radd__()

#start_IndexYear-__rfloordiv__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> '1518' // ix
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYear-__rfloordiv__()

#start_IndexYear-__rmatmul__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexYear-__rmatmul__()

#start_IndexYear-__rmul__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> '1518' * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYear-__rmul__()

#start_IndexYear-__rshift__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix >> 1
TypeError("ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYear-__rshift__()

#start_IndexYear-__rsub__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> '1518' - ix
[ 1 -2  0]
#end_IndexYear-__rsub__()

#start_IndexYear-__rtruediv__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> '1518' / ix
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYear-__rtruediv__()

#start_IndexYear-__sub__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix - 2
['1515' '1518' '1516']
#end_IndexYear-__sub__()

#start_IndexYear-__truediv__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix / '1518'
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYear-__truediv__()

#start_IndexYear-__xor__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix ^ True
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix ^ (False, True)
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYear-__xor__()

#start_IndexYear-__abs__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> abs(ix)
UFuncTypeError(<ufunc 'absolute'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYear-__abs__()

#start_IndexYear-__invert__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ~ix
TypeError("ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYear-__invert__()

#start_IndexYear-__neg__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> -ix
UFuncTypeError(<ufunc 'negative'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYear-__neg__()

#start_IndexYear-__pos__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> +ix
['1517' '1520' '1518']
#end_IndexYear-__pos__()

#start_IndexYear-via_dt.year
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_dt.year
[1517 1520 1518]
#end_IndexYear-via_dt.year

#start_IndexYear-via_dt.month
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_dt.month
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYear-via_dt.month

#start_IndexYear-via_dt.day
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_dt.day
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYear-via_dt.day

#start_IndexYear-via_dt.hour
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_dt.hour
[0 0 0]
#end_IndexYear-via_dt.hour

#start_IndexYear-via_dt.minute
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_dt.minute
[0 0 0]
#end_IndexYear-via_dt.minute

#start_IndexYear-via_dt.second
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_dt.second
[0 0 0]
#end_IndexYear-via_dt.second

#start_IndexYear-via_dt.weekday()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_dt.weekday()
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYear-via_dt.weekday()

#start_IndexYear-via_dt.quarter()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_dt.quarter()
[1 1 1]
#end_IndexYear-via_dt.quarter()

#start_IndexYear-via_dt.is_month_end()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_dt.is_month_end()
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYear-via_dt.is_month_end()

#start_IndexYear-via_dt.is_month_start()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_dt.is_month_start()
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYear-via_dt.is_month_start()

#start_IndexYear-via_dt.is_year_end()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_dt.is_year_end()
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYear-via_dt.is_year_end()

#start_IndexYear-via_dt.is_year_start()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_dt.is_year_start()
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYear-via_dt.is_year_start()

#start_IndexYear-via_dt.is_quarter_end()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_dt.is_quarter_end()
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYear-via_dt.is_quarter_end()

#start_IndexYear-via_dt.is_quarter_start()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_dt.is_quarter_start()
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYear-via_dt.is_quarter_start()

#start_IndexYear-via_dt.timetuple()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_dt.timetuple()
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYear-via_dt.timetuple()

#start_IndexYear-via_dt.isoformat()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_dt.isoformat()
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYear-via_dt.isoformat()

#start_IndexYear-via_dt.fromisoformat()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_dt.fromisoformat()
RuntimeError('invalid dtype (datetime64[Y]) for operation on string types')
#end_IndexYear-via_dt.fromisoformat()

#start_IndexYear-via_dt.strftime()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_dt.strftime("%A | %B")
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYear-via_dt.strftime()

#start_IndexYear-via_dt.strptime()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_dt.strptime("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[Y]) for operation on string types')
#end_IndexYear-via_dt.strptime()

#start_IndexYear-via_dt.strpdate()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_dt.strpdate("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[Y]) for operation on string types')
#end_IndexYear-via_dt.strpdate()

#start_IndexYear-via_str.__getitem__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str[-1]
['7' '0' '8']
#end_IndexYear-via_str.__getitem__()

#start_IndexYear-via_str.capitalize()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.capitalize()
['1517' '1520' '1518']
#end_IndexYear-via_str.capitalize()

#start_IndexYear-via_str.center()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.center(8)
['  1517  ' '  1520  ' '  1518  ']
#end_IndexYear-via_str.center()

#start_IndexYear-via_str.contains()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.contains('X')
[False False False]
#end_IndexYear-via_str.contains()

#start_IndexYear-via_str.count()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.count('X')
[0 0 0]
#end_IndexYear-via_str.count()

#start_IndexYear-via_str.decode()
>>> ix = sf.IndexYear(('1517', '1520', '1518')).astype(bytes)
>>> ix
<Index>
b'1517'
b'1520'
b'1518'
<|S22>
>>> ix.via_str.decode()
['1517' '1520' '1518']
#end_IndexYear-via_str.decode()

#start_IndexYear-via_str.encode()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.encode()
[b'1517' b'1520' b'1518']
#end_IndexYear-via_str.encode()

#start_IndexYear-via_str.endswith()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.endswith(' ')
[False False False]
#end_IndexYear-via_str.endswith()

#start_IndexYear-via_str.find()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.find('X')
[-1 -1 -1]
#end_IndexYear-via_str.find()

#start_IndexYear-via_str.format()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.format('{:-^10}')
['---1517---' '---1520---' '---1518---']
#end_IndexYear-via_str.format()

#start_IndexYear-via_str.index()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.index('X')
ValueError('substring not found')
#end_IndexYear-via_str.index()

#start_IndexYear-via_str.isalnum()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.isalnum()
[ True  True  True]
#end_IndexYear-via_str.isalnum()

#start_IndexYear-via_str.isalpha()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.isalpha()
[False False False]
#end_IndexYear-via_str.isalpha()

#start_IndexYear-via_str.isdecimal()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.isdecimal()
[ True  True  True]
#end_IndexYear-via_str.isdecimal()

#start_IndexYear-via_str.isdigit()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.isdigit()
[ True  True  True]
#end_IndexYear-via_str.isdigit()

#start_IndexYear-via_str.islower()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.islower()
[False False False]
#end_IndexYear-via_str.islower()

#start_IndexYear-via_str.isnumeric()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.isnumeric()
[ True  True  True]
#end_IndexYear-via_str.isnumeric()

#start_IndexYear-via_str.isspace()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.isspace()
[False False False]
#end_IndexYear-via_str.isspace()

#start_IndexYear-via_str.istitle()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.istitle()
[False False False]
#end_IndexYear-via_str.istitle()

#start_IndexYear-via_str.isupper()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.isupper()
[False False False]
#end_IndexYear-via_str.isupper()

#start_IndexYear-via_str.ljust()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.ljust(8)
['1517    ' '1520    ' '1518    ']
#end_IndexYear-via_str.ljust()

#start_IndexYear-via_str.len()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.len()
[4 4 4]
#end_IndexYear-via_str.len()

#start_IndexYear-via_str.lower()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.lower()
['1517' '1520' '1518']
#end_IndexYear-via_str.lower()

#start_IndexYear-via_str.lstrip()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.lstrip()
['1517' '1520' '1518']
#end_IndexYear-via_str.lstrip()

#start_IndexYear-via_str.partition()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.partition('X')
[('1517', '', '') ('1520', '', '') ('1518', '', '')]
#end_IndexYear-via_str.partition()

#start_IndexYear-via_str.replace()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.replace('X', '*')
['1517' '1520' '1518']
#end_IndexYear-via_str.replace()

#start_IndexYear-via_str.rfind()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.rfind('X')
[-1 -1 -1]
#end_IndexYear-via_str.rfind()

#start_IndexYear-via_str.rindex()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.rindex('X')
ValueError('substring not found')
#end_IndexYear-via_str.rindex()

#start_IndexYear-via_str.rjust()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.rjust(8)
['    1517' '    1520' '    1518']
#end_IndexYear-via_str.rjust()

#start_IndexYear-via_str.rpartition()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.rpartition('X')
[('', '', '1517') ('', '', '1520') ('', '', '1518')]
#end_IndexYear-via_str.rpartition()

#start_IndexYear-via_str.rsplit()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.rsplit('X')
[('1517',) ('1520',) ('1518',)]
#end_IndexYear-via_str.rsplit()

#start_IndexYear-via_str.rstrip()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.rstrip()
['1517' '1520' '1518']
#end_IndexYear-via_str.rstrip()

#start_IndexYear-via_str.split()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.split('X')
[('1517',) ('1520',) ('1518',)]
#end_IndexYear-via_str.split()

#start_IndexYear-via_str.startswith()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.startswith('X')
[False False False]
#end_IndexYear-via_str.startswith()

#start_IndexYear-via_str.strip()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.strip()
['1517' '1520' '1518']
#end_IndexYear-via_str.strip()

#start_IndexYear-via_str.swapcase()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.swapcase()
['1517' '1520' '1518']
#end_IndexYear-via_str.swapcase()

#start_IndexYear-via_str.title()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.title()
['1517' '1520' '1518']
#end_IndexYear-via_str.title()

#start_IndexYear-via_str.upper()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.upper()
['1517' '1520' '1518']
#end_IndexYear-via_str.upper()

#start_IndexYear-via_str.zfill()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.zfill(8)
['00001517' '00001520' '00001518']
#end_IndexYear-via_str.zfill()

#start_IndexYear-via_re().search()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_re('[X123]').search()
[ True  True  True]
#end_IndexYear-via_re().search()

#start_IndexYear-via_re().match()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_re('[X123]').match()
[ True  True  True]
#end_IndexYear-via_re().match()

#start_IndexYear-via_re().fullmatch()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_re('123').fullmatch()
[False False False]
#end_IndexYear-via_re().fullmatch()

#start_IndexYear-via_re().split()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_re('[X123]').split()
[('', '5', '7') ('', '5', '0') ('', '5', '8')]
#end_IndexYear-via_re().split()

#start_IndexYear-via_re().findall()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_re('[X123]').findall()
[('1', '1') ('1', '2') ('1', '1')]
#end_IndexYear-via_re().findall()

#start_IndexYear-via_re().sub()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_re('[X123]').sub('==')
['==5==7' '==5==0' '==5==8']
#end_IndexYear-via_re().sub()

#start_IndexYear-via_re().subn()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix
<IndexYear>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_re('[X123]').subn('==', 1)
[('==517', 1) ('==520', 1) ('==518', 1)]
#end_IndexYear-via_re().subn()

#start_IndexYear-via_values.apply()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> ix.via_values.apply(np.sin)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYear-via_values.apply()

#start_IndexYear-via_values.__array_ufunc__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> np.sin(ix.via_values)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYear-via_values.__array_ufunc__()

#start_IndexYear-via_values.__call__()
>>> ix = sf.IndexYear(('1517', '1520', '1518'))
>>> np.sin(ix.via_values(unify_blocks=True))
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYear-via_values.__call__()

#start_IndexYearGO-__init__()
>>> sf.IndexYearGO(('1517', '1520', '1518'))
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
#end_IndexYearGO-__init__()

#start_IndexYearGO-from_date_range()
>>> sf.IndexYearGO.from_date_range('2021-12-30', '2022-01-02')
<IndexYearGO>
2021
2022
<datetime64[Y]>
#end_IndexYearGO-from_date_range()

#start_IndexYearGO-from_labels()
>>> sf.IndexYearGO.from_labels(('1517', '1520', '1518'))
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
#end_IndexYearGO-from_labels()

#start_IndexYearGO-from_pandas()
>>> ix = pd.Index(('1517', '1520', '1518'))
>>> sf.IndexYearGO.from_pandas(ix)
<IndexGO>
1517
1520
1518
<object>
#end_IndexYearGO-from_pandas()

#start_IndexYearGO-from_year_month_range()
>>> sf.IndexYearGO.from_year_month_range('2021-12', '2022-01')
<IndexYearGO>
2021
2022
<datetime64[Y]>
#end_IndexYearGO-from_year_month_range()

#start_IndexYearGO-from_year_range()
>>> sf.IndexYearGO.from_year_range('2021', '2022')
<IndexYearGO>
2021
2022
<datetime64[Y]>
#end_IndexYearGO-from_year_range()

#start_IndexYearGO-to_pandas()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.to_pandas()
NotImplementedError('Pandas does not support a year type, and it is ambiguous if a date proxy should be the first of the year or the last of the year.')
#end_IndexYearGO-to_pandas()

#start_IndexYearGO-to_series()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.to_series()
<Series>
<Index>
0        1517
1        1520
2        1518
<int64>  <datetime64[Y]>
#end_IndexYearGO-to_series()

#start_IndexYearGO-STATIC
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.STATIC
False
#end_IndexYearGO-STATIC

#start_IndexYearGO-depth
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.depth
1
#end_IndexYearGO-depth

#start_IndexYearGO-dtype
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.dtype
datetime64[Y]
#end_IndexYearGO-dtype

#start_IndexYearGO-index_types
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.index_types
<Series>
<Index>
None     <IndexYearGO>
<object> <object>
#end_IndexYearGO-index_types

#start_IndexYearGO-memory
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.memory
          L    Lu    LM  LMu   LMD LMDu  R    Ru    RM   RMu   RMD RMDu
Name      16   B     16  B     16  B     16   B     16   B     16  B
Map       440  B     440 B     440 B     440  B     440  B     440 B
Labels    120  B     136 B     24  B     120  B     136  B     24  B
Positions 96   B     112 B     0   B     8.19 KB    136  B     24  B
Total     1.07 KB    1.1 KB    900 B     9.16 KB    1.12 KB    924 B
#end_IndexYearGO-memory

#start_IndexYearGO-name
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.name
#end_IndexYearGO-name

#start_IndexYearGO-names
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.names
('__index0__',)
#end_IndexYearGO-names

#start_IndexYearGO-nbytes
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.nbytes
24
#end_IndexYearGO-nbytes

#start_IndexYearGO-ndim
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.ndim
1
#end_IndexYearGO-ndim

#start_IndexYearGO-positions
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.positions
[0 1 2]
#end_IndexYearGO-positions

#start_IndexYearGO-shape
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.shape
(3,)
#end_IndexYearGO-shape

#start_IndexYearGO-size
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.size
3
#end_IndexYearGO-size

#start_IndexYearGO-__array__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.__array__()
['1517' '1520' '1518']
#end_IndexYearGO-__array__()

#start_IndexYearGO-__array_ufunc__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> np.array((0, 1, 0)) * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[Y]')))
#end_IndexYearGO-__array_ufunc__()

#start_IndexYearGO-__bool__()
>>> s = sf.IndexYearGO(('1517', '1520', '1518'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexYearGO-__bool__()

#start_IndexYearGO-__copy__()
>>> import copy
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> copy.copy(ix)
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
#end_IndexYearGO-__copy__()

#start_IndexYearGO-__deepcopy__()
>>> import copy
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> copy.deepcopy(ix)
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
#end_IndexYearGO-__deepcopy__()

#start_IndexYearGO-__len__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> len(ix)
3
#end_IndexYearGO-__len__()

#start_IndexYearGO-all()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.all()
True
#end_IndexYearGO-all()

#start_IndexYearGO-any()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.any()
True
#end_IndexYearGO-any()

#start_IndexYearGO-append()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.append('f')
ValueError('Error parsing datetime string "f" at position 0')
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
#end_IndexYearGO-append()

#start_IndexYearGO-astype()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.astype(str)
<IndexGO>
1517
1520
1518
<<U22>
#end_IndexYearGO-astype()

#start_IndexYearGO-copy()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.copy()
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
#end_IndexYearGO-copy()

#start_IndexYearGO-cumprod()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.cumprod()
ValueError("could not find a matching type for multiply.accumulate, requested type has type code 'M'")
#end_IndexYearGO-cumprod()

#start_IndexYearGO-cumsum()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.cumsum()
ValueError("could not find a matching type for add.accumulate, requested type has type code 'M'")
#end_IndexYearGO-cumsum()

#start_IndexYearGO-difference()
>>> ix1 = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix2 = sf.IndexYearGO(('2022', '2021', '2018'))
>>> ix1.difference(ix2)
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
#end_IndexYearGO-difference()

#start_IndexYearGO-dropfalsy()
>>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))
>>> ix
<IndexYearGO>
1620
NaT
1619
<datetime64[Y]>
>>> ix.dropfalsy()
<IndexYearGO>
1620
1619
<datetime64[Y]>
#end_IndexYearGO-dropfalsy()

#start_IndexYearGO-dropna()
>>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))
>>> ix
<IndexYearGO>
1620
NaT
1619
<datetime64[Y]>
>>> ix.dropna()
<IndexYearGO>
1620
1619
<datetime64[Y]>
#end_IndexYearGO-dropna()

#start_IndexYearGO-equals()
>>> ix1 = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix2 = sf.IndexYearGO(('2022', '2021', '2018'))
>>> ix1.equals(ix2)
False
#end_IndexYearGO-equals()

#start_IndexYearGO-extend()
>>> ix1 = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix2 = sf.IndexYearGO(('2022', '2021', '2018'))
>>> ix1.extend(ix2)
>>> ix1
<IndexYearGO>
1517
1520
1518
2022
2021
2018
<datetime64[Y]>
#end_IndexYearGO-extend()

#start_IndexYearGO-fillfalsy()
>>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))
>>> ix
<IndexYearGO>
1620
NaT
1619
<datetime64[Y]>
>>> ix.fillfalsy('A')
ValueError('Error parsing datetime string "A" at position 0')
#end_IndexYearGO-fillfalsy()

#start_IndexYearGO-fillna()
>>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))
>>> ix
<IndexYearGO>
1620
NaT
1619
<datetime64[Y]>
>>> ix.fillna(0)
<IndexYearGO>
1620
1970
1619
<datetime64[Y]>
#end_IndexYearGO-fillna()

#start_IndexYearGO-head()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.head(2)
<IndexYearGO>
1517
1520
<datetime64[Y]>
#end_IndexYearGO-head()

#start_IndexYearGO-iloc_searchsorted()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.iloc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexYearGO-iloc_searchsorted()

#start_IndexYearGO-intersection()
>>> ix1 = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix2 = sf.IndexYearGO(('2022', '2021', '2018'))
>>> ix1.intersection(ix2)
<IndexYearGO>
<datetime64[Y]>
#end_IndexYearGO-intersection()

#start_IndexYearGO-isin()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.isin(('1518',))
[False False False]
#end_IndexYearGO-isin()

#start_IndexYearGO-label_widths_at_depth()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> tuple(ix.label_widths_at_depth(0))
((numpy.datetime64('1517'), 1), (numpy.datetime64('1520'), 1), (numpy.datetime64('1518'), 1))
#end_IndexYearGO-label_widths_at_depth()

#start_IndexYearGO-level_add()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.level_add('A')
<IndexHierarchyGO>
A                  1517
A                  1520
A                  1518
<<U1>              <datetime64[Y]>
#end_IndexYearGO-level_add()

#start_IndexYearGO-loc_searchsorted()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.loc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexYearGO-loc_searchsorted()

#start_IndexYearGO-loc_to_iloc()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.loc_to_iloc('d')
ValueError('Error parsing datetime string "d" at position 0')
>>> ix.loc_to_iloc(['a', 'e'])
ValueError('Cannot create a NumPy datetime other than NaT with generic units')
>>> ix.loc_to_iloc(slice('c', None))
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexYearGO-loc_to_iloc()

#start_IndexYearGO-max()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.max()
1520
#end_IndexYearGO-max()

#start_IndexYearGO-mean()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.mean()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYearGO-mean()

#start_IndexYearGO-median()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.median()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYearGO-median()

#start_IndexYearGO-min()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.min()
1517
#end_IndexYearGO-min()

#start_IndexYearGO-prod()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.prod()
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYearGO-prod()

#start_IndexYearGO-relabel()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)
ErrorInitIndexNonUnique('Labels have non-unique values. Details from iterators not available.')
#end_IndexYearGO-relabel()

#start_IndexYearGO-rename()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.rename('y')
<IndexYearGO: y>
1517
1520
1518
<datetime64[Y]>
#end_IndexYearGO-rename()

#start_IndexYearGO-roll()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.roll(2)
<IndexYearGO>
1520
1518
1517
<datetime64[Y]>
#end_IndexYearGO-roll()

#start_IndexYearGO-sample()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.sample(2, seed=0)
<IndexYearGO>
1520
1518
<datetime64[Y]>
#end_IndexYearGO-sample()

#start_IndexYearGO-sort()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.sort()
<IndexYearGO>
1517
1518
1520
<datetime64[Y]>
>>> ix.sort(ascending=False)
<IndexYearGO>
1520
1518
1517
<datetime64[Y]>
#end_IndexYearGO-sort()

#start_IndexYearGO-std()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.std()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYearGO-std()

#start_IndexYearGO-sum()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.sum()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYearGO-sum()

#start_IndexYearGO-tail()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.tail(2)
<IndexYearGO>
1520
1518
<datetime64[Y]>
#end_IndexYearGO-tail()

#start_IndexYearGO-union()
>>> ix1 = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix2 = sf.IndexYearGO(('2022', '2021', '2018'))
>>> ix1.union(ix2)
<IndexYearGO>
1517
1518
1520
2018
2021
2022
<datetime64[Y]>
#end_IndexYearGO-union()

#start_IndexYearGO-unique()
>>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))
>>> ix
<IndexYearGO>
1620
NaT
1619
<datetime64[Y]>
>>> ix.unique()
['1620'  'NaT' '1619']
#end_IndexYearGO-unique()

#start_IndexYearGO-values_at_depth()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.values_at_depth(0)
['1517' '1520' '1518']
#end_IndexYearGO-values_at_depth()

#start_IndexYearGO-var()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.var()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYearGO-var()

#start_IndexYearGO-__contains__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.__contains__('a')
ValueError('Error parsing datetime string "a" at position 0')
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.__contains__('1518')
True
#end_IndexYearGO-__contains__()

#start_IndexYearGO-__iter__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517'), numpy.datetime64('1520'), numpy.datetime64('1518'))
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517'), numpy.datetime64('1520'), numpy.datetime64('1518'))
#end_IndexYearGO-__iter__()

#start_IndexYearGO-__reversed__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1518'), numpy.datetime64('1520'), numpy.datetime64('1517'))
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1518'), numpy.datetime64('1520'), numpy.datetime64('1517'))
#end_IndexYearGO-__reversed__()

#start_IndexYearGO-values
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.values
['1517' '1520' '1518']
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.values
['1517' '1520' '1518']
#end_IndexYearGO-values

#start_IndexYearGO-interface
>>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))
>>> ix.interface
<Frame>
<Index>                              cls_name    group                doc                  <<U18>
<Index: signature>
__init__(labels, *, name, loc_is_... IndexYearGO Constructor          Initializer. Args...
from_date_range(start, stop, step... IndexYearGO Constructor          Get an IndexYearM...
from_labels(labels, *, name)         IndexYearGO Constructor          Construct an Inde...
from_pandas(value)                   IndexYearGO Constructor          Given a Pandas in...
from_year_month_range(start, stop... IndexYearGO Constructor          Get an IndexYearM...
from_year_range(start, stop, step... IndexYearGO Constructor          Get an IndexDate ...
to_html(config, style_config)        IndexYearGO Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexYearGO Exporter             Return a complete...
to_pandas()                          IndexYearGO Exporter             Return a Pandas I...
to_series()                          IndexYearGO Exporter             Return a Series w...
to_visidata()                        IndexYearGO Exporter             Open an interacti...
STATIC                               IndexYearGO Attribute            bool(x) -> bool R...
depth                                IndexYearGO Attribute            int([x]) -> integ...
dtype                                IndexYearGO Attribute            Return the dtype ...
index_types                          IndexYearGO Attribute            Return a Series o...
memory                               IndexYearGO Attribute            Return a MemoryDi...
mloc                                 IndexYearGO Attribute            The memory locati...
...                                  ...         ...                  ...
via_str.rpartition(sep)              IndexYearGO Accessor String      Partition (split)...
via_str.rsplit(sep, maxsplit)        IndexYearGO Accessor String      For each element,...
via_str.rstrip(chars)                IndexYearGO Accessor String      For each element,...
via_str.split(sep, maxsplit)         IndexYearGO Accessor String      For each element,...
via_str.startswith(prefix, start,... IndexYearGO Accessor String      Returns a contain...
via_str.strip(chars)                 IndexYearGO Accessor String      For each element,...
via_str.swapcase()                   IndexYearGO Accessor String      Return a containe...
via_str.title()                      IndexYearGO Accessor String      Return a containe...
via_str.upper()                      IndexYearGO Accessor String      Return a containe...
via_str.zfill(width)                 IndexYearGO Accessor String      Return the string...
via_re(pattern, flags).search(pos... IndexYearGO Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexYearGO Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexYearGO Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexYearGO Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexYearGO Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexYearGO Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexYearGO Accessor Regular ... Perform the same ...
<<U63>                               <<U11>      <<U27>               <<U83>
#end_IndexYearGO-interface

#start_IndexYearGO-__repr__()
>>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))
>>> repr(ix)
<IndexYearGO>
1620
NaT
1619
<datetime64[Y]>
#end_IndexYearGO-__repr__()

#start_IndexYearGO-__str__()
>>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))
>>> str(ix)
<IndexYearGO>
1620
NaT
1619
<datetime64[Y]>
#end_IndexYearGO-__str__()

#start_IndexYearGO-display()
>>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))
>>> ix.display()
<IndexYearGO>
1620
NaT
1619
<datetime64[Y]>
>>> ix.display(sf.DisplayConfig(type_show=False))
1620
NaT
1619
#end_IndexYearGO-display()

#start_IndexYearGO-display_tall()
>>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))
>>> ix.display_tall()
<IndexYearGO>
1620
NaT
1619
<datetime64[Y]>
#end_IndexYearGO-display_tall()

#start_IndexYearGO-display_wide()
>>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))
>>> ix.display_wide()
<IndexYearGO>
1620
NaT
1619
<datetime64[Y]>
#end_IndexYearGO-display_wide()

#start_IndexYearGO-drop.iloc[]
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.drop.iloc[1]
<IndexYearGO>
1517
1518
<datetime64[Y]>
>>> ix.drop.iloc[1:]
<IndexYearGO>
1517
<datetime64[Y]>
>>> ix.drop.iloc[[0, 2]]
<IndexYearGO>
1520
<datetime64[Y]>
#end_IndexYearGO-drop.iloc[]

#start_IndexYearGO-drop.loc[]
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.drop.loc['1518']
<IndexYearGO>
1517
1520
<datetime64[Y]>
>>> ix.drop.loc['1518':]
<IndexYearGO>
1517
1520
<datetime64[Y]>
#end_IndexYearGO-drop.loc[]

#start_IndexYearGO-[]
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix[1]
1520
>>> ix[1:]
<IndexYearGO>
1520
1518
<datetime64[Y]>
>>> ix[[0, 2]]
<IndexYearGO>
1517
1518
<datetime64[Y]>
#end_IndexYearGO-[]

#start_IndexYearGO-iloc[]
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.iloc[1]
1520
>>> ix.iloc[1:]
<IndexYearGO>
1520
1518
<datetime64[Y]>
>>> ix.iloc[[0, 2]]
<IndexYearGO>
1517
1518
<datetime64[Y]>
#end_IndexYearGO-iloc[]

#start_IndexYearGO-loc[]
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.loc['1518']
1518
>>> ix.loc['1518':]
<IndexYearGO>
1518
<datetime64[Y]>
#end_IndexYearGO-loc[]

#start_IndexYearGO-iter_label()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> tuple(ix.iter_label())
(numpy.datetime64('1517'), numpy.datetime64('1520'), numpy.datetime64('1518'))
#end_IndexYearGO-iter_label()

#start_IndexYearGO-iter_label().apply()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)
[1517 1520 1518]
#end_IndexYearGO-iter_label().apply()

#start_IndexYearGO-iter_label().apply_iter()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))
(datetime.datetime(1517, 1, 1, 0, 0), datetime.datetime(1520, 1, 1, 0, 0), datetime.datetime(1518, 1, 1, 0, 0))
#end_IndexYearGO-iter_label().apply_iter()

#start_IndexYearGO-iter_label().apply_iter_items()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))
((0, datetime.datetime(1517, 1, 1, 0, 0)), (1, datetime.datetime(1520, 1, 1, 0, 0)), (2, datetime.datetime(1518, 1, 1, 0, 0)))
#end_IndexYearGO-iter_label().apply_iter_items()

#start_IndexYearGO-iter_label().apply_pool()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)
[1 1 1]
#end_IndexYearGO-iter_label().apply_pool()

#start_IndexYearGO-__add__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix + 2
['1519' '1522' '1520']
#end_IndexYearGO-__add__()

#start_IndexYearGO-__and__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix & True
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix & (False, True)
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearGO-__and__()

#start_IndexYearGO-__eq__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix == '1518'
[False False  True]
#end_IndexYearGO-__eq__()

#start_IndexYearGO-__floordiv__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix // '1518'
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYearGO-__floordiv__()

#start_IndexYearGO-__ge__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix >= '1518'
[False  True  True]
#end_IndexYearGO-__ge__()

#start_IndexYearGO-__gt__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix > '1518'
[False  True False]
#end_IndexYearGO-__gt__()

#start_IndexYearGO-__le__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix <= '1518'
[ True False  True]
#end_IndexYearGO-__le__()

#start_IndexYearGO-__lt__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix < '1518'
[ True False False]
#end_IndexYearGO-__lt__()

#start_IndexYearGO-__matmul__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexYearGO-__matmul__()

#start_IndexYearGO-__mod__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix % '1518'
UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYearGO-__mod__()

#start_IndexYearGO-__mul__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix * '1518'
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYearGO-__mul__()

#start_IndexYearGO-__ne__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix != '1518'
[ True  True False]
#end_IndexYearGO-__ne__()

#start_IndexYearGO-__or__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix | True
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix | (False, True)
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearGO-__or__()

#start_IndexYearGO-__pow__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix ** '1518'
TypeError("ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearGO-__pow__()

#start_IndexYearGO-__radd__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> '1518' + ix
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYearGO-__radd__()

#start_IndexYearGO-__rfloordiv__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> '1518' // ix
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYearGO-__rfloordiv__()

#start_IndexYearGO-__rmatmul__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexYearGO-__rmatmul__()

#start_IndexYearGO-__rmul__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> '1518' * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYearGO-__rmul__()

#start_IndexYearGO-__rshift__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix >> 1
TypeError("ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearGO-__rshift__()

#start_IndexYearGO-__rsub__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> '1518' - ix
[ 1 -2  0]
#end_IndexYearGO-__rsub__()

#start_IndexYearGO-__rtruediv__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> '1518' / ix
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYearGO-__rtruediv__()

#start_IndexYearGO-__sub__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix - 2
['1515' '1518' '1516']
#end_IndexYearGO-__sub__()

#start_IndexYearGO-__truediv__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix / '1518'
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYearGO-__truediv__()

#start_IndexYearGO-__xor__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix ^ True
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix ^ (False, True)
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearGO-__xor__()

#start_IndexYearGO-__abs__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> abs(ix)
UFuncTypeError(<ufunc 'absolute'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYearGO-__abs__()

#start_IndexYearGO-__invert__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ~ix
TypeError("ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearGO-__invert__()

#start_IndexYearGO-__neg__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> -ix
UFuncTypeError(<ufunc 'negative'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))
#end_IndexYearGO-__neg__()

#start_IndexYearGO-__pos__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> +ix
['1517' '1520' '1518']
#end_IndexYearGO-__pos__()

#start_IndexYearGO-via_dt.year
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_dt.year
[1517 1520 1518]
#end_IndexYearGO-via_dt.year

#start_IndexYearGO-via_dt.month
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_dt.month
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYearGO-via_dt.month

#start_IndexYearGO-via_dt.day
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_dt.day
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYearGO-via_dt.day

#start_IndexYearGO-via_dt.hour
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_dt.hour
[0 0 0]
#end_IndexYearGO-via_dt.hour

#start_IndexYearGO-via_dt.minute
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_dt.minute
[0 0 0]
#end_IndexYearGO-via_dt.minute

#start_IndexYearGO-via_dt.second
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_dt.second
[0 0 0]
#end_IndexYearGO-via_dt.second

#start_IndexYearGO-via_dt.weekday()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_dt.weekday()
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYearGO-via_dt.weekday()

#start_IndexYearGO-via_dt.quarter()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_dt.quarter()
[1 1 1]
#end_IndexYearGO-via_dt.quarter()

#start_IndexYearGO-via_dt.is_month_end()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_dt.is_month_end()
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYearGO-via_dt.is_month_end()

#start_IndexYearGO-via_dt.is_month_start()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_dt.is_month_start()
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYearGO-via_dt.is_month_start()

#start_IndexYearGO-via_dt.is_year_end()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_dt.is_year_end()
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYearGO-via_dt.is_year_end()

#start_IndexYearGO-via_dt.is_year_start()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_dt.is_year_start()
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYearGO-via_dt.is_year_start()

#start_IndexYearGO-via_dt.is_quarter_end()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_dt.is_quarter_end()
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYearGO-via_dt.is_quarter_end()

#start_IndexYearGO-via_dt.is_quarter_start()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_dt.is_quarter_start()
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYearGO-via_dt.is_quarter_start()

#start_IndexYearGO-via_dt.timetuple()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_dt.timetuple()
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYearGO-via_dt.timetuple()

#start_IndexYearGO-via_dt.isoformat()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_dt.isoformat()
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYearGO-via_dt.isoformat()

#start_IndexYearGO-via_dt.fromisoformat()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_dt.fromisoformat()
RuntimeError('invalid dtype (datetime64[Y]) for operation on string types')
#end_IndexYearGO-via_dt.fromisoformat()

#start_IndexYearGO-via_dt.strftime()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_dt.strftime("%A | %B")
RuntimeError('invalid dtype (datetime64[Y]) for date operation')
#end_IndexYearGO-via_dt.strftime()

#start_IndexYearGO-via_dt.strptime()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_dt.strptime("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[Y]) for operation on string types')
#end_IndexYearGO-via_dt.strptime()

#start_IndexYearGO-via_dt.strpdate()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_dt.strpdate("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[Y]) for operation on string types')
#end_IndexYearGO-via_dt.strpdate()

#start_IndexYearGO-via_str.__getitem__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str[-1]
['7' '0' '8']
#end_IndexYearGO-via_str.__getitem__()

#start_IndexYearGO-via_str.capitalize()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.capitalize()
['1517' '1520' '1518']
#end_IndexYearGO-via_str.capitalize()

#start_IndexYearGO-via_str.center()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.center(8)
['  1517  ' '  1520  ' '  1518  ']
#end_IndexYearGO-via_str.center()

#start_IndexYearGO-via_str.contains()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.contains('X')
[False False False]
#end_IndexYearGO-via_str.contains()

#start_IndexYearGO-via_str.count()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.count('X')
[0 0 0]
#end_IndexYearGO-via_str.count()

#start_IndexYearGO-via_str.decode()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518')).astype(bytes)
>>> ix
<IndexGO>
b'1517'
b'1520'
b'1518'
<|S22>
>>> ix.via_str.decode()
['1517' '1520' '1518']
#end_IndexYearGO-via_str.decode()

#start_IndexYearGO-via_str.encode()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.encode()
[b'1517' b'1520' b'1518']
#end_IndexYearGO-via_str.encode()

#start_IndexYearGO-via_str.endswith()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.endswith(' ')
[False False False]
#end_IndexYearGO-via_str.endswith()

#start_IndexYearGO-via_str.find()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.find('X')
[-1 -1 -1]
#end_IndexYearGO-via_str.find()

#start_IndexYearGO-via_str.format()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.format('{:-^10}')
['---1517---' '---1520---' '---1518---']
#end_IndexYearGO-via_str.format()

#start_IndexYearGO-via_str.index()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.index('X')
ValueError('substring not found')
#end_IndexYearGO-via_str.index()

#start_IndexYearGO-via_str.isalnum()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.isalnum()
[ True  True  True]
#end_IndexYearGO-via_str.isalnum()

#start_IndexYearGO-via_str.isalpha()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.isalpha()
[False False False]
#end_IndexYearGO-via_str.isalpha()

#start_IndexYearGO-via_str.isdecimal()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.isdecimal()
[ True  True  True]
#end_IndexYearGO-via_str.isdecimal()

#start_IndexYearGO-via_str.isdigit()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.isdigit()
[ True  True  True]
#end_IndexYearGO-via_str.isdigit()

#start_IndexYearGO-via_str.islower()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.islower()
[False False False]
#end_IndexYearGO-via_str.islower()

#start_IndexYearGO-via_str.isnumeric()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.isnumeric()
[ True  True  True]
#end_IndexYearGO-via_str.isnumeric()

#start_IndexYearGO-via_str.isspace()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.isspace()
[False False False]
#end_IndexYearGO-via_str.isspace()

#start_IndexYearGO-via_str.istitle()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.istitle()
[False False False]
#end_IndexYearGO-via_str.istitle()

#start_IndexYearGO-via_str.isupper()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.isupper()
[False False False]
#end_IndexYearGO-via_str.isupper()

#start_IndexYearGO-via_str.ljust()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.ljust(8)
['1517    ' '1520    ' '1518    ']
#end_IndexYearGO-via_str.ljust()

#start_IndexYearGO-via_str.len()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.len()
[4 4 4]
#end_IndexYearGO-via_str.len()

#start_IndexYearGO-via_str.lower()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.lower()
['1517' '1520' '1518']
#end_IndexYearGO-via_str.lower()

#start_IndexYearGO-via_str.lstrip()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.lstrip()
['1517' '1520' '1518']
#end_IndexYearGO-via_str.lstrip()

#start_IndexYearGO-via_str.partition()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.partition('X')
[('1517', '', '') ('1520', '', '') ('1518', '', '')]
#end_IndexYearGO-via_str.partition()

#start_IndexYearGO-via_str.replace()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.replace('X', '*')
['1517' '1520' '1518']
#end_IndexYearGO-via_str.replace()

#start_IndexYearGO-via_str.rfind()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.rfind('X')
[-1 -1 -1]
#end_IndexYearGO-via_str.rfind()

#start_IndexYearGO-via_str.rindex()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.rindex('X')
ValueError('substring not found')
#end_IndexYearGO-via_str.rindex()

#start_IndexYearGO-via_str.rjust()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.rjust(8)
['    1517' '    1520' '    1518']
#end_IndexYearGO-via_str.rjust()

#start_IndexYearGO-via_str.rpartition()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.rpartition('X')
[('', '', '1517') ('', '', '1520') ('', '', '1518')]
#end_IndexYearGO-via_str.rpartition()

#start_IndexYearGO-via_str.rsplit()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.rsplit('X')
[('1517',) ('1520',) ('1518',)]
#end_IndexYearGO-via_str.rsplit()

#start_IndexYearGO-via_str.rstrip()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.rstrip()
['1517' '1520' '1518']
#end_IndexYearGO-via_str.rstrip()

#start_IndexYearGO-via_str.split()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.split('X')
[('1517',) ('1520',) ('1518',)]
#end_IndexYearGO-via_str.split()

#start_IndexYearGO-via_str.startswith()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.startswith('X')
[False False False]
#end_IndexYearGO-via_str.startswith()

#start_IndexYearGO-via_str.strip()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.strip()
['1517' '1520' '1518']
#end_IndexYearGO-via_str.strip()

#start_IndexYearGO-via_str.swapcase()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.swapcase()
['1517' '1520' '1518']
#end_IndexYearGO-via_str.swapcase()

#start_IndexYearGO-via_str.title()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.title()
['1517' '1520' '1518']
#end_IndexYearGO-via_str.title()

#start_IndexYearGO-via_str.upper()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.upper()
['1517' '1520' '1518']
#end_IndexYearGO-via_str.upper()

#start_IndexYearGO-via_str.zfill()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_str.zfill(8)
['00001517' '00001520' '00001518']
#end_IndexYearGO-via_str.zfill()

#start_IndexYearGO-via_re().search()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_re('[X123]').search()
[ True  True  True]
#end_IndexYearGO-via_re().search()

#start_IndexYearGO-via_re().match()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_re('[X123]').match()
[ True  True  True]
#end_IndexYearGO-via_re().match()

#start_IndexYearGO-via_re().fullmatch()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_re('123').fullmatch()
[False False False]
#end_IndexYearGO-via_re().fullmatch()

#start_IndexYearGO-via_re().split()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_re('[X123]').split()
[('', '5', '7') ('', '5', '0') ('', '5', '8')]
#end_IndexYearGO-via_re().split()

#start_IndexYearGO-via_re().findall()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_re('[X123]').findall()
[('1', '1') ('1', '2') ('1', '1')]
#end_IndexYearGO-via_re().findall()

#start_IndexYearGO-via_re().sub()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_re('[X123]').sub('==')
['==5==7' '==5==0' '==5==8']
#end_IndexYearGO-via_re().sub()

#start_IndexYearGO-via_re().subn()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix
<IndexYearGO>
1517
1520
1518
<datetime64[Y]>
>>> ix.via_re('[X123]').subn('==', 1)
[('==517', 1) ('==520', 1) ('==518', 1)]
#end_IndexYearGO-via_re().subn()

#start_IndexYearGO-via_values.apply()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> ix.via_values.apply(np.sin)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearGO-via_values.apply()

#start_IndexYearGO-via_values.__array_ufunc__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> np.sin(ix.via_values)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearGO-via_values.__array_ufunc__()

#start_IndexYearGO-via_values.__call__()
>>> ix = sf.IndexYearGO(('1517', '1520', '1518'))
>>> np.sin(ix.via_values(unify_blocks=True))
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearGO-via_values.__call__()

#start_IndexYearMonth-__init__()
>>> sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
#end_IndexYearMonth-__init__()

#start_IndexYearMonth-from_date_range()
>>> sf.IndexYearMonth.from_date_range('2021-12-30', '2022-01-02')
<IndexYearMonth>
2021-12
2022-01
<datetime64[M]>
#end_IndexYearMonth-from_date_range()

#start_IndexYearMonth-from_labels()
>>> sf.IndexYearMonth.from_labels(('1517-04', '1517-12', '1517-06'))
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
#end_IndexYearMonth-from_labels()

#start_IndexYearMonth-from_pandas()
>>> ix = pd.Index(('1517-04', '1517-12', '1517-06'))
>>> sf.IndexYearMonth.from_pandas(ix)
<Index>
1517-04
1517-12
1517-06
<object>
#end_IndexYearMonth-from_pandas()

#start_IndexYearMonth-from_year_month_range()
>>> sf.IndexYearMonth.from_year_month_range('2021-12', '2022-01')
<IndexYearMonth>
2021-12
2022-01
<datetime64[M]>
#end_IndexYearMonth-from_year_month_range()

#start_IndexYearMonth-from_year_range()
>>> sf.IndexYearMonth.from_year_range('2021', '2022')
<IndexYearMonth>
2021-01
2021-02
2021-03
2021-04
2021-05
2021-06
2021-07
2021-08
2021-09
2021-10
2021-11
2021-12
2022-01
2022-02
2022-03
2022-04
2022-05
2022-06
2022-07
2022-08
2022-09
2022-10
2022-11
2022-12
<datetime64[M]>
#end_IndexYearMonth-from_year_range()

#start_IndexYearMonth-to_pandas()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.to_pandas()
NotImplementedError('Pandas does not support a year month type, and it is ambiguous if a date proxy should be the first of the month or the last of the month.')
#end_IndexYearMonth-to_pandas()

#start_IndexYearMonth-to_series()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.to_series()
<Series>
<Index>
0        1517-04
1        1517-12
2        1517-06
<int64>  <datetime64[M]>
#end_IndexYearMonth-to_series()

#start_IndexYearMonth-STATIC
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.STATIC
True
#end_IndexYearMonth-STATIC

#start_IndexYearMonth-depth
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.depth
1
#end_IndexYearMonth-depth

#start_IndexYearMonth-dtype
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.dtype
datetime64[M]
#end_IndexYearMonth-dtype

#start_IndexYearMonth-index_types
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.index_types
<Series>
<Index>
None     <IndexYearMonth>
<object> <object>
#end_IndexYearMonth-index_types

#start_IndexYearMonth-memory
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.memory
          L   Lu    LM  LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu
Name      16  B     16  B     16  B     16   B     16  B     16  B
Map       440 B     440 B     440 B     440  B     440 B     440 B
Labels    120 B     136 B     24  B     120  B     136 B     24  B
Positions 96  B     112 B     0   B     8.19 KB    136 B     24  B
Total     768 B     800 B     576 B     8.84 KB    824 B     600 B
#end_IndexYearMonth-memory

#start_IndexYearMonth-name
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.name
#end_IndexYearMonth-name

#start_IndexYearMonth-names
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.names
('__index0__',)
#end_IndexYearMonth-names

#start_IndexYearMonth-nbytes
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.nbytes
24
#end_IndexYearMonth-nbytes

#start_IndexYearMonth-ndim
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.ndim
1
#end_IndexYearMonth-ndim

#start_IndexYearMonth-positions
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.positions
[0 1 2]
#end_IndexYearMonth-positions

#start_IndexYearMonth-shape
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.shape
(3,)
#end_IndexYearMonth-shape

#start_IndexYearMonth-size
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.size
3
#end_IndexYearMonth-size

#start_IndexYearMonth-__array__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.__array__()
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonth-__array__()

#start_IndexYearMonth-__array_ufunc__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> np.array((0, 1, 0)) * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[M]')))
#end_IndexYearMonth-__array_ufunc__()

#start_IndexYearMonth-__bool__()
>>> s = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexYearMonth-__bool__()

#start_IndexYearMonth-__copy__()
>>> import copy
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> copy.copy(ix)
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
#end_IndexYearMonth-__copy__()

#start_IndexYearMonth-__deepcopy__()
>>> import copy
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> copy.deepcopy(ix)
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
#end_IndexYearMonth-__deepcopy__()

#start_IndexYearMonth-__len__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> len(ix)
3
#end_IndexYearMonth-__len__()

#start_IndexYearMonth-all()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.all()
True
#end_IndexYearMonth-all()

#start_IndexYearMonth-any()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.any()
True
#end_IndexYearMonth-any()

#start_IndexYearMonth-astype()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.astype(str)
<Index>
1517-04
1517-12
1517-06
<<U25>
#end_IndexYearMonth-astype()

#start_IndexYearMonth-copy()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.copy()
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
#end_IndexYearMonth-copy()

#start_IndexYearMonth-cumprod()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.cumprod()
ValueError("could not find a matching type for multiply.accumulate, requested type has type code 'M'")
#end_IndexYearMonth-cumprod()

#start_IndexYearMonth-cumsum()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.cumsum()
ValueError("could not find a matching type for add.accumulate, requested type has type code 'M'")
#end_IndexYearMonth-cumsum()

#start_IndexYearMonth-difference()
>>> ix1 = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix2 = sf.IndexYearMonth(('2022-04', '2021-12', '2022-06'))
>>> ix1.difference(ix2)
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
#end_IndexYearMonth-difference()

#start_IndexYearMonth-dropfalsy()
>>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))
>>> ix
<IndexYearMonth>
1620-09
NaT
1620-11
<datetime64[M]>
>>> ix.dropfalsy()
<IndexYearMonth>
1620-09
1620-11
<datetime64[M]>
#end_IndexYearMonth-dropfalsy()

#start_IndexYearMonth-dropna()
>>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))
>>> ix
<IndexYearMonth>
1620-09
NaT
1620-11
<datetime64[M]>
>>> ix.dropna()
<IndexYearMonth>
1620-09
1620-11
<datetime64[M]>
#end_IndexYearMonth-dropna()

#start_IndexYearMonth-equals()
>>> ix1 = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix2 = sf.IndexYearMonth(('2022-04', '2021-12', '2022-06'))
>>> ix1.equals(ix2)
False
#end_IndexYearMonth-equals()

#start_IndexYearMonth-fillfalsy()
>>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))
>>> ix
<IndexYearMonth>
1620-09
NaT
1620-11
<datetime64[M]>
>>> ix.fillfalsy('A')
ValueError('Error parsing datetime string "A" at position 0')
#end_IndexYearMonth-fillfalsy()

#start_IndexYearMonth-fillna()
>>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))
>>> ix
<IndexYearMonth>
1620-09
NaT
1620-11
<datetime64[M]>
>>> ix.fillna(0)
<IndexYearMonth>
1620-09
1970-01
1620-11
<datetime64[M]>
#end_IndexYearMonth-fillna()

#start_IndexYearMonth-head()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.head(2)
<IndexYearMonth>
1517-04
1517-12
<datetime64[M]>
#end_IndexYearMonth-head()

#start_IndexYearMonth-iloc_searchsorted()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.iloc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexYearMonth-iloc_searchsorted()

#start_IndexYearMonth-intersection()
>>> ix1 = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix2 = sf.IndexYearMonth(('2022-04', '2021-12', '2022-06'))
>>> ix1.intersection(ix2)
<IndexYearMonth>
<datetime64[M]>
#end_IndexYearMonth-intersection()

#start_IndexYearMonth-isin()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.isin(('1517-06',))
[False False False]
#end_IndexYearMonth-isin()

#start_IndexYearMonth-label_widths_at_depth()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> tuple(ix.label_widths_at_depth(0))
((numpy.datetime64('1517-04'), 1), (numpy.datetime64('1517-12'), 1), (numpy.datetime64('1517-06'), 1))
#end_IndexYearMonth-label_widths_at_depth()

#start_IndexYearMonth-level_add()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.level_add('A')
<IndexHierarchy>
A                1517-04
A                1517-12
A                1517-06
<<U1>            <datetime64[M]>
#end_IndexYearMonth-level_add()

#start_IndexYearMonth-loc_searchsorted()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.loc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexYearMonth-loc_searchsorted()

#start_IndexYearMonth-loc_to_iloc()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.loc_to_iloc('d')
ValueError('Error parsing datetime string "d" at position 0')
>>> ix.loc_to_iloc(['a', 'e'])
ValueError('Cannot create a NumPy datetime other than NaT with generic units')
>>> ix.loc_to_iloc(slice('c', None))
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexYearMonth-loc_to_iloc()

#start_IndexYearMonth-max()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.max()
1517-12
#end_IndexYearMonth-max()

#start_IndexYearMonth-mean()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.mean()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonth-mean()

#start_IndexYearMonth-median()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.median()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonth-median()

#start_IndexYearMonth-min()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.min()
1517-04
#end_IndexYearMonth-min()

#start_IndexYearMonth-prod()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.prod()
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonth-prod()

#start_IndexYearMonth-relabel()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)
InvalidDatetime64Initializer('Attempting to create datetime64[M] from an integer, which is generally not desired as the result will be an offset from the epoch.')
#end_IndexYearMonth-relabel()

#start_IndexYearMonth-rename()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.rename('y')
<IndexYearMonth: y>
1517-04
1517-12
1517-06
<datetime64[M]>
#end_IndexYearMonth-rename()

#start_IndexYearMonth-roll()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.roll(2)
<IndexYearMonth>
1517-12
1517-06
1517-04
<datetime64[M]>
#end_IndexYearMonth-roll()

#start_IndexYearMonth-sample()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.sample(2, seed=0)
<IndexYearMonth>
1517-12
1517-06
<datetime64[M]>
#end_IndexYearMonth-sample()

#start_IndexYearMonth-sort()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.sort()
<IndexYearMonth>
1517-04
1517-06
1517-12
<datetime64[M]>
>>> ix.sort(ascending=False)
<IndexYearMonth>
1517-12
1517-06
1517-04
<datetime64[M]>
#end_IndexYearMonth-sort()

#start_IndexYearMonth-std()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.std()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonth-std()

#start_IndexYearMonth-sum()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.sum()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonth-sum()

#start_IndexYearMonth-tail()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.tail(2)
<IndexYearMonth>
1517-12
1517-06
<datetime64[M]>
#end_IndexYearMonth-tail()

#start_IndexYearMonth-union()
>>> ix1 = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix2 = sf.IndexYearMonth(('2022-04', '2021-12', '2022-06'))
>>> ix1.union(ix2)
<IndexYearMonth>
1517-04
1517-06
1517-12
2021-12
2022-04
2022-06
<datetime64[M]>
#end_IndexYearMonth-union()

#start_IndexYearMonth-unique()
>>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))
>>> ix
<IndexYearMonth>
1620-09
NaT
1620-11
<datetime64[M]>
>>> ix.unique()
['1620-09'     'NaT' '1620-11']
#end_IndexYearMonth-unique()

#start_IndexYearMonth-values_at_depth()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.values_at_depth(0)
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonth-values_at_depth()

#start_IndexYearMonth-var()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.var()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonth-var()

#start_IndexYearMonth-__contains__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.__contains__('a')
ValueError('Error parsing datetime string "a" at position 0')
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.__contains__('1517-06')
True
#end_IndexYearMonth-__contains__()

#start_IndexYearMonth-__iter__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04'), numpy.datetime64('1517-12'), numpy.datetime64('1517-06'))
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04'), numpy.datetime64('1517-12'), numpy.datetime64('1517-06'))
#end_IndexYearMonth-__iter__()

#start_IndexYearMonth-__reversed__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06'), numpy.datetime64('1517-12'), numpy.datetime64('1517-04'))
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06'), numpy.datetime64('1517-12'), numpy.datetime64('1517-04'))
#end_IndexYearMonth-__reversed__()

#start_IndexYearMonth-values
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.values
['1517-04' '1517-12' '1517-06']
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.values
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonth-values

#start_IndexYearMonth-interface
>>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))
>>> ix.interface
<Frame>
<Index>                              cls_name       group                doc                  <<U18>
<Index: signature>
__init__(labels, *, name, loc_is_... IndexYearMonth Constructor          Initializer. Args...
from_date_range(start, stop, step... IndexYearMonth Constructor          Get an IndexYearM...
from_labels(labels, *, name)         IndexYearMonth Constructor          Construct an Inde...
from_pandas(value)                   IndexYearMonth Constructor          Given a Pandas in...
from_year_month_range(start, stop... IndexYearMonth Constructor          Get an IndexYearM...
from_year_range(start, stop, step... IndexYearMonth Constructor          Get an IndexYearM...
to_html(config, style_config)        IndexYearMonth Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexYearMonth Exporter             Return a complete...
to_pandas()                          IndexYearMonth Exporter             Return a Pandas I...
to_series()                          IndexYearMonth Exporter             Return a Series w...
to_visidata()                        IndexYearMonth Exporter             Open an interacti...
STATIC                               IndexYearMonth Attribute            bool(x) -> bool R...
depth                                IndexYearMonth Attribute            int([x]) -> integ...
dtype                                IndexYearMonth Attribute            Return the dtype ...
index_types                          IndexYearMonth Attribute            Return a Series o...
memory                               IndexYearMonth Attribute            Return a MemoryDi...
mloc                                 IndexYearMonth Attribute            The memory locati...
...                                  ...            ...                  ...
via_str.rpartition(sep)              IndexYearMonth Accessor String      Partition (split)...
via_str.rsplit(sep, maxsplit)        IndexYearMonth Accessor String      For each element,...
via_str.rstrip(chars)                IndexYearMonth Accessor String      For each element,...
via_str.split(sep, maxsplit)         IndexYearMonth Accessor String      For each element,...
via_str.startswith(prefix, start,... IndexYearMonth Accessor String      Returns a contain...
via_str.strip(chars)                 IndexYearMonth Accessor String      For each element,...
via_str.swapcase()                   IndexYearMonth Accessor String      Return a containe...
via_str.title()                      IndexYearMonth Accessor String      Return a containe...
via_str.upper()                      IndexYearMonth Accessor String      Return a containe...
via_str.zfill(width)                 IndexYearMonth Accessor String      Return the string...
via_re(pattern, flags).search(pos... IndexYearMonth Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexYearMonth Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexYearMonth Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexYearMonth Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexYearMonth Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexYearMonth Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexYearMonth Accessor Regular ... Perform the same ...
<<U63>                               <<U14>         <<U27>               <<U83>
#end_IndexYearMonth-interface

#start_IndexYearMonth-__repr__()
>>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))
>>> repr(ix)
<IndexYearMonth>
1620-09
NaT
1620-11
<datetime64[M]>
#end_IndexYearMonth-__repr__()

#start_IndexYearMonth-__str__()
>>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))
>>> str(ix)
<IndexYearMonth>
1620-09
NaT
1620-11
<datetime64[M]>
#end_IndexYearMonth-__str__()

#start_IndexYearMonth-display()
>>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))
>>> ix.display()
<IndexYearMonth>
1620-09
NaT
1620-11
<datetime64[M]>
>>> ix.display(sf.DisplayConfig(type_show=False))
1620-09
NaT
1620-11
#end_IndexYearMonth-display()

#start_IndexYearMonth-display_tall()
>>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))
>>> ix.display_tall()
<IndexYearMonth>
1620-09
NaT
1620-11
<datetime64[M]>
#end_IndexYearMonth-display_tall()

#start_IndexYearMonth-display_wide()
>>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))
>>> ix.display_wide()
<IndexYearMonth>
1620-09
NaT
1620-11
<datetime64[M]>
#end_IndexYearMonth-display_wide()

#start_IndexYearMonth-drop.iloc[]
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.drop.iloc[1]
<IndexYearMonth>
1517-04
1517-06
<datetime64[M]>
>>> ix.drop.iloc[1:]
<IndexYearMonth>
1517-04
<datetime64[M]>
>>> ix.drop.iloc[[0, 2]]
<IndexYearMonth>
1517-12
<datetime64[M]>
#end_IndexYearMonth-drop.iloc[]

#start_IndexYearMonth-drop.loc[]
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.drop.loc['1517-06']
<IndexYearMonth>
1517-04
1517-12
<datetime64[M]>
>>> ix.drop.loc['1517-06':]
<IndexYearMonth>
1517-04
1517-12
<datetime64[M]>
#end_IndexYearMonth-drop.loc[]

#start_IndexYearMonth-[]
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix[1]
1517-12
>>> ix[1:]
<IndexYearMonth>
1517-12
1517-06
<datetime64[M]>
>>> ix[[0, 2]]
<IndexYearMonth>
1517-04
1517-06
<datetime64[M]>
#end_IndexYearMonth-[]

#start_IndexYearMonth-iloc[]
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.iloc[1]
1517-12
>>> ix.iloc[1:]
<IndexYearMonth>
1517-12
1517-06
<datetime64[M]>
>>> ix.iloc[[0, 2]]
<IndexYearMonth>
1517-04
1517-06
<datetime64[M]>
#end_IndexYearMonth-iloc[]

#start_IndexYearMonth-loc[]
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.loc['1517-06']
1517-06
>>> ix.loc['1517-06':]
<IndexYearMonth>
1517-06
<datetime64[M]>
#end_IndexYearMonth-loc[]

#start_IndexYearMonth-iter_label()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> tuple(ix.iter_label())
(numpy.datetime64('1517-04'), numpy.datetime64('1517-12'), numpy.datetime64('1517-06'))
#end_IndexYearMonth-iter_label()

#start_IndexYearMonth-iter_label().apply()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)
[1517 1517 1517]
#end_IndexYearMonth-iter_label().apply()

#start_IndexYearMonth-iter_label().apply_iter()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))
(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 1, 0, 0), datetime.datetime(1517, 6, 1, 0, 0))
#end_IndexYearMonth-iter_label().apply_iter()

#start_IndexYearMonth-iter_label().apply_iter_items()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))
((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 1, 0, 0)), (2, datetime.datetime(1517, 6, 1, 0, 0)))
#end_IndexYearMonth-iter_label().apply_iter_items()

#start_IndexYearMonth-iter_label().apply_pool()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)
[ 4 12  6]
#end_IndexYearMonth-iter_label().apply_pool()

#start_IndexYearMonth-__add__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix + 2
['1517-06' '1518-02' '1517-08']
#end_IndexYearMonth-__add__()

#start_IndexYearMonth-__and__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix & True
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix & (False, True)
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearMonth-__and__()

#start_IndexYearMonth-__eq__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix == '1517-06'
[False False  True]
#end_IndexYearMonth-__eq__()

#start_IndexYearMonth-__floordiv__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix // '1517-06'
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonth-__floordiv__()

#start_IndexYearMonth-__ge__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix >= '1517-06'
[False  True  True]
#end_IndexYearMonth-__ge__()

#start_IndexYearMonth-__gt__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix > '1517-06'
[False  True False]
#end_IndexYearMonth-__gt__()

#start_IndexYearMonth-__le__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix <= '1517-06'
[ True False  True]
#end_IndexYearMonth-__le__()

#start_IndexYearMonth-__lt__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix < '1517-06'
[ True False False]
#end_IndexYearMonth-__lt__()

#start_IndexYearMonth-__matmul__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexYearMonth-__matmul__()

#start_IndexYearMonth-__mod__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix % '1517-06'
UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonth-__mod__()

#start_IndexYearMonth-__mul__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix * '1517-06'
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonth-__mul__()

#start_IndexYearMonth-__ne__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix != '1517-06'
[ True  True False]
#end_IndexYearMonth-__ne__()

#start_IndexYearMonth-__or__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix | True
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix | (False, True)
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearMonth-__or__()

#start_IndexYearMonth-__pow__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix ** '1517-06'
TypeError("ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearMonth-__pow__()

#start_IndexYearMonth-__radd__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> '1517-06' + ix
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonth-__radd__()

#start_IndexYearMonth-__rfloordiv__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> '1517-06' // ix
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonth-__rfloordiv__()

#start_IndexYearMonth-__rmatmul__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexYearMonth-__rmatmul__()

#start_IndexYearMonth-__rmul__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> '1517-06' * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonth-__rmul__()

#start_IndexYearMonth-__rshift__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix >> 1
TypeError("ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearMonth-__rshift__()

#start_IndexYearMonth-__rsub__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> '1517-06' - ix
[ 2 -6  0]
#end_IndexYearMonth-__rsub__()

#start_IndexYearMonth-__rtruediv__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> '1517-06' / ix
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonth-__rtruediv__()

#start_IndexYearMonth-__sub__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix - 2
['1517-02' '1517-10' '1517-04']
#end_IndexYearMonth-__sub__()

#start_IndexYearMonth-__truediv__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix / '1517-06'
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonth-__truediv__()

#start_IndexYearMonth-__xor__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix ^ True
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix ^ (False, True)
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearMonth-__xor__()

#start_IndexYearMonth-__abs__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> abs(ix)
UFuncTypeError(<ufunc 'absolute'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonth-__abs__()

#start_IndexYearMonth-__invert__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ~ix
TypeError("ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearMonth-__invert__()

#start_IndexYearMonth-__neg__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> -ix
UFuncTypeError(<ufunc 'negative'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonth-__neg__()

#start_IndexYearMonth-__pos__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> +ix
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonth-__pos__()

#start_IndexYearMonth-via_dt.year
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.year
[1517 1517 1517]
#end_IndexYearMonth-via_dt.year

#start_IndexYearMonth-via_dt.month
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.month
[ 4 12  6]
#end_IndexYearMonth-via_dt.month

#start_IndexYearMonth-via_dt.day
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.day
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonth-via_dt.day

#start_IndexYearMonth-via_dt.hour
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.hour
[0 0 0]
#end_IndexYearMonth-via_dt.hour

#start_IndexYearMonth-via_dt.minute
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.minute
[0 0 0]
#end_IndexYearMonth-via_dt.minute

#start_IndexYearMonth-via_dt.second
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.second
[0 0 0]
#end_IndexYearMonth-via_dt.second

#start_IndexYearMonth-via_dt.weekday()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.weekday()
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonth-via_dt.weekday()

#start_IndexYearMonth-via_dt.quarter()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.quarter()
[2 4 2]
#end_IndexYearMonth-via_dt.quarter()

#start_IndexYearMonth-via_dt.is_month_end()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.is_month_end()
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonth-via_dt.is_month_end()

#start_IndexYearMonth-via_dt.is_month_start()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.is_month_start()
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonth-via_dt.is_month_start()

#start_IndexYearMonth-via_dt.is_year_end()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.is_year_end()
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonth-via_dt.is_year_end()

#start_IndexYearMonth-via_dt.is_year_start()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.is_year_start()
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonth-via_dt.is_year_start()

#start_IndexYearMonth-via_dt.is_quarter_end()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.is_quarter_end()
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonth-via_dt.is_quarter_end()

#start_IndexYearMonth-via_dt.is_quarter_start()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.is_quarter_start()
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonth-via_dt.is_quarter_start()

#start_IndexYearMonth-via_dt.timetuple()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.timetuple()
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonth-via_dt.timetuple()

#start_IndexYearMonth-via_dt.isoformat()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.isoformat()
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonth-via_dt.isoformat()

#start_IndexYearMonth-via_dt.fromisoformat()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.fromisoformat()
RuntimeError('invalid dtype (datetime64[M]) for operation on string types')
#end_IndexYearMonth-via_dt.fromisoformat()

#start_IndexYearMonth-via_dt.strftime()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.strftime("%A | %B")
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonth-via_dt.strftime()

#start_IndexYearMonth-via_dt.strptime()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.strptime("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[M]) for operation on string types')
#end_IndexYearMonth-via_dt.strptime()

#start_IndexYearMonth-via_dt.strpdate()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.strpdate("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[M]) for operation on string types')
#end_IndexYearMonth-via_dt.strpdate()

#start_IndexYearMonth-via_str.__getitem__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str[-1]
['4' '2' '6']
#end_IndexYearMonth-via_str.__getitem__()

#start_IndexYearMonth-via_str.capitalize()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.capitalize()
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonth-via_str.capitalize()

#start_IndexYearMonth-via_str.center()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.center(8)
['1517-04 ' '1517-12 ' '1517-06 ']
#end_IndexYearMonth-via_str.center()

#start_IndexYearMonth-via_str.contains()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.contains('X')
[False False False]
#end_IndexYearMonth-via_str.contains()

#start_IndexYearMonth-via_str.count()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.count('X')
[0 0 0]
#end_IndexYearMonth-via_str.count()

#start_IndexYearMonth-via_str.decode()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06')).astype(bytes)
>>> ix
<Index>
b'1517-04'
b'1517-12'
b'1517-06'
<|S25>
>>> ix.via_str.decode()
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonth-via_str.decode()

#start_IndexYearMonth-via_str.encode()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.encode()
[b'1517-04' b'1517-12' b'1517-06']
#end_IndexYearMonth-via_str.encode()

#start_IndexYearMonth-via_str.endswith()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.endswith(' ')
[False False False]
#end_IndexYearMonth-via_str.endswith()

#start_IndexYearMonth-via_str.find()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.find('X')
[-1 -1 -1]
#end_IndexYearMonth-via_str.find()

#start_IndexYearMonth-via_str.format()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.format('{:-^10}')
['-1517-04--' '-1517-12--' '-1517-06--']
#end_IndexYearMonth-via_str.format()

#start_IndexYearMonth-via_str.index()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.index('X')
ValueError('substring not found')
#end_IndexYearMonth-via_str.index()

#start_IndexYearMonth-via_str.isalnum()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.isalnum()
[False False False]
#end_IndexYearMonth-via_str.isalnum()

#start_IndexYearMonth-via_str.isalpha()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.isalpha()
[False False False]
#end_IndexYearMonth-via_str.isalpha()

#start_IndexYearMonth-via_str.isdecimal()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.isdecimal()
[False False False]
#end_IndexYearMonth-via_str.isdecimal()

#start_IndexYearMonth-via_str.isdigit()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.isdigit()
[False False False]
#end_IndexYearMonth-via_str.isdigit()

#start_IndexYearMonth-via_str.islower()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.islower()
[False False False]
#end_IndexYearMonth-via_str.islower()

#start_IndexYearMonth-via_str.isnumeric()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.isnumeric()
[False False False]
#end_IndexYearMonth-via_str.isnumeric()

#start_IndexYearMonth-via_str.isspace()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.isspace()
[False False False]
#end_IndexYearMonth-via_str.isspace()

#start_IndexYearMonth-via_str.istitle()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.istitle()
[False False False]
#end_IndexYearMonth-via_str.istitle()

#start_IndexYearMonth-via_str.isupper()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.isupper()
[False False False]
#end_IndexYearMonth-via_str.isupper()

#start_IndexYearMonth-via_str.ljust()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.ljust(8)
['1517-04 ' '1517-12 ' '1517-06 ']
#end_IndexYearMonth-via_str.ljust()

#start_IndexYearMonth-via_str.len()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.len()
[7 7 7]
#end_IndexYearMonth-via_str.len()

#start_IndexYearMonth-via_str.lower()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.lower()
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonth-via_str.lower()

#start_IndexYearMonth-via_str.lstrip()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.lstrip()
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonth-via_str.lstrip()

#start_IndexYearMonth-via_str.partition()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.partition('X')
[('1517-04', '', '') ('1517-12', '', '') ('1517-06', '', '')]
#end_IndexYearMonth-via_str.partition()

#start_IndexYearMonth-via_str.replace()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.replace('X', '*')
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonth-via_str.replace()

#start_IndexYearMonth-via_str.rfind()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.rfind('X')
[-1 -1 -1]
#end_IndexYearMonth-via_str.rfind()

#start_IndexYearMonth-via_str.rindex()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.rindex('X')
ValueError('substring not found')
#end_IndexYearMonth-via_str.rindex()

#start_IndexYearMonth-via_str.rjust()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.rjust(8)
[' 1517-04' ' 1517-12' ' 1517-06']
#end_IndexYearMonth-via_str.rjust()

#start_IndexYearMonth-via_str.rpartition()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.rpartition('X')
[('', '', '1517-04') ('', '', '1517-12') ('', '', '1517-06')]
#end_IndexYearMonth-via_str.rpartition()

#start_IndexYearMonth-via_str.rsplit()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.rsplit('X')
[('1517-04',) ('1517-12',) ('1517-06',)]
#end_IndexYearMonth-via_str.rsplit()

#start_IndexYearMonth-via_str.rstrip()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.rstrip()
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonth-via_str.rstrip()

#start_IndexYearMonth-via_str.split()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.split('X')
[('1517-04',) ('1517-12',) ('1517-06',)]
#end_IndexYearMonth-via_str.split()

#start_IndexYearMonth-via_str.startswith()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.startswith('X')
[False False False]
#end_IndexYearMonth-via_str.startswith()

#start_IndexYearMonth-via_str.strip()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.strip()
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonth-via_str.strip()

#start_IndexYearMonth-via_str.swapcase()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.swapcase()
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonth-via_str.swapcase()

#start_IndexYearMonth-via_str.title()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.title()
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonth-via_str.title()

#start_IndexYearMonth-via_str.upper()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.upper()
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonth-via_str.upper()

#start_IndexYearMonth-via_str.zfill()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.zfill(8)
['01517-04' '01517-12' '01517-06']
#end_IndexYearMonth-via_str.zfill()

#start_IndexYearMonth-via_re().search()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_re('[X123]').search()
[ True  True  True]
#end_IndexYearMonth-via_re().search()

#start_IndexYearMonth-via_re().match()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_re('[X123]').match()
[ True  True  True]
#end_IndexYearMonth-via_re().match()

#start_IndexYearMonth-via_re().fullmatch()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_re('123').fullmatch()
[False False False]
#end_IndexYearMonth-via_re().fullmatch()

#start_IndexYearMonth-via_re().split()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_re('[X123]').split()
[('', '5', '7-04') ('', '5', '7-', '', '') ('', '5', '7-06')]
#end_IndexYearMonth-via_re().split()

#start_IndexYearMonth-via_re().findall()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_re('[X123]').findall()
[('1', '1') ('1', '1', '1', '2') ('1', '1')]
#end_IndexYearMonth-via_re().findall()

#start_IndexYearMonth-via_re().sub()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_re('[X123]').sub('==')
['==5==7-04' '==5==7-====' '==5==7-06']
#end_IndexYearMonth-via_re().sub()

#start_IndexYearMonth-via_re().subn()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonth>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_re('[X123]').subn('==', 1)
[('==517-04', 1) ('==517-12', 1) ('==517-06', 1)]
#end_IndexYearMonth-via_re().subn()

#start_IndexYearMonth-via_values.apply()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> ix.via_values.apply(np.sin)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearMonth-via_values.apply()

#start_IndexYearMonth-via_values.__array_ufunc__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> np.sin(ix.via_values)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearMonth-via_values.__array_ufunc__()

#start_IndexYearMonth-via_values.__call__()
>>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))
>>> np.sin(ix.via_values(unify_blocks=True))
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearMonth-via_values.__call__()

#start_IndexYearMonthGO-__init__()
>>> sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
#end_IndexYearMonthGO-__init__()

#start_IndexYearMonthGO-from_date_range()
>>> sf.IndexYearMonthGO.from_date_range('2021-12-30', '2022-01-02')
<IndexYearMonthGO>
2021-12
2022-01
<datetime64[M]>
#end_IndexYearMonthGO-from_date_range()

#start_IndexYearMonthGO-from_labels()
>>> sf.IndexYearMonthGO.from_labels(('1517-04', '1517-12', '1517-06'))
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
#end_IndexYearMonthGO-from_labels()

#start_IndexYearMonthGO-from_pandas()
>>> ix = pd.Index(('1517-04', '1517-12', '1517-06'))
>>> sf.IndexYearMonthGO.from_pandas(ix)
<IndexGO>
1517-04
1517-12
1517-06
<object>
#end_IndexYearMonthGO-from_pandas()

#start_IndexYearMonthGO-from_year_month_range()
>>> sf.IndexYearMonthGO.from_year_month_range('2021-12', '2022-01')
<IndexYearMonthGO>
2021-12
2022-01
<datetime64[M]>
#end_IndexYearMonthGO-from_year_month_range()

#start_IndexYearMonthGO-from_year_range()
>>> sf.IndexYearMonthGO.from_year_range('2021', '2022')
<IndexYearMonthGO>
2021-01
2021-02
2021-03
2021-04
2021-05
2021-06
2021-07
2021-08
2021-09
2021-10
2021-11
2021-12
2022-01
2022-02
2022-03
2022-04
2022-05
2022-06
2022-07
2022-08
2022-09
2022-10
2022-11
2022-12
<datetime64[M]>
#end_IndexYearMonthGO-from_year_range()

#start_IndexYearMonthGO-to_pandas()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.to_pandas()
NotImplementedError('Pandas does not support a year month type, and it is ambiguous if a date proxy should be the first of the month or the last of the month.')
#end_IndexYearMonthGO-to_pandas()

#start_IndexYearMonthGO-to_series()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.to_series()
<Series>
<Index>
0        1517-04
1        1517-12
2        1517-06
<int64>  <datetime64[M]>
#end_IndexYearMonthGO-to_series()

#start_IndexYearMonthGO-STATIC
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.STATIC
False
#end_IndexYearMonthGO-STATIC

#start_IndexYearMonthGO-depth
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.depth
1
#end_IndexYearMonthGO-depth

#start_IndexYearMonthGO-dtype
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.dtype
datetime64[M]
#end_IndexYearMonthGO-dtype

#start_IndexYearMonthGO-index_types
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.index_types
<Series>
<Index>
None     <IndexYearMonthGO>
<object> <object>
#end_IndexYearMonthGO-index_types

#start_IndexYearMonthGO-memory
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.memory
          L    Lu    LM  LMu   LMD LMDu  R    Ru    RM   RMu   RMD RMDu
Name      16   B     16  B     16  B     16   B     16   B     16  B
Map       440  B     440 B     440 B     440  B     440  B     440 B
Labels    120  B     136 B     24  B     120  B     136  B     24  B
Positions 96   B     112 B     0   B     8.19 KB    136  B     24  B
Total     1.07 KB    1.1 KB    900 B     9.16 KB    1.12 KB    924 B
#end_IndexYearMonthGO-memory

#start_IndexYearMonthGO-name
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.name
#end_IndexYearMonthGO-name

#start_IndexYearMonthGO-names
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.names
('__index0__',)
#end_IndexYearMonthGO-names

#start_IndexYearMonthGO-nbytes
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.nbytes
24
#end_IndexYearMonthGO-nbytes

#start_IndexYearMonthGO-ndim
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.ndim
1
#end_IndexYearMonthGO-ndim

#start_IndexYearMonthGO-positions
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.positions
[0 1 2]
#end_IndexYearMonthGO-positions

#start_IndexYearMonthGO-shape
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.shape
(3,)
#end_IndexYearMonthGO-shape

#start_IndexYearMonthGO-size
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.size
3
#end_IndexYearMonthGO-size

#start_IndexYearMonthGO-__array__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.__array__()
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonthGO-__array__()

#start_IndexYearMonthGO-__array_ufunc__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> np.array((0, 1, 0)) * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[M]')))
#end_IndexYearMonthGO-__array_ufunc__()

#start_IndexYearMonthGO-__bool__()
>>> s = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexYearMonthGO-__bool__()

#start_IndexYearMonthGO-__copy__()
>>> import copy
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> copy.copy(ix)
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
#end_IndexYearMonthGO-__copy__()

#start_IndexYearMonthGO-__deepcopy__()
>>> import copy
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> copy.deepcopy(ix)
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
#end_IndexYearMonthGO-__deepcopy__()

#start_IndexYearMonthGO-__len__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> len(ix)
3
#end_IndexYearMonthGO-__len__()

#start_IndexYearMonthGO-all()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.all()
True
#end_IndexYearMonthGO-all()

#start_IndexYearMonthGO-any()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.any()
True
#end_IndexYearMonthGO-any()

#start_IndexYearMonthGO-append()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.append('f')
ValueError('Error parsing datetime string "f" at position 0')
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
#end_IndexYearMonthGO-append()

#start_IndexYearMonthGO-astype()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.astype(str)
<IndexGO>
1517-04
1517-12
1517-06
<<U25>
#end_IndexYearMonthGO-astype()

#start_IndexYearMonthGO-copy()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.copy()
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
#end_IndexYearMonthGO-copy()

#start_IndexYearMonthGO-cumprod()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.cumprod()
ValueError("could not find a matching type for multiply.accumulate, requested type has type code 'M'")
#end_IndexYearMonthGO-cumprod()

#start_IndexYearMonthGO-cumsum()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.cumsum()
ValueError("could not find a matching type for add.accumulate, requested type has type code 'M'")
#end_IndexYearMonthGO-cumsum()

#start_IndexYearMonthGO-difference()
>>> ix1 = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix2 = sf.IndexYearMonthGO(('2022-04', '2021-12', '2022-06'))
>>> ix1.difference(ix2)
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
#end_IndexYearMonthGO-difference()

#start_IndexYearMonthGO-dropfalsy()
>>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))
>>> ix
<IndexYearMonthGO>
1620-09
NaT
1620-11
<datetime64[M]>
>>> ix.dropfalsy()
<IndexYearMonthGO>
1620-09
1620-11
<datetime64[M]>
#end_IndexYearMonthGO-dropfalsy()

#start_IndexYearMonthGO-dropna()
>>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))
>>> ix
<IndexYearMonthGO>
1620-09
NaT
1620-11
<datetime64[M]>
>>> ix.dropna()
<IndexYearMonthGO>
1620-09
1620-11
<datetime64[M]>
#end_IndexYearMonthGO-dropna()

#start_IndexYearMonthGO-equals()
>>> ix1 = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix2 = sf.IndexYearMonthGO(('2022-04', '2021-12', '2022-06'))
>>> ix1.equals(ix2)
False
#end_IndexYearMonthGO-equals()

#start_IndexYearMonthGO-extend()
>>> ix1 = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix2 = sf.IndexYearMonthGO(('2022-04', '2021-12', '2022-06'))
>>> ix1.extend(ix2)
>>> ix1
<IndexYearMonthGO>
1517-04
1517-12
1517-06
2022-04
2021-12
2022-06
<datetime64[M]>
#end_IndexYearMonthGO-extend()

#start_IndexYearMonthGO-fillfalsy()
>>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))
>>> ix
<IndexYearMonthGO>
1620-09
NaT
1620-11
<datetime64[M]>
>>> ix.fillfalsy('A')
ValueError('Error parsing datetime string "A" at position 0')
#end_IndexYearMonthGO-fillfalsy()

#start_IndexYearMonthGO-fillna()
>>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))
>>> ix
<IndexYearMonthGO>
1620-09
NaT
1620-11
<datetime64[M]>
>>> ix.fillna(0)
<IndexYearMonthGO>
1620-09
1970-01
1620-11
<datetime64[M]>
#end_IndexYearMonthGO-fillna()

#start_IndexYearMonthGO-head()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.head(2)
<IndexYearMonthGO>
1517-04
1517-12
<datetime64[M]>
#end_IndexYearMonthGO-head()

#start_IndexYearMonthGO-iloc_searchsorted()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.iloc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexYearMonthGO-iloc_searchsorted()

#start_IndexYearMonthGO-intersection()
>>> ix1 = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix2 = sf.IndexYearMonthGO(('2022-04', '2021-12', '2022-06'))
>>> ix1.intersection(ix2)
<IndexYearMonthGO>
<datetime64[M]>
#end_IndexYearMonthGO-intersection()

#start_IndexYearMonthGO-isin()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.isin(('1517-06',))
[False False False]
#end_IndexYearMonthGO-isin()

#start_IndexYearMonthGO-label_widths_at_depth()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> tuple(ix.label_widths_at_depth(0))
((numpy.datetime64('1517-04'), 1), (numpy.datetime64('1517-12'), 1), (numpy.datetime64('1517-06'), 1))
#end_IndexYearMonthGO-label_widths_at_depth()

#start_IndexYearMonthGO-level_add()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.level_add('A')
<IndexHierarchyGO>
A                  1517-04
A                  1517-12
A                  1517-06
<<U1>              <datetime64[M]>
#end_IndexYearMonthGO-level_add()

#start_IndexYearMonthGO-loc_searchsorted()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.loc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexYearMonthGO-loc_searchsorted()

#start_IndexYearMonthGO-loc_to_iloc()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.loc_to_iloc('d')
ValueError('Error parsing datetime string "d" at position 0')
>>> ix.loc_to_iloc(['a', 'e'])
ValueError('Cannot create a NumPy datetime other than NaT with generic units')
>>> ix.loc_to_iloc(slice('c', None))
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexYearMonthGO-loc_to_iloc()

#start_IndexYearMonthGO-max()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.max()
1517-12
#end_IndexYearMonthGO-max()

#start_IndexYearMonthGO-mean()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.mean()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonthGO-mean()

#start_IndexYearMonthGO-median()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.median()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonthGO-median()

#start_IndexYearMonthGO-min()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.min()
1517-04
#end_IndexYearMonthGO-min()

#start_IndexYearMonthGO-prod()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.prod()
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonthGO-prod()

#start_IndexYearMonthGO-relabel()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)
InvalidDatetime64Initializer('Attempting to create datetime64[M] from an integer, which is generally not desired as the result will be an offset from the epoch.')
#end_IndexYearMonthGO-relabel()

#start_IndexYearMonthGO-rename()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.rename('y')
<IndexYearMonthGO: y>
1517-04
1517-12
1517-06
<datetime64[M]>
#end_IndexYearMonthGO-rename()

#start_IndexYearMonthGO-roll()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.roll(2)
<IndexYearMonthGO>
1517-12
1517-06
1517-04
<datetime64[M]>
#end_IndexYearMonthGO-roll()

#start_IndexYearMonthGO-sample()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.sample(2, seed=0)
<IndexYearMonthGO>
1517-12
1517-06
<datetime64[M]>
#end_IndexYearMonthGO-sample()

#start_IndexYearMonthGO-sort()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.sort()
<IndexYearMonthGO>
1517-04
1517-06
1517-12
<datetime64[M]>
>>> ix.sort(ascending=False)
<IndexYearMonthGO>
1517-12
1517-06
1517-04
<datetime64[M]>
#end_IndexYearMonthGO-sort()

#start_IndexYearMonthGO-std()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.std()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonthGO-std()

#start_IndexYearMonthGO-sum()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.sum()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonthGO-sum()

#start_IndexYearMonthGO-tail()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.tail(2)
<IndexYearMonthGO>
1517-12
1517-06
<datetime64[M]>
#end_IndexYearMonthGO-tail()

#start_IndexYearMonthGO-union()
>>> ix1 = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix2 = sf.IndexYearMonthGO(('2022-04', '2021-12', '2022-06'))
>>> ix1.union(ix2)
<IndexYearMonthGO>
1517-04
1517-06
1517-12
2021-12
2022-04
2022-06
<datetime64[M]>
#end_IndexYearMonthGO-union()

#start_IndexYearMonthGO-unique()
>>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))
>>> ix
<IndexYearMonthGO>
1620-09
NaT
1620-11
<datetime64[M]>
>>> ix.unique()
['1620-09'     'NaT' '1620-11']
#end_IndexYearMonthGO-unique()

#start_IndexYearMonthGO-values_at_depth()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.values_at_depth(0)
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonthGO-values_at_depth()

#start_IndexYearMonthGO-var()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.var()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonthGO-var()

#start_IndexYearMonthGO-__contains__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.__contains__('a')
ValueError('Error parsing datetime string "a" at position 0')
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.__contains__('1517-06')
True
#end_IndexYearMonthGO-__contains__()

#start_IndexYearMonthGO-__iter__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04'), numpy.datetime64('1517-12'), numpy.datetime64('1517-06'))
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04'), numpy.datetime64('1517-12'), numpy.datetime64('1517-06'))
#end_IndexYearMonthGO-__iter__()

#start_IndexYearMonthGO-__reversed__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06'), numpy.datetime64('1517-12'), numpy.datetime64('1517-04'))
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06'), numpy.datetime64('1517-12'), numpy.datetime64('1517-04'))
#end_IndexYearMonthGO-__reversed__()

#start_IndexYearMonthGO-values
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.values
['1517-04' '1517-12' '1517-06']
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.values
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonthGO-values

#start_IndexYearMonthGO-interface
>>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))
>>> ix.interface
<Frame>
<Index>                              cls_name         group                doc                  <<U18>
<Index: signature>
__init__(labels, *, name, loc_is_... IndexYearMonthGO Constructor          Initializer. Args...
from_date_range(start, stop, step... IndexYearMonthGO Constructor          Get an IndexYearM...
from_labels(labels, *, name)         IndexYearMonthGO Constructor          Construct an Inde...
from_pandas(value)                   IndexYearMonthGO Constructor          Given a Pandas in...
from_year_month_range(start, stop... IndexYearMonthGO Constructor          Get an IndexYearM...
from_year_range(start, stop, step... IndexYearMonthGO Constructor          Get an IndexYearM...
to_html(config, style_config)        IndexYearMonthGO Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexYearMonthGO Exporter             Return a complete...
to_pandas()                          IndexYearMonthGO Exporter             Return a Pandas I...
to_series()                          IndexYearMonthGO Exporter             Return a Series w...
to_visidata()                        IndexYearMonthGO Exporter             Open an interacti...
STATIC                               IndexYearMonthGO Attribute            bool(x) -> bool R...
depth                                IndexYearMonthGO Attribute            int([x]) -> integ...
dtype                                IndexYearMonthGO Attribute            Return the dtype ...
index_types                          IndexYearMonthGO Attribute            Return a Series o...
memory                               IndexYearMonthGO Attribute            Return a MemoryDi...
mloc                                 IndexYearMonthGO Attribute            The memory locati...
...                                  ...              ...                  ...
via_str.rpartition(sep)              IndexYearMonthGO Accessor String      Partition (split)...
via_str.rsplit(sep, maxsplit)        IndexYearMonthGO Accessor String      For each element,...
via_str.rstrip(chars)                IndexYearMonthGO Accessor String      For each element,...
via_str.split(sep, maxsplit)         IndexYearMonthGO Accessor String      For each element,...
via_str.startswith(prefix, start,... IndexYearMonthGO Accessor String      Returns a contain...
via_str.strip(chars)                 IndexYearMonthGO Accessor String      For each element,...
via_str.swapcase()                   IndexYearMonthGO Accessor String      Return a containe...
via_str.title()                      IndexYearMonthGO Accessor String      Return a containe...
via_str.upper()                      IndexYearMonthGO Accessor String      Return a containe...
via_str.zfill(width)                 IndexYearMonthGO Accessor String      Return the string...
via_re(pattern, flags).search(pos... IndexYearMonthGO Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexYearMonthGO Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexYearMonthGO Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexYearMonthGO Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexYearMonthGO Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexYearMonthGO Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexYearMonthGO Accessor Regular ... Perform the same ...
<<U63>                               <<U16>           <<U27>               <<U83>
#end_IndexYearMonthGO-interface

#start_IndexYearMonthGO-__repr__()
>>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))
>>> repr(ix)
<IndexYearMonthGO>
1620-09
NaT
1620-11
<datetime64[M]>
#end_IndexYearMonthGO-__repr__()

#start_IndexYearMonthGO-__str__()
>>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))
>>> str(ix)
<IndexYearMonthGO>
1620-09
NaT
1620-11
<datetime64[M]>
#end_IndexYearMonthGO-__str__()

#start_IndexYearMonthGO-display()
>>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))
>>> ix.display()
<IndexYearMonthGO>
1620-09
NaT
1620-11
<datetime64[M]>
>>> ix.display(sf.DisplayConfig(type_show=False))
1620-09
NaT
1620-11
#end_IndexYearMonthGO-display()

#start_IndexYearMonthGO-display_tall()
>>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))
>>> ix.display_tall()
<IndexYearMonthGO>
1620-09
NaT
1620-11
<datetime64[M]>
#end_IndexYearMonthGO-display_tall()

#start_IndexYearMonthGO-display_wide()
>>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))
>>> ix.display_wide()
<IndexYearMonthGO>
1620-09
NaT
1620-11
<datetime64[M]>
#end_IndexYearMonthGO-display_wide()

#start_IndexYearMonthGO-drop.iloc[]
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.drop.iloc[1]
<IndexYearMonthGO>
1517-04
1517-06
<datetime64[M]>
>>> ix.drop.iloc[1:]
<IndexYearMonthGO>
1517-04
<datetime64[M]>
>>> ix.drop.iloc[[0, 2]]
<IndexYearMonthGO>
1517-12
<datetime64[M]>
#end_IndexYearMonthGO-drop.iloc[]

#start_IndexYearMonthGO-drop.loc[]
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.drop.loc['1517-06']
<IndexYearMonthGO>
1517-04
1517-12
<datetime64[M]>
>>> ix.drop.loc['1517-06':]
<IndexYearMonthGO>
1517-04
1517-12
<datetime64[M]>
#end_IndexYearMonthGO-drop.loc[]

#start_IndexYearMonthGO-[]
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix[1]
1517-12
>>> ix[1:]
<IndexYearMonthGO>
1517-12
1517-06
<datetime64[M]>
>>> ix[[0, 2]]
<IndexYearMonthGO>
1517-04
1517-06
<datetime64[M]>
#end_IndexYearMonthGO-[]

#start_IndexYearMonthGO-iloc[]
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.iloc[1]
1517-12
>>> ix.iloc[1:]
<IndexYearMonthGO>
1517-12
1517-06
<datetime64[M]>
>>> ix.iloc[[0, 2]]
<IndexYearMonthGO>
1517-04
1517-06
<datetime64[M]>
#end_IndexYearMonthGO-iloc[]

#start_IndexYearMonthGO-loc[]
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.loc['1517-06']
1517-06
>>> ix.loc['1517-06':]
<IndexYearMonthGO>
1517-06
<datetime64[M]>
#end_IndexYearMonthGO-loc[]

#start_IndexYearMonthGO-iter_label()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> tuple(ix.iter_label())
(numpy.datetime64('1517-04'), numpy.datetime64('1517-12'), numpy.datetime64('1517-06'))
#end_IndexYearMonthGO-iter_label()

#start_IndexYearMonthGO-iter_label().apply()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)
[1517 1517 1517]
#end_IndexYearMonthGO-iter_label().apply()

#start_IndexYearMonthGO-iter_label().apply_iter()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))
(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 1, 0, 0), datetime.datetime(1517, 6, 1, 0, 0))
#end_IndexYearMonthGO-iter_label().apply_iter()

#start_IndexYearMonthGO-iter_label().apply_iter_items()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))
((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 1, 0, 0)), (2, datetime.datetime(1517, 6, 1, 0, 0)))
#end_IndexYearMonthGO-iter_label().apply_iter_items()

#start_IndexYearMonthGO-iter_label().apply_pool()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)
[ 4 12  6]
#end_IndexYearMonthGO-iter_label().apply_pool()

#start_IndexYearMonthGO-__add__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix + 2
['1517-06' '1518-02' '1517-08']
#end_IndexYearMonthGO-__add__()

#start_IndexYearMonthGO-__and__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix & True
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix & (False, True)
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearMonthGO-__and__()

#start_IndexYearMonthGO-__eq__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix == '1517-06'
[False False  True]
#end_IndexYearMonthGO-__eq__()

#start_IndexYearMonthGO-__floordiv__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix // '1517-06'
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonthGO-__floordiv__()

#start_IndexYearMonthGO-__ge__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix >= '1517-06'
[False  True  True]
#end_IndexYearMonthGO-__ge__()

#start_IndexYearMonthGO-__gt__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix > '1517-06'
[False  True False]
#end_IndexYearMonthGO-__gt__()

#start_IndexYearMonthGO-__le__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix <= '1517-06'
[ True False  True]
#end_IndexYearMonthGO-__le__()

#start_IndexYearMonthGO-__lt__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix < '1517-06'
[ True False False]
#end_IndexYearMonthGO-__lt__()

#start_IndexYearMonthGO-__matmul__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexYearMonthGO-__matmul__()

#start_IndexYearMonthGO-__mod__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix % '1517-06'
UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonthGO-__mod__()

#start_IndexYearMonthGO-__mul__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix * '1517-06'
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonthGO-__mul__()

#start_IndexYearMonthGO-__ne__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix != '1517-06'
[ True  True False]
#end_IndexYearMonthGO-__ne__()

#start_IndexYearMonthGO-__or__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix | True
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix | (False, True)
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearMonthGO-__or__()

#start_IndexYearMonthGO-__pow__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix ** '1517-06'
TypeError("ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearMonthGO-__pow__()

#start_IndexYearMonthGO-__radd__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> '1517-06' + ix
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonthGO-__radd__()

#start_IndexYearMonthGO-__rfloordiv__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> '1517-06' // ix
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonthGO-__rfloordiv__()

#start_IndexYearMonthGO-__rmatmul__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexYearMonthGO-__rmatmul__()

#start_IndexYearMonthGO-__rmul__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> '1517-06' * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonthGO-__rmul__()

#start_IndexYearMonthGO-__rshift__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix >> 1
TypeError("ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearMonthGO-__rshift__()

#start_IndexYearMonthGO-__rsub__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> '1517-06' - ix
[ 2 -6  0]
#end_IndexYearMonthGO-__rsub__()

#start_IndexYearMonthGO-__rtruediv__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> '1517-06' / ix
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonthGO-__rtruediv__()

#start_IndexYearMonthGO-__sub__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix - 2
['1517-02' '1517-10' '1517-04']
#end_IndexYearMonthGO-__sub__()

#start_IndexYearMonthGO-__truediv__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix / '1517-06'
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonthGO-__truediv__()

#start_IndexYearMonthGO-__xor__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix ^ True
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix ^ (False, True)
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearMonthGO-__xor__()

#start_IndexYearMonthGO-__abs__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> abs(ix)
UFuncTypeError(<ufunc 'absolute'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonthGO-__abs__()

#start_IndexYearMonthGO-__invert__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ~ix
TypeError("ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearMonthGO-__invert__()

#start_IndexYearMonthGO-__neg__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> -ix
UFuncTypeError(<ufunc 'negative'>, (dtype('<M8[M]'), dtype('<M8[M]')))
#end_IndexYearMonthGO-__neg__()

#start_IndexYearMonthGO-__pos__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> +ix
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonthGO-__pos__()

#start_IndexYearMonthGO-via_dt.year
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.year
[1517 1517 1517]
#end_IndexYearMonthGO-via_dt.year

#start_IndexYearMonthGO-via_dt.month
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.month
[ 4 12  6]
#end_IndexYearMonthGO-via_dt.month

#start_IndexYearMonthGO-via_dt.day
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.day
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonthGO-via_dt.day

#start_IndexYearMonthGO-via_dt.hour
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.hour
[0 0 0]
#end_IndexYearMonthGO-via_dt.hour

#start_IndexYearMonthGO-via_dt.minute
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.minute
[0 0 0]
#end_IndexYearMonthGO-via_dt.minute

#start_IndexYearMonthGO-via_dt.second
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.second
[0 0 0]
#end_IndexYearMonthGO-via_dt.second

#start_IndexYearMonthGO-via_dt.weekday()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.weekday()
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonthGO-via_dt.weekday()

#start_IndexYearMonthGO-via_dt.quarter()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.quarter()
[2 4 2]
#end_IndexYearMonthGO-via_dt.quarter()

#start_IndexYearMonthGO-via_dt.is_month_end()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.is_month_end()
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonthGO-via_dt.is_month_end()

#start_IndexYearMonthGO-via_dt.is_month_start()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.is_month_start()
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonthGO-via_dt.is_month_start()

#start_IndexYearMonthGO-via_dt.is_year_end()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.is_year_end()
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonthGO-via_dt.is_year_end()

#start_IndexYearMonthGO-via_dt.is_year_start()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.is_year_start()
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonthGO-via_dt.is_year_start()

#start_IndexYearMonthGO-via_dt.is_quarter_end()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.is_quarter_end()
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonthGO-via_dt.is_quarter_end()

#start_IndexYearMonthGO-via_dt.is_quarter_start()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.is_quarter_start()
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonthGO-via_dt.is_quarter_start()

#start_IndexYearMonthGO-via_dt.timetuple()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.timetuple()
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonthGO-via_dt.timetuple()

#start_IndexYearMonthGO-via_dt.isoformat()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.isoformat()
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonthGO-via_dt.isoformat()

#start_IndexYearMonthGO-via_dt.fromisoformat()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.fromisoformat()
RuntimeError('invalid dtype (datetime64[M]) for operation on string types')
#end_IndexYearMonthGO-via_dt.fromisoformat()

#start_IndexYearMonthGO-via_dt.strftime()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.strftime("%A | %B")
RuntimeError('invalid dtype (datetime64[M]) for date operation')
#end_IndexYearMonthGO-via_dt.strftime()

#start_IndexYearMonthGO-via_dt.strptime()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.strptime("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[M]) for operation on string types')
#end_IndexYearMonthGO-via_dt.strptime()

#start_IndexYearMonthGO-via_dt.strpdate()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_dt.strpdate("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[M]) for operation on string types')
#end_IndexYearMonthGO-via_dt.strpdate()

#start_IndexYearMonthGO-via_str.__getitem__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str[-1]
['4' '2' '6']
#end_IndexYearMonthGO-via_str.__getitem__()

#start_IndexYearMonthGO-via_str.capitalize()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.capitalize()
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonthGO-via_str.capitalize()

#start_IndexYearMonthGO-via_str.center()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.center(8)
['1517-04 ' '1517-12 ' '1517-06 ']
#end_IndexYearMonthGO-via_str.center()

#start_IndexYearMonthGO-via_str.contains()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.contains('X')
[False False False]
#end_IndexYearMonthGO-via_str.contains()

#start_IndexYearMonthGO-via_str.count()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.count('X')
[0 0 0]
#end_IndexYearMonthGO-via_str.count()

#start_IndexYearMonthGO-via_str.decode()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06')).astype(bytes)
>>> ix
<IndexGO>
b'1517-04'
b'1517-12'
b'1517-06'
<|S25>
>>> ix.via_str.decode()
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonthGO-via_str.decode()

#start_IndexYearMonthGO-via_str.encode()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.encode()
[b'1517-04' b'1517-12' b'1517-06']
#end_IndexYearMonthGO-via_str.encode()

#start_IndexYearMonthGO-via_str.endswith()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.endswith(' ')
[False False False]
#end_IndexYearMonthGO-via_str.endswith()

#start_IndexYearMonthGO-via_str.find()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.find('X')
[-1 -1 -1]
#end_IndexYearMonthGO-via_str.find()

#start_IndexYearMonthGO-via_str.format()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.format('{:-^10}')
['-1517-04--' '-1517-12--' '-1517-06--']
#end_IndexYearMonthGO-via_str.format()

#start_IndexYearMonthGO-via_str.index()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.index('X')
ValueError('substring not found')
#end_IndexYearMonthGO-via_str.index()

#start_IndexYearMonthGO-via_str.isalnum()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.isalnum()
[False False False]
#end_IndexYearMonthGO-via_str.isalnum()

#start_IndexYearMonthGO-via_str.isalpha()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.isalpha()
[False False False]
#end_IndexYearMonthGO-via_str.isalpha()

#start_IndexYearMonthGO-via_str.isdecimal()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.isdecimal()
[False False False]
#end_IndexYearMonthGO-via_str.isdecimal()

#start_IndexYearMonthGO-via_str.isdigit()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.isdigit()
[False False False]
#end_IndexYearMonthGO-via_str.isdigit()

#start_IndexYearMonthGO-via_str.islower()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.islower()
[False False False]
#end_IndexYearMonthGO-via_str.islower()

#start_IndexYearMonthGO-via_str.isnumeric()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.isnumeric()
[False False False]
#end_IndexYearMonthGO-via_str.isnumeric()

#start_IndexYearMonthGO-via_str.isspace()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.isspace()
[False False False]
#end_IndexYearMonthGO-via_str.isspace()

#start_IndexYearMonthGO-via_str.istitle()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.istitle()
[False False False]
#end_IndexYearMonthGO-via_str.istitle()

#start_IndexYearMonthGO-via_str.isupper()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.isupper()
[False False False]
#end_IndexYearMonthGO-via_str.isupper()

#start_IndexYearMonthGO-via_str.ljust()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.ljust(8)
['1517-04 ' '1517-12 ' '1517-06 ']
#end_IndexYearMonthGO-via_str.ljust()

#start_IndexYearMonthGO-via_str.len()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.len()
[7 7 7]
#end_IndexYearMonthGO-via_str.len()

#start_IndexYearMonthGO-via_str.lower()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.lower()
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonthGO-via_str.lower()

#start_IndexYearMonthGO-via_str.lstrip()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.lstrip()
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonthGO-via_str.lstrip()

#start_IndexYearMonthGO-via_str.partition()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.partition('X')
[('1517-04', '', '') ('1517-12', '', '') ('1517-06', '', '')]
#end_IndexYearMonthGO-via_str.partition()

#start_IndexYearMonthGO-via_str.replace()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.replace('X', '*')
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonthGO-via_str.replace()

#start_IndexYearMonthGO-via_str.rfind()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.rfind('X')
[-1 -1 -1]
#end_IndexYearMonthGO-via_str.rfind()

#start_IndexYearMonthGO-via_str.rindex()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.rindex('X')
ValueError('substring not found')
#end_IndexYearMonthGO-via_str.rindex()

#start_IndexYearMonthGO-via_str.rjust()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.rjust(8)
[' 1517-04' ' 1517-12' ' 1517-06']
#end_IndexYearMonthGO-via_str.rjust()

#start_IndexYearMonthGO-via_str.rpartition()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.rpartition('X')
[('', '', '1517-04') ('', '', '1517-12') ('', '', '1517-06')]
#end_IndexYearMonthGO-via_str.rpartition()

#start_IndexYearMonthGO-via_str.rsplit()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.rsplit('X')
[('1517-04',) ('1517-12',) ('1517-06',)]
#end_IndexYearMonthGO-via_str.rsplit()

#start_IndexYearMonthGO-via_str.rstrip()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.rstrip()
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonthGO-via_str.rstrip()

#start_IndexYearMonthGO-via_str.split()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.split('X')
[('1517-04',) ('1517-12',) ('1517-06',)]
#end_IndexYearMonthGO-via_str.split()

#start_IndexYearMonthGO-via_str.startswith()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.startswith('X')
[False False False]
#end_IndexYearMonthGO-via_str.startswith()

#start_IndexYearMonthGO-via_str.strip()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.strip()
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonthGO-via_str.strip()

#start_IndexYearMonthGO-via_str.swapcase()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.swapcase()
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonthGO-via_str.swapcase()

#start_IndexYearMonthGO-via_str.title()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.title()
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonthGO-via_str.title()

#start_IndexYearMonthGO-via_str.upper()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.upper()
['1517-04' '1517-12' '1517-06']
#end_IndexYearMonthGO-via_str.upper()

#start_IndexYearMonthGO-via_str.zfill()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_str.zfill(8)
['01517-04' '01517-12' '01517-06']
#end_IndexYearMonthGO-via_str.zfill()

#start_IndexYearMonthGO-via_re().search()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_re('[X123]').search()
[ True  True  True]
#end_IndexYearMonthGO-via_re().search()

#start_IndexYearMonthGO-via_re().match()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_re('[X123]').match()
[ True  True  True]
#end_IndexYearMonthGO-via_re().match()

#start_IndexYearMonthGO-via_re().fullmatch()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_re('123').fullmatch()
[False False False]
#end_IndexYearMonthGO-via_re().fullmatch()

#start_IndexYearMonthGO-via_re().split()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_re('[X123]').split()
[('', '5', '7-04') ('', '5', '7-', '', '') ('', '5', '7-06')]
#end_IndexYearMonthGO-via_re().split()

#start_IndexYearMonthGO-via_re().findall()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_re('[X123]').findall()
[('1', '1') ('1', '1', '1', '2') ('1', '1')]
#end_IndexYearMonthGO-via_re().findall()

#start_IndexYearMonthGO-via_re().sub()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_re('[X123]').sub('==')
['==5==7-04' '==5==7-====' '==5==7-06']
#end_IndexYearMonthGO-via_re().sub()

#start_IndexYearMonthGO-via_re().subn()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix
<IndexYearMonthGO>
1517-04
1517-12
1517-06
<datetime64[M]>
>>> ix.via_re('[X123]').subn('==', 1)
[('==517-04', 1) ('==517-12', 1) ('==517-06', 1)]
#end_IndexYearMonthGO-via_re().subn()

#start_IndexYearMonthGO-via_values.apply()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> ix.via_values.apply(np.sin)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearMonthGO-via_values.apply()

#start_IndexYearMonthGO-via_values.__array_ufunc__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> np.sin(ix.via_values)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearMonthGO-via_values.__array_ufunc__()

#start_IndexYearMonthGO-via_values.__call__()
>>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))
>>> np.sin(ix.via_values(unify_blocks=True))
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexYearMonthGO-via_values.__call__()

#start_IndexDate-__init__()
>>> sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
#end_IndexDate-__init__()

#start_IndexDate-from_date_range()
>>> sf.IndexDate.from_date_range('2021-12-30', '2022-01-02')
<IndexDate>
2021-12-30
2021-12-31
2022-01-01
2022-01-02
<datetime64[D]>
#end_IndexDate-from_date_range()

#start_IndexDate-from_labels()
>>> sf.IndexDate.from_labels(('1517-04-01', '1517-12', '1517-06-30'))
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
#end_IndexDate-from_labels()

#start_IndexDate-from_pandas()
>>> ix = pd.Index(('1517-04-01', '1517-12', '1517-06-30'))
>>> sf.IndexDate.from_pandas(ix)
<Index>
1517-04-01
1517-12
1517-06-30
<object>
#end_IndexDate-from_pandas()

#start_IndexDate-from_year_month_range()
>>> sf.IndexDate.from_year_month_range('2021-12', '2022-01')
<IndexDate>
2021-12-01
2021-12-02
2021-12-03
2021-12-04
2021-12-05
2021-12-06
2021-12-07
2021-12-08
2021-12-09
2021-12-10
2021-12-11
2021-12-12
2021-12-13
2021-12-14
2021-12-15
2021-12-16
2021-12-17
...
2022-01-15
2022-01-16
2022-01-17
2022-01-18
2022-01-19
2022-01-20
2022-01-21
2022-01-22
2022-01-23
2022-01-24
2022-01-25
2022-01-26
2022-01-27
2022-01-28
2022-01-29
2022-01-30
2022-01-31
<datetime64[D]>
#end_IndexDate-from_year_month_range()

#start_IndexDate-from_year_range()
>>> sf.IndexDate.from_year_range('2021', '2022')
<IndexDate>
2021-01-01
2021-01-02
2021-01-03
2021-01-04
2021-01-05
2021-01-06
2021-01-07
2021-01-08
2021-01-09
2021-01-10
2021-01-11
2021-01-12
2021-01-13
2021-01-14
2021-01-15
2021-01-16
2021-01-17
...
2022-12-15
2022-12-16
2022-12-17
2022-12-18
2022-12-19
2022-12-20
2022-12-21
2022-12-22
2022-12-23
2022-12-24
2022-12-25
2022-12-26
2022-12-27
2022-12-28
2022-12-29
2022-12-30
2022-12-31
<datetime64[D]>
#end_IndexDate-from_year_range()

#start_IndexDate-to_pandas()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.to_pandas()
OutOfBoundsDatetime('Out of bounds nanosecond timestamp: 1517-04-01 00:00:00')
#end_IndexDate-to_pandas()

#start_IndexDate-to_series()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.to_series()
<Series>
<Index>
0        1517-04-01
1        1517-12-01
2        1517-06-30
<int64>  <datetime64[D]>
#end_IndexDate-to_series()

#start_IndexDate-STATIC
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.STATIC
True
#end_IndexDate-STATIC

#start_IndexDate-depth
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.depth
1
#end_IndexDate-depth

#start_IndexDate-dtype
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.dtype
datetime64[D]
#end_IndexDate-dtype

#start_IndexDate-index_types
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.index_types
<Series>
<Index>
None     <IndexDate>
<object> <object>
#end_IndexDate-index_types

#start_IndexDate-memory
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.memory
          L   Lu    LM  LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu
Name      16  B     16  B     16  B     16   B     16  B     16  B
Map       440 B     440 B     440 B     440  B     440 B     440 B
Labels    120 B     136 B     24  B     120  B     136 B     24  B
Positions 96  B     112 B     0   B     8.19 KB    136 B     24  B
Total     768 B     800 B     576 B     8.84 KB    824 B     600 B
#end_IndexDate-memory

#start_IndexDate-name
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.name
#end_IndexDate-name

#start_IndexDate-names
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.names
('__index0__',)
#end_IndexDate-names

#start_IndexDate-nbytes
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.nbytes
24
#end_IndexDate-nbytes

#start_IndexDate-ndim
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.ndim
1
#end_IndexDate-ndim

#start_IndexDate-positions
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.positions
[0 1 2]
#end_IndexDate-positions

#start_IndexDate-shape
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.shape
(3,)
#end_IndexDate-shape

#start_IndexDate-size
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.size
3
#end_IndexDate-size

#start_IndexDate-__array__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.__array__()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDate-__array__()

#start_IndexDate-__array_ufunc__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> np.array((0, 1, 0)) * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[D]')))
#end_IndexDate-__array_ufunc__()

#start_IndexDate-__bool__()
>>> s = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexDate-__bool__()

#start_IndexDate-__copy__()
>>> import copy
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> copy.copy(ix)
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
#end_IndexDate-__copy__()

#start_IndexDate-__deepcopy__()
>>> import copy
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> copy.deepcopy(ix)
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
#end_IndexDate-__deepcopy__()

#start_IndexDate-__len__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> len(ix)
3
#end_IndexDate-__len__()

#start_IndexDate-all()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.all()
True
#end_IndexDate-all()

#start_IndexDate-any()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.any()
True
#end_IndexDate-any()

#start_IndexDate-astype()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.astype(str)
<Index>
1517-04-01
1517-12-01
1517-06-30
<<U28>
#end_IndexDate-astype()

#start_IndexDate-copy()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.copy()
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
#end_IndexDate-copy()

#start_IndexDate-cumprod()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.cumprod()
ValueError("could not find a matching type for multiply.accumulate, requested type has type code 'M'")
#end_IndexDate-cumprod()

#start_IndexDate-cumsum()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.cumsum()
ValueError("could not find a matching type for add.accumulate, requested type has type code 'M'")
#end_IndexDate-cumsum()

#start_IndexDate-difference()
>>> ix1 = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix2 = sf.IndexDate(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.difference(ix2)
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
#end_IndexDate-difference()

#start_IndexDate-dropfalsy()
>>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexDate>
1620-09-16
NaT
1620-11-21
<datetime64[D]>
>>> ix.dropfalsy()
<IndexDate>
1620-09-16
1620-11-21
<datetime64[D]>
#end_IndexDate-dropfalsy()

#start_IndexDate-dropna()
>>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexDate>
1620-09-16
NaT
1620-11-21
<datetime64[D]>
>>> ix.dropna()
<IndexDate>
1620-09-16
1620-11-21
<datetime64[D]>
#end_IndexDate-dropna()

#start_IndexDate-equals()
>>> ix1 = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix2 = sf.IndexDate(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.equals(ix2)
False
#end_IndexDate-equals()

#start_IndexDate-fillfalsy()
>>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexDate>
1620-09-16
NaT
1620-11-21
<datetime64[D]>
>>> ix.fillfalsy('A')
ValueError('Error parsing datetime string "A" at position 0')
#end_IndexDate-fillfalsy()

#start_IndexDate-fillna()
>>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexDate>
1620-09-16
NaT
1620-11-21
<datetime64[D]>
>>> ix.fillna(0)
<IndexDate>
1620-09-16
1970-01-01
1620-11-21
<datetime64[D]>
#end_IndexDate-fillna()

#start_IndexDate-head()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.head(2)
<IndexDate>
1517-04-01
1517-12-01
<datetime64[D]>
#end_IndexDate-head()

#start_IndexDate-iloc_searchsorted()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.iloc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexDate-iloc_searchsorted()

#start_IndexDate-intersection()
>>> ix1 = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix2 = sf.IndexDate(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.intersection(ix2)
<IndexDate>
<datetime64[D]>
#end_IndexDate-intersection()

#start_IndexDate-isin()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.isin(('1517-06-30',))
[False False False]
#end_IndexDate-isin()

#start_IndexDate-label_widths_at_depth()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> tuple(ix.label_widths_at_depth(0))
((numpy.datetime64('1517-04-01'), 1), (numpy.datetime64('1517-12-01'), 1), (numpy.datetime64('1517-06-30'), 1))
#end_IndexDate-label_widths_at_depth()

#start_IndexDate-level_add()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.level_add('A')
<IndexHierarchy>
A                1517-04-01
A                1517-12-01
A                1517-06-30
<<U1>            <datetime64[D]>
#end_IndexDate-level_add()

#start_IndexDate-loc_searchsorted()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.loc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexDate-loc_searchsorted()

#start_IndexDate-loc_to_iloc()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.loc_to_iloc('d')
ValueError('Error parsing datetime string "d" at position 0')
>>> ix.loc_to_iloc(['a', 'e'])
ValueError('Cannot create a NumPy datetime other than NaT with generic units')
>>> ix.loc_to_iloc(slice('c', None))
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexDate-loc_to_iloc()

#start_IndexDate-max()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.max()
1517-12-01
#end_IndexDate-max()

#start_IndexDate-mean()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.mean()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDate-mean()

#start_IndexDate-median()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.median()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDate-median()

#start_IndexDate-min()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.min()
1517-04-01
#end_IndexDate-min()

#start_IndexDate-prod()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.prod()
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDate-prod()

#start_IndexDate-relabel()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)
InvalidDatetime64Initializer('Attempting to create datetime64[D] from an integer, which is generally not desired as the result will be an offset from the epoch.')
#end_IndexDate-relabel()

#start_IndexDate-rename()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.rename('y')
<IndexDate: y>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
#end_IndexDate-rename()

#start_IndexDate-roll()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.roll(2)
<IndexDate>
1517-12-01
1517-06-30
1517-04-01
<datetime64[D]>
#end_IndexDate-roll()

#start_IndexDate-sample()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.sample(2, seed=0)
<IndexDate>
1517-12-01
1517-06-30
<datetime64[D]>
#end_IndexDate-sample()

#start_IndexDate-sort()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.sort()
<IndexDate>
1517-04-01
1517-06-30
1517-12-01
<datetime64[D]>
>>> ix.sort(ascending=False)
<IndexDate>
1517-12-01
1517-06-30
1517-04-01
<datetime64[D]>
#end_IndexDate-sort()

#start_IndexDate-std()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.std()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDate-std()

#start_IndexDate-sum()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.sum()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDate-sum()

#start_IndexDate-tail()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.tail(2)
<IndexDate>
1517-12-01
1517-06-30
<datetime64[D]>
#end_IndexDate-tail()

#start_IndexDate-union()
>>> ix1 = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix2 = sf.IndexDate(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.union(ix2)
<IndexDate>
1517-04-01
1517-06-30
1517-12-01
2021-12-31
2022-04-01
2022-06-30
<datetime64[D]>
#end_IndexDate-union()

#start_IndexDate-unique()
>>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexDate>
1620-09-16
NaT
1620-11-21
<datetime64[D]>
>>> ix.unique()
['1620-09-16'        'NaT' '1620-11-21']
#end_IndexDate-unique()

#start_IndexDate-values_at_depth()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.values_at_depth(0)
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDate-values_at_depth()

#start_IndexDate-var()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.var()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDate-var()

#start_IndexDate-__contains__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.__contains__('a')
ValueError('Error parsing datetime string "a" at position 0')
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.__contains__('1517-06-30')
True
#end_IndexDate-__contains__()

#start_IndexDate-__iter__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01'), numpy.datetime64('1517-12-01'), numpy.datetime64('1517-06-30'))
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01'), numpy.datetime64('1517-12-01'), numpy.datetime64('1517-06-30'))
#end_IndexDate-__iter__()

#start_IndexDate-__reversed__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30'), numpy.datetime64('1517-12-01'), numpy.datetime64('1517-04-01'))
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30'), numpy.datetime64('1517-12-01'), numpy.datetime64('1517-04-01'))
#end_IndexDate-__reversed__()

#start_IndexDate-values
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.values
['1517-04-01' '1517-12-01' '1517-06-30']
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.values
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDate-values

#start_IndexDate-interface
>>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.interface
<Frame>
<Index>                              cls_name  group                doc                  <<U18>
<Index: signature>
__init__(labels, *, name, loc_is_... IndexDate Constructor          Initializer. Args...
from_date_range(start, stop, step... IndexDate Constructor          Get an IndexDate ...
from_labels(labels, *, name)         IndexDate Constructor          Construct an Inde...
from_pandas(value)                   IndexDate Constructor          Given a Pandas in...
from_year_month_range(start, stop... IndexDate Constructor          Get an IndexDate ...
from_year_range(start, stop, step... IndexDate Constructor          Get an IndexDate ...
to_html(config, style_config)        IndexDate Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexDate Exporter             Return a complete...
to_pandas()                          IndexDate Exporter             Return a Pandas I...
to_series()                          IndexDate Exporter             Return a Series w...
to_visidata()                        IndexDate Exporter             Open an interacti...
STATIC                               IndexDate Attribute            bool(x) -> bool R...
depth                                IndexDate Attribute            int([x]) -> integ...
dtype                                IndexDate Attribute            Return the dtype ...
index_types                          IndexDate Attribute            Return a Series o...
memory                               IndexDate Attribute            Return a MemoryDi...
mloc                                 IndexDate Attribute            The memory locati...
...                                  ...       ...                  ...
via_str.rpartition(sep)              IndexDate Accessor String      Partition (split)...
via_str.rsplit(sep, maxsplit)        IndexDate Accessor String      For each element,...
via_str.rstrip(chars)                IndexDate Accessor String      For each element,...
via_str.split(sep, maxsplit)         IndexDate Accessor String      For each element,...
via_str.startswith(prefix, start,... IndexDate Accessor String      Returns a contain...
via_str.strip(chars)                 IndexDate Accessor String      For each element,...
via_str.swapcase()                   IndexDate Accessor String      Return a containe...
via_str.title()                      IndexDate Accessor String      Return a containe...
via_str.upper()                      IndexDate Accessor String      Return a containe...
via_str.zfill(width)                 IndexDate Accessor String      Return the string...
via_re(pattern, flags).search(pos... IndexDate Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexDate Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexDate Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexDate Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexDate Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexDate Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexDate Accessor Regular ... Perform the same ...
<<U63>                               <<U9>     <<U27>               <<U83>
#end_IndexDate-interface

#start_IndexDate-__repr__()
>>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))
>>> repr(ix)
<IndexDate>
1620-09-16
NaT
1620-11-21
<datetime64[D]>
#end_IndexDate-__repr__()

#start_IndexDate-__str__()
>>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))
>>> str(ix)
<IndexDate>
1620-09-16
NaT
1620-11-21
<datetime64[D]>
#end_IndexDate-__str__()

#start_IndexDate-display()
>>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display()
<IndexDate>
1620-09-16
NaT
1620-11-21
<datetime64[D]>
>>> ix.display(sf.DisplayConfig(type_show=False))
1620-09-16
NaT
1620-11-21
#end_IndexDate-display()

#start_IndexDate-display_tall()
>>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_tall()
<IndexDate>
1620-09-16
NaT
1620-11-21
<datetime64[D]>
#end_IndexDate-display_tall()

#start_IndexDate-display_wide()
>>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_wide()
<IndexDate>
1620-09-16
NaT
1620-11-21
<datetime64[D]>
#end_IndexDate-display_wide()

#start_IndexDate-drop.iloc[]
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.drop.iloc[1]
<IndexDate>
1517-04-01
1517-06-30
<datetime64[D]>
>>> ix.drop.iloc[1:]
<IndexDate>
1517-04-01
<datetime64[D]>
>>> ix.drop.iloc[[0, 2]]
<IndexDate>
1517-12-01
<datetime64[D]>
#end_IndexDate-drop.iloc[]

#start_IndexDate-drop.loc[]
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.drop.loc['1517-06-30']
<IndexDate>
1517-04-01
1517-12-01
<datetime64[D]>
>>> ix.drop.loc['1517-06-30':]
<IndexDate>
1517-04-01
1517-12-01
<datetime64[D]>
#end_IndexDate-drop.loc[]

#start_IndexDate-[]
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix[1]
1517-12-01
>>> ix[1:]
<IndexDate>
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix[[0, 2]]
<IndexDate>
1517-04-01
1517-06-30
<datetime64[D]>
#end_IndexDate-[]

#start_IndexDate-iloc[]
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.iloc[1]
1517-12-01
>>> ix.iloc[1:]
<IndexDate>
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.iloc[[0, 2]]
<IndexDate>
1517-04-01
1517-06-30
<datetime64[D]>
#end_IndexDate-iloc[]

#start_IndexDate-loc[]
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.loc['1517-06-30']
1517-06-30
>>> ix.loc['1517-06-30':]
<IndexDate>
1517-06-30
<datetime64[D]>
#end_IndexDate-loc[]

#start_IndexDate-iter_label()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.iter_label())
(numpy.datetime64('1517-04-01'), numpy.datetime64('1517-12-01'), numpy.datetime64('1517-06-30'))
#end_IndexDate-iter_label()

#start_IndexDate-iter_label().apply()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)
[1517 1517 1517]
#end_IndexDate-iter_label().apply()

#start_IndexDate-iter_label().apply_iter()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))
(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 1, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))
#end_IndexDate-iter_label().apply_iter()

#start_IndexDate-iter_label().apply_iter_items()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))
((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 1, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))
#end_IndexDate-iter_label().apply_iter_items()

#start_IndexDate-iter_label().apply_pool()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)
[ 4 12  6]
#end_IndexDate-iter_label().apply_pool()

#start_IndexDate-__add__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix + 2
['1517-04-03' '1517-12-03' '1517-07-02']
#end_IndexDate-__add__()

#start_IndexDate-__and__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix & True
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix & (False, True)
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexDate-__and__()

#start_IndexDate-__eq__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix == '1517-06-30'
[False False  True]
#end_IndexDate-__eq__()

#start_IndexDate-__floordiv__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix // '1517-06-30'
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDate-__floordiv__()

#start_IndexDate-__ge__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix >= '1517-06-30'
[False  True  True]
#end_IndexDate-__ge__()

#start_IndexDate-__gt__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix > '1517-06-30'
[False  True False]
#end_IndexDate-__gt__()

#start_IndexDate-__le__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix <= '1517-06-30'
[ True False  True]
#end_IndexDate-__le__()

#start_IndexDate-__lt__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix < '1517-06-30'
[ True False False]
#end_IndexDate-__lt__()

#start_IndexDate-__matmul__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexDate-__matmul__()

#start_IndexDate-__mod__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix % '1517-06-30'
UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDate-__mod__()

#start_IndexDate-__mul__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix * '1517-06-30'
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDate-__mul__()

#start_IndexDate-__ne__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix != '1517-06-30'
[ True  True False]
#end_IndexDate-__ne__()

#start_IndexDate-__or__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix | True
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix | (False, True)
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexDate-__or__()

#start_IndexDate-__pow__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix ** '1517-06-30'
TypeError("ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexDate-__pow__()

#start_IndexDate-__radd__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> '1517-06-30' + ix
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDate-__radd__()

#start_IndexDate-__rfloordiv__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> '1517-06-30' // ix
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDate-__rfloordiv__()

#start_IndexDate-__rmatmul__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexDate-__rmatmul__()

#start_IndexDate-__rmul__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> '1517-06-30' * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDate-__rmul__()

#start_IndexDate-__rshift__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix >> 1
TypeError("ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexDate-__rshift__()

#start_IndexDate-__rsub__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> '1517-06-30' - ix
[  90 -154    0]
#end_IndexDate-__rsub__()

#start_IndexDate-__rtruediv__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> '1517-06-30' / ix
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDate-__rtruediv__()

#start_IndexDate-__sub__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix - 2
['1517-03-30' '1517-11-29' '1517-06-28']
#end_IndexDate-__sub__()

#start_IndexDate-__truediv__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix / '1517-06-30'
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDate-__truediv__()

#start_IndexDate-__xor__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix ^ True
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix ^ (False, True)
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexDate-__xor__()

#start_IndexDate-__abs__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> abs(ix)
UFuncTypeError(<ufunc 'absolute'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDate-__abs__()

#start_IndexDate-__invert__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ~ix
TypeError("ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexDate-__invert__()

#start_IndexDate-__neg__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> -ix
UFuncTypeError(<ufunc 'negative'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDate-__neg__()

#start_IndexDate-__pos__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> +ix
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDate-__pos__()

#start_IndexDate-via_dt.year
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.year
[1517 1517 1517]
#end_IndexDate-via_dt.year

#start_IndexDate-via_dt.month
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.month
[ 4 12  6]
#end_IndexDate-via_dt.month

#start_IndexDate-via_dt.day
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.day
[ 1  1 30]
#end_IndexDate-via_dt.day

#start_IndexDate-via_dt.hour
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.hour
[0 0 0]
#end_IndexDate-via_dt.hour

#start_IndexDate-via_dt.minute
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.minute
[0 0 0]
#end_IndexDate-via_dt.minute

#start_IndexDate-via_dt.second
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.second
[0 0 0]
#end_IndexDate-via_dt.second

#start_IndexDate-via_dt.weekday()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.weekday()
[6 5 5]
#end_IndexDate-via_dt.weekday()

#start_IndexDate-via_dt.quarter()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.quarter()
[2 4 2]
#end_IndexDate-via_dt.quarter()

#start_IndexDate-via_dt.is_month_end()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_month_end()
[False False  True]
#end_IndexDate-via_dt.is_month_end()

#start_IndexDate-via_dt.is_month_start()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_month_start()
[ True  True False]
#end_IndexDate-via_dt.is_month_start()

#start_IndexDate-via_dt.is_year_end()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_year_end()
[False False False]
#end_IndexDate-via_dt.is_year_end()

#start_IndexDate-via_dt.is_year_start()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_year_start()
[False False False]
#end_IndexDate-via_dt.is_year_start()

#start_IndexDate-via_dt.is_quarter_end()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_quarter_end()
[False False  True]
#end_IndexDate-via_dt.is_quarter_end()

#start_IndexDate-via_dt.is_quarter_start()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_quarter_start()
[ True False False]
#end_IndexDate-via_dt.is_quarter_start()

#start_IndexDate-via_dt.timetuple()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.timetuple()
[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=12, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=335, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]
#end_IndexDate-via_dt.timetuple()

#start_IndexDate-via_dt.isoformat()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.isoformat()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDate-via_dt.isoformat()

#start_IndexDate-via_dt.fromisoformat()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.fromisoformat()
RuntimeError('invalid dtype (datetime64[D]) for operation on string types')
#end_IndexDate-via_dt.fromisoformat()

#start_IndexDate-via_dt.strftime()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.strftime("%A | %B")
['Sunday | April' 'Saturday | December' 'Saturday | June']
#end_IndexDate-via_dt.strftime()

#start_IndexDate-via_dt.strptime()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.strptime("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[D]) for operation on string types')
#end_IndexDate-via_dt.strptime()

#start_IndexDate-via_dt.strpdate()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.strpdate("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[D]) for operation on string types')
#end_IndexDate-via_dt.strpdate()

#start_IndexDate-via_str.__getitem__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str[-1]
['1' '1' '0']
#end_IndexDate-via_str.__getitem__()

#start_IndexDate-via_str.capitalize()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.capitalize()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDate-via_str.capitalize()

#start_IndexDate-via_str.center()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.center(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexDate-via_str.center()

#start_IndexDate-via_str.contains()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.contains('X')
[False False False]
#end_IndexDate-via_str.contains()

#start_IndexDate-via_str.count()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.count('X')
[0 0 0]
#end_IndexDate-via_str.count()

#start_IndexDate-via_str.decode()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30')).astype(bytes)
>>> ix
<Index>
b'1517-04-01'
b'1517-12-01'
b'1517-06-30'
<|S28>
>>> ix.via_str.decode()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDate-via_str.decode()

#start_IndexDate-via_str.encode()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.encode()
[b'1517-04-01' b'1517-12-01' b'1517-06-30']
#end_IndexDate-via_str.encode()

#start_IndexDate-via_str.endswith()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.endswith(' ')
[False False False]
#end_IndexDate-via_str.endswith()

#start_IndexDate-via_str.find()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.find('X')
[-1 -1 -1]
#end_IndexDate-via_str.find()

#start_IndexDate-via_str.format()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.format('{:-^10}')
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDate-via_str.format()

#start_IndexDate-via_str.index()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.index('X')
ValueError('substring not found')
#end_IndexDate-via_str.index()

#start_IndexDate-via_str.isalnum()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.isalnum()
[False False False]
#end_IndexDate-via_str.isalnum()

#start_IndexDate-via_str.isalpha()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.isalpha()
[False False False]
#end_IndexDate-via_str.isalpha()

#start_IndexDate-via_str.isdecimal()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.isdecimal()
[False False False]
#end_IndexDate-via_str.isdecimal()

#start_IndexDate-via_str.isdigit()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.isdigit()
[False False False]
#end_IndexDate-via_str.isdigit()

#start_IndexDate-via_str.islower()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.islower()
[False False False]
#end_IndexDate-via_str.islower()

#start_IndexDate-via_str.isnumeric()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.isnumeric()
[False False False]
#end_IndexDate-via_str.isnumeric()

#start_IndexDate-via_str.isspace()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.isspace()
[False False False]
#end_IndexDate-via_str.isspace()

#start_IndexDate-via_str.istitle()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.istitle()
[False False False]
#end_IndexDate-via_str.istitle()

#start_IndexDate-via_str.isupper()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.isupper()
[False False False]
#end_IndexDate-via_str.isupper()

#start_IndexDate-via_str.ljust()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.ljust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexDate-via_str.ljust()

#start_IndexDate-via_str.len()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.len()
[10 10 10]
#end_IndexDate-via_str.len()

#start_IndexDate-via_str.lower()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.lower()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDate-via_str.lower()

#start_IndexDate-via_str.lstrip()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.lstrip()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDate-via_str.lstrip()

#start_IndexDate-via_str.partition()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.partition('X')
[('1517-04-01', '', '') ('1517-12-01', '', '') ('1517-06-30', '', '')]
#end_IndexDate-via_str.partition()

#start_IndexDate-via_str.replace()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.replace('X', '*')
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDate-via_str.replace()

#start_IndexDate-via_str.rfind()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.rfind('X')
[-1 -1 -1]
#end_IndexDate-via_str.rfind()

#start_IndexDate-via_str.rindex()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.rindex('X')
ValueError('substring not found')
#end_IndexDate-via_str.rindex()

#start_IndexDate-via_str.rjust()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.rjust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexDate-via_str.rjust()

#start_IndexDate-via_str.rpartition()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.rpartition('X')
[('', '', '1517-04-01') ('', '', '1517-12-01') ('', '', '1517-06-30')]
#end_IndexDate-via_str.rpartition()

#start_IndexDate-via_str.rsplit()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.rsplit('X')
[('1517-04-01',) ('1517-12-01',) ('1517-06-30',)]
#end_IndexDate-via_str.rsplit()

#start_IndexDate-via_str.rstrip()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.rstrip()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDate-via_str.rstrip()

#start_IndexDate-via_str.split()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.split('X')
[('1517-04-01',) ('1517-12-01',) ('1517-06-30',)]
#end_IndexDate-via_str.split()

#start_IndexDate-via_str.startswith()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.startswith('X')
[False False False]
#end_IndexDate-via_str.startswith()

#start_IndexDate-via_str.strip()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.strip()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDate-via_str.strip()

#start_IndexDate-via_str.swapcase()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.swapcase()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDate-via_str.swapcase()

#start_IndexDate-via_str.title()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.title()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDate-via_str.title()

#start_IndexDate-via_str.upper()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.upper()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDate-via_str.upper()

#start_IndexDate-via_str.zfill()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.zfill(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexDate-via_str.zfill()

#start_IndexDate-via_re().search()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_re('[X123]').search()
[ True  True  True]
#end_IndexDate-via_re().search()

#start_IndexDate-via_re().match()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_re('[X123]').match()
[ True  True  True]
#end_IndexDate-via_re().match()

#start_IndexDate-via_re().fullmatch()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_re('123').fullmatch()
[False False False]
#end_IndexDate-via_re().fullmatch()

#start_IndexDate-via_re().split()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_re('[X123]').split()
[('', '5', '7-04-0', '') ('', '5', '7-', '', '-0', '')
 ('', '5', '7-06-', '0')]
#end_IndexDate-via_re().split()

#start_IndexDate-via_re().findall()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_re('[X123]').findall()
[('1', '1', '1') ('1', '1', '1', '2', '1') ('1', '1', '3')]
#end_IndexDate-via_re().findall()

#start_IndexDate-via_re().sub()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_re('[X123]').sub('==')
['==5==7-04-0==' '==5==7-====-0==' '==5==7-06-==0']
#end_IndexDate-via_re().sub()

#start_IndexDate-via_re().subn()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDate>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_re('[X123]').subn('==', 1)
[('==517-04-01', 1) ('==517-12-01', 1) ('==517-06-30', 1)]
#end_IndexDate-via_re().subn()

#start_IndexDate-via_values.apply()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_values.apply(np.sin)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexDate-via_values.apply()

#start_IndexDate-via_values.__array_ufunc__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> np.sin(ix.via_values)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexDate-via_values.__array_ufunc__()

#start_IndexDate-via_values.__call__()
>>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))
>>> np.sin(ix.via_values(unify_blocks=True))
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexDate-via_values.__call__()

#start_IndexDateGO-__init__()
>>> sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
#end_IndexDateGO-__init__()

#start_IndexDateGO-from_date_range()
>>> sf.IndexDateGO.from_date_range('2021-12-30', '2022-01-02')
<IndexDateGO>
2021-12-30
2021-12-31
2022-01-01
2022-01-02
<datetime64[D]>
#end_IndexDateGO-from_date_range()

#start_IndexDateGO-from_labels()
>>> sf.IndexDateGO.from_labels(('1517-04-01', '1517-12', '1517-06-30'))
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
#end_IndexDateGO-from_labels()

#start_IndexDateGO-from_pandas()
>>> ix = pd.Index(('1517-04-01', '1517-12', '1517-06-30'))
>>> sf.IndexDateGO.from_pandas(ix)
<IndexGO>
1517-04-01
1517-12
1517-06-30
<object>
#end_IndexDateGO-from_pandas()

#start_IndexDateGO-from_year_month_range()
>>> sf.IndexDateGO.from_year_month_range('2021-12', '2022-01')
<IndexDateGO>
2021-12-01
2021-12-02
2021-12-03
2021-12-04
2021-12-05
2021-12-06
2021-12-07
2021-12-08
2021-12-09
2021-12-10
2021-12-11
2021-12-12
2021-12-13
2021-12-14
2021-12-15
2021-12-16
2021-12-17
...
2022-01-15
2022-01-16
2022-01-17
2022-01-18
2022-01-19
2022-01-20
2022-01-21
2022-01-22
2022-01-23
2022-01-24
2022-01-25
2022-01-26
2022-01-27
2022-01-28
2022-01-29
2022-01-30
2022-01-31
<datetime64[D]>
#end_IndexDateGO-from_year_month_range()

#start_IndexDateGO-from_year_range()
>>> sf.IndexDateGO.from_year_range('2021', '2022')
<IndexDateGO>
2021-01-01
2021-01-02
2021-01-03
2021-01-04
2021-01-05
2021-01-06
2021-01-07
2021-01-08
2021-01-09
2021-01-10
2021-01-11
2021-01-12
2021-01-13
2021-01-14
2021-01-15
2021-01-16
2021-01-17
...
2022-12-15
2022-12-16
2022-12-17
2022-12-18
2022-12-19
2022-12-20
2022-12-21
2022-12-22
2022-12-23
2022-12-24
2022-12-25
2022-12-26
2022-12-27
2022-12-28
2022-12-29
2022-12-30
2022-12-31
<datetime64[D]>
#end_IndexDateGO-from_year_range()

#start_IndexDateGO-to_pandas()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.to_pandas()
OutOfBoundsDatetime('Out of bounds nanosecond timestamp: 1517-04-01 00:00:00')
#end_IndexDateGO-to_pandas()

#start_IndexDateGO-to_series()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.to_series()
<Series>
<Index>
0        1517-04-01
1        1517-12-01
2        1517-06-30
<int64>  <datetime64[D]>
#end_IndexDateGO-to_series()

#start_IndexDateGO-STATIC
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.STATIC
False
#end_IndexDateGO-STATIC

#start_IndexDateGO-depth
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.depth
1
#end_IndexDateGO-depth

#start_IndexDateGO-dtype
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.dtype
datetime64[D]
#end_IndexDateGO-dtype

#start_IndexDateGO-index_types
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.index_types
<Series>
<Index>
None     <IndexDateGO>
<object> <object>
#end_IndexDateGO-index_types

#start_IndexDateGO-memory
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.memory
          L    Lu    LM  LMu   LMD LMDu  R    Ru    RM   RMu   RMD RMDu
Name      16   B     16  B     16  B     16   B     16   B     16  B
Map       440  B     440 B     440 B     440  B     440  B     440 B
Labels    120  B     136 B     24  B     120  B     136  B     24  B
Positions 96   B     112 B     0   B     8.19 KB    136  B     24  B
Total     1.07 KB    1.1 KB    900 B     9.16 KB    1.12 KB    924 B
#end_IndexDateGO-memory

#start_IndexDateGO-name
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.name
#end_IndexDateGO-name

#start_IndexDateGO-names
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.names
('__index0__',)
#end_IndexDateGO-names

#start_IndexDateGO-nbytes
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.nbytes
24
#end_IndexDateGO-nbytes

#start_IndexDateGO-ndim
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.ndim
1
#end_IndexDateGO-ndim

#start_IndexDateGO-positions
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.positions
[0 1 2]
#end_IndexDateGO-positions

#start_IndexDateGO-shape
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.shape
(3,)
#end_IndexDateGO-shape

#start_IndexDateGO-size
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.size
3
#end_IndexDateGO-size

#start_IndexDateGO-__array__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.__array__()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDateGO-__array__()

#start_IndexDateGO-__array_ufunc__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> np.array((0, 1, 0)) * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[D]')))
#end_IndexDateGO-__array_ufunc__()

#start_IndexDateGO-__bool__()
>>> s = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexDateGO-__bool__()

#start_IndexDateGO-__copy__()
>>> import copy
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> copy.copy(ix)
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
#end_IndexDateGO-__copy__()

#start_IndexDateGO-__deepcopy__()
>>> import copy
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> copy.deepcopy(ix)
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
#end_IndexDateGO-__deepcopy__()

#start_IndexDateGO-__len__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> len(ix)
3
#end_IndexDateGO-__len__()

#start_IndexDateGO-all()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.all()
True
#end_IndexDateGO-all()

#start_IndexDateGO-any()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.any()
True
#end_IndexDateGO-any()

#start_IndexDateGO-append()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.append('f')
ValueError('Error parsing datetime string "f" at position 0')
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
#end_IndexDateGO-append()

#start_IndexDateGO-astype()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.astype(str)
<IndexGO>
1517-04-01
1517-12-01
1517-06-30
<<U28>
#end_IndexDateGO-astype()

#start_IndexDateGO-copy()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.copy()
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
#end_IndexDateGO-copy()

#start_IndexDateGO-cumprod()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.cumprod()
ValueError("could not find a matching type for multiply.accumulate, requested type has type code 'M'")
#end_IndexDateGO-cumprod()

#start_IndexDateGO-cumsum()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.cumsum()
ValueError("could not find a matching type for add.accumulate, requested type has type code 'M'")
#end_IndexDateGO-cumsum()

#start_IndexDateGO-difference()
>>> ix1 = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix2 = sf.IndexDateGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.difference(ix2)
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
#end_IndexDateGO-difference()

#start_IndexDateGO-dropfalsy()
>>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexDateGO>
1620-09-16
NaT
1620-11-21
<datetime64[D]>
>>> ix.dropfalsy()
<IndexDateGO>
1620-09-16
1620-11-21
<datetime64[D]>
#end_IndexDateGO-dropfalsy()

#start_IndexDateGO-dropna()
>>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexDateGO>
1620-09-16
NaT
1620-11-21
<datetime64[D]>
>>> ix.dropna()
<IndexDateGO>
1620-09-16
1620-11-21
<datetime64[D]>
#end_IndexDateGO-dropna()

#start_IndexDateGO-equals()
>>> ix1 = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix2 = sf.IndexDateGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.equals(ix2)
False
#end_IndexDateGO-equals()

#start_IndexDateGO-extend()
>>> ix1 = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix2 = sf.IndexDateGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.extend(ix2)
>>> ix1
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
2022-04-01
2021-12-31
2022-06-30
<datetime64[D]>
#end_IndexDateGO-extend()

#start_IndexDateGO-fillfalsy()
>>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexDateGO>
1620-09-16
NaT
1620-11-21
<datetime64[D]>
>>> ix.fillfalsy('A')
ValueError('Error parsing datetime string "A" at position 0')
#end_IndexDateGO-fillfalsy()

#start_IndexDateGO-fillna()
>>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexDateGO>
1620-09-16
NaT
1620-11-21
<datetime64[D]>
>>> ix.fillna(0)
<IndexDateGO>
1620-09-16
1970-01-01
1620-11-21
<datetime64[D]>
#end_IndexDateGO-fillna()

#start_IndexDateGO-head()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.head(2)
<IndexDateGO>
1517-04-01
1517-12-01
<datetime64[D]>
#end_IndexDateGO-head()

#start_IndexDateGO-iloc_searchsorted()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.iloc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexDateGO-iloc_searchsorted()

#start_IndexDateGO-intersection()
>>> ix1 = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix2 = sf.IndexDateGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.intersection(ix2)
<IndexDateGO>
<datetime64[D]>
#end_IndexDateGO-intersection()

#start_IndexDateGO-isin()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.isin(('1517-06-30',))
[False False False]
#end_IndexDateGO-isin()

#start_IndexDateGO-label_widths_at_depth()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> tuple(ix.label_widths_at_depth(0))
((numpy.datetime64('1517-04-01'), 1), (numpy.datetime64('1517-12-01'), 1), (numpy.datetime64('1517-06-30'), 1))
#end_IndexDateGO-label_widths_at_depth()

#start_IndexDateGO-level_add()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.level_add('A')
<IndexHierarchyGO>
A                  1517-04-01
A                  1517-12-01
A                  1517-06-30
<<U1>              <datetime64[D]>
#end_IndexDateGO-level_add()

#start_IndexDateGO-loc_searchsorted()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.loc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexDateGO-loc_searchsorted()

#start_IndexDateGO-loc_to_iloc()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.loc_to_iloc('d')
ValueError('Error parsing datetime string "d" at position 0')
>>> ix.loc_to_iloc(['a', 'e'])
ValueError('Cannot create a NumPy datetime other than NaT with generic units')
>>> ix.loc_to_iloc(slice('c', None))
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexDateGO-loc_to_iloc()

#start_IndexDateGO-max()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.max()
1517-12-01
#end_IndexDateGO-max()

#start_IndexDateGO-mean()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.mean()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDateGO-mean()

#start_IndexDateGO-median()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.median()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDateGO-median()

#start_IndexDateGO-min()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.min()
1517-04-01
#end_IndexDateGO-min()

#start_IndexDateGO-prod()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.prod()
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDateGO-prod()

#start_IndexDateGO-relabel()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)
InvalidDatetime64Initializer('Attempting to create datetime64[D] from an integer, which is generally not desired as the result will be an offset from the epoch.')
#end_IndexDateGO-relabel()

#start_IndexDateGO-rename()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.rename('y')
<IndexDateGO: y>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
#end_IndexDateGO-rename()

#start_IndexDateGO-roll()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.roll(2)
<IndexDateGO>
1517-12-01
1517-06-30
1517-04-01
<datetime64[D]>
#end_IndexDateGO-roll()

#start_IndexDateGO-sample()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.sample(2, seed=0)
<IndexDateGO>
1517-12-01
1517-06-30
<datetime64[D]>
#end_IndexDateGO-sample()

#start_IndexDateGO-sort()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.sort()
<IndexDateGO>
1517-04-01
1517-06-30
1517-12-01
<datetime64[D]>
>>> ix.sort(ascending=False)
<IndexDateGO>
1517-12-01
1517-06-30
1517-04-01
<datetime64[D]>
#end_IndexDateGO-sort()

#start_IndexDateGO-std()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.std()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDateGO-std()

#start_IndexDateGO-sum()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.sum()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDateGO-sum()

#start_IndexDateGO-tail()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.tail(2)
<IndexDateGO>
1517-12-01
1517-06-30
<datetime64[D]>
#end_IndexDateGO-tail()

#start_IndexDateGO-union()
>>> ix1 = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix2 = sf.IndexDateGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.union(ix2)
<IndexDateGO>
1517-04-01
1517-06-30
1517-12-01
2021-12-31
2022-04-01
2022-06-30
<datetime64[D]>
#end_IndexDateGO-union()

#start_IndexDateGO-unique()
>>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexDateGO>
1620-09-16
NaT
1620-11-21
<datetime64[D]>
>>> ix.unique()
['1620-09-16'        'NaT' '1620-11-21']
#end_IndexDateGO-unique()

#start_IndexDateGO-values_at_depth()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.values_at_depth(0)
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDateGO-values_at_depth()

#start_IndexDateGO-var()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.var()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDateGO-var()

#start_IndexDateGO-__contains__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.__contains__('a')
ValueError('Error parsing datetime string "a" at position 0')
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.__contains__('1517-06-30')
True
#end_IndexDateGO-__contains__()

#start_IndexDateGO-__iter__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01'), numpy.datetime64('1517-12-01'), numpy.datetime64('1517-06-30'))
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01'), numpy.datetime64('1517-12-01'), numpy.datetime64('1517-06-30'))
#end_IndexDateGO-__iter__()

#start_IndexDateGO-__reversed__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30'), numpy.datetime64('1517-12-01'), numpy.datetime64('1517-04-01'))
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30'), numpy.datetime64('1517-12-01'), numpy.datetime64('1517-04-01'))
#end_IndexDateGO-__reversed__()

#start_IndexDateGO-values
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.values
['1517-04-01' '1517-12-01' '1517-06-30']
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.values
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDateGO-values

#start_IndexDateGO-interface
>>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.interface
<Frame>
<Index>                              cls_name    group                doc                  <<U18>
<Index: signature>
__init__(labels, *, name, loc_is_... IndexDateGO Constructor          Initializer. Args...
from_date_range(start, stop, step... IndexDateGO Constructor          Get an IndexDate ...
from_labels(labels, *, name)         IndexDateGO Constructor          Construct an Inde...
from_pandas(value)                   IndexDateGO Constructor          Given a Pandas in...
from_year_month_range(start, stop... IndexDateGO Constructor          Get an IndexDate ...
from_year_range(start, stop, step... IndexDateGO Constructor          Get an IndexDate ...
to_html(config, style_config)        IndexDateGO Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexDateGO Exporter             Return a complete...
to_pandas()                          IndexDateGO Exporter             Return a Pandas I...
to_series()                          IndexDateGO Exporter             Return a Series w...
to_visidata()                        IndexDateGO Exporter             Open an interacti...
STATIC                               IndexDateGO Attribute            bool(x) -> bool R...
depth                                IndexDateGO Attribute            int([x]) -> integ...
dtype                                IndexDateGO Attribute            Return the dtype ...
index_types                          IndexDateGO Attribute            Return a Series o...
memory                               IndexDateGO Attribute            Return a MemoryDi...
mloc                                 IndexDateGO Attribute            The memory locati...
...                                  ...         ...                  ...
via_str.rpartition(sep)              IndexDateGO Accessor String      Partition (split)...
via_str.rsplit(sep, maxsplit)        IndexDateGO Accessor String      For each element,...
via_str.rstrip(chars)                IndexDateGO Accessor String      For each element,...
via_str.split(sep, maxsplit)         IndexDateGO Accessor String      For each element,...
via_str.startswith(prefix, start,... IndexDateGO Accessor String      Returns a contain...
via_str.strip(chars)                 IndexDateGO Accessor String      For each element,...
via_str.swapcase()                   IndexDateGO Accessor String      Return a containe...
via_str.title()                      IndexDateGO Accessor String      Return a containe...
via_str.upper()                      IndexDateGO Accessor String      Return a containe...
via_str.zfill(width)                 IndexDateGO Accessor String      Return the string...
via_re(pattern, flags).search(pos... IndexDateGO Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexDateGO Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexDateGO Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexDateGO Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexDateGO Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexDateGO Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexDateGO Accessor Regular ... Perform the same ...
<<U63>                               <<U11>      <<U27>               <<U83>
#end_IndexDateGO-interface

#start_IndexDateGO-__repr__()
>>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> repr(ix)
<IndexDateGO>
1620-09-16
NaT
1620-11-21
<datetime64[D]>
#end_IndexDateGO-__repr__()

#start_IndexDateGO-__str__()
>>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> str(ix)
<IndexDateGO>
1620-09-16
NaT
1620-11-21
<datetime64[D]>
#end_IndexDateGO-__str__()

#start_IndexDateGO-display()
>>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display()
<IndexDateGO>
1620-09-16
NaT
1620-11-21
<datetime64[D]>
>>> ix.display(sf.DisplayConfig(type_show=False))
1620-09-16
NaT
1620-11-21
#end_IndexDateGO-display()

#start_IndexDateGO-display_tall()
>>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_tall()
<IndexDateGO>
1620-09-16
NaT
1620-11-21
<datetime64[D]>
#end_IndexDateGO-display_tall()

#start_IndexDateGO-display_wide()
>>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_wide()
<IndexDateGO>
1620-09-16
NaT
1620-11-21
<datetime64[D]>
#end_IndexDateGO-display_wide()

#start_IndexDateGO-drop.iloc[]
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.drop.iloc[1]
<IndexDateGO>
1517-04-01
1517-06-30
<datetime64[D]>
>>> ix.drop.iloc[1:]
<IndexDateGO>
1517-04-01
<datetime64[D]>
>>> ix.drop.iloc[[0, 2]]
<IndexDateGO>
1517-12-01
<datetime64[D]>
#end_IndexDateGO-drop.iloc[]

#start_IndexDateGO-drop.loc[]
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.drop.loc['1517-06-30']
<IndexDateGO>
1517-04-01
1517-12-01
<datetime64[D]>
>>> ix.drop.loc['1517-06-30':]
<IndexDateGO>
1517-04-01
1517-12-01
<datetime64[D]>
#end_IndexDateGO-drop.loc[]

#start_IndexDateGO-[]
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix[1]
1517-12-01
>>> ix[1:]
<IndexDateGO>
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix[[0, 2]]
<IndexDateGO>
1517-04-01
1517-06-30
<datetime64[D]>
#end_IndexDateGO-[]

#start_IndexDateGO-iloc[]
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.iloc[1]
1517-12-01
>>> ix.iloc[1:]
<IndexDateGO>
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.iloc[[0, 2]]
<IndexDateGO>
1517-04-01
1517-06-30
<datetime64[D]>
#end_IndexDateGO-iloc[]

#start_IndexDateGO-loc[]
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.loc['1517-06-30']
1517-06-30
>>> ix.loc['1517-06-30':]
<IndexDateGO>
1517-06-30
<datetime64[D]>
#end_IndexDateGO-loc[]

#start_IndexDateGO-iter_label()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.iter_label())
(numpy.datetime64('1517-04-01'), numpy.datetime64('1517-12-01'), numpy.datetime64('1517-06-30'))
#end_IndexDateGO-iter_label()

#start_IndexDateGO-iter_label().apply()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)
[1517 1517 1517]
#end_IndexDateGO-iter_label().apply()

#start_IndexDateGO-iter_label().apply_iter()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))
(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 1, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))
#end_IndexDateGO-iter_label().apply_iter()

#start_IndexDateGO-iter_label().apply_iter_items()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))
((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 1, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))
#end_IndexDateGO-iter_label().apply_iter_items()

#start_IndexDateGO-iter_label().apply_pool()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)
[ 4 12  6]
#end_IndexDateGO-iter_label().apply_pool()

#start_IndexDateGO-__add__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix + 2
['1517-04-03' '1517-12-03' '1517-07-02']
#end_IndexDateGO-__add__()

#start_IndexDateGO-__and__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix & True
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix & (False, True)
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexDateGO-__and__()

#start_IndexDateGO-__eq__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix == '1517-06-30'
[False False  True]
#end_IndexDateGO-__eq__()

#start_IndexDateGO-__floordiv__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix // '1517-06-30'
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDateGO-__floordiv__()

#start_IndexDateGO-__ge__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix >= '1517-06-30'
[False  True  True]
#end_IndexDateGO-__ge__()

#start_IndexDateGO-__gt__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix > '1517-06-30'
[False  True False]
#end_IndexDateGO-__gt__()

#start_IndexDateGO-__le__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix <= '1517-06-30'
[ True False  True]
#end_IndexDateGO-__le__()

#start_IndexDateGO-__lt__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix < '1517-06-30'
[ True False False]
#end_IndexDateGO-__lt__()

#start_IndexDateGO-__matmul__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexDateGO-__matmul__()

#start_IndexDateGO-__mod__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix % '1517-06-30'
UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDateGO-__mod__()

#start_IndexDateGO-__mul__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix * '1517-06-30'
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDateGO-__mul__()

#start_IndexDateGO-__ne__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix != '1517-06-30'
[ True  True False]
#end_IndexDateGO-__ne__()

#start_IndexDateGO-__or__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix | True
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix | (False, True)
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexDateGO-__or__()

#start_IndexDateGO-__pow__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix ** '1517-06-30'
TypeError("ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexDateGO-__pow__()

#start_IndexDateGO-__radd__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> '1517-06-30' + ix
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDateGO-__radd__()

#start_IndexDateGO-__rfloordiv__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> '1517-06-30' // ix
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDateGO-__rfloordiv__()

#start_IndexDateGO-__rmatmul__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexDateGO-__rmatmul__()

#start_IndexDateGO-__rmul__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> '1517-06-30' * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDateGO-__rmul__()

#start_IndexDateGO-__rshift__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix >> 1
TypeError("ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexDateGO-__rshift__()

#start_IndexDateGO-__rsub__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> '1517-06-30' - ix
[  90 -154    0]
#end_IndexDateGO-__rsub__()

#start_IndexDateGO-__rtruediv__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> '1517-06-30' / ix
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDateGO-__rtruediv__()

#start_IndexDateGO-__sub__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix - 2
['1517-03-30' '1517-11-29' '1517-06-28']
#end_IndexDateGO-__sub__()

#start_IndexDateGO-__truediv__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix / '1517-06-30'
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDateGO-__truediv__()

#start_IndexDateGO-__xor__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix ^ True
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix ^ (False, True)
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexDateGO-__xor__()

#start_IndexDateGO-__abs__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> abs(ix)
UFuncTypeError(<ufunc 'absolute'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDateGO-__abs__()

#start_IndexDateGO-__invert__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ~ix
TypeError("ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexDateGO-__invert__()

#start_IndexDateGO-__neg__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> -ix
UFuncTypeError(<ufunc 'negative'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexDateGO-__neg__()

#start_IndexDateGO-__pos__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> +ix
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDateGO-__pos__()

#start_IndexDateGO-via_dt.year
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.year
[1517 1517 1517]
#end_IndexDateGO-via_dt.year

#start_IndexDateGO-via_dt.month
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.month
[ 4 12  6]
#end_IndexDateGO-via_dt.month

#start_IndexDateGO-via_dt.day
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.day
[ 1  1 30]
#end_IndexDateGO-via_dt.day

#start_IndexDateGO-via_dt.hour
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.hour
[0 0 0]
#end_IndexDateGO-via_dt.hour

#start_IndexDateGO-via_dt.minute
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.minute
[0 0 0]
#end_IndexDateGO-via_dt.minute

#start_IndexDateGO-via_dt.second
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.second
[0 0 0]
#end_IndexDateGO-via_dt.second

#start_IndexDateGO-via_dt.weekday()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.weekday()
[6 5 5]
#end_IndexDateGO-via_dt.weekday()

#start_IndexDateGO-via_dt.quarter()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.quarter()
[2 4 2]
#end_IndexDateGO-via_dt.quarter()

#start_IndexDateGO-via_dt.is_month_end()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_month_end()
[False False  True]
#end_IndexDateGO-via_dt.is_month_end()

#start_IndexDateGO-via_dt.is_month_start()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_month_start()
[ True  True False]
#end_IndexDateGO-via_dt.is_month_start()

#start_IndexDateGO-via_dt.is_year_end()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_year_end()
[False False False]
#end_IndexDateGO-via_dt.is_year_end()

#start_IndexDateGO-via_dt.is_year_start()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_year_start()
[False False False]
#end_IndexDateGO-via_dt.is_year_start()

#start_IndexDateGO-via_dt.is_quarter_end()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_quarter_end()
[False False  True]
#end_IndexDateGO-via_dt.is_quarter_end()

#start_IndexDateGO-via_dt.is_quarter_start()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_quarter_start()
[ True False False]
#end_IndexDateGO-via_dt.is_quarter_start()

#start_IndexDateGO-via_dt.timetuple()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.timetuple()
[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=12, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=335, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]
#end_IndexDateGO-via_dt.timetuple()

#start_IndexDateGO-via_dt.isoformat()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.isoformat()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDateGO-via_dt.isoformat()

#start_IndexDateGO-via_dt.fromisoformat()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.fromisoformat()
RuntimeError('invalid dtype (datetime64[D]) for operation on string types')
#end_IndexDateGO-via_dt.fromisoformat()

#start_IndexDateGO-via_dt.strftime()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.strftime("%A | %B")
['Sunday | April' 'Saturday | December' 'Saturday | June']
#end_IndexDateGO-via_dt.strftime()

#start_IndexDateGO-via_dt.strptime()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.strptime("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[D]) for operation on string types')
#end_IndexDateGO-via_dt.strptime()

#start_IndexDateGO-via_dt.strpdate()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.strpdate("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[D]) for operation on string types')
#end_IndexDateGO-via_dt.strpdate()

#start_IndexDateGO-via_str.__getitem__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str[-1]
['1' '1' '0']
#end_IndexDateGO-via_str.__getitem__()

#start_IndexDateGO-via_str.capitalize()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.capitalize()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDateGO-via_str.capitalize()

#start_IndexDateGO-via_str.center()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.center(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexDateGO-via_str.center()

#start_IndexDateGO-via_str.contains()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.contains('X')
[False False False]
#end_IndexDateGO-via_str.contains()

#start_IndexDateGO-via_str.count()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.count('X')
[0 0 0]
#end_IndexDateGO-via_str.count()

#start_IndexDateGO-via_str.decode()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30')).astype(bytes)
>>> ix
<IndexGO>
b'1517-04-01'
b'1517-12-01'
b'1517-06-30'
<|S28>
>>> ix.via_str.decode()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDateGO-via_str.decode()

#start_IndexDateGO-via_str.encode()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.encode()
[b'1517-04-01' b'1517-12-01' b'1517-06-30']
#end_IndexDateGO-via_str.encode()

#start_IndexDateGO-via_str.endswith()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.endswith(' ')
[False False False]
#end_IndexDateGO-via_str.endswith()

#start_IndexDateGO-via_str.find()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.find('X')
[-1 -1 -1]
#end_IndexDateGO-via_str.find()

#start_IndexDateGO-via_str.format()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.format('{:-^10}')
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDateGO-via_str.format()

#start_IndexDateGO-via_str.index()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.index('X')
ValueError('substring not found')
#end_IndexDateGO-via_str.index()

#start_IndexDateGO-via_str.isalnum()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.isalnum()
[False False False]
#end_IndexDateGO-via_str.isalnum()

#start_IndexDateGO-via_str.isalpha()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.isalpha()
[False False False]
#end_IndexDateGO-via_str.isalpha()

#start_IndexDateGO-via_str.isdecimal()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.isdecimal()
[False False False]
#end_IndexDateGO-via_str.isdecimal()

#start_IndexDateGO-via_str.isdigit()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.isdigit()
[False False False]
#end_IndexDateGO-via_str.isdigit()

#start_IndexDateGO-via_str.islower()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.islower()
[False False False]
#end_IndexDateGO-via_str.islower()

#start_IndexDateGO-via_str.isnumeric()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.isnumeric()
[False False False]
#end_IndexDateGO-via_str.isnumeric()

#start_IndexDateGO-via_str.isspace()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.isspace()
[False False False]
#end_IndexDateGO-via_str.isspace()

#start_IndexDateGO-via_str.istitle()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.istitle()
[False False False]
#end_IndexDateGO-via_str.istitle()

#start_IndexDateGO-via_str.isupper()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.isupper()
[False False False]
#end_IndexDateGO-via_str.isupper()

#start_IndexDateGO-via_str.ljust()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.ljust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexDateGO-via_str.ljust()

#start_IndexDateGO-via_str.len()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.len()
[10 10 10]
#end_IndexDateGO-via_str.len()

#start_IndexDateGO-via_str.lower()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.lower()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDateGO-via_str.lower()

#start_IndexDateGO-via_str.lstrip()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.lstrip()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDateGO-via_str.lstrip()

#start_IndexDateGO-via_str.partition()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.partition('X')
[('1517-04-01', '', '') ('1517-12-01', '', '') ('1517-06-30', '', '')]
#end_IndexDateGO-via_str.partition()

#start_IndexDateGO-via_str.replace()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.replace('X', '*')
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDateGO-via_str.replace()

#start_IndexDateGO-via_str.rfind()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.rfind('X')
[-1 -1 -1]
#end_IndexDateGO-via_str.rfind()

#start_IndexDateGO-via_str.rindex()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.rindex('X')
ValueError('substring not found')
#end_IndexDateGO-via_str.rindex()

#start_IndexDateGO-via_str.rjust()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.rjust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexDateGO-via_str.rjust()

#start_IndexDateGO-via_str.rpartition()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.rpartition('X')
[('', '', '1517-04-01') ('', '', '1517-12-01') ('', '', '1517-06-30')]
#end_IndexDateGO-via_str.rpartition()

#start_IndexDateGO-via_str.rsplit()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.rsplit('X')
[('1517-04-01',) ('1517-12-01',) ('1517-06-30',)]
#end_IndexDateGO-via_str.rsplit()

#start_IndexDateGO-via_str.rstrip()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.rstrip()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDateGO-via_str.rstrip()

#start_IndexDateGO-via_str.split()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.split('X')
[('1517-04-01',) ('1517-12-01',) ('1517-06-30',)]
#end_IndexDateGO-via_str.split()

#start_IndexDateGO-via_str.startswith()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.startswith('X')
[False False False]
#end_IndexDateGO-via_str.startswith()

#start_IndexDateGO-via_str.strip()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.strip()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDateGO-via_str.strip()

#start_IndexDateGO-via_str.swapcase()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.swapcase()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDateGO-via_str.swapcase()

#start_IndexDateGO-via_str.title()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.title()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDateGO-via_str.title()

#start_IndexDateGO-via_str.upper()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.upper()
['1517-04-01' '1517-12-01' '1517-06-30']
#end_IndexDateGO-via_str.upper()

#start_IndexDateGO-via_str.zfill()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_str.zfill(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexDateGO-via_str.zfill()

#start_IndexDateGO-via_re().search()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_re('[X123]').search()
[ True  True  True]
#end_IndexDateGO-via_re().search()

#start_IndexDateGO-via_re().match()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_re('[X123]').match()
[ True  True  True]
#end_IndexDateGO-via_re().match()

#start_IndexDateGO-via_re().fullmatch()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_re('123').fullmatch()
[False False False]
#end_IndexDateGO-via_re().fullmatch()

#start_IndexDateGO-via_re().split()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_re('[X123]').split()
[('', '5', '7-04-0', '') ('', '5', '7-', '', '-0', '')
 ('', '5', '7-06-', '0')]
#end_IndexDateGO-via_re().split()

#start_IndexDateGO-via_re().findall()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_re('[X123]').findall()
[('1', '1', '1') ('1', '1', '1', '2', '1') ('1', '1', '3')]
#end_IndexDateGO-via_re().findall()

#start_IndexDateGO-via_re().sub()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_re('[X123]').sub('==')
['==5==7-04-0==' '==5==7-====-0==' '==5==7-06-==0']
#end_IndexDateGO-via_re().sub()

#start_IndexDateGO-via_re().subn()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexDateGO>
1517-04-01
1517-12-01
1517-06-30
<datetime64[D]>
>>> ix.via_re('[X123]').subn('==', 1)
[('==517-04-01', 1) ('==517-12-01', 1) ('==517-06-30', 1)]
#end_IndexDateGO-via_re().subn()

#start_IndexDateGO-via_values.apply()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_values.apply(np.sin)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexDateGO-via_values.apply()

#start_IndexDateGO-via_values.__array_ufunc__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> np.sin(ix.via_values)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexDateGO-via_values.__array_ufunc__()

#start_IndexDateGO-via_values.__call__()
>>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> np.sin(ix.via_values(unify_blocks=True))
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexDateGO-via_values.__call__()

#start_IndexMinute-__init__()
>>> sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinute-__init__()

#start_IndexMinute-from_labels()
>>> sf.IndexMinute.from_labels(('1517-04-01', '1517-12', '1517-06-30'))
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinute-from_labels()

#start_IndexMinute-from_pandas()
>>> ix = pd.Index(('1517-04-01', '1517-12', '1517-06-30'))
>>> sf.IndexMinute.from_pandas(ix)
<Index>
1517-04-01
1517-12
1517-06-30
<object>
#end_IndexMinute-from_pandas()

#start_IndexMinute-to_pandas()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.to_pandas()
OutOfBoundsDatetime('Out of bounds nanosecond timestamp: 1517-04-01 00:00:00')
#end_IndexMinute-to_pandas()

#start_IndexMinute-to_series()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.to_series()
<Series>
<Index>
0        1517-04-01T00:00
1        1517-12-01T00:00
2        1517-06-30T00:00
<int64>  <datetime64[m]>
#end_IndexMinute-to_series()

#start_IndexMinute-STATIC
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.STATIC
True
#end_IndexMinute-STATIC

#start_IndexMinute-depth
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.depth
1
#end_IndexMinute-depth

#start_IndexMinute-dtype
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.dtype
datetime64[m]
#end_IndexMinute-dtype

#start_IndexMinute-index_types
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.index_types
<Series>
<Index>
None     <IndexMinute>
<object> <object>
#end_IndexMinute-index_types

#start_IndexMinute-memory
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.memory
          L   Lu    LM  LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu
Name      16  B     16  B     16  B     16   B     16  B     16  B
Map       440 B     440 B     440 B     440  B     440 B     440 B
Labels    120 B     136 B     24  B     120  B     136 B     24  B
Positions 96  B     112 B     0   B     8.19 KB    136 B     24  B
Total     768 B     800 B     576 B     8.84 KB    824 B     600 B
#end_IndexMinute-memory

#start_IndexMinute-name
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.name
#end_IndexMinute-name

#start_IndexMinute-names
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.names
('__index0__',)
#end_IndexMinute-names

#start_IndexMinute-nbytes
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.nbytes
24
#end_IndexMinute-nbytes

#start_IndexMinute-ndim
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.ndim
1
#end_IndexMinute-ndim

#start_IndexMinute-positions
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.positions
[0 1 2]
#end_IndexMinute-positions

#start_IndexMinute-shape
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.shape
(3,)
#end_IndexMinute-shape

#start_IndexMinute-size
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.size
3
#end_IndexMinute-size

#start_IndexMinute-__array__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.__array__()
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinute-__array__()

#start_IndexMinute-__array_ufunc__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> np.array((0, 1, 0)) * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[m]')))
#end_IndexMinute-__array_ufunc__()

#start_IndexMinute-__bool__()
>>> s = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexMinute-__bool__()

#start_IndexMinute-__copy__()
>>> import copy
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> copy.copy(ix)
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinute-__copy__()

#start_IndexMinute-__deepcopy__()
>>> import copy
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> copy.deepcopy(ix)
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinute-__deepcopy__()

#start_IndexMinute-__len__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> len(ix)
3
#end_IndexMinute-__len__()

#start_IndexMinute-all()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.all()
True
#end_IndexMinute-all()

#start_IndexMinute-any()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.any()
True
#end_IndexMinute-any()

#start_IndexMinute-astype()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.astype(str)
<Index>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<<U35>
#end_IndexMinute-astype()

#start_IndexMinute-copy()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.copy()
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinute-copy()

#start_IndexMinute-cumprod()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.cumprod()
ValueError("could not find a matching type for multiply.accumulate, requested type has type code 'M'")
#end_IndexMinute-cumprod()

#start_IndexMinute-cumsum()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.cumsum()
ValueError("could not find a matching type for add.accumulate, requested type has type code 'M'")
#end_IndexMinute-cumsum()

#start_IndexMinute-difference()
>>> ix1 = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix2 = sf.IndexMinute(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.difference(ix2)
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinute-difference()

#start_IndexMinute-dropfalsy()
>>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMinute>
1620-09-16T00:00
NaT
1620-11-21T00:00
<datetime64[m]>
>>> ix.dropfalsy()
<IndexMinute>
1620-09-16T00:00
1620-11-21T00:00
<datetime64[m]>
#end_IndexMinute-dropfalsy()

#start_IndexMinute-dropna()
>>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMinute>
1620-09-16T00:00
NaT
1620-11-21T00:00
<datetime64[m]>
>>> ix.dropna()
<IndexMinute>
1620-09-16T00:00
1620-11-21T00:00
<datetime64[m]>
#end_IndexMinute-dropna()

#start_IndexMinute-equals()
>>> ix1 = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix2 = sf.IndexMinute(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.equals(ix2)
False
#end_IndexMinute-equals()

#start_IndexMinute-fillfalsy()
>>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMinute>
1620-09-16T00:00
NaT
1620-11-21T00:00
<datetime64[m]>
>>> ix.fillfalsy('A')
ValueError('Error parsing datetime string "A" at position 0')
#end_IndexMinute-fillfalsy()

#start_IndexMinute-fillna()
>>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMinute>
1620-09-16T00:00
NaT
1620-11-21T00:00
<datetime64[m]>
>>> ix.fillna(0)
<IndexMinute>
1620-09-16T00:00
1970-01-01T00:00
1620-11-21T00:00
<datetime64[m]>
#end_IndexMinute-fillna()

#start_IndexMinute-head()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.head(2)
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
<datetime64[m]>
#end_IndexMinute-head()

#start_IndexMinute-iloc_searchsorted()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.iloc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexMinute-iloc_searchsorted()

#start_IndexMinute-intersection()
>>> ix1 = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix2 = sf.IndexMinute(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.intersection(ix2)
<IndexMinute>
<datetime64[m]>
#end_IndexMinute-intersection()

#start_IndexMinute-isin()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.isin(('1517-06-30',))
[False False False]
#end_IndexMinute-isin()

#start_IndexMinute-label_widths_at_depth()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> tuple(ix.label_widths_at_depth(0))
((numpy.datetime64('1517-04-01T00:00'), 1), (numpy.datetime64('1517-12-01T00:00'), 1), (numpy.datetime64('1517-06-30T00:00'), 1))
#end_IndexMinute-label_widths_at_depth()

#start_IndexMinute-level_add()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.level_add('A')
<IndexHierarchy>
A                1517-04-01T00:00
A                1517-12-01T00:00
A                1517-06-30T00:00
<<U1>            <datetime64[m]>
#end_IndexMinute-level_add()

#start_IndexMinute-loc_searchsorted()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.loc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexMinute-loc_searchsorted()

#start_IndexMinute-loc_to_iloc()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.loc_to_iloc('d')
ValueError('Error parsing datetime string "d" at position 0')
>>> ix.loc_to_iloc(['a', 'e'])
ValueError('Cannot create a NumPy datetime other than NaT with generic units')
>>> ix.loc_to_iloc(slice('c', None))
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexMinute-loc_to_iloc()

#start_IndexMinute-max()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.max()
1517-12-01T00:00
#end_IndexMinute-max()

#start_IndexMinute-mean()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.mean()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))
#end_IndexMinute-mean()

#start_IndexMinute-median()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.median()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))
#end_IndexMinute-median()

#start_IndexMinute-min()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.min()
1517-04-01T00:00
#end_IndexMinute-min()

#start_IndexMinute-prod()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.prod()
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[m]'), dtype('<M8[m]')))
#end_IndexMinute-prod()

#start_IndexMinute-relabel()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)
ErrorInitIndexNonUnique('Labels have non-unique values. Details from iterators not available.')
#end_IndexMinute-relabel()

#start_IndexMinute-rename()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.rename('y')
<IndexMinute: y>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinute-rename()

#start_IndexMinute-roll()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.roll(2)
<IndexMinute>
1517-12-01T00:00
1517-06-30T00:00
1517-04-01T00:00
<datetime64[m]>
#end_IndexMinute-roll()

#start_IndexMinute-sample()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.sample(2, seed=0)
<IndexMinute>
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinute-sample()

#start_IndexMinute-sort()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.sort()
<IndexMinute>
1517-04-01T00:00
1517-06-30T00:00
1517-12-01T00:00
<datetime64[m]>
>>> ix.sort(ascending=False)
<IndexMinute>
1517-12-01T00:00
1517-06-30T00:00
1517-04-01T00:00
<datetime64[m]>
#end_IndexMinute-sort()

#start_IndexMinute-std()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.std()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))
#end_IndexMinute-std()

#start_IndexMinute-sum()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.sum()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))
#end_IndexMinute-sum()

#start_IndexMinute-tail()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.tail(2)
<IndexMinute>
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinute-tail()

#start_IndexMinute-union()
>>> ix1 = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix2 = sf.IndexMinute(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.union(ix2)
<IndexMinute>
1517-04-01T00:00
1517-06-30T00:00
1517-12-01T00:00
2021-12-31T00:00
2022-04-01T00:00
2022-06-30T00:00
<datetime64[m]>
#end_IndexMinute-union()

#start_IndexMinute-unique()
>>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMinute>
1620-09-16T00:00
NaT
1620-11-21T00:00
<datetime64[m]>
>>> ix.unique()
['1620-09-16T00:00'              'NaT' '1620-11-21T00:00']
#end_IndexMinute-unique()

#start_IndexMinute-values_at_depth()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.values_at_depth(0)
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinute-values_at_depth()

#start_IndexMinute-var()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.var()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))
#end_IndexMinute-var()

#start_IndexMinute-__contains__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.__contains__('a')
ValueError('Error parsing datetime string "a" at position 0')
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.__contains__('1517-06-30')
False
#end_IndexMinute-__contains__()

#start_IndexMinute-__iter__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01T00:00'), numpy.datetime64('1517-12-01T00:00'), numpy.datetime64('1517-06-30T00:00'))
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01T00:00'), numpy.datetime64('1517-12-01T00:00'), numpy.datetime64('1517-06-30T00:00'))
#end_IndexMinute-__iter__()

#start_IndexMinute-__reversed__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30T00:00'), numpy.datetime64('1517-12-01T00:00'), numpy.datetime64('1517-04-01T00:00'))
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30T00:00'), numpy.datetime64('1517-12-01T00:00'), numpy.datetime64('1517-04-01T00:00'))
#end_IndexMinute-__reversed__()

#start_IndexMinute-values
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.values
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.values
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinute-values

#start_IndexMinute-interface
>>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.interface
<Frame>
<Index>                              cls_name    group                doc                  <<U18>
<Index: signature>
__init__(labels, *, name, loc_is_... IndexMinute Constructor          Initializer. Args...
from_labels(labels, *, name)         IndexMinute Constructor          Construct an Inde...
from_pandas(value)                   IndexMinute Constructor          Given a Pandas in...
to_html(config, style_config)        IndexMinute Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexMinute Exporter             Return a complete...
to_pandas()                          IndexMinute Exporter             Return a Pandas I...
to_series()                          IndexMinute Exporter             Return a Series w...
to_visidata()                        IndexMinute Exporter             Open an interacti...
STATIC                               IndexMinute Attribute            bool(x) -> bool R...
depth                                IndexMinute Attribute            int([x]) -> integ...
dtype                                IndexMinute Attribute            Return the dtype ...
index_types                          IndexMinute Attribute            Return a Series o...
memory                               IndexMinute Attribute            Return a MemoryDi...
mloc                                 IndexMinute Attribute            The memory locati...
name                                 IndexMinute Attribute            A hashable label ...
names                                IndexMinute Attribute            Provide a suitabl...
nbytes                               IndexMinute Attribute            Return the total ...
...                                  ...         ...                  ...
via_str.rpartition(sep)              IndexMinute Accessor String      Partition (split)...
via_str.rsplit(sep, maxsplit)        IndexMinute Accessor String      For each element,...
via_str.rstrip(chars)                IndexMinute Accessor String      For each element,...
via_str.split(sep, maxsplit)         IndexMinute Accessor String      For each element,...
via_str.startswith(prefix, start,... IndexMinute Accessor String      Returns a contain...
via_str.strip(chars)                 IndexMinute Accessor String      For each element,...
via_str.swapcase()                   IndexMinute Accessor String      Return a containe...
via_str.title()                      IndexMinute Accessor String      Return a containe...
via_str.upper()                      IndexMinute Accessor String      Return a containe...
via_str.zfill(width)                 IndexMinute Accessor String      Return the string...
via_re(pattern, flags).search(pos... IndexMinute Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexMinute Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexMinute Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexMinute Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexMinute Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexMinute Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexMinute Accessor Regular ... Perform the same ...
<<U63>                               <<U11>      <<U27>               <<U83>
#end_IndexMinute-interface

#start_IndexMinute-__repr__()
>>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))
>>> repr(ix)
<IndexMinute>
1620-09-16T00:00
NaT
1620-11-21T00:00
<datetime64[m]>
#end_IndexMinute-__repr__()

#start_IndexMinute-__str__()
>>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))
>>> str(ix)
<IndexMinute>
1620-09-16T00:00
NaT
1620-11-21T00:00
<datetime64[m]>
#end_IndexMinute-__str__()

#start_IndexMinute-display()
>>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display()
<IndexMinute>
1620-09-16T00:00
NaT
1620-11-21T00:00
<datetime64[m]>
>>> ix.display(sf.DisplayConfig(type_show=False))
1620-09-16T00:00
NaT
1620-11-21T00:00
#end_IndexMinute-display()

#start_IndexMinute-display_tall()
>>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_tall()
<IndexMinute>
1620-09-16T00:00
NaT
1620-11-21T00:00
<datetime64[m]>
#end_IndexMinute-display_tall()

#start_IndexMinute-display_wide()
>>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_wide()
<IndexMinute>
1620-09-16T00:00
NaT
1620-11-21T00:00
<datetime64[m]>
#end_IndexMinute-display_wide()

#start_IndexMinute-drop.iloc[]
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.drop.iloc[1]
<IndexMinute>
1517-04-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.drop.iloc[1:]
<IndexMinute>
1517-04-01T00:00
<datetime64[m]>
>>> ix.drop.iloc[[0, 2]]
<IndexMinute>
1517-12-01T00:00
<datetime64[m]>
#end_IndexMinute-drop.iloc[]

#start_IndexMinute-drop.loc[]
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.drop.loc['1517-06-30']
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
<datetime64[m]>
>>> ix.drop.loc['1517-06-30':]
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
<datetime64[m]>
#end_IndexMinute-drop.loc[]

#start_IndexMinute-[]
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix[1]
1517-12-01T00:00
>>> ix[1:]
<IndexMinute>
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix[[0, 2]]
<IndexMinute>
1517-04-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinute-[]

#start_IndexMinute-iloc[]
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.iloc[1]
1517-12-01T00:00
>>> ix.iloc[1:]
<IndexMinute>
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.iloc[[0, 2]]
<IndexMinute>
1517-04-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinute-iloc[]

#start_IndexMinute-loc[]
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.loc['1517-06-30']
<IndexMinute>
1517-06-30T00:00
<datetime64[m]>
>>> ix.loc['1517-06-30':]
<IndexMinute>
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinute-loc[]

#start_IndexMinute-iter_label()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.iter_label())
(numpy.datetime64('1517-04-01T00:00'), numpy.datetime64('1517-12-01T00:00'), numpy.datetime64('1517-06-30T00:00'))
#end_IndexMinute-iter_label()

#start_IndexMinute-iter_label().apply()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)
[1517 1517 1517]
#end_IndexMinute-iter_label().apply()

#start_IndexMinute-iter_label().apply_iter()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))
(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 1, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))
#end_IndexMinute-iter_label().apply_iter()

#start_IndexMinute-iter_label().apply_iter_items()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))
((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 1, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))
#end_IndexMinute-iter_label().apply_iter_items()

#start_IndexMinute-iter_label().apply_pool()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)
[ 4 12  6]
#end_IndexMinute-iter_label().apply_pool()

#start_IndexMinute-__add__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix + 2
['1517-04-01T00:02' '1517-12-01T00:02' '1517-06-30T00:02']
#end_IndexMinute-__add__()

#start_IndexMinute-__and__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix & True
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix & (False, True)
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMinute-__and__()

#start_IndexMinute-__eq__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix == '1517-06-30'
[False False  True]
#end_IndexMinute-__eq__()

#start_IndexMinute-__floordiv__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix // '1517-06-30'
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMinute-__floordiv__()

#start_IndexMinute-__ge__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix >= '1517-06-30'
[False  True  True]
#end_IndexMinute-__ge__()

#start_IndexMinute-__gt__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix > '1517-06-30'
[False  True False]
#end_IndexMinute-__gt__()

#start_IndexMinute-__le__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix <= '1517-06-30'
[ True False  True]
#end_IndexMinute-__le__()

#start_IndexMinute-__lt__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix < '1517-06-30'
[ True False False]
#end_IndexMinute-__lt__()

#start_IndexMinute-__matmul__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexMinute-__matmul__()

#start_IndexMinute-__mod__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix % '1517-06-30'
UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMinute-__mod__()

#start_IndexMinute-__mul__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix * '1517-06-30'
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMinute-__mul__()

#start_IndexMinute-__ne__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix != '1517-06-30'
[ True  True False]
#end_IndexMinute-__ne__()

#start_IndexMinute-__or__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix | True
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix | (False, True)
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMinute-__or__()

#start_IndexMinute-__pow__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix ** '1517-06-30'
TypeError("ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMinute-__pow__()

#start_IndexMinute-__radd__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> '1517-06-30' + ix
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMinute-__radd__()

#start_IndexMinute-__rfloordiv__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> '1517-06-30' // ix
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMinute-__rfloordiv__()

#start_IndexMinute-__rmatmul__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexMinute-__rmatmul__()

#start_IndexMinute-__rmul__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> '1517-06-30' * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMinute-__rmul__()

#start_IndexMinute-__rshift__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix >> 1
TypeError("ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMinute-__rshift__()

#start_IndexMinute-__rsub__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> '1517-06-30' - ix
[  90 -154    0]
#end_IndexMinute-__rsub__()

#start_IndexMinute-__rtruediv__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> '1517-06-30' / ix
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMinute-__rtruediv__()

#start_IndexMinute-__sub__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix - 2
['1517-03-31T23:58' '1517-11-30T23:58' '1517-06-29T23:58']
#end_IndexMinute-__sub__()

#start_IndexMinute-__truediv__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix / '1517-06-30'
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMinute-__truediv__()

#start_IndexMinute-__xor__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix ^ True
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix ^ (False, True)
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMinute-__xor__()

#start_IndexMinute-__abs__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> abs(ix)
UFuncTypeError(<ufunc 'absolute'>, (dtype('<M8[m]'), dtype('<M8[m]')))
#end_IndexMinute-__abs__()

#start_IndexMinute-__invert__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ~ix
TypeError("ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMinute-__invert__()

#start_IndexMinute-__neg__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> -ix
UFuncTypeError(<ufunc 'negative'>, (dtype('<M8[m]'), dtype('<M8[m]')))
#end_IndexMinute-__neg__()

#start_IndexMinute-__pos__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> +ix
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinute-__pos__()

#start_IndexMinute-via_dt.year
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.year
[1517 1517 1517]
#end_IndexMinute-via_dt.year

#start_IndexMinute-via_dt.month
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.month
[ 4 12  6]
#end_IndexMinute-via_dt.month

#start_IndexMinute-via_dt.day
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.day
[ 1  1 30]
#end_IndexMinute-via_dt.day

#start_IndexMinute-via_dt.hour
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.hour
[0 0 0]
#end_IndexMinute-via_dt.hour

#start_IndexMinute-via_dt.minute
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.minute
[0 0 0]
#end_IndexMinute-via_dt.minute

#start_IndexMinute-via_dt.second
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.second
[0 0 0]
#end_IndexMinute-via_dt.second

#start_IndexMinute-via_dt.weekday()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.weekday()
[6 5 5]
#end_IndexMinute-via_dt.weekday()

#start_IndexMinute-via_dt.quarter()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.quarter()
[2 4 2]
#end_IndexMinute-via_dt.quarter()

#start_IndexMinute-via_dt.is_month_end()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_month_end()
[False False  True]
#end_IndexMinute-via_dt.is_month_end()

#start_IndexMinute-via_dt.is_month_start()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_month_start()
[ True  True False]
#end_IndexMinute-via_dt.is_month_start()

#start_IndexMinute-via_dt.is_year_end()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_year_end()
[False False False]
#end_IndexMinute-via_dt.is_year_end()

#start_IndexMinute-via_dt.is_year_start()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_year_start()
[False False False]
#end_IndexMinute-via_dt.is_year_start()

#start_IndexMinute-via_dt.is_quarter_end()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_quarter_end()
[False False  True]
#end_IndexMinute-via_dt.is_quarter_end()

#start_IndexMinute-via_dt.is_quarter_start()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_quarter_start()
[ True False False]
#end_IndexMinute-via_dt.is_quarter_start()

#start_IndexMinute-via_dt.timetuple()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.timetuple()
[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=12, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=335, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]
#end_IndexMinute-via_dt.timetuple()

#start_IndexMinute-via_dt.isoformat()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.isoformat()
['1517-04-01T00:00:00' '1517-12-01T00:00:00' '1517-06-30T00:00:00']
#end_IndexMinute-via_dt.isoformat()

#start_IndexMinute-via_dt.fromisoformat()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.fromisoformat()
RuntimeError('invalid dtype (datetime64[m]) for operation on string types')
#end_IndexMinute-via_dt.fromisoformat()

#start_IndexMinute-via_dt.strftime()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.strftime("%A | %B")
['Sunday | April' 'Saturday | December' 'Saturday | June']
#end_IndexMinute-via_dt.strftime()

#start_IndexMinute-via_dt.strptime()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.strptime("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[m]) for operation on string types')
#end_IndexMinute-via_dt.strptime()

#start_IndexMinute-via_dt.strpdate()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.strpdate("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[m]) for operation on string types')
#end_IndexMinute-via_dt.strpdate()

#start_IndexMinute-via_str.__getitem__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str[-1]
['0' '0' '0']
#end_IndexMinute-via_str.__getitem__()

#start_IndexMinute-via_str.capitalize()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.capitalize()
['1517-04-01t00:00' '1517-12-01t00:00' '1517-06-30t00:00']
#end_IndexMinute-via_str.capitalize()

#start_IndexMinute-via_str.center()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.center(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMinute-via_str.center()

#start_IndexMinute-via_str.contains()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.contains('X')
[False False False]
#end_IndexMinute-via_str.contains()

#start_IndexMinute-via_str.count()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.count('X')
[0 0 0]
#end_IndexMinute-via_str.count()

#start_IndexMinute-via_str.decode()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30')).astype(bytes)
>>> ix
<Index>
b'1517-04-01T00:00'
b'1517-12-01T00:00'
b'1517-06-30T00:00'
<|S35>
>>> ix.via_str.decode()
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinute-via_str.decode()

#start_IndexMinute-via_str.encode()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.encode()
[b'1517-04-01T00:00' b'1517-12-01T00:00' b'1517-06-30T00:00']
#end_IndexMinute-via_str.encode()

#start_IndexMinute-via_str.endswith()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.endswith(' ')
[False False False]
#end_IndexMinute-via_str.endswith()

#start_IndexMinute-via_str.find()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.find('X')
[-1 -1 -1]
#end_IndexMinute-via_str.find()

#start_IndexMinute-via_str.format()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.format('{:-^10}')
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinute-via_str.format()

#start_IndexMinute-via_str.index()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.index('X')
ValueError('substring not found')
#end_IndexMinute-via_str.index()

#start_IndexMinute-via_str.isalnum()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.isalnum()
[False False False]
#end_IndexMinute-via_str.isalnum()

#start_IndexMinute-via_str.isalpha()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.isalpha()
[False False False]
#end_IndexMinute-via_str.isalpha()

#start_IndexMinute-via_str.isdecimal()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.isdecimal()
[False False False]
#end_IndexMinute-via_str.isdecimal()

#start_IndexMinute-via_str.isdigit()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.isdigit()
[False False False]
#end_IndexMinute-via_str.isdigit()

#start_IndexMinute-via_str.islower()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.islower()
[False False False]
#end_IndexMinute-via_str.islower()

#start_IndexMinute-via_str.isnumeric()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.isnumeric()
[False False False]
#end_IndexMinute-via_str.isnumeric()

#start_IndexMinute-via_str.isspace()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.isspace()
[False False False]
#end_IndexMinute-via_str.isspace()

#start_IndexMinute-via_str.istitle()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.istitle()
[ True  True  True]
#end_IndexMinute-via_str.istitle()

#start_IndexMinute-via_str.isupper()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.isupper()
[ True  True  True]
#end_IndexMinute-via_str.isupper()

#start_IndexMinute-via_str.ljust()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.ljust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMinute-via_str.ljust()

#start_IndexMinute-via_str.len()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.len()
[16 16 16]
#end_IndexMinute-via_str.len()

#start_IndexMinute-via_str.lower()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.lower()
['1517-04-01t00:00' '1517-12-01t00:00' '1517-06-30t00:00']
#end_IndexMinute-via_str.lower()

#start_IndexMinute-via_str.lstrip()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.lstrip()
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinute-via_str.lstrip()

#start_IndexMinute-via_str.partition()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.partition('X')
[('1517-04-01T00:00', '', '') ('1517-12-01T00:00', '', '')
 ('1517-06-30T00:00', '', '')]
#end_IndexMinute-via_str.partition()

#start_IndexMinute-via_str.replace()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.replace('X', '*')
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinute-via_str.replace()

#start_IndexMinute-via_str.rfind()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.rfind('X')
[-1 -1 -1]
#end_IndexMinute-via_str.rfind()

#start_IndexMinute-via_str.rindex()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.rindex('X')
ValueError('substring not found')
#end_IndexMinute-via_str.rindex()

#start_IndexMinute-via_str.rjust()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.rjust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMinute-via_str.rjust()

#start_IndexMinute-via_str.rpartition()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.rpartition('X')
[('', '', '1517-04-01T00:00') ('', '', '1517-12-01T00:00')
 ('', '', '1517-06-30T00:00')]
#end_IndexMinute-via_str.rpartition()

#start_IndexMinute-via_str.rsplit()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.rsplit('X')
[('1517-04-01T00:00',) ('1517-12-01T00:00',) ('1517-06-30T00:00',)]
#end_IndexMinute-via_str.rsplit()

#start_IndexMinute-via_str.rstrip()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.rstrip()
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinute-via_str.rstrip()

#start_IndexMinute-via_str.split()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.split('X')
[('1517-04-01T00:00',) ('1517-12-01T00:00',) ('1517-06-30T00:00',)]
#end_IndexMinute-via_str.split()

#start_IndexMinute-via_str.startswith()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.startswith('X')
[False False False]
#end_IndexMinute-via_str.startswith()

#start_IndexMinute-via_str.strip()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.strip()
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinute-via_str.strip()

#start_IndexMinute-via_str.swapcase()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.swapcase()
['1517-04-01t00:00' '1517-12-01t00:00' '1517-06-30t00:00']
#end_IndexMinute-via_str.swapcase()

#start_IndexMinute-via_str.title()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.title()
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinute-via_str.title()

#start_IndexMinute-via_str.upper()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.upper()
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinute-via_str.upper()

#start_IndexMinute-via_str.zfill()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.zfill(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMinute-via_str.zfill()

#start_IndexMinute-via_re().search()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_re('[X123]').search()
[ True  True  True]
#end_IndexMinute-via_re().search()

#start_IndexMinute-via_re().match()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_re('[X123]').match()
[ True  True  True]
#end_IndexMinute-via_re().match()

#start_IndexMinute-via_re().fullmatch()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_re('123').fullmatch()
[False False False]
#end_IndexMinute-via_re().fullmatch()

#start_IndexMinute-via_re().split()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_re('[X123]').split()
[('', '5', '7-04-0', 'T00:00') ('', '5', '7-', '', '-0', 'T00:00')
 ('', '5', '7-06-', '0T00:00')]
#end_IndexMinute-via_re().split()

#start_IndexMinute-via_re().findall()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_re('[X123]').findall()
[('1', '1', '1') ('1', '1', '1', '2', '1') ('1', '1', '3')]
#end_IndexMinute-via_re().findall()

#start_IndexMinute-via_re().sub()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_re('[X123]').sub('==')
['==5==7-04-0==T00:00' '==5==7-====-0==T00:00' '==5==7-06-==0T00:00']
#end_IndexMinute-via_re().sub()

#start_IndexMinute-via_re().subn()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinute>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_re('[X123]').subn('==', 1)
[('==517-04-01T00:00', 1) ('==517-12-01T00:00', 1)
 ('==517-06-30T00:00', 1)]
#end_IndexMinute-via_re().subn()

#start_IndexMinute-via_values.apply()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_values.apply(np.sin)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMinute-via_values.apply()

#start_IndexMinute-via_values.__array_ufunc__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> np.sin(ix.via_values)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMinute-via_values.__array_ufunc__()

#start_IndexMinute-via_values.__call__()
>>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))
>>> np.sin(ix.via_values(unify_blocks=True))
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMinute-via_values.__call__()

#start_IndexMinuteGO-__init__()
>>> sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinuteGO-__init__()

#start_IndexMinuteGO-from_labels()
>>> sf.IndexMinuteGO.from_labels(('1517-04-01', '1517-12', '1517-06-30'))
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinuteGO-from_labels()

#start_IndexMinuteGO-from_pandas()
>>> ix = pd.Index(('1517-04-01', '1517-12', '1517-06-30'))
>>> sf.IndexMinuteGO.from_pandas(ix)
<IndexGO>
1517-04-01
1517-12
1517-06-30
<object>
#end_IndexMinuteGO-from_pandas()

#start_IndexMinuteGO-to_pandas()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.to_pandas()
OutOfBoundsDatetime('Out of bounds nanosecond timestamp: 1517-04-01 00:00:00')
#end_IndexMinuteGO-to_pandas()

#start_IndexMinuteGO-to_series()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.to_series()
<Series>
<Index>
0        1517-04-01T00:00
1        1517-12-01T00:00
2        1517-06-30T00:00
<int64>  <datetime64[m]>
#end_IndexMinuteGO-to_series()

#start_IndexMinuteGO-STATIC
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.STATIC
False
#end_IndexMinuteGO-STATIC

#start_IndexMinuteGO-depth
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.depth
1
#end_IndexMinuteGO-depth

#start_IndexMinuteGO-dtype
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.dtype
datetime64[m]
#end_IndexMinuteGO-dtype

#start_IndexMinuteGO-index_types
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.index_types
<Series>
<Index>
None     <IndexMinuteGO>
<object> <object>
#end_IndexMinuteGO-index_types

#start_IndexMinuteGO-memory
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.memory
          L    Lu    LM   LMu   LMD LMDu  R    Ru    RM   RMu   RMD RMDu
Name      16   B     16   B     16  B     16   B     16   B     16  B
Map       440  B     440  B     440 B     440  B     440  B     440 B
Labels    120  B     136  B     24  B     120  B     136  B     24  B
Positions 96   B     112  B     0   B     8.19 KB    136  B     24  B
Total     1.11 KB    1.14 KB    948 B     9.21 KB    1.17 KB    972 B
#end_IndexMinuteGO-memory

#start_IndexMinuteGO-name
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.name
#end_IndexMinuteGO-name

#start_IndexMinuteGO-names
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.names
('__index0__',)
#end_IndexMinuteGO-names

#start_IndexMinuteGO-nbytes
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.nbytes
24
#end_IndexMinuteGO-nbytes

#start_IndexMinuteGO-ndim
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.ndim
1
#end_IndexMinuteGO-ndim

#start_IndexMinuteGO-positions
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.positions
[0 1 2]
#end_IndexMinuteGO-positions

#start_IndexMinuteGO-shape
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.shape
(3,)
#end_IndexMinuteGO-shape

#start_IndexMinuteGO-size
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.size
3
#end_IndexMinuteGO-size

#start_IndexMinuteGO-__array__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.__array__()
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinuteGO-__array__()

#start_IndexMinuteGO-__array_ufunc__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> np.array((0, 1, 0)) * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[m]')))
#end_IndexMinuteGO-__array_ufunc__()

#start_IndexMinuteGO-__bool__()
>>> s = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexMinuteGO-__bool__()

#start_IndexMinuteGO-__copy__()
>>> import copy
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> copy.copy(ix)
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinuteGO-__copy__()

#start_IndexMinuteGO-__deepcopy__()
>>> import copy
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> copy.deepcopy(ix)
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinuteGO-__deepcopy__()

#start_IndexMinuteGO-__len__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> len(ix)
3
#end_IndexMinuteGO-__len__()

#start_IndexMinuteGO-all()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.all()
True
#end_IndexMinuteGO-all()

#start_IndexMinuteGO-any()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.any()
True
#end_IndexMinuteGO-any()

#start_IndexMinuteGO-append()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.append('f')
ValueError('Error parsing datetime string "f" at position 0')
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinuteGO-append()

#start_IndexMinuteGO-astype()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.astype(str)
<IndexGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<<U35>
#end_IndexMinuteGO-astype()

#start_IndexMinuteGO-copy()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.copy()
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinuteGO-copy()

#start_IndexMinuteGO-cumprod()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.cumprod()
ValueError("could not find a matching type for multiply.accumulate, requested type has type code 'M'")
#end_IndexMinuteGO-cumprod()

#start_IndexMinuteGO-cumsum()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.cumsum()
ValueError("could not find a matching type for add.accumulate, requested type has type code 'M'")
#end_IndexMinuteGO-cumsum()

#start_IndexMinuteGO-difference()
>>> ix1 = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix2 = sf.IndexMinuteGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.difference(ix2)
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinuteGO-difference()

#start_IndexMinuteGO-dropfalsy()
>>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMinuteGO>
1620-09-16T00:00
NaT
1620-11-21T00:00
<datetime64[m]>
>>> ix.dropfalsy()
<IndexMinuteGO>
1620-09-16T00:00
1620-11-21T00:00
<datetime64[m]>
#end_IndexMinuteGO-dropfalsy()

#start_IndexMinuteGO-dropna()
>>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMinuteGO>
1620-09-16T00:00
NaT
1620-11-21T00:00
<datetime64[m]>
>>> ix.dropna()
<IndexMinuteGO>
1620-09-16T00:00
1620-11-21T00:00
<datetime64[m]>
#end_IndexMinuteGO-dropna()

#start_IndexMinuteGO-equals()
>>> ix1 = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix2 = sf.IndexMinuteGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.equals(ix2)
False
#end_IndexMinuteGO-equals()

#start_IndexMinuteGO-extend()
>>> ix1 = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix2 = sf.IndexMinuteGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.extend(ix2)
>>> ix1
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
2022-04-01T00:00
2021-12-31T00:00
2022-06-30T00:00
<datetime64[m]>
#end_IndexMinuteGO-extend()

#start_IndexMinuteGO-fillfalsy()
>>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMinuteGO>
1620-09-16T00:00
NaT
1620-11-21T00:00
<datetime64[m]>
>>> ix.fillfalsy('A')
ValueError('Error parsing datetime string "A" at position 0')
#end_IndexMinuteGO-fillfalsy()

#start_IndexMinuteGO-fillna()
>>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMinuteGO>
1620-09-16T00:00
NaT
1620-11-21T00:00
<datetime64[m]>
>>> ix.fillna(0)
<IndexMinuteGO>
1620-09-16T00:00
1970-01-01T00:00
1620-11-21T00:00
<datetime64[m]>
#end_IndexMinuteGO-fillna()

#start_IndexMinuteGO-head()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.head(2)
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
<datetime64[m]>
#end_IndexMinuteGO-head()

#start_IndexMinuteGO-iloc_searchsorted()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.iloc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexMinuteGO-iloc_searchsorted()

#start_IndexMinuteGO-intersection()
>>> ix1 = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix2 = sf.IndexMinuteGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.intersection(ix2)
<IndexMinuteGO>
<datetime64[m]>
#end_IndexMinuteGO-intersection()

#start_IndexMinuteGO-isin()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.isin(('1517-06-30',))
[False False False]
#end_IndexMinuteGO-isin()

#start_IndexMinuteGO-label_widths_at_depth()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> tuple(ix.label_widths_at_depth(0))
((numpy.datetime64('1517-04-01T00:00'), 1), (numpy.datetime64('1517-12-01T00:00'), 1), (numpy.datetime64('1517-06-30T00:00'), 1))
#end_IndexMinuteGO-label_widths_at_depth()

#start_IndexMinuteGO-level_add()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.level_add('A')
<IndexHierarchyGO>
A                  1517-04-01T00:00
A                  1517-12-01T00:00
A                  1517-06-30T00:00
<<U1>              <datetime64[m]>
#end_IndexMinuteGO-level_add()

#start_IndexMinuteGO-loc_searchsorted()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.loc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexMinuteGO-loc_searchsorted()

#start_IndexMinuteGO-loc_to_iloc()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.loc_to_iloc('d')
ValueError('Error parsing datetime string "d" at position 0')
>>> ix.loc_to_iloc(['a', 'e'])
ValueError('Cannot create a NumPy datetime other than NaT with generic units')
>>> ix.loc_to_iloc(slice('c', None))
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexMinuteGO-loc_to_iloc()

#start_IndexMinuteGO-max()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.max()
1517-12-01T00:00
#end_IndexMinuteGO-max()

#start_IndexMinuteGO-mean()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.mean()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))
#end_IndexMinuteGO-mean()

#start_IndexMinuteGO-median()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.median()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))
#end_IndexMinuteGO-median()

#start_IndexMinuteGO-min()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.min()
1517-04-01T00:00
#end_IndexMinuteGO-min()

#start_IndexMinuteGO-prod()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.prod()
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[m]'), dtype('<M8[m]')))
#end_IndexMinuteGO-prod()

#start_IndexMinuteGO-relabel()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)
ErrorInitIndexNonUnique('Labels have non-unique values. Details from iterators not available.')
#end_IndexMinuteGO-relabel()

#start_IndexMinuteGO-rename()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.rename('y')
<IndexMinuteGO: y>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinuteGO-rename()

#start_IndexMinuteGO-roll()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.roll(2)
<IndexMinuteGO>
1517-12-01T00:00
1517-06-30T00:00
1517-04-01T00:00
<datetime64[m]>
#end_IndexMinuteGO-roll()

#start_IndexMinuteGO-sample()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.sample(2, seed=0)
<IndexMinuteGO>
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinuteGO-sample()

#start_IndexMinuteGO-sort()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.sort()
<IndexMinuteGO>
1517-04-01T00:00
1517-06-30T00:00
1517-12-01T00:00
<datetime64[m]>
>>> ix.sort(ascending=False)
<IndexMinuteGO>
1517-12-01T00:00
1517-06-30T00:00
1517-04-01T00:00
<datetime64[m]>
#end_IndexMinuteGO-sort()

#start_IndexMinuteGO-std()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.std()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))
#end_IndexMinuteGO-std()

#start_IndexMinuteGO-sum()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.sum()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))
#end_IndexMinuteGO-sum()

#start_IndexMinuteGO-tail()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.tail(2)
<IndexMinuteGO>
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinuteGO-tail()

#start_IndexMinuteGO-union()
>>> ix1 = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix2 = sf.IndexMinuteGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.union(ix2)
<IndexMinuteGO>
1517-04-01T00:00
1517-06-30T00:00
1517-12-01T00:00
2021-12-31T00:00
2022-04-01T00:00
2022-06-30T00:00
<datetime64[m]>
#end_IndexMinuteGO-union()

#start_IndexMinuteGO-unique()
>>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMinuteGO>
1620-09-16T00:00
NaT
1620-11-21T00:00
<datetime64[m]>
>>> ix.unique()
['1620-09-16T00:00'              'NaT' '1620-11-21T00:00']
#end_IndexMinuteGO-unique()

#start_IndexMinuteGO-values_at_depth()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.values_at_depth(0)
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinuteGO-values_at_depth()

#start_IndexMinuteGO-var()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.var()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))
#end_IndexMinuteGO-var()

#start_IndexMinuteGO-__contains__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.__contains__('a')
ValueError('Error parsing datetime string "a" at position 0')
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.__contains__('1517-06-30')
False
#end_IndexMinuteGO-__contains__()

#start_IndexMinuteGO-__iter__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01T00:00'), numpy.datetime64('1517-12-01T00:00'), numpy.datetime64('1517-06-30T00:00'))
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01T00:00'), numpy.datetime64('1517-12-01T00:00'), numpy.datetime64('1517-06-30T00:00'))
#end_IndexMinuteGO-__iter__()

#start_IndexMinuteGO-__reversed__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30T00:00'), numpy.datetime64('1517-12-01T00:00'), numpy.datetime64('1517-04-01T00:00'))
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30T00:00'), numpy.datetime64('1517-12-01T00:00'), numpy.datetime64('1517-04-01T00:00'))
#end_IndexMinuteGO-__reversed__()

#start_IndexMinuteGO-values
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.values
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.values
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinuteGO-values

#start_IndexMinuteGO-interface
>>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.interface
<Frame>
<Index>                              cls_name      group                doc                  <<U18>
<Index: signature>
__init__(labels, *, name, loc_is_... IndexMinuteGO Constructor          Initializer. Args...
from_labels(labels, *, name)         IndexMinuteGO Constructor          Construct an Inde...
from_pandas(value)                   IndexMinuteGO Constructor          Given a Pandas in...
to_html(config, style_config)        IndexMinuteGO Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexMinuteGO Exporter             Return a complete...
to_pandas()                          IndexMinuteGO Exporter             Return a Pandas I...
to_series()                          IndexMinuteGO Exporter             Return a Series w...
to_visidata()                        IndexMinuteGO Exporter             Open an interacti...
STATIC                               IndexMinuteGO Attribute            bool(x) -> bool R...
depth                                IndexMinuteGO Attribute            int([x]) -> integ...
dtype                                IndexMinuteGO Attribute            Return the dtype ...
index_types                          IndexMinuteGO Attribute            Return a Series o...
memory                               IndexMinuteGO Attribute            Return a MemoryDi...
mloc                                 IndexMinuteGO Attribute            The memory locati...
name                                 IndexMinuteGO Attribute            A hashable label ...
names                                IndexMinuteGO Attribute            Provide a suitabl...
nbytes                               IndexMinuteGO Attribute            Return the total ...
...                                  ...           ...                  ...
via_str.rpartition(sep)              IndexMinuteGO Accessor String      Partition (split)...
via_str.rsplit(sep, maxsplit)        IndexMinuteGO Accessor String      For each element,...
via_str.rstrip(chars)                IndexMinuteGO Accessor String      For each element,...
via_str.split(sep, maxsplit)         IndexMinuteGO Accessor String      For each element,...
via_str.startswith(prefix, start,... IndexMinuteGO Accessor String      Returns a contain...
via_str.strip(chars)                 IndexMinuteGO Accessor String      For each element,...
via_str.swapcase()                   IndexMinuteGO Accessor String      Return a containe...
via_str.title()                      IndexMinuteGO Accessor String      Return a containe...
via_str.upper()                      IndexMinuteGO Accessor String      Return a containe...
via_str.zfill(width)                 IndexMinuteGO Accessor String      Return the string...
via_re(pattern, flags).search(pos... IndexMinuteGO Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexMinuteGO Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexMinuteGO Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexMinuteGO Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexMinuteGO Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexMinuteGO Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexMinuteGO Accessor Regular ... Perform the same ...
<<U63>                               <<U13>        <<U27>               <<U83>
#end_IndexMinuteGO-interface

#start_IndexMinuteGO-__repr__()
>>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> repr(ix)
<IndexMinuteGO>
1620-09-16T00:00
NaT
1620-11-21T00:00
<datetime64[m]>
#end_IndexMinuteGO-__repr__()

#start_IndexMinuteGO-__str__()
>>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> str(ix)
<IndexMinuteGO>
1620-09-16T00:00
NaT
1620-11-21T00:00
<datetime64[m]>
#end_IndexMinuteGO-__str__()

#start_IndexMinuteGO-display()
>>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display()
<IndexMinuteGO>
1620-09-16T00:00
NaT
1620-11-21T00:00
<datetime64[m]>
>>> ix.display(sf.DisplayConfig(type_show=False))
1620-09-16T00:00
NaT
1620-11-21T00:00
#end_IndexMinuteGO-display()

#start_IndexMinuteGO-display_tall()
>>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_tall()
<IndexMinuteGO>
1620-09-16T00:00
NaT
1620-11-21T00:00
<datetime64[m]>
#end_IndexMinuteGO-display_tall()

#start_IndexMinuteGO-display_wide()
>>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_wide()
<IndexMinuteGO>
1620-09-16T00:00
NaT
1620-11-21T00:00
<datetime64[m]>
#end_IndexMinuteGO-display_wide()

#start_IndexMinuteGO-drop.iloc[]
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.drop.iloc[1]
<IndexMinuteGO>
1517-04-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.drop.iloc[1:]
<IndexMinuteGO>
1517-04-01T00:00
<datetime64[m]>
>>> ix.drop.iloc[[0, 2]]
<IndexMinuteGO>
1517-12-01T00:00
<datetime64[m]>
#end_IndexMinuteGO-drop.iloc[]

#start_IndexMinuteGO-drop.loc[]
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.drop.loc['1517-06-30']
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
<datetime64[m]>
>>> ix.drop.loc['1517-06-30':]
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
<datetime64[m]>
#end_IndexMinuteGO-drop.loc[]

#start_IndexMinuteGO-[]
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix[1]
1517-12-01T00:00
>>> ix[1:]
<IndexMinuteGO>
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix[[0, 2]]
<IndexMinuteGO>
1517-04-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinuteGO-[]

#start_IndexMinuteGO-iloc[]
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.iloc[1]
1517-12-01T00:00
>>> ix.iloc[1:]
<IndexMinuteGO>
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.iloc[[0, 2]]
<IndexMinuteGO>
1517-04-01T00:00
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinuteGO-iloc[]

#start_IndexMinuteGO-loc[]
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.loc['1517-06-30']
<IndexMinuteGO>
1517-06-30T00:00
<datetime64[m]>
>>> ix.loc['1517-06-30':]
<IndexMinuteGO>
1517-06-30T00:00
<datetime64[m]>
#end_IndexMinuteGO-loc[]

#start_IndexMinuteGO-iter_label()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.iter_label())
(numpy.datetime64('1517-04-01T00:00'), numpy.datetime64('1517-12-01T00:00'), numpy.datetime64('1517-06-30T00:00'))
#end_IndexMinuteGO-iter_label()

#start_IndexMinuteGO-iter_label().apply()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)
[1517 1517 1517]
#end_IndexMinuteGO-iter_label().apply()

#start_IndexMinuteGO-iter_label().apply_iter()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))
(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 1, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))
#end_IndexMinuteGO-iter_label().apply_iter()

#start_IndexMinuteGO-iter_label().apply_iter_items()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))
((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 1, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))
#end_IndexMinuteGO-iter_label().apply_iter_items()

#start_IndexMinuteGO-iter_label().apply_pool()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)
[ 4 12  6]
#end_IndexMinuteGO-iter_label().apply_pool()

#start_IndexMinuteGO-__add__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix + 2
['1517-04-01T00:02' '1517-12-01T00:02' '1517-06-30T00:02']
#end_IndexMinuteGO-__add__()

#start_IndexMinuteGO-__and__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix & True
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix & (False, True)
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMinuteGO-__and__()

#start_IndexMinuteGO-__eq__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix == '1517-06-30'
[False False  True]
#end_IndexMinuteGO-__eq__()

#start_IndexMinuteGO-__floordiv__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix // '1517-06-30'
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMinuteGO-__floordiv__()

#start_IndexMinuteGO-__ge__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix >= '1517-06-30'
[False  True  True]
#end_IndexMinuteGO-__ge__()

#start_IndexMinuteGO-__gt__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix > '1517-06-30'
[False  True False]
#end_IndexMinuteGO-__gt__()

#start_IndexMinuteGO-__le__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix <= '1517-06-30'
[ True False  True]
#end_IndexMinuteGO-__le__()

#start_IndexMinuteGO-__lt__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix < '1517-06-30'
[ True False False]
#end_IndexMinuteGO-__lt__()

#start_IndexMinuteGO-__matmul__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexMinuteGO-__matmul__()

#start_IndexMinuteGO-__mod__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix % '1517-06-30'
UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMinuteGO-__mod__()

#start_IndexMinuteGO-__mul__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix * '1517-06-30'
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMinuteGO-__mul__()

#start_IndexMinuteGO-__ne__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix != '1517-06-30'
[ True  True False]
#end_IndexMinuteGO-__ne__()

#start_IndexMinuteGO-__or__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix | True
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix | (False, True)
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMinuteGO-__or__()

#start_IndexMinuteGO-__pow__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix ** '1517-06-30'
TypeError("ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMinuteGO-__pow__()

#start_IndexMinuteGO-__radd__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> '1517-06-30' + ix
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMinuteGO-__radd__()

#start_IndexMinuteGO-__rfloordiv__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> '1517-06-30' // ix
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMinuteGO-__rfloordiv__()

#start_IndexMinuteGO-__rmatmul__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexMinuteGO-__rmatmul__()

#start_IndexMinuteGO-__rmul__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> '1517-06-30' * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMinuteGO-__rmul__()

#start_IndexMinuteGO-__rshift__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix >> 1
TypeError("ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMinuteGO-__rshift__()

#start_IndexMinuteGO-__rsub__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> '1517-06-30' - ix
[  90 -154    0]
#end_IndexMinuteGO-__rsub__()

#start_IndexMinuteGO-__rtruediv__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> '1517-06-30' / ix
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMinuteGO-__rtruediv__()

#start_IndexMinuteGO-__sub__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix - 2
['1517-03-31T23:58' '1517-11-30T23:58' '1517-06-29T23:58']
#end_IndexMinuteGO-__sub__()

#start_IndexMinuteGO-__truediv__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix / '1517-06-30'
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMinuteGO-__truediv__()

#start_IndexMinuteGO-__xor__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix ^ True
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix ^ (False, True)
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMinuteGO-__xor__()

#start_IndexMinuteGO-__abs__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> abs(ix)
UFuncTypeError(<ufunc 'absolute'>, (dtype('<M8[m]'), dtype('<M8[m]')))
#end_IndexMinuteGO-__abs__()

#start_IndexMinuteGO-__invert__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ~ix
TypeError("ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMinuteGO-__invert__()

#start_IndexMinuteGO-__neg__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> -ix
UFuncTypeError(<ufunc 'negative'>, (dtype('<M8[m]'), dtype('<M8[m]')))
#end_IndexMinuteGO-__neg__()

#start_IndexMinuteGO-__pos__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> +ix
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinuteGO-__pos__()

#start_IndexMinuteGO-via_dt.year
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.year
[1517 1517 1517]
#end_IndexMinuteGO-via_dt.year

#start_IndexMinuteGO-via_dt.month
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.month
[ 4 12  6]
#end_IndexMinuteGO-via_dt.month

#start_IndexMinuteGO-via_dt.day
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.day
[ 1  1 30]
#end_IndexMinuteGO-via_dt.day

#start_IndexMinuteGO-via_dt.hour
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.hour
[0 0 0]
#end_IndexMinuteGO-via_dt.hour

#start_IndexMinuteGO-via_dt.minute
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.minute
[0 0 0]
#end_IndexMinuteGO-via_dt.minute

#start_IndexMinuteGO-via_dt.second
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.second
[0 0 0]
#end_IndexMinuteGO-via_dt.second

#start_IndexMinuteGO-via_dt.weekday()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.weekday()
[6 5 5]
#end_IndexMinuteGO-via_dt.weekday()

#start_IndexMinuteGO-via_dt.quarter()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.quarter()
[2 4 2]
#end_IndexMinuteGO-via_dt.quarter()

#start_IndexMinuteGO-via_dt.is_month_end()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_month_end()
[False False  True]
#end_IndexMinuteGO-via_dt.is_month_end()

#start_IndexMinuteGO-via_dt.is_month_start()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_month_start()
[ True  True False]
#end_IndexMinuteGO-via_dt.is_month_start()

#start_IndexMinuteGO-via_dt.is_year_end()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_year_end()
[False False False]
#end_IndexMinuteGO-via_dt.is_year_end()

#start_IndexMinuteGO-via_dt.is_year_start()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_year_start()
[False False False]
#end_IndexMinuteGO-via_dt.is_year_start()

#start_IndexMinuteGO-via_dt.is_quarter_end()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_quarter_end()
[False False  True]
#end_IndexMinuteGO-via_dt.is_quarter_end()

#start_IndexMinuteGO-via_dt.is_quarter_start()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.is_quarter_start()
[ True False False]
#end_IndexMinuteGO-via_dt.is_quarter_start()

#start_IndexMinuteGO-via_dt.timetuple()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.timetuple()
[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=12, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=335, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]
#end_IndexMinuteGO-via_dt.timetuple()

#start_IndexMinuteGO-via_dt.isoformat()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.isoformat()
['1517-04-01T00:00:00' '1517-12-01T00:00:00' '1517-06-30T00:00:00']
#end_IndexMinuteGO-via_dt.isoformat()

#start_IndexMinuteGO-via_dt.fromisoformat()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.fromisoformat()
RuntimeError('invalid dtype (datetime64[m]) for operation on string types')
#end_IndexMinuteGO-via_dt.fromisoformat()

#start_IndexMinuteGO-via_dt.strftime()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.strftime("%A | %B")
['Sunday | April' 'Saturday | December' 'Saturday | June']
#end_IndexMinuteGO-via_dt.strftime()

#start_IndexMinuteGO-via_dt.strptime()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.strptime("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[m]) for operation on string types')
#end_IndexMinuteGO-via_dt.strptime()

#start_IndexMinuteGO-via_dt.strpdate()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_dt.strpdate("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[m]) for operation on string types')
#end_IndexMinuteGO-via_dt.strpdate()

#start_IndexMinuteGO-via_str.__getitem__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str[-1]
['0' '0' '0']
#end_IndexMinuteGO-via_str.__getitem__()

#start_IndexMinuteGO-via_str.capitalize()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.capitalize()
['1517-04-01t00:00' '1517-12-01t00:00' '1517-06-30t00:00']
#end_IndexMinuteGO-via_str.capitalize()

#start_IndexMinuteGO-via_str.center()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.center(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMinuteGO-via_str.center()

#start_IndexMinuteGO-via_str.contains()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.contains('X')
[False False False]
#end_IndexMinuteGO-via_str.contains()

#start_IndexMinuteGO-via_str.count()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.count('X')
[0 0 0]
#end_IndexMinuteGO-via_str.count()

#start_IndexMinuteGO-via_str.decode()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30')).astype(bytes)
>>> ix
<IndexGO>
b'1517-04-01T00:00'
b'1517-12-01T00:00'
b'1517-06-30T00:00'
<|S35>
>>> ix.via_str.decode()
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinuteGO-via_str.decode()

#start_IndexMinuteGO-via_str.encode()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.encode()
[b'1517-04-01T00:00' b'1517-12-01T00:00' b'1517-06-30T00:00']
#end_IndexMinuteGO-via_str.encode()

#start_IndexMinuteGO-via_str.endswith()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.endswith(' ')
[False False False]
#end_IndexMinuteGO-via_str.endswith()

#start_IndexMinuteGO-via_str.find()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.find('X')
[-1 -1 -1]
#end_IndexMinuteGO-via_str.find()

#start_IndexMinuteGO-via_str.format()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.format('{:-^10}')
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinuteGO-via_str.format()

#start_IndexMinuteGO-via_str.index()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.index('X')
ValueError('substring not found')
#end_IndexMinuteGO-via_str.index()

#start_IndexMinuteGO-via_str.isalnum()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.isalnum()
[False False False]
#end_IndexMinuteGO-via_str.isalnum()

#start_IndexMinuteGO-via_str.isalpha()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.isalpha()
[False False False]
#end_IndexMinuteGO-via_str.isalpha()

#start_IndexMinuteGO-via_str.isdecimal()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.isdecimal()
[False False False]
#end_IndexMinuteGO-via_str.isdecimal()

#start_IndexMinuteGO-via_str.isdigit()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.isdigit()
[False False False]
#end_IndexMinuteGO-via_str.isdigit()

#start_IndexMinuteGO-via_str.islower()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.islower()
[False False False]
#end_IndexMinuteGO-via_str.islower()

#start_IndexMinuteGO-via_str.isnumeric()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.isnumeric()
[False False False]
#end_IndexMinuteGO-via_str.isnumeric()

#start_IndexMinuteGO-via_str.isspace()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.isspace()
[False False False]
#end_IndexMinuteGO-via_str.isspace()

#start_IndexMinuteGO-via_str.istitle()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.istitle()
[ True  True  True]
#end_IndexMinuteGO-via_str.istitle()

#start_IndexMinuteGO-via_str.isupper()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.isupper()
[ True  True  True]
#end_IndexMinuteGO-via_str.isupper()

#start_IndexMinuteGO-via_str.ljust()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.ljust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMinuteGO-via_str.ljust()

#start_IndexMinuteGO-via_str.len()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.len()
[16 16 16]
#end_IndexMinuteGO-via_str.len()

#start_IndexMinuteGO-via_str.lower()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.lower()
['1517-04-01t00:00' '1517-12-01t00:00' '1517-06-30t00:00']
#end_IndexMinuteGO-via_str.lower()

#start_IndexMinuteGO-via_str.lstrip()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.lstrip()
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinuteGO-via_str.lstrip()

#start_IndexMinuteGO-via_str.partition()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.partition('X')
[('1517-04-01T00:00', '', '') ('1517-12-01T00:00', '', '')
 ('1517-06-30T00:00', '', '')]
#end_IndexMinuteGO-via_str.partition()

#start_IndexMinuteGO-via_str.replace()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.replace('X', '*')
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinuteGO-via_str.replace()

#start_IndexMinuteGO-via_str.rfind()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.rfind('X')
[-1 -1 -1]
#end_IndexMinuteGO-via_str.rfind()

#start_IndexMinuteGO-via_str.rindex()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.rindex('X')
ValueError('substring not found')
#end_IndexMinuteGO-via_str.rindex()

#start_IndexMinuteGO-via_str.rjust()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.rjust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMinuteGO-via_str.rjust()

#start_IndexMinuteGO-via_str.rpartition()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.rpartition('X')
[('', '', '1517-04-01T00:00') ('', '', '1517-12-01T00:00')
 ('', '', '1517-06-30T00:00')]
#end_IndexMinuteGO-via_str.rpartition()

#start_IndexMinuteGO-via_str.rsplit()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.rsplit('X')
[('1517-04-01T00:00',) ('1517-12-01T00:00',) ('1517-06-30T00:00',)]
#end_IndexMinuteGO-via_str.rsplit()

#start_IndexMinuteGO-via_str.rstrip()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.rstrip()
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinuteGO-via_str.rstrip()

#start_IndexMinuteGO-via_str.split()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.split('X')
[('1517-04-01T00:00',) ('1517-12-01T00:00',) ('1517-06-30T00:00',)]
#end_IndexMinuteGO-via_str.split()

#start_IndexMinuteGO-via_str.startswith()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.startswith('X')
[False False False]
#end_IndexMinuteGO-via_str.startswith()

#start_IndexMinuteGO-via_str.strip()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.strip()
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinuteGO-via_str.strip()

#start_IndexMinuteGO-via_str.swapcase()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.swapcase()
['1517-04-01t00:00' '1517-12-01t00:00' '1517-06-30t00:00']
#end_IndexMinuteGO-via_str.swapcase()

#start_IndexMinuteGO-via_str.title()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.title()
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinuteGO-via_str.title()

#start_IndexMinuteGO-via_str.upper()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.upper()
['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']
#end_IndexMinuteGO-via_str.upper()

#start_IndexMinuteGO-via_str.zfill()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_str.zfill(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMinuteGO-via_str.zfill()

#start_IndexMinuteGO-via_re().search()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_re('[X123]').search()
[ True  True  True]
#end_IndexMinuteGO-via_re().search()

#start_IndexMinuteGO-via_re().match()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_re('[X123]').match()
[ True  True  True]
#end_IndexMinuteGO-via_re().match()

#start_IndexMinuteGO-via_re().fullmatch()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_re('123').fullmatch()
[False False False]
#end_IndexMinuteGO-via_re().fullmatch()

#start_IndexMinuteGO-via_re().split()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_re('[X123]').split()
[('', '5', '7-04-0', 'T00:00') ('', '5', '7-', '', '-0', 'T00:00')
 ('', '5', '7-06-', '0T00:00')]
#end_IndexMinuteGO-via_re().split()

#start_IndexMinuteGO-via_re().findall()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_re('[X123]').findall()
[('1', '1', '1') ('1', '1', '1', '2', '1') ('1', '1', '3')]
#end_IndexMinuteGO-via_re().findall()

#start_IndexMinuteGO-via_re().sub()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_re('[X123]').sub('==')
['==5==7-04-0==T00:00' '==5==7-====-0==T00:00' '==5==7-06-==0T00:00']
#end_IndexMinuteGO-via_re().sub()

#start_IndexMinuteGO-via_re().subn()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix
<IndexMinuteGO>
1517-04-01T00:00
1517-12-01T00:00
1517-06-30T00:00
<datetime64[m]>
>>> ix.via_re('[X123]').subn('==', 1)
[('==517-04-01T00:00', 1) ('==517-12-01T00:00', 1)
 ('==517-06-30T00:00', 1)]
#end_IndexMinuteGO-via_re().subn()

#start_IndexMinuteGO-via_values.apply()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> ix.via_values.apply(np.sin)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMinuteGO-via_values.apply()

#start_IndexMinuteGO-via_values.__array_ufunc__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> np.sin(ix.via_values)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMinuteGO-via_values.__array_ufunc__()

#start_IndexMinuteGO-via_values.__call__()
>>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))
>>> np.sin(ix.via_values(unify_blocks=True))
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMinuteGO-via_values.__call__()

#start_IndexHour-__init__()
>>> sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
#end_IndexHour-__init__()

#start_IndexHour-from_labels()
>>> sf.IndexHour.from_labels(('1517-04-01', '1517-12-31', '1517-06-30'))
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
#end_IndexHour-from_labels()

#start_IndexHour-from_pandas()
>>> ix = pd.Index(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> sf.IndexHour.from_pandas(ix)
<Index>
1517-04-01
1517-12-31
1517-06-30
<object>
#end_IndexHour-from_pandas()

#start_IndexHour-to_pandas()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.to_pandas()
OutOfBoundsDatetime('Out of bounds nanosecond timestamp: 1517-04-01 00:00:00')
#end_IndexHour-to_pandas()

#start_IndexHour-to_series()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.to_series()
<Series>
<Index>
0        1517-04-01T00
1        1517-12-31T00
2        1517-06-30T00
<int64>  <datetime64[h]>
#end_IndexHour-to_series()

#start_IndexHour-STATIC
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.STATIC
True
#end_IndexHour-STATIC

#start_IndexHour-depth
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.depth
1
#end_IndexHour-depth

#start_IndexHour-dtype
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.dtype
datetime64[h]
#end_IndexHour-dtype

#start_IndexHour-index_types
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.index_types
<Series>
<Index>
None     <IndexHour>
<object> <object>
#end_IndexHour-index_types

#start_IndexHour-memory
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.memory
          L   Lu    LM  LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu
Name      16  B     16  B     16  B     16   B     16  B     16  B
Map       440 B     440 B     440 B     440  B     440 B     440 B
Labels    120 B     136 B     24  B     120  B     136 B     24  B
Positions 96  B     112 B     0   B     8.19 KB    136 B     24  B
Total     768 B     800 B     576 B     8.84 KB    824 B     600 B
#end_IndexHour-memory

#start_IndexHour-name
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.name
#end_IndexHour-name

#start_IndexHour-names
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.names
('__index0__',)
#end_IndexHour-names

#start_IndexHour-nbytes
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.nbytes
24
#end_IndexHour-nbytes

#start_IndexHour-ndim
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.ndim
1
#end_IndexHour-ndim

#start_IndexHour-positions
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.positions
[0 1 2]
#end_IndexHour-positions

#start_IndexHour-shape
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.shape
(3,)
#end_IndexHour-shape

#start_IndexHour-size
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.size
3
#end_IndexHour-size

#start_IndexHour-__array__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__array__()
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHour-__array__()

#start_IndexHour-__array_ufunc__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> np.array((0, 1, 0)) * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[h]')))
#end_IndexHour-__array_ufunc__()

#start_IndexHour-__bool__()
>>> s = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexHour-__bool__()

#start_IndexHour-__copy__()
>>> import copy
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> copy.copy(ix)
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
#end_IndexHour-__copy__()

#start_IndexHour-__deepcopy__()
>>> import copy
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> copy.deepcopy(ix)
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
#end_IndexHour-__deepcopy__()

#start_IndexHour-__len__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> len(ix)
3
#end_IndexHour-__len__()

#start_IndexHour-all()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.all()
True
#end_IndexHour-all()

#start_IndexHour-any()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.any()
True
#end_IndexHour-any()

#start_IndexHour-astype()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.astype(str)
<Index>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<<U32>
#end_IndexHour-astype()

#start_IndexHour-copy()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.copy()
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
#end_IndexHour-copy()

#start_IndexHour-cumprod()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.cumprod()
ValueError("could not find a matching type for multiply.accumulate, requested type has type code 'M'")
#end_IndexHour-cumprod()

#start_IndexHour-cumsum()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.cumsum()
ValueError("could not find a matching type for add.accumulate, requested type has type code 'M'")
#end_IndexHour-cumsum()

#start_IndexHour-difference()
>>> ix1 = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexHour(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.difference(ix2)
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
#end_IndexHour-difference()

#start_IndexHour-dropfalsy()
>>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexHour>
1620-09-16T00
NaT
1620-11-21T00
<datetime64[h]>
>>> ix.dropfalsy()
<IndexHour>
1620-09-16T00
1620-11-21T00
<datetime64[h]>
#end_IndexHour-dropfalsy()

#start_IndexHour-dropna()
>>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexHour>
1620-09-16T00
NaT
1620-11-21T00
<datetime64[h]>
>>> ix.dropna()
<IndexHour>
1620-09-16T00
1620-11-21T00
<datetime64[h]>
#end_IndexHour-dropna()

#start_IndexHour-equals()
>>> ix1 = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexHour(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.equals(ix2)
False
#end_IndexHour-equals()

#start_IndexHour-fillfalsy()
>>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexHour>
1620-09-16T00
NaT
1620-11-21T00
<datetime64[h]>
>>> ix.fillfalsy('A')
ValueError('Error parsing datetime string "A" at position 0')
#end_IndexHour-fillfalsy()

#start_IndexHour-fillna()
>>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexHour>
1620-09-16T00
NaT
1620-11-21T00
<datetime64[h]>
>>> ix.fillna(0)
<IndexHour>
1620-09-16T00
1970-01-01T00
1620-11-21T00
<datetime64[h]>
#end_IndexHour-fillna()

#start_IndexHour-head()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.head(2)
<IndexHour>
1517-04-01T00
1517-12-31T00
<datetime64[h]>
#end_IndexHour-head()

#start_IndexHour-iloc_searchsorted()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.iloc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexHour-iloc_searchsorted()

#start_IndexHour-intersection()
>>> ix1 = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexHour(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.intersection(ix2)
<IndexHour>
<datetime64[h]>
#end_IndexHour-intersection()

#start_IndexHour-isin()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.isin(('1517-06-30',))
[False False False]
#end_IndexHour-isin()

#start_IndexHour-label_widths_at_depth()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> tuple(ix.label_widths_at_depth(0))
((numpy.datetime64('1517-04-01T00','h'), 1), (numpy.datetime64('1517-12-31T00','h'), 1), (numpy.datetime64('1517-06-30T00','h'), 1))
#end_IndexHour-label_widths_at_depth()

#start_IndexHour-level_add()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.level_add('A')
<IndexHierarchy>
A                1517-04-01T00
A                1517-12-31T00
A                1517-06-30T00
<<U1>            <datetime64[h]>
#end_IndexHour-level_add()

#start_IndexHour-loc_searchsorted()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.loc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexHour-loc_searchsorted()

#start_IndexHour-loc_to_iloc()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.loc_to_iloc('d')
ValueError('Error parsing datetime string "d" at position 0')
>>> ix.loc_to_iloc(['a', 'e'])
ValueError('Cannot create a NumPy datetime other than NaT with generic units')
>>> ix.loc_to_iloc(slice('c', None))
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexHour-loc_to_iloc()

#start_IndexHour-max()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.max()
1517-12-31T00
#end_IndexHour-max()

#start_IndexHour-mean()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.mean()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))
#end_IndexHour-mean()

#start_IndexHour-median()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.median()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))
#end_IndexHour-median()

#start_IndexHour-min()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.min()
1517-04-01T00
#end_IndexHour-min()

#start_IndexHour-prod()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.prod()
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[h]'), dtype('<M8[h]')))
#end_IndexHour-prod()

#start_IndexHour-relabel()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)
<IndexHour>
1970-01-01T01
1970-01-02T07
1970-01-02T06
<datetime64[h]>
#end_IndexHour-relabel()

#start_IndexHour-rename()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.rename('y')
<IndexHour: y>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
#end_IndexHour-rename()

#start_IndexHour-roll()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.roll(2)
<IndexHour>
1517-12-31T00
1517-06-30T00
1517-04-01T00
<datetime64[h]>
#end_IndexHour-roll()

#start_IndexHour-sample()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.sample(2, seed=0)
<IndexHour>
1517-12-31T00
1517-06-30T00
<datetime64[h]>
#end_IndexHour-sample()

#start_IndexHour-sort()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.sort()
<IndexHour>
1517-04-01T00
1517-06-30T00
1517-12-31T00
<datetime64[h]>
>>> ix.sort(ascending=False)
<IndexHour>
1517-12-31T00
1517-06-30T00
1517-04-01T00
<datetime64[h]>
#end_IndexHour-sort()

#start_IndexHour-std()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.std()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))
#end_IndexHour-std()

#start_IndexHour-sum()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.sum()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))
#end_IndexHour-sum()

#start_IndexHour-tail()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.tail(2)
<IndexHour>
1517-12-31T00
1517-06-30T00
<datetime64[h]>
#end_IndexHour-tail()

#start_IndexHour-union()
>>> ix1 = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexHour(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.union(ix2)
<IndexHour>
1517-04-01T00
1517-06-30T00
1517-12-31T00
2021-12-31T00
2022-04-01T00
2022-06-30T00
<datetime64[h]>
#end_IndexHour-union()

#start_IndexHour-unique()
>>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexHour>
1620-09-16T00
NaT
1620-11-21T00
<datetime64[h]>
>>> ix.unique()
['1620-09-16T00'           'NaT' '1620-11-21T00']
#end_IndexHour-unique()

#start_IndexHour-values_at_depth()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values_at_depth(0)
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHour-values_at_depth()

#start_IndexHour-var()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.var()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))
#end_IndexHour-var()

#start_IndexHour-__contains__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__contains__('a')
ValueError('Error parsing datetime string "a" at position 0')
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__contains__('1517-06-30')
False
#end_IndexHour-__contains__()

#start_IndexHour-__iter__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01T00','h'), numpy.datetime64('1517-12-31T00','h'), numpy.datetime64('1517-06-30T00','h'))
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01T00','h'), numpy.datetime64('1517-12-31T00','h'), numpy.datetime64('1517-06-30T00','h'))
#end_IndexHour-__iter__()

#start_IndexHour-__reversed__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30T00','h'), numpy.datetime64('1517-12-31T00','h'), numpy.datetime64('1517-04-01T00','h'))
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30T00','h'), numpy.datetime64('1517-12-31T00','h'), numpy.datetime64('1517-04-01T00','h'))
#end_IndexHour-__reversed__()

#start_IndexHour-values
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHour-values

#start_IndexHour-interface
>>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.interface
<Frame>
<Index>                              cls_name  group                doc                  <<U18>
<Index: signature>
__init__(labels, *, name, loc_is_... IndexHour Constructor          Initializer. Args...
from_labels(labels, *, name)         IndexHour Constructor          Construct an Inde...
from_pandas(value)                   IndexHour Constructor          Given a Pandas in...
to_html(config, style_config)        IndexHour Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexHour Exporter             Return a complete...
to_pandas()                          IndexHour Exporter             Return a Pandas I...
to_series()                          IndexHour Exporter             Return a Series w...
to_visidata()                        IndexHour Exporter             Open an interacti...
STATIC                               IndexHour Attribute            bool(x) -> bool R...
depth                                IndexHour Attribute            int([x]) -> integ...
dtype                                IndexHour Attribute            Return the dtype ...
index_types                          IndexHour Attribute            Return a Series o...
memory                               IndexHour Attribute            Return a MemoryDi...
mloc                                 IndexHour Attribute            The memory locati...
name                                 IndexHour Attribute            A hashable label ...
names                                IndexHour Attribute            Provide a suitabl...
nbytes                               IndexHour Attribute            Return the total ...
...                                  ...       ...                  ...
via_str.rpartition(sep)              IndexHour Accessor String      Partition (split)...
via_str.rsplit(sep, maxsplit)        IndexHour Accessor String      For each element,...
via_str.rstrip(chars)                IndexHour Accessor String      For each element,...
via_str.split(sep, maxsplit)         IndexHour Accessor String      For each element,...
via_str.startswith(prefix, start,... IndexHour Accessor String      Returns a contain...
via_str.strip(chars)                 IndexHour Accessor String      For each element,...
via_str.swapcase()                   IndexHour Accessor String      Return a containe...
via_str.title()                      IndexHour Accessor String      Return a containe...
via_str.upper()                      IndexHour Accessor String      Return a containe...
via_str.zfill(width)                 IndexHour Accessor String      Return the string...
via_re(pattern, flags).search(pos... IndexHour Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexHour Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexHour Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexHour Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexHour Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexHour Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexHour Accessor Regular ... Perform the same ...
<<U63>                               <<U9>     <<U27>               <<U83>
#end_IndexHour-interface

#start_IndexHour-__repr__()
>>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))
>>> repr(ix)
<IndexHour>
1620-09-16T00
NaT
1620-11-21T00
<datetime64[h]>
#end_IndexHour-__repr__()

#start_IndexHour-__str__()
>>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))
>>> str(ix)
<IndexHour>
1620-09-16T00
NaT
1620-11-21T00
<datetime64[h]>
#end_IndexHour-__str__()

#start_IndexHour-display()
>>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display()
<IndexHour>
1620-09-16T00
NaT
1620-11-21T00
<datetime64[h]>
>>> ix.display(sf.DisplayConfig(type_show=False))
1620-09-16T00
NaT
1620-11-21T00
#end_IndexHour-display()

#start_IndexHour-display_tall()
>>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_tall()
<IndexHour>
1620-09-16T00
NaT
1620-11-21T00
<datetime64[h]>
#end_IndexHour-display_tall()

#start_IndexHour-display_wide()
>>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_wide()
<IndexHour>
1620-09-16T00
NaT
1620-11-21T00
<datetime64[h]>
#end_IndexHour-display_wide()

#start_IndexHour-drop.iloc[]
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.drop.iloc[1]
<IndexHour>
1517-04-01T00
1517-06-30T00
<datetime64[h]>
>>> ix.drop.iloc[1:]
<IndexHour>
1517-04-01T00
<datetime64[h]>
>>> ix.drop.iloc[[0, 2]]
<IndexHour>
1517-12-31T00
<datetime64[h]>
#end_IndexHour-drop.iloc[]

#start_IndexHour-drop.loc[]
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.drop.loc['1517-06-30']
<IndexHour>
1517-04-01T00
1517-12-31T00
<datetime64[h]>
>>> ix.drop.loc['1517-06-30':]
<IndexHour>
1517-04-01T00
1517-12-31T00
<datetime64[h]>
#end_IndexHour-drop.loc[]

#start_IndexHour-[]
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix[1]
1517-12-31T00
>>> ix[1:]
<IndexHour>
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix[[0, 2]]
<IndexHour>
1517-04-01T00
1517-06-30T00
<datetime64[h]>
#end_IndexHour-[]

#start_IndexHour-iloc[]
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iloc[1]
1517-12-31T00
>>> ix.iloc[1:]
<IndexHour>
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.iloc[[0, 2]]
<IndexHour>
1517-04-01T00
1517-06-30T00
<datetime64[h]>
#end_IndexHour-iloc[]

#start_IndexHour-loc[]
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.loc['1517-06-30']
<IndexHour>
1517-06-30T00
<datetime64[h]>
>>> ix.loc['1517-06-30':]
<IndexHour>
1517-06-30T00
<datetime64[h]>
#end_IndexHour-loc[]

#start_IndexHour-iter_label()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label())
(numpy.datetime64('1517-04-01T00','h'), numpy.datetime64('1517-12-31T00','h'), numpy.datetime64('1517-06-30T00','h'))
#end_IndexHour-iter_label()

#start_IndexHour-iter_label().apply()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)
[1517 1517 1517]
#end_IndexHour-iter_label().apply()

#start_IndexHour-iter_label().apply_iter()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))
(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 31, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))
#end_IndexHour-iter_label().apply_iter()

#start_IndexHour-iter_label().apply_iter_items()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))
((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 31, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))
#end_IndexHour-iter_label().apply_iter_items()

#start_IndexHour-iter_label().apply_pool()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)
[ 4 12  6]
#end_IndexHour-iter_label().apply_pool()

#start_IndexHour-__add__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix + 2
['1517-04-01T02' '1517-12-31T02' '1517-06-30T02']
#end_IndexHour-__add__()

#start_IndexHour-__and__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix & True
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix & (False, True)
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHour-__and__()

#start_IndexHour-__eq__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix == '1517-06-30'
[False False  True]
#end_IndexHour-__eq__()

#start_IndexHour-__floordiv__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix // '1517-06-30'
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexHour-__floordiv__()

#start_IndexHour-__ge__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix >= '1517-06-30'
[False  True  True]
#end_IndexHour-__ge__()

#start_IndexHour-__gt__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix > '1517-06-30'
[False  True False]
#end_IndexHour-__gt__()

#start_IndexHour-__le__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix <= '1517-06-30'
[ True False  True]
#end_IndexHour-__le__()

#start_IndexHour-__lt__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix < '1517-06-30'
[ True False False]
#end_IndexHour-__lt__()

#start_IndexHour-__matmul__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexHour-__matmul__()

#start_IndexHour-__mod__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix % '1517-06-30'
UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexHour-__mod__()

#start_IndexHour-__mul__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix * '1517-06-30'
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexHour-__mul__()

#start_IndexHour-__ne__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix != '1517-06-30'
[ True  True False]
#end_IndexHour-__ne__()

#start_IndexHour-__or__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix | True
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix | (False, True)
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHour-__or__()

#start_IndexHour-__pow__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix ** '1517-06-30'
TypeError("ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHour-__pow__()

#start_IndexHour-__radd__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' + ix
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexHour-__radd__()

#start_IndexHour-__rfloordiv__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' // ix
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexHour-__rfloordiv__()

#start_IndexHour-__rmatmul__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexHour-__rmatmul__()

#start_IndexHour-__rmul__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexHour-__rmul__()

#start_IndexHour-__rshift__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix >> 1
TypeError("ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHour-__rshift__()

#start_IndexHour-__rsub__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' - ix
[  90 -184    0]
#end_IndexHour-__rsub__()

#start_IndexHour-__rtruediv__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' / ix
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexHour-__rtruediv__()

#start_IndexHour-__sub__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix - 2
['1517-03-31T22' '1517-12-30T22' '1517-06-29T22']
#end_IndexHour-__sub__()

#start_IndexHour-__truediv__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix / '1517-06-30'
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexHour-__truediv__()

#start_IndexHour-__xor__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix ^ True
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix ^ (False, True)
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHour-__xor__()

#start_IndexHour-__abs__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> abs(ix)
UFuncTypeError(<ufunc 'absolute'>, (dtype('<M8[h]'), dtype('<M8[h]')))
#end_IndexHour-__abs__()

#start_IndexHour-__invert__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ~ix
TypeError("ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHour-__invert__()

#start_IndexHour-__neg__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> -ix
UFuncTypeError(<ufunc 'negative'>, (dtype('<M8[h]'), dtype('<M8[h]')))
#end_IndexHour-__neg__()

#start_IndexHour-__pos__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> +ix
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHour-__pos__()

#start_IndexHour-via_dt.year
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.year
[1517 1517 1517]
#end_IndexHour-via_dt.year

#start_IndexHour-via_dt.month
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.month
[ 4 12  6]
#end_IndexHour-via_dt.month

#start_IndexHour-via_dt.day
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.day
[ 1 31 30]
#end_IndexHour-via_dt.day

#start_IndexHour-via_dt.hour
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.hour
[0 0 0]
#end_IndexHour-via_dt.hour

#start_IndexHour-via_dt.minute
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.minute
[0 0 0]
#end_IndexHour-via_dt.minute

#start_IndexHour-via_dt.second
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.second
[0 0 0]
#end_IndexHour-via_dt.second

#start_IndexHour-via_dt.weekday()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.weekday()
[6 0 5]
#end_IndexHour-via_dt.weekday()

#start_IndexHour-via_dt.quarter()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.quarter()
[2 4 2]
#end_IndexHour-via_dt.quarter()

#start_IndexHour-via_dt.is_month_end()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_month_end()
[False  True  True]
#end_IndexHour-via_dt.is_month_end()

#start_IndexHour-via_dt.is_month_start()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_month_start()
[ True False False]
#end_IndexHour-via_dt.is_month_start()

#start_IndexHour-via_dt.is_year_end()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_year_end()
[False  True False]
#end_IndexHour-via_dt.is_year_end()

#start_IndexHour-via_dt.is_year_start()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_year_start()
[False False False]
#end_IndexHour-via_dt.is_year_start()

#start_IndexHour-via_dt.is_quarter_end()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_quarter_end()
[False  True  True]
#end_IndexHour-via_dt.is_quarter_end()

#start_IndexHour-via_dt.is_quarter_start()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_quarter_start()
[ True False False]
#end_IndexHour-via_dt.is_quarter_start()

#start_IndexHour-via_dt.timetuple()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.timetuple()
[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=365, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]
#end_IndexHour-via_dt.timetuple()

#start_IndexHour-via_dt.isoformat()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.isoformat()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexHour-via_dt.isoformat()

#start_IndexHour-via_dt.fromisoformat()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.fromisoformat()
RuntimeError('invalid dtype (datetime64[h]) for operation on string types')
#end_IndexHour-via_dt.fromisoformat()

#start_IndexHour-via_dt.strftime()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strftime("%A | %B")
['Sunday | April' 'Monday | December' 'Saturday | June']
#end_IndexHour-via_dt.strftime()

#start_IndexHour-via_dt.strptime()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strptime("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[h]) for operation on string types')
#end_IndexHour-via_dt.strptime()

#start_IndexHour-via_dt.strpdate()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strpdate("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[h]) for operation on string types')
#end_IndexHour-via_dt.strpdate()

#start_IndexHour-via_str.__getitem__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str[-1]
['0' '0' '0']
#end_IndexHour-via_str.__getitem__()

#start_IndexHour-via_str.capitalize()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.capitalize()
['1517-04-01t00' '1517-12-31t00' '1517-06-30t00']
#end_IndexHour-via_str.capitalize()

#start_IndexHour-via_str.center()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.center(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexHour-via_str.center()

#start_IndexHour-via_str.contains()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.contains('X')
[False False False]
#end_IndexHour-via_str.contains()

#start_IndexHour-via_str.count()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.count('X')
[0 0 0]
#end_IndexHour-via_str.count()

#start_IndexHour-via_str.decode()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30')).astype(bytes)
>>> ix
<Index>
b'1517-04-01T00'
b'1517-12-31T00'
b'1517-06-30T00'
<|S32>
>>> ix.via_str.decode()
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHour-via_str.decode()

#start_IndexHour-via_str.encode()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.encode()
[b'1517-04-01T00' b'1517-12-31T00' b'1517-06-30T00']
#end_IndexHour-via_str.encode()

#start_IndexHour-via_str.endswith()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.endswith(' ')
[False False False]
#end_IndexHour-via_str.endswith()

#start_IndexHour-via_str.find()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.find('X')
[-1 -1 -1]
#end_IndexHour-via_str.find()

#start_IndexHour-via_str.format()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.format('{:-^10}')
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHour-via_str.format()

#start_IndexHour-via_str.index()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.index('X')
ValueError('substring not found')
#end_IndexHour-via_str.index()

#start_IndexHour-via_str.isalnum()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.isalnum()
[False False False]
#end_IndexHour-via_str.isalnum()

#start_IndexHour-via_str.isalpha()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.isalpha()
[False False False]
#end_IndexHour-via_str.isalpha()

#start_IndexHour-via_str.isdecimal()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.isdecimal()
[False False False]
#end_IndexHour-via_str.isdecimal()

#start_IndexHour-via_str.isdigit()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.isdigit()
[False False False]
#end_IndexHour-via_str.isdigit()

#start_IndexHour-via_str.islower()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.islower()
[False False False]
#end_IndexHour-via_str.islower()

#start_IndexHour-via_str.isnumeric()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.isnumeric()
[False False False]
#end_IndexHour-via_str.isnumeric()

#start_IndexHour-via_str.isspace()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.isspace()
[False False False]
#end_IndexHour-via_str.isspace()

#start_IndexHour-via_str.istitle()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.istitle()
[ True  True  True]
#end_IndexHour-via_str.istitle()

#start_IndexHour-via_str.isupper()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.isupper()
[ True  True  True]
#end_IndexHour-via_str.isupper()

#start_IndexHour-via_str.ljust()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.ljust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexHour-via_str.ljust()

#start_IndexHour-via_str.len()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.len()
[13 13 13]
#end_IndexHour-via_str.len()

#start_IndexHour-via_str.lower()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.lower()
['1517-04-01t00' '1517-12-31t00' '1517-06-30t00']
#end_IndexHour-via_str.lower()

#start_IndexHour-via_str.lstrip()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.lstrip()
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHour-via_str.lstrip()

#start_IndexHour-via_str.partition()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.partition('X')
[('1517-04-01T00', '', '') ('1517-12-31T00', '', '')
 ('1517-06-30T00', '', '')]
#end_IndexHour-via_str.partition()

#start_IndexHour-via_str.replace()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.replace('X', '*')
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHour-via_str.replace()

#start_IndexHour-via_str.rfind()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.rfind('X')
[-1 -1 -1]
#end_IndexHour-via_str.rfind()

#start_IndexHour-via_str.rindex()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.rindex('X')
ValueError('substring not found')
#end_IndexHour-via_str.rindex()

#start_IndexHour-via_str.rjust()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.rjust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexHour-via_str.rjust()

#start_IndexHour-via_str.rpartition()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.rpartition('X')
[('', '', '1517-04-01T00') ('', '', '1517-12-31T00')
 ('', '', '1517-06-30T00')]
#end_IndexHour-via_str.rpartition()

#start_IndexHour-via_str.rsplit()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.rsplit('X')
[('1517-04-01T00',) ('1517-12-31T00',) ('1517-06-30T00',)]
#end_IndexHour-via_str.rsplit()

#start_IndexHour-via_str.rstrip()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.rstrip()
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHour-via_str.rstrip()

#start_IndexHour-via_str.split()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.split('X')
[('1517-04-01T00',) ('1517-12-31T00',) ('1517-06-30T00',)]
#end_IndexHour-via_str.split()

#start_IndexHour-via_str.startswith()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.startswith('X')
[False False False]
#end_IndexHour-via_str.startswith()

#start_IndexHour-via_str.strip()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.strip()
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHour-via_str.strip()

#start_IndexHour-via_str.swapcase()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.swapcase()
['1517-04-01t00' '1517-12-31t00' '1517-06-30t00']
#end_IndexHour-via_str.swapcase()

#start_IndexHour-via_str.title()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.title()
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHour-via_str.title()

#start_IndexHour-via_str.upper()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.upper()
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHour-via_str.upper()

#start_IndexHour-via_str.zfill()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.zfill(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexHour-via_str.zfill()

#start_IndexHour-via_re().search()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_re('[X123]').search()
[ True  True  True]
#end_IndexHour-via_re().search()

#start_IndexHour-via_re().match()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_re('[X123]').match()
[ True  True  True]
#end_IndexHour-via_re().match()

#start_IndexHour-via_re().fullmatch()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_re('123').fullmatch()
[False False False]
#end_IndexHour-via_re().fullmatch()

#start_IndexHour-via_re().split()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_re('[X123]').split()
[('', '5', '7-04-0', 'T00') ('', '5', '7-', '', '-', '', 'T00')
 ('', '5', '7-06-', '0T00')]
#end_IndexHour-via_re().split()

#start_IndexHour-via_re().findall()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_re('[X123]').findall()
[('1', '1', '1') ('1', '1', '1', '2', '3', '1') ('1', '1', '3')]
#end_IndexHour-via_re().findall()

#start_IndexHour-via_re().sub()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_re('[X123]').sub('==')
['==5==7-04-0==T00' '==5==7-====-====T00' '==5==7-06-==0T00']
#end_IndexHour-via_re().sub()

#start_IndexHour-via_re().subn()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHour>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_re('[X123]').subn('==', 1)
[('==517-04-01T00', 1) ('==517-12-31T00', 1) ('==517-06-30T00', 1)]
#end_IndexHour-via_re().subn()

#start_IndexHour-via_values.apply()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_values.apply(np.sin)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHour-via_values.apply()

#start_IndexHour-via_values.__array_ufunc__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> np.sin(ix.via_values)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHour-via_values.__array_ufunc__()

#start_IndexHour-via_values.__call__()
>>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> np.sin(ix.via_values(unify_blocks=True))
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHour-via_values.__call__()

#start_IndexHourGO-__init__()
>>> sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
#end_IndexHourGO-__init__()

#start_IndexHourGO-from_labels()
>>> sf.IndexHourGO.from_labels(('1517-04-01', '1517-12-31', '1517-06-30'))
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
#end_IndexHourGO-from_labels()

#start_IndexHourGO-from_pandas()
>>> ix = pd.Index(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> sf.IndexHourGO.from_pandas(ix)
<IndexGO>
1517-04-01
1517-12-31
1517-06-30
<object>
#end_IndexHourGO-from_pandas()

#start_IndexHourGO-to_pandas()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.to_pandas()
OutOfBoundsDatetime('Out of bounds nanosecond timestamp: 1517-04-01 00:00:00')
#end_IndexHourGO-to_pandas()

#start_IndexHourGO-to_series()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.to_series()
<Series>
<Index>
0        1517-04-01T00
1        1517-12-31T00
2        1517-06-30T00
<int64>  <datetime64[h]>
#end_IndexHourGO-to_series()

#start_IndexHourGO-STATIC
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.STATIC
False
#end_IndexHourGO-STATIC

#start_IndexHourGO-depth
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.depth
1
#end_IndexHourGO-depth

#start_IndexHourGO-dtype
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.dtype
datetime64[h]
#end_IndexHourGO-dtype

#start_IndexHourGO-index_types
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.index_types
<Series>
<Index>
None     <IndexHourGO>
<object> <object>
#end_IndexHourGO-index_types

#start_IndexHourGO-memory
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.memory
          L    Lu    LM   LMu   LMD LMDu  R    Ru    RM   RMu   RMD RMDu
Name      16   B     16   B     16  B     16   B     16   B     16  B
Map       440  B     440  B     440 B     440  B     440  B     440 B
Labels    120  B     136  B     24  B     120  B     136  B     24  B
Positions 96   B     112  B     0   B     8.19 KB    136  B     24  B
Total     1.11 KB    1.14 KB    948 B     9.21 KB    1.17 KB    972 B
#end_IndexHourGO-memory

#start_IndexHourGO-name
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.name
#end_IndexHourGO-name

#start_IndexHourGO-names
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.names
('__index0__',)
#end_IndexHourGO-names

#start_IndexHourGO-nbytes
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.nbytes
24
#end_IndexHourGO-nbytes

#start_IndexHourGO-ndim
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.ndim
1
#end_IndexHourGO-ndim

#start_IndexHourGO-positions
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.positions
[0 1 2]
#end_IndexHourGO-positions

#start_IndexHourGO-shape
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.shape
(3,)
#end_IndexHourGO-shape

#start_IndexHourGO-size
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.size
3
#end_IndexHourGO-size

#start_IndexHourGO-__array__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__array__()
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHourGO-__array__()

#start_IndexHourGO-__array_ufunc__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> np.array((0, 1, 0)) * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[h]')))
#end_IndexHourGO-__array_ufunc__()

#start_IndexHourGO-__bool__()
>>> s = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexHourGO-__bool__()

#start_IndexHourGO-__copy__()
>>> import copy
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> copy.copy(ix)
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
#end_IndexHourGO-__copy__()

#start_IndexHourGO-__deepcopy__()
>>> import copy
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> copy.deepcopy(ix)
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
#end_IndexHourGO-__deepcopy__()

#start_IndexHourGO-__len__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> len(ix)
3
#end_IndexHourGO-__len__()

#start_IndexHourGO-all()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.all()
True
#end_IndexHourGO-all()

#start_IndexHourGO-any()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.any()
True
#end_IndexHourGO-any()

#start_IndexHourGO-append()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.append('f')
ValueError('Error parsing datetime string "f" at position 0')
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
#end_IndexHourGO-append()

#start_IndexHourGO-astype()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.astype(str)
<IndexGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<<U32>
#end_IndexHourGO-astype()

#start_IndexHourGO-copy()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.copy()
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
#end_IndexHourGO-copy()

#start_IndexHourGO-cumprod()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.cumprod()
ValueError("could not find a matching type for multiply.accumulate, requested type has type code 'M'")
#end_IndexHourGO-cumprod()

#start_IndexHourGO-cumsum()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.cumsum()
ValueError("could not find a matching type for add.accumulate, requested type has type code 'M'")
#end_IndexHourGO-cumsum()

#start_IndexHourGO-difference()
>>> ix1 = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexHourGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.difference(ix2)
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
#end_IndexHourGO-difference()

#start_IndexHourGO-dropfalsy()
>>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexHourGO>
1620-09-16T00
NaT
1620-11-21T00
<datetime64[h]>
>>> ix.dropfalsy()
<IndexHourGO>
1620-09-16T00
1620-11-21T00
<datetime64[h]>
#end_IndexHourGO-dropfalsy()

#start_IndexHourGO-dropna()
>>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexHourGO>
1620-09-16T00
NaT
1620-11-21T00
<datetime64[h]>
>>> ix.dropna()
<IndexHourGO>
1620-09-16T00
1620-11-21T00
<datetime64[h]>
#end_IndexHourGO-dropna()

#start_IndexHourGO-equals()
>>> ix1 = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexHourGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.equals(ix2)
False
#end_IndexHourGO-equals()

#start_IndexHourGO-extend()
>>> ix1 = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexHourGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.extend(ix2)
>>> ix1
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
2022-04-01T00
2021-12-31T00
2022-06-30T00
<datetime64[h]>
#end_IndexHourGO-extend()

#start_IndexHourGO-fillfalsy()
>>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexHourGO>
1620-09-16T00
NaT
1620-11-21T00
<datetime64[h]>
>>> ix.fillfalsy('A')
ValueError('Error parsing datetime string "A" at position 0')
#end_IndexHourGO-fillfalsy()

#start_IndexHourGO-fillna()
>>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexHourGO>
1620-09-16T00
NaT
1620-11-21T00
<datetime64[h]>
>>> ix.fillna(0)
<IndexHourGO>
1620-09-16T00
1970-01-01T00
1620-11-21T00
<datetime64[h]>
#end_IndexHourGO-fillna()

#start_IndexHourGO-head()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.head(2)
<IndexHourGO>
1517-04-01T00
1517-12-31T00
<datetime64[h]>
#end_IndexHourGO-head()

#start_IndexHourGO-iloc_searchsorted()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.iloc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexHourGO-iloc_searchsorted()

#start_IndexHourGO-intersection()
>>> ix1 = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexHourGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.intersection(ix2)
<IndexHourGO>
<datetime64[h]>
#end_IndexHourGO-intersection()

#start_IndexHourGO-isin()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.isin(('1517-06-30',))
[False False False]
#end_IndexHourGO-isin()

#start_IndexHourGO-label_widths_at_depth()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> tuple(ix.label_widths_at_depth(0))
((numpy.datetime64('1517-04-01T00','h'), 1), (numpy.datetime64('1517-12-31T00','h'), 1), (numpy.datetime64('1517-06-30T00','h'), 1))
#end_IndexHourGO-label_widths_at_depth()

#start_IndexHourGO-level_add()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.level_add('A')
<IndexHierarchyGO>
A                  1517-04-01T00
A                  1517-12-31T00
A                  1517-06-30T00
<<U1>              <datetime64[h]>
#end_IndexHourGO-level_add()

#start_IndexHourGO-loc_searchsorted()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.loc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexHourGO-loc_searchsorted()

#start_IndexHourGO-loc_to_iloc()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.loc_to_iloc('d')
ValueError('Error parsing datetime string "d" at position 0')
>>> ix.loc_to_iloc(['a', 'e'])
ValueError('Cannot create a NumPy datetime other than NaT with generic units')
>>> ix.loc_to_iloc(slice('c', None))
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexHourGO-loc_to_iloc()

#start_IndexHourGO-max()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.max()
1517-12-31T00
#end_IndexHourGO-max()

#start_IndexHourGO-mean()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.mean()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))
#end_IndexHourGO-mean()

#start_IndexHourGO-median()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.median()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))
#end_IndexHourGO-median()

#start_IndexHourGO-min()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.min()
1517-04-01T00
#end_IndexHourGO-min()

#start_IndexHourGO-prod()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.prod()
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[h]'), dtype('<M8[h]')))
#end_IndexHourGO-prod()

#start_IndexHourGO-relabel()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)
<IndexHourGO>
1970-01-01T01
1970-01-02T07
1970-01-02T06
<datetime64[h]>
#end_IndexHourGO-relabel()

#start_IndexHourGO-rename()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.rename('y')
<IndexHourGO: y>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
#end_IndexHourGO-rename()

#start_IndexHourGO-roll()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.roll(2)
<IndexHourGO>
1517-12-31T00
1517-06-30T00
1517-04-01T00
<datetime64[h]>
#end_IndexHourGO-roll()

#start_IndexHourGO-sample()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.sample(2, seed=0)
<IndexHourGO>
1517-12-31T00
1517-06-30T00
<datetime64[h]>
#end_IndexHourGO-sample()

#start_IndexHourGO-sort()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.sort()
<IndexHourGO>
1517-04-01T00
1517-06-30T00
1517-12-31T00
<datetime64[h]>
>>> ix.sort(ascending=False)
<IndexHourGO>
1517-12-31T00
1517-06-30T00
1517-04-01T00
<datetime64[h]>
#end_IndexHourGO-sort()

#start_IndexHourGO-std()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.std()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))
#end_IndexHourGO-std()

#start_IndexHourGO-sum()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.sum()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))
#end_IndexHourGO-sum()

#start_IndexHourGO-tail()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.tail(2)
<IndexHourGO>
1517-12-31T00
1517-06-30T00
<datetime64[h]>
#end_IndexHourGO-tail()

#start_IndexHourGO-union()
>>> ix1 = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexHourGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.union(ix2)
<IndexHourGO>
1517-04-01T00
1517-06-30T00
1517-12-31T00
2021-12-31T00
2022-04-01T00
2022-06-30T00
<datetime64[h]>
#end_IndexHourGO-union()

#start_IndexHourGO-unique()
>>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexHourGO>
1620-09-16T00
NaT
1620-11-21T00
<datetime64[h]>
>>> ix.unique()
['1620-09-16T00'           'NaT' '1620-11-21T00']
#end_IndexHourGO-unique()

#start_IndexHourGO-values_at_depth()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values_at_depth(0)
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHourGO-values_at_depth()

#start_IndexHourGO-var()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.var()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))
#end_IndexHourGO-var()

#start_IndexHourGO-__contains__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__contains__('a')
ValueError('Error parsing datetime string "a" at position 0')
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__contains__('1517-06-30')
False
#end_IndexHourGO-__contains__()

#start_IndexHourGO-__iter__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01T00','h'), numpy.datetime64('1517-12-31T00','h'), numpy.datetime64('1517-06-30T00','h'))
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01T00','h'), numpy.datetime64('1517-12-31T00','h'), numpy.datetime64('1517-06-30T00','h'))
#end_IndexHourGO-__iter__()

#start_IndexHourGO-__reversed__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30T00','h'), numpy.datetime64('1517-12-31T00','h'), numpy.datetime64('1517-04-01T00','h'))
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30T00','h'), numpy.datetime64('1517-12-31T00','h'), numpy.datetime64('1517-04-01T00','h'))
#end_IndexHourGO-__reversed__()

#start_IndexHourGO-values
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHourGO-values

#start_IndexHourGO-interface
>>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.interface
<Frame>
<Index>                              cls_name    group                doc                  <<U18>
<Index: signature>
__init__(labels, *, name, loc_is_... IndexHourGO Constructor          Initializer. Args...
from_labels(labels, *, name)         IndexHourGO Constructor          Construct an Inde...
from_pandas(value)                   IndexHourGO Constructor          Given a Pandas in...
to_html(config, style_config)        IndexHourGO Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexHourGO Exporter             Return a complete...
to_pandas()                          IndexHourGO Exporter             Return a Pandas I...
to_series()                          IndexHourGO Exporter             Return a Series w...
to_visidata()                        IndexHourGO Exporter             Open an interacti...
STATIC                               IndexHourGO Attribute            bool(x) -> bool R...
depth                                IndexHourGO Attribute            int([x]) -> integ...
dtype                                IndexHourGO Attribute            Return the dtype ...
index_types                          IndexHourGO Attribute            Return a Series o...
memory                               IndexHourGO Attribute            Return a MemoryDi...
mloc                                 IndexHourGO Attribute            The memory locati...
name                                 IndexHourGO Attribute            A hashable label ...
names                                IndexHourGO Attribute            Provide a suitabl...
nbytes                               IndexHourGO Attribute            Return the total ...
...                                  ...         ...                  ...
via_str.rpartition(sep)              IndexHourGO Accessor String      Partition (split)...
via_str.rsplit(sep, maxsplit)        IndexHourGO Accessor String      For each element,...
via_str.rstrip(chars)                IndexHourGO Accessor String      For each element,...
via_str.split(sep, maxsplit)         IndexHourGO Accessor String      For each element,...
via_str.startswith(prefix, start,... IndexHourGO Accessor String      Returns a contain...
via_str.strip(chars)                 IndexHourGO Accessor String      For each element,...
via_str.swapcase()                   IndexHourGO Accessor String      Return a containe...
via_str.title()                      IndexHourGO Accessor String      Return a containe...
via_str.upper()                      IndexHourGO Accessor String      Return a containe...
via_str.zfill(width)                 IndexHourGO Accessor String      Return the string...
via_re(pattern, flags).search(pos... IndexHourGO Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexHourGO Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexHourGO Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexHourGO Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexHourGO Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexHourGO Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexHourGO Accessor Regular ... Perform the same ...
<<U63>                               <<U11>      <<U27>               <<U83>
#end_IndexHourGO-interface

#start_IndexHourGO-__repr__()
>>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> repr(ix)
<IndexHourGO>
1620-09-16T00
NaT
1620-11-21T00
<datetime64[h]>
#end_IndexHourGO-__repr__()

#start_IndexHourGO-__str__()
>>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> str(ix)
<IndexHourGO>
1620-09-16T00
NaT
1620-11-21T00
<datetime64[h]>
#end_IndexHourGO-__str__()

#start_IndexHourGO-display()
>>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display()
<IndexHourGO>
1620-09-16T00
NaT
1620-11-21T00
<datetime64[h]>
>>> ix.display(sf.DisplayConfig(type_show=False))
1620-09-16T00
NaT
1620-11-21T00
#end_IndexHourGO-display()

#start_IndexHourGO-display_tall()
>>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_tall()
<IndexHourGO>
1620-09-16T00
NaT
1620-11-21T00
<datetime64[h]>
#end_IndexHourGO-display_tall()

#start_IndexHourGO-display_wide()
>>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_wide()
<IndexHourGO>
1620-09-16T00
NaT
1620-11-21T00
<datetime64[h]>
#end_IndexHourGO-display_wide()

#start_IndexHourGO-drop.iloc[]
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.drop.iloc[1]
<IndexHourGO>
1517-04-01T00
1517-06-30T00
<datetime64[h]>
>>> ix.drop.iloc[1:]
<IndexHourGO>
1517-04-01T00
<datetime64[h]>
>>> ix.drop.iloc[[0, 2]]
<IndexHourGO>
1517-12-31T00
<datetime64[h]>
#end_IndexHourGO-drop.iloc[]

#start_IndexHourGO-drop.loc[]
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.drop.loc['1517-06-30']
<IndexHourGO>
1517-04-01T00
1517-12-31T00
<datetime64[h]>
>>> ix.drop.loc['1517-06-30':]
<IndexHourGO>
1517-04-01T00
1517-12-31T00
<datetime64[h]>
#end_IndexHourGO-drop.loc[]

#start_IndexHourGO-[]
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix[1]
1517-12-31T00
>>> ix[1:]
<IndexHourGO>
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix[[0, 2]]
<IndexHourGO>
1517-04-01T00
1517-06-30T00
<datetime64[h]>
#end_IndexHourGO-[]

#start_IndexHourGO-iloc[]
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iloc[1]
1517-12-31T00
>>> ix.iloc[1:]
<IndexHourGO>
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.iloc[[0, 2]]
<IndexHourGO>
1517-04-01T00
1517-06-30T00
<datetime64[h]>
#end_IndexHourGO-iloc[]

#start_IndexHourGO-loc[]
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.loc['1517-06-30']
<IndexHourGO>
1517-06-30T00
<datetime64[h]>
>>> ix.loc['1517-06-30':]
<IndexHourGO>
1517-06-30T00
<datetime64[h]>
#end_IndexHourGO-loc[]

#start_IndexHourGO-iter_label()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label())
(numpy.datetime64('1517-04-01T00','h'), numpy.datetime64('1517-12-31T00','h'), numpy.datetime64('1517-06-30T00','h'))
#end_IndexHourGO-iter_label()

#start_IndexHourGO-iter_label().apply()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)
[1517 1517 1517]
#end_IndexHourGO-iter_label().apply()

#start_IndexHourGO-iter_label().apply_iter()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))
(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 31, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))
#end_IndexHourGO-iter_label().apply_iter()

#start_IndexHourGO-iter_label().apply_iter_items()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))
((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 31, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))
#end_IndexHourGO-iter_label().apply_iter_items()

#start_IndexHourGO-iter_label().apply_pool()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)
[ 4 12  6]
#end_IndexHourGO-iter_label().apply_pool()

#start_IndexHourGO-__add__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix + 2
['1517-04-01T02' '1517-12-31T02' '1517-06-30T02']
#end_IndexHourGO-__add__()

#start_IndexHourGO-__and__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix & True
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix & (False, True)
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHourGO-__and__()

#start_IndexHourGO-__eq__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix == '1517-06-30'
[False False  True]
#end_IndexHourGO-__eq__()

#start_IndexHourGO-__floordiv__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix // '1517-06-30'
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexHourGO-__floordiv__()

#start_IndexHourGO-__ge__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix >= '1517-06-30'
[False  True  True]
#end_IndexHourGO-__ge__()

#start_IndexHourGO-__gt__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix > '1517-06-30'
[False  True False]
#end_IndexHourGO-__gt__()

#start_IndexHourGO-__le__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix <= '1517-06-30'
[ True False  True]
#end_IndexHourGO-__le__()

#start_IndexHourGO-__lt__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix < '1517-06-30'
[ True False False]
#end_IndexHourGO-__lt__()

#start_IndexHourGO-__matmul__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexHourGO-__matmul__()

#start_IndexHourGO-__mod__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix % '1517-06-30'
UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexHourGO-__mod__()

#start_IndexHourGO-__mul__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix * '1517-06-30'
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexHourGO-__mul__()

#start_IndexHourGO-__ne__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix != '1517-06-30'
[ True  True False]
#end_IndexHourGO-__ne__()

#start_IndexHourGO-__or__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix | True
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix | (False, True)
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHourGO-__or__()

#start_IndexHourGO-__pow__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix ** '1517-06-30'
TypeError("ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHourGO-__pow__()

#start_IndexHourGO-__radd__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' + ix
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexHourGO-__radd__()

#start_IndexHourGO-__rfloordiv__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' // ix
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexHourGO-__rfloordiv__()

#start_IndexHourGO-__rmatmul__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexHourGO-__rmatmul__()

#start_IndexHourGO-__rmul__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexHourGO-__rmul__()

#start_IndexHourGO-__rshift__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix >> 1
TypeError("ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHourGO-__rshift__()

#start_IndexHourGO-__rsub__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' - ix
[  90 -184    0]
#end_IndexHourGO-__rsub__()

#start_IndexHourGO-__rtruediv__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' / ix
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexHourGO-__rtruediv__()

#start_IndexHourGO-__sub__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix - 2
['1517-03-31T22' '1517-12-30T22' '1517-06-29T22']
#end_IndexHourGO-__sub__()

#start_IndexHourGO-__truediv__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix / '1517-06-30'
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexHourGO-__truediv__()

#start_IndexHourGO-__xor__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix ^ True
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix ^ (False, True)
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHourGO-__xor__()

#start_IndexHourGO-__abs__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> abs(ix)
UFuncTypeError(<ufunc 'absolute'>, (dtype('<M8[h]'), dtype('<M8[h]')))
#end_IndexHourGO-__abs__()

#start_IndexHourGO-__invert__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ~ix
TypeError("ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHourGO-__invert__()

#start_IndexHourGO-__neg__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> -ix
UFuncTypeError(<ufunc 'negative'>, (dtype('<M8[h]'), dtype('<M8[h]')))
#end_IndexHourGO-__neg__()

#start_IndexHourGO-__pos__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> +ix
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHourGO-__pos__()

#start_IndexHourGO-via_dt.year
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.year
[1517 1517 1517]
#end_IndexHourGO-via_dt.year

#start_IndexHourGO-via_dt.month
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.month
[ 4 12  6]
#end_IndexHourGO-via_dt.month

#start_IndexHourGO-via_dt.day
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.day
[ 1 31 30]
#end_IndexHourGO-via_dt.day

#start_IndexHourGO-via_dt.hour
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.hour
[0 0 0]
#end_IndexHourGO-via_dt.hour

#start_IndexHourGO-via_dt.minute
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.minute
[0 0 0]
#end_IndexHourGO-via_dt.minute

#start_IndexHourGO-via_dt.second
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.second
[0 0 0]
#end_IndexHourGO-via_dt.second

#start_IndexHourGO-via_dt.weekday()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.weekday()
[6 0 5]
#end_IndexHourGO-via_dt.weekday()

#start_IndexHourGO-via_dt.quarter()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.quarter()
[2 4 2]
#end_IndexHourGO-via_dt.quarter()

#start_IndexHourGO-via_dt.is_month_end()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_month_end()
[False  True  True]
#end_IndexHourGO-via_dt.is_month_end()

#start_IndexHourGO-via_dt.is_month_start()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_month_start()
[ True False False]
#end_IndexHourGO-via_dt.is_month_start()

#start_IndexHourGO-via_dt.is_year_end()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_year_end()
[False  True False]
#end_IndexHourGO-via_dt.is_year_end()

#start_IndexHourGO-via_dt.is_year_start()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_year_start()
[False False False]
#end_IndexHourGO-via_dt.is_year_start()

#start_IndexHourGO-via_dt.is_quarter_end()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_quarter_end()
[False  True  True]
#end_IndexHourGO-via_dt.is_quarter_end()

#start_IndexHourGO-via_dt.is_quarter_start()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_quarter_start()
[ True False False]
#end_IndexHourGO-via_dt.is_quarter_start()

#start_IndexHourGO-via_dt.timetuple()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.timetuple()
[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=365, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]
#end_IndexHourGO-via_dt.timetuple()

#start_IndexHourGO-via_dt.isoformat()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.isoformat()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexHourGO-via_dt.isoformat()

#start_IndexHourGO-via_dt.fromisoformat()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.fromisoformat()
RuntimeError('invalid dtype (datetime64[h]) for operation on string types')
#end_IndexHourGO-via_dt.fromisoformat()

#start_IndexHourGO-via_dt.strftime()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strftime("%A | %B")
['Sunday | April' 'Monday | December' 'Saturday | June']
#end_IndexHourGO-via_dt.strftime()

#start_IndexHourGO-via_dt.strptime()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strptime("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[h]) for operation on string types')
#end_IndexHourGO-via_dt.strptime()

#start_IndexHourGO-via_dt.strpdate()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strpdate("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[h]) for operation on string types')
#end_IndexHourGO-via_dt.strpdate()

#start_IndexHourGO-via_str.__getitem__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str[-1]
['0' '0' '0']
#end_IndexHourGO-via_str.__getitem__()

#start_IndexHourGO-via_str.capitalize()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.capitalize()
['1517-04-01t00' '1517-12-31t00' '1517-06-30t00']
#end_IndexHourGO-via_str.capitalize()

#start_IndexHourGO-via_str.center()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.center(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexHourGO-via_str.center()

#start_IndexHourGO-via_str.contains()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.contains('X')
[False False False]
#end_IndexHourGO-via_str.contains()

#start_IndexHourGO-via_str.count()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.count('X')
[0 0 0]
#end_IndexHourGO-via_str.count()

#start_IndexHourGO-via_str.decode()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30')).astype(bytes)
>>> ix
<IndexGO>
b'1517-04-01T00'
b'1517-12-31T00'
b'1517-06-30T00'
<|S32>
>>> ix.via_str.decode()
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHourGO-via_str.decode()

#start_IndexHourGO-via_str.encode()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.encode()
[b'1517-04-01T00' b'1517-12-31T00' b'1517-06-30T00']
#end_IndexHourGO-via_str.encode()

#start_IndexHourGO-via_str.endswith()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.endswith(' ')
[False False False]
#end_IndexHourGO-via_str.endswith()

#start_IndexHourGO-via_str.find()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.find('X')
[-1 -1 -1]
#end_IndexHourGO-via_str.find()

#start_IndexHourGO-via_str.format()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.format('{:-^10}')
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHourGO-via_str.format()

#start_IndexHourGO-via_str.index()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.index('X')
ValueError('substring not found')
#end_IndexHourGO-via_str.index()

#start_IndexHourGO-via_str.isalnum()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.isalnum()
[False False False]
#end_IndexHourGO-via_str.isalnum()

#start_IndexHourGO-via_str.isalpha()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.isalpha()
[False False False]
#end_IndexHourGO-via_str.isalpha()

#start_IndexHourGO-via_str.isdecimal()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.isdecimal()
[False False False]
#end_IndexHourGO-via_str.isdecimal()

#start_IndexHourGO-via_str.isdigit()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.isdigit()
[False False False]
#end_IndexHourGO-via_str.isdigit()

#start_IndexHourGO-via_str.islower()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.islower()
[False False False]
#end_IndexHourGO-via_str.islower()

#start_IndexHourGO-via_str.isnumeric()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.isnumeric()
[False False False]
#end_IndexHourGO-via_str.isnumeric()

#start_IndexHourGO-via_str.isspace()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.isspace()
[False False False]
#end_IndexHourGO-via_str.isspace()

#start_IndexHourGO-via_str.istitle()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.istitle()
[ True  True  True]
#end_IndexHourGO-via_str.istitle()

#start_IndexHourGO-via_str.isupper()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.isupper()
[ True  True  True]
#end_IndexHourGO-via_str.isupper()

#start_IndexHourGO-via_str.ljust()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.ljust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexHourGO-via_str.ljust()

#start_IndexHourGO-via_str.len()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.len()
[13 13 13]
#end_IndexHourGO-via_str.len()

#start_IndexHourGO-via_str.lower()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.lower()
['1517-04-01t00' '1517-12-31t00' '1517-06-30t00']
#end_IndexHourGO-via_str.lower()

#start_IndexHourGO-via_str.lstrip()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.lstrip()
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHourGO-via_str.lstrip()

#start_IndexHourGO-via_str.partition()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.partition('X')
[('1517-04-01T00', '', '') ('1517-12-31T00', '', '')
 ('1517-06-30T00', '', '')]
#end_IndexHourGO-via_str.partition()

#start_IndexHourGO-via_str.replace()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.replace('X', '*')
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHourGO-via_str.replace()

#start_IndexHourGO-via_str.rfind()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.rfind('X')
[-1 -1 -1]
#end_IndexHourGO-via_str.rfind()

#start_IndexHourGO-via_str.rindex()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.rindex('X')
ValueError('substring not found')
#end_IndexHourGO-via_str.rindex()

#start_IndexHourGO-via_str.rjust()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.rjust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexHourGO-via_str.rjust()

#start_IndexHourGO-via_str.rpartition()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.rpartition('X')
[('', '', '1517-04-01T00') ('', '', '1517-12-31T00')
 ('', '', '1517-06-30T00')]
#end_IndexHourGO-via_str.rpartition()

#start_IndexHourGO-via_str.rsplit()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.rsplit('X')
[('1517-04-01T00',) ('1517-12-31T00',) ('1517-06-30T00',)]
#end_IndexHourGO-via_str.rsplit()

#start_IndexHourGO-via_str.rstrip()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.rstrip()
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHourGO-via_str.rstrip()

#start_IndexHourGO-via_str.split()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.split('X')
[('1517-04-01T00',) ('1517-12-31T00',) ('1517-06-30T00',)]
#end_IndexHourGO-via_str.split()

#start_IndexHourGO-via_str.startswith()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.startswith('X')
[False False False]
#end_IndexHourGO-via_str.startswith()

#start_IndexHourGO-via_str.strip()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.strip()
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHourGO-via_str.strip()

#start_IndexHourGO-via_str.swapcase()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.swapcase()
['1517-04-01t00' '1517-12-31t00' '1517-06-30t00']
#end_IndexHourGO-via_str.swapcase()

#start_IndexHourGO-via_str.title()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.title()
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHourGO-via_str.title()

#start_IndexHourGO-via_str.upper()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.upper()
['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']
#end_IndexHourGO-via_str.upper()

#start_IndexHourGO-via_str.zfill()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_str.zfill(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexHourGO-via_str.zfill()

#start_IndexHourGO-via_re().search()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_re('[X123]').search()
[ True  True  True]
#end_IndexHourGO-via_re().search()

#start_IndexHourGO-via_re().match()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_re('[X123]').match()
[ True  True  True]
#end_IndexHourGO-via_re().match()

#start_IndexHourGO-via_re().fullmatch()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_re('123').fullmatch()
[False False False]
#end_IndexHourGO-via_re().fullmatch()

#start_IndexHourGO-via_re().split()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_re('[X123]').split()
[('', '5', '7-04-0', 'T00') ('', '5', '7-', '', '-', '', 'T00')
 ('', '5', '7-06-', '0T00')]
#end_IndexHourGO-via_re().split()

#start_IndexHourGO-via_re().findall()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_re('[X123]').findall()
[('1', '1', '1') ('1', '1', '1', '2', '3', '1') ('1', '1', '3')]
#end_IndexHourGO-via_re().findall()

#start_IndexHourGO-via_re().sub()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_re('[X123]').sub('==')
['==5==7-04-0==T00' '==5==7-====-====T00' '==5==7-06-==0T00']
#end_IndexHourGO-via_re().sub()

#start_IndexHourGO-via_re().subn()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexHourGO>
1517-04-01T00
1517-12-31T00
1517-06-30T00
<datetime64[h]>
>>> ix.via_re('[X123]').subn('==', 1)
[('==517-04-01T00', 1) ('==517-12-31T00', 1) ('==517-06-30T00', 1)]
#end_IndexHourGO-via_re().subn()

#start_IndexHourGO-via_values.apply()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_values.apply(np.sin)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHourGO-via_values.apply()

#start_IndexHourGO-via_values.__array_ufunc__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> np.sin(ix.via_values)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHourGO-via_values.__array_ufunc__()

#start_IndexHourGO-via_values.__call__()
>>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> np.sin(ix.via_values(unify_blocks=True))
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHourGO-via_values.__call__()

#start_IndexSecond-__init__()
>>> sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecond-__init__()

#start_IndexSecond-from_labels()
>>> sf.IndexSecond.from_labels(('1517-04-01', '1517-12-31', '1517-06-30'))
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecond-from_labels()

#start_IndexSecond-from_pandas()
>>> ix = pd.Index(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> sf.IndexSecond.from_pandas(ix)
<Index>
1517-04-01
1517-12-31
1517-06-30
<object>
#end_IndexSecond-from_pandas()

#start_IndexSecond-to_pandas()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.to_pandas()
OutOfBoundsDatetime('Out of bounds nanosecond timestamp: 1517-04-01 00:00:00')
#end_IndexSecond-to_pandas()

#start_IndexSecond-to_series()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.to_series()
<Series>
<Index>
0        1517-04-01T00:00:00
1        1517-12-31T00:00:00
2        1517-06-30T00:00:00
<int64>  <datetime64[s]>
#end_IndexSecond-to_series()

#start_IndexSecond-STATIC
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.STATIC
True
#end_IndexSecond-STATIC

#start_IndexSecond-depth
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.depth
1
#end_IndexSecond-depth

#start_IndexSecond-dtype
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.dtype
datetime64[s]
#end_IndexSecond-dtype

#start_IndexSecond-index_types
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.index_types
<Series>
<Index>
None     <IndexSecond>
<object> <object>
#end_IndexSecond-index_types

#start_IndexSecond-memory
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.memory
          L   Lu    LM  LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu
Name      16  B     16  B     16  B     16   B     16  B     16  B
Map       440 B     440 B     440 B     440  B     440 B     440 B
Labels    120 B     136 B     24  B     120  B     136 B     24  B
Positions 96  B     112 B     0   B     8.19 KB    136 B     24  B
Total     768 B     800 B     576 B     8.84 KB    824 B     600 B
#end_IndexSecond-memory

#start_IndexSecond-name
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.name
#end_IndexSecond-name

#start_IndexSecond-names
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.names
('__index0__',)
#end_IndexSecond-names

#start_IndexSecond-nbytes
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.nbytes
24
#end_IndexSecond-nbytes

#start_IndexSecond-ndim
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.ndim
1
#end_IndexSecond-ndim

#start_IndexSecond-positions
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.positions
[0 1 2]
#end_IndexSecond-positions

#start_IndexSecond-shape
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.shape
(3,)
#end_IndexSecond-shape

#start_IndexSecond-size
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.size
3
#end_IndexSecond-size

#start_IndexSecond-__array__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__array__()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecond-__array__()

#start_IndexSecond-__array_ufunc__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> np.array((0, 1, 0)) * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[s]')))
#end_IndexSecond-__array_ufunc__()

#start_IndexSecond-__bool__()
>>> s = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexSecond-__bool__()

#start_IndexSecond-__copy__()
>>> import copy
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> copy.copy(ix)
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecond-__copy__()

#start_IndexSecond-__deepcopy__()
>>> import copy
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> copy.deepcopy(ix)
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecond-__deepcopy__()

#start_IndexSecond-__len__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> len(ix)
3
#end_IndexSecond-__len__()

#start_IndexSecond-all()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.all()
True
#end_IndexSecond-all()

#start_IndexSecond-any()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.any()
True
#end_IndexSecond-any()

#start_IndexSecond-astype()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.astype(str)
<Index>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<<U38>
#end_IndexSecond-astype()

#start_IndexSecond-copy()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.copy()
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecond-copy()

#start_IndexSecond-cumprod()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.cumprod()
ValueError("could not find a matching type for multiply.accumulate, requested type has type code 'M'")
#end_IndexSecond-cumprod()

#start_IndexSecond-cumsum()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.cumsum()
ValueError("could not find a matching type for add.accumulate, requested type has type code 'M'")
#end_IndexSecond-cumsum()

#start_IndexSecond-difference()
>>> ix1 = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexSecond(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.difference(ix2)
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecond-difference()

#start_IndexSecond-dropfalsy()
>>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexSecond>
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
<datetime64[s]>
>>> ix.dropfalsy()
<IndexSecond>
1620-09-16T00:00:00
1620-11-21T00:00:00
<datetime64[s]>
#end_IndexSecond-dropfalsy()

#start_IndexSecond-dropna()
>>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexSecond>
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
<datetime64[s]>
>>> ix.dropna()
<IndexSecond>
1620-09-16T00:00:00
1620-11-21T00:00:00
<datetime64[s]>
#end_IndexSecond-dropna()

#start_IndexSecond-equals()
>>> ix1 = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexSecond(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.equals(ix2)
False
#end_IndexSecond-equals()

#start_IndexSecond-fillfalsy()
>>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexSecond>
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
<datetime64[s]>
>>> ix.fillfalsy('A')
ValueError('Error parsing datetime string "A" at position 0')
#end_IndexSecond-fillfalsy()

#start_IndexSecond-fillna()
>>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexSecond>
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
<datetime64[s]>
>>> ix.fillna(0)
<IndexSecond>
1620-09-16T00:00:00
1970-01-01T00:00:00
1620-11-21T00:00:00
<datetime64[s]>
#end_IndexSecond-fillna()

#start_IndexSecond-head()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.head(2)
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
<datetime64[s]>
#end_IndexSecond-head()

#start_IndexSecond-iloc_searchsorted()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.iloc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexSecond-iloc_searchsorted()

#start_IndexSecond-intersection()
>>> ix1 = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexSecond(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.intersection(ix2)
<IndexSecond>
<datetime64[s]>
#end_IndexSecond-intersection()

#start_IndexSecond-isin()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.isin(('1517-06-30',))
[False False False]
#end_IndexSecond-isin()

#start_IndexSecond-label_widths_at_depth()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> tuple(ix.label_widths_at_depth(0))
((numpy.datetime64('1517-04-01T00:00:00'), 1), (numpy.datetime64('1517-12-31T00:00:00'), 1), (numpy.datetime64('1517-06-30T00:00:00'), 1))
#end_IndexSecond-label_widths_at_depth()

#start_IndexSecond-level_add()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.level_add('A')
<IndexHierarchy>
A                1517-04-01T00:00:00
A                1517-12-31T00:00:00
A                1517-06-30T00:00:00
<<U1>            <datetime64[s]>
#end_IndexSecond-level_add()

#start_IndexSecond-loc_searchsorted()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.loc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexSecond-loc_searchsorted()

#start_IndexSecond-loc_to_iloc()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.loc_to_iloc('d')
ValueError('Error parsing datetime string "d" at position 0')
>>> ix.loc_to_iloc(['a', 'e'])
ValueError('Cannot create a NumPy datetime other than NaT with generic units')
>>> ix.loc_to_iloc(slice('c', None))
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexSecond-loc_to_iloc()

#start_IndexSecond-max()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.max()
1517-12-31T00:00:00
#end_IndexSecond-max()

#start_IndexSecond-mean()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.mean()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))
#end_IndexSecond-mean()

#start_IndexSecond-median()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.median()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))
#end_IndexSecond-median()

#start_IndexSecond-min()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.min()
1517-04-01T00:00:00
#end_IndexSecond-min()

#start_IndexSecond-prod()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.prod()
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[s]'), dtype('<M8[s]')))
#end_IndexSecond-prod()

#start_IndexSecond-relabel()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)
<IndexSecond>
1970-01-01T00:00:01
1970-01-01T00:00:31
1970-01-01T00:00:30
<datetime64[s]>
#end_IndexSecond-relabel()

#start_IndexSecond-rename()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.rename('y')
<IndexSecond: y>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecond-rename()

#start_IndexSecond-roll()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.roll(2)
<IndexSecond>
1517-12-31T00:00:00
1517-06-30T00:00:00
1517-04-01T00:00:00
<datetime64[s]>
#end_IndexSecond-roll()

#start_IndexSecond-sample()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.sample(2, seed=0)
<IndexSecond>
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecond-sample()

#start_IndexSecond-sort()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.sort()
<IndexSecond>
1517-04-01T00:00:00
1517-06-30T00:00:00
1517-12-31T00:00:00
<datetime64[s]>
>>> ix.sort(ascending=False)
<IndexSecond>
1517-12-31T00:00:00
1517-06-30T00:00:00
1517-04-01T00:00:00
<datetime64[s]>
#end_IndexSecond-sort()

#start_IndexSecond-std()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.std()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))
#end_IndexSecond-std()

#start_IndexSecond-sum()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.sum()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))
#end_IndexSecond-sum()

#start_IndexSecond-tail()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.tail(2)
<IndexSecond>
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecond-tail()

#start_IndexSecond-union()
>>> ix1 = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexSecond(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.union(ix2)
<IndexSecond>
1517-04-01T00:00:00
1517-06-30T00:00:00
1517-12-31T00:00:00
2021-12-31T00:00:00
2022-04-01T00:00:00
2022-06-30T00:00:00
<datetime64[s]>
#end_IndexSecond-union()

#start_IndexSecond-unique()
>>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexSecond>
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
<datetime64[s]>
>>> ix.unique()
['1620-09-16T00:00:00'                 'NaT' '1620-11-21T00:00:00']
#end_IndexSecond-unique()

#start_IndexSecond-values_at_depth()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values_at_depth(0)
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecond-values_at_depth()

#start_IndexSecond-var()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.var()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))
#end_IndexSecond-var()

#start_IndexSecond-__contains__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__contains__('a')
ValueError('Error parsing datetime string "a" at position 0')
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__contains__('1517-06-30')
False
#end_IndexSecond-__contains__()

#start_IndexSecond-__iter__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01T00:00:00'), numpy.datetime64('1517-12-31T00:00:00'), numpy.datetime64('1517-06-30T00:00:00'))
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01T00:00:00'), numpy.datetime64('1517-12-31T00:00:00'), numpy.datetime64('1517-06-30T00:00:00'))
#end_IndexSecond-__iter__()

#start_IndexSecond-__reversed__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30T00:00:00'), numpy.datetime64('1517-12-31T00:00:00'), numpy.datetime64('1517-04-01T00:00:00'))
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30T00:00:00'), numpy.datetime64('1517-12-31T00:00:00'), numpy.datetime64('1517-04-01T00:00:00'))
#end_IndexSecond-__reversed__()

#start_IndexSecond-values
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecond-values

#start_IndexSecond-interface
>>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.interface
<Frame>
<Index>                              cls_name    group                doc                  <<U18>
<Index: signature>
__init__(labels, *, name, loc_is_... IndexSecond Constructor          Initializer. Args...
from_labels(labels, *, name)         IndexSecond Constructor          Construct an Inde...
from_pandas(value)                   IndexSecond Constructor          Given a Pandas in...
to_html(config, style_config)        IndexSecond Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexSecond Exporter             Return a complete...
to_pandas()                          IndexSecond Exporter             Return a Pandas I...
to_series()                          IndexSecond Exporter             Return a Series w...
to_visidata()                        IndexSecond Exporter             Open an interacti...
STATIC                               IndexSecond Attribute            bool(x) -> bool R...
depth                                IndexSecond Attribute            int([x]) -> integ...
dtype                                IndexSecond Attribute            Return the dtype ...
index_types                          IndexSecond Attribute            Return a Series o...
memory                               IndexSecond Attribute            Return a MemoryDi...
mloc                                 IndexSecond Attribute            The memory locati...
name                                 IndexSecond Attribute            A hashable label ...
names                                IndexSecond Attribute            Provide a suitabl...
nbytes                               IndexSecond Attribute            Return the total ...
...                                  ...         ...                  ...
via_str.rpartition(sep)              IndexSecond Accessor String      Partition (split)...
via_str.rsplit(sep, maxsplit)        IndexSecond Accessor String      For each element,...
via_str.rstrip(chars)                IndexSecond Accessor String      For each element,...
via_str.split(sep, maxsplit)         IndexSecond Accessor String      For each element,...
via_str.startswith(prefix, start,... IndexSecond Accessor String      Returns a contain...
via_str.strip(chars)                 IndexSecond Accessor String      For each element,...
via_str.swapcase()                   IndexSecond Accessor String      Return a containe...
via_str.title()                      IndexSecond Accessor String      Return a containe...
via_str.upper()                      IndexSecond Accessor String      Return a containe...
via_str.zfill(width)                 IndexSecond Accessor String      Return the string...
via_re(pattern, flags).search(pos... IndexSecond Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexSecond Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexSecond Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexSecond Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexSecond Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexSecond Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexSecond Accessor Regular ... Perform the same ...
<<U63>                               <<U11>      <<U27>               <<U83>
#end_IndexSecond-interface

#start_IndexSecond-__repr__()
>>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> repr(ix)
<IndexSecond>
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
<datetime64[s]>
#end_IndexSecond-__repr__()

#start_IndexSecond-__str__()
>>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> str(ix)
<IndexSecond>
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
<datetime64[s]>
#end_IndexSecond-__str__()

#start_IndexSecond-display()
>>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display()
<IndexSecond>
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
<datetime64[s]>
>>> ix.display(sf.DisplayConfig(type_show=False))
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
#end_IndexSecond-display()

#start_IndexSecond-display_tall()
>>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_tall()
<IndexSecond>
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
<datetime64[s]>
#end_IndexSecond-display_tall()

#start_IndexSecond-display_wide()
>>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_wide()
<IndexSecond>
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
<datetime64[s]>
#end_IndexSecond-display_wide()

#start_IndexSecond-drop.iloc[]
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.drop.iloc[1]
<IndexSecond>
1517-04-01T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.drop.iloc[1:]
<IndexSecond>
1517-04-01T00:00:00
<datetime64[s]>
>>> ix.drop.iloc[[0, 2]]
<IndexSecond>
1517-12-31T00:00:00
<datetime64[s]>
#end_IndexSecond-drop.iloc[]

#start_IndexSecond-drop.loc[]
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.drop.loc['1517-06-30']
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
<datetime64[s]>
>>> ix.drop.loc['1517-06-30':]
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
<datetime64[s]>
#end_IndexSecond-drop.loc[]

#start_IndexSecond-[]
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix[1]
1517-12-31T00:00:00
>>> ix[1:]
<IndexSecond>
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix[[0, 2]]
<IndexSecond>
1517-04-01T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecond-[]

#start_IndexSecond-iloc[]
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iloc[1]
1517-12-31T00:00:00
>>> ix.iloc[1:]
<IndexSecond>
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.iloc[[0, 2]]
<IndexSecond>
1517-04-01T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecond-iloc[]

#start_IndexSecond-loc[]
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.loc['1517-06-30']
<IndexSecond>
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.loc['1517-06-30':]
<IndexSecond>
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecond-loc[]

#start_IndexSecond-iter_label()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label())
(numpy.datetime64('1517-04-01T00:00:00'), numpy.datetime64('1517-12-31T00:00:00'), numpy.datetime64('1517-06-30T00:00:00'))
#end_IndexSecond-iter_label()

#start_IndexSecond-iter_label().apply()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)
[1517 1517 1517]
#end_IndexSecond-iter_label().apply()

#start_IndexSecond-iter_label().apply_iter()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))
(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 31, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))
#end_IndexSecond-iter_label().apply_iter()

#start_IndexSecond-iter_label().apply_iter_items()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))
((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 31, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))
#end_IndexSecond-iter_label().apply_iter_items()

#start_IndexSecond-iter_label().apply_pool()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)
[ 4 12  6]
#end_IndexSecond-iter_label().apply_pool()

#start_IndexSecond-__add__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix + 2
['1517-04-01T00:00:02' '1517-12-31T00:00:02' '1517-06-30T00:00:02']
#end_IndexSecond-__add__()

#start_IndexSecond-__and__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix & True
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix & (False, True)
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexSecond-__and__()

#start_IndexSecond-__eq__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix == '1517-06-30'
[False False  True]
#end_IndexSecond-__eq__()

#start_IndexSecond-__floordiv__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix // '1517-06-30'
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexSecond-__floordiv__()

#start_IndexSecond-__ge__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix >= '1517-06-30'
[False  True  True]
#end_IndexSecond-__ge__()

#start_IndexSecond-__gt__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix > '1517-06-30'
[False  True False]
#end_IndexSecond-__gt__()

#start_IndexSecond-__le__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix <= '1517-06-30'
[ True False  True]
#end_IndexSecond-__le__()

#start_IndexSecond-__lt__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix < '1517-06-30'
[ True False False]
#end_IndexSecond-__lt__()

#start_IndexSecond-__matmul__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexSecond-__matmul__()

#start_IndexSecond-__mod__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix % '1517-06-30'
UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexSecond-__mod__()

#start_IndexSecond-__mul__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix * '1517-06-30'
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexSecond-__mul__()

#start_IndexSecond-__ne__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix != '1517-06-30'
[ True  True False]
#end_IndexSecond-__ne__()

#start_IndexSecond-__or__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix | True
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix | (False, True)
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexSecond-__or__()

#start_IndexSecond-__pow__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix ** '1517-06-30'
TypeError("ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexSecond-__pow__()

#start_IndexSecond-__radd__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' + ix
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexSecond-__radd__()

#start_IndexSecond-__rfloordiv__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' // ix
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexSecond-__rfloordiv__()

#start_IndexSecond-__rmatmul__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexSecond-__rmatmul__()

#start_IndexSecond-__rmul__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexSecond-__rmul__()

#start_IndexSecond-__rshift__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix >> 1
TypeError("ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexSecond-__rshift__()

#start_IndexSecond-__rsub__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' - ix
[  90 -184    0]
#end_IndexSecond-__rsub__()

#start_IndexSecond-__rtruediv__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' / ix
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexSecond-__rtruediv__()

#start_IndexSecond-__sub__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix - 2
['1517-03-31T23:59:58' '1517-12-30T23:59:58' '1517-06-29T23:59:58']
#end_IndexSecond-__sub__()

#start_IndexSecond-__truediv__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix / '1517-06-30'
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexSecond-__truediv__()

#start_IndexSecond-__xor__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix ^ True
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix ^ (False, True)
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexSecond-__xor__()

#start_IndexSecond-__abs__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> abs(ix)
UFuncTypeError(<ufunc 'absolute'>, (dtype('<M8[s]'), dtype('<M8[s]')))
#end_IndexSecond-__abs__()

#start_IndexSecond-__invert__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ~ix
TypeError("ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexSecond-__invert__()

#start_IndexSecond-__neg__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> -ix
UFuncTypeError(<ufunc 'negative'>, (dtype('<M8[s]'), dtype('<M8[s]')))
#end_IndexSecond-__neg__()

#start_IndexSecond-__pos__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> +ix
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecond-__pos__()

#start_IndexSecond-via_dt.year
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.year
[1517 1517 1517]
#end_IndexSecond-via_dt.year

#start_IndexSecond-via_dt.month
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.month
[ 4 12  6]
#end_IndexSecond-via_dt.month

#start_IndexSecond-via_dt.day
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.day
[ 1 31 30]
#end_IndexSecond-via_dt.day

#start_IndexSecond-via_dt.hour
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.hour
[0 0 0]
#end_IndexSecond-via_dt.hour

#start_IndexSecond-via_dt.minute
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.minute
[0 0 0]
#end_IndexSecond-via_dt.minute

#start_IndexSecond-via_dt.second
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.second
[0 0 0]
#end_IndexSecond-via_dt.second

#start_IndexSecond-via_dt.weekday()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.weekday()
[6 0 5]
#end_IndexSecond-via_dt.weekday()

#start_IndexSecond-via_dt.quarter()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.quarter()
[2 4 2]
#end_IndexSecond-via_dt.quarter()

#start_IndexSecond-via_dt.is_month_end()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_month_end()
[False  True  True]
#end_IndexSecond-via_dt.is_month_end()

#start_IndexSecond-via_dt.is_month_start()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_month_start()
[ True False False]
#end_IndexSecond-via_dt.is_month_start()

#start_IndexSecond-via_dt.is_year_end()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_year_end()
[False  True False]
#end_IndexSecond-via_dt.is_year_end()

#start_IndexSecond-via_dt.is_year_start()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_year_start()
[False False False]
#end_IndexSecond-via_dt.is_year_start()

#start_IndexSecond-via_dt.is_quarter_end()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_quarter_end()
[False  True  True]
#end_IndexSecond-via_dt.is_quarter_end()

#start_IndexSecond-via_dt.is_quarter_start()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_quarter_start()
[ True False False]
#end_IndexSecond-via_dt.is_quarter_start()

#start_IndexSecond-via_dt.timetuple()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.timetuple()
[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=365, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]
#end_IndexSecond-via_dt.timetuple()

#start_IndexSecond-via_dt.isoformat()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.isoformat()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecond-via_dt.isoformat()

#start_IndexSecond-via_dt.fromisoformat()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.fromisoformat()
RuntimeError('invalid dtype (datetime64[s]) for operation on string types')
#end_IndexSecond-via_dt.fromisoformat()

#start_IndexSecond-via_dt.strftime()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strftime("%A | %B")
['Sunday | April' 'Monday | December' 'Saturday | June']
#end_IndexSecond-via_dt.strftime()

#start_IndexSecond-via_dt.strptime()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strptime("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[s]) for operation on string types')
#end_IndexSecond-via_dt.strptime()

#start_IndexSecond-via_dt.strpdate()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strpdate("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[s]) for operation on string types')
#end_IndexSecond-via_dt.strpdate()

#start_IndexSecond-via_str.__getitem__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str[-1]
['0' '0' '0']
#end_IndexSecond-via_str.__getitem__()

#start_IndexSecond-via_str.capitalize()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.capitalize()
['1517-04-01t00:00:00' '1517-12-31t00:00:00' '1517-06-30t00:00:00']
#end_IndexSecond-via_str.capitalize()

#start_IndexSecond-via_str.center()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.center(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexSecond-via_str.center()

#start_IndexSecond-via_str.contains()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.contains('X')
[False False False]
#end_IndexSecond-via_str.contains()

#start_IndexSecond-via_str.count()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.count('X')
[0 0 0]
#end_IndexSecond-via_str.count()

#start_IndexSecond-via_str.decode()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30')).astype(bytes)
>>> ix
<Index>
b'1517-04-01T00:00:00'
b'1517-12-31T00:00:00'
b'1517-06-30T00:00:00'
<|S38>
>>> ix.via_str.decode()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecond-via_str.decode()

#start_IndexSecond-via_str.encode()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.encode()
[b'1517-04-01T00:00:00' b'1517-12-31T00:00:00' b'1517-06-30T00:00:00']
#end_IndexSecond-via_str.encode()

#start_IndexSecond-via_str.endswith()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.endswith(' ')
[False False False]
#end_IndexSecond-via_str.endswith()

#start_IndexSecond-via_str.find()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.find('X')
[-1 -1 -1]
#end_IndexSecond-via_str.find()

#start_IndexSecond-via_str.format()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.format('{:-^10}')
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecond-via_str.format()

#start_IndexSecond-via_str.index()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.index('X')
ValueError('substring not found')
#end_IndexSecond-via_str.index()

#start_IndexSecond-via_str.isalnum()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.isalnum()
[False False False]
#end_IndexSecond-via_str.isalnum()

#start_IndexSecond-via_str.isalpha()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.isalpha()
[False False False]
#end_IndexSecond-via_str.isalpha()

#start_IndexSecond-via_str.isdecimal()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.isdecimal()
[False False False]
#end_IndexSecond-via_str.isdecimal()

#start_IndexSecond-via_str.isdigit()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.isdigit()
[False False False]
#end_IndexSecond-via_str.isdigit()

#start_IndexSecond-via_str.islower()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.islower()
[False False False]
#end_IndexSecond-via_str.islower()

#start_IndexSecond-via_str.isnumeric()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.isnumeric()
[False False False]
#end_IndexSecond-via_str.isnumeric()

#start_IndexSecond-via_str.isspace()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.isspace()
[False False False]
#end_IndexSecond-via_str.isspace()

#start_IndexSecond-via_str.istitle()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.istitle()
[ True  True  True]
#end_IndexSecond-via_str.istitle()

#start_IndexSecond-via_str.isupper()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.isupper()
[ True  True  True]
#end_IndexSecond-via_str.isupper()

#start_IndexSecond-via_str.ljust()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.ljust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexSecond-via_str.ljust()

#start_IndexSecond-via_str.len()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.len()
[19 19 19]
#end_IndexSecond-via_str.len()

#start_IndexSecond-via_str.lower()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.lower()
['1517-04-01t00:00:00' '1517-12-31t00:00:00' '1517-06-30t00:00:00']
#end_IndexSecond-via_str.lower()

#start_IndexSecond-via_str.lstrip()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.lstrip()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecond-via_str.lstrip()

#start_IndexSecond-via_str.partition()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.partition('X')
[('1517-04-01T00:00:00', '', '') ('1517-12-31T00:00:00', '', '')
 ('1517-06-30T00:00:00', '', '')]
#end_IndexSecond-via_str.partition()

#start_IndexSecond-via_str.replace()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.replace('X', '*')
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecond-via_str.replace()

#start_IndexSecond-via_str.rfind()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.rfind('X')
[-1 -1 -1]
#end_IndexSecond-via_str.rfind()

#start_IndexSecond-via_str.rindex()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.rindex('X')
ValueError('substring not found')
#end_IndexSecond-via_str.rindex()

#start_IndexSecond-via_str.rjust()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.rjust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexSecond-via_str.rjust()

#start_IndexSecond-via_str.rpartition()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.rpartition('X')
[('', '', '1517-04-01T00:00:00') ('', '', '1517-12-31T00:00:00')
 ('', '', '1517-06-30T00:00:00')]
#end_IndexSecond-via_str.rpartition()

#start_IndexSecond-via_str.rsplit()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.rsplit('X')
[('1517-04-01T00:00:00',) ('1517-12-31T00:00:00',)
 ('1517-06-30T00:00:00',)]
#end_IndexSecond-via_str.rsplit()

#start_IndexSecond-via_str.rstrip()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.rstrip()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecond-via_str.rstrip()

#start_IndexSecond-via_str.split()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.split('X')
[('1517-04-01T00:00:00',) ('1517-12-31T00:00:00',)
 ('1517-06-30T00:00:00',)]
#end_IndexSecond-via_str.split()

#start_IndexSecond-via_str.startswith()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.startswith('X')
[False False False]
#end_IndexSecond-via_str.startswith()

#start_IndexSecond-via_str.strip()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.strip()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecond-via_str.strip()

#start_IndexSecond-via_str.swapcase()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.swapcase()
['1517-04-01t00:00:00' '1517-12-31t00:00:00' '1517-06-30t00:00:00']
#end_IndexSecond-via_str.swapcase()

#start_IndexSecond-via_str.title()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.title()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecond-via_str.title()

#start_IndexSecond-via_str.upper()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.upper()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecond-via_str.upper()

#start_IndexSecond-via_str.zfill()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.zfill(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexSecond-via_str.zfill()

#start_IndexSecond-via_re().search()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_re('[X123]').search()
[ True  True  True]
#end_IndexSecond-via_re().search()

#start_IndexSecond-via_re().match()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_re('[X123]').match()
[ True  True  True]
#end_IndexSecond-via_re().match()

#start_IndexSecond-via_re().fullmatch()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_re('123').fullmatch()
[False False False]
#end_IndexSecond-via_re().fullmatch()

#start_IndexSecond-via_re().split()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_re('[X123]').split()
[('', '5', '7-04-0', 'T00:00:00')
 ('', '5', '7-', '', '-', '', 'T00:00:00')
 ('', '5', '7-06-', '0T00:00:00')]
#end_IndexSecond-via_re().split()

#start_IndexSecond-via_re().findall()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_re('[X123]').findall()
[('1', '1', '1') ('1', '1', '1', '2', '3', '1') ('1', '1', '3')]
#end_IndexSecond-via_re().findall()

#start_IndexSecond-via_re().sub()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_re('[X123]').sub('==')
['==5==7-04-0==T00:00:00' '==5==7-====-====T00:00:00'
 '==5==7-06-==0T00:00:00']
#end_IndexSecond-via_re().sub()

#start_IndexSecond-via_re().subn()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecond>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_re('[X123]').subn('==', 1)
[('==517-04-01T00:00:00', 1) ('==517-12-31T00:00:00', 1)
 ('==517-06-30T00:00:00', 1)]
#end_IndexSecond-via_re().subn()

#start_IndexSecond-via_values.apply()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_values.apply(np.sin)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexSecond-via_values.apply()

#start_IndexSecond-via_values.__array_ufunc__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> np.sin(ix.via_values)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexSecond-via_values.__array_ufunc__()

#start_IndexSecond-via_values.__call__()
>>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> np.sin(ix.via_values(unify_blocks=True))
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexSecond-via_values.__call__()

#start_IndexSecondGO-__init__()
>>> sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecondGO-__init__()

#start_IndexSecondGO-from_labels()
>>> sf.IndexSecondGO.from_labels(('1517-04-01', '1517-12-31', '1517-06-30'))
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecondGO-from_labels()

#start_IndexSecondGO-from_pandas()
>>> ix = pd.Index(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> sf.IndexSecondGO.from_pandas(ix)
<IndexGO>
1517-04-01
1517-12-31
1517-06-30
<object>
#end_IndexSecondGO-from_pandas()

#start_IndexSecondGO-to_pandas()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.to_pandas()
OutOfBoundsDatetime('Out of bounds nanosecond timestamp: 1517-04-01 00:00:00')
#end_IndexSecondGO-to_pandas()

#start_IndexSecondGO-to_series()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.to_series()
<Series>
<Index>
0        1517-04-01T00:00:00
1        1517-12-31T00:00:00
2        1517-06-30T00:00:00
<int64>  <datetime64[s]>
#end_IndexSecondGO-to_series()

#start_IndexSecondGO-STATIC
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.STATIC
False
#end_IndexSecondGO-STATIC

#start_IndexSecondGO-depth
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.depth
1
#end_IndexSecondGO-depth

#start_IndexSecondGO-dtype
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.dtype
datetime64[s]
#end_IndexSecondGO-dtype

#start_IndexSecondGO-index_types
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.index_types
<Series>
<Index>
None     <IndexSecondGO>
<object> <object>
#end_IndexSecondGO-index_types

#start_IndexSecondGO-memory
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.memory
          L    Lu    LM   LMu   LMD LMDu  R    Ru    RM   RMu   RMD RMDu
Name      16   B     16   B     16  B     16   B     16   B     16  B
Map       440  B     440  B     440 B     440  B     440  B     440 B
Labels    120  B     136  B     24  B     120  B     136  B     24  B
Positions 96   B     112  B     0   B     8.19 KB    136  B     24  B
Total     1.11 KB    1.14 KB    948 B     9.21 KB    1.17 KB    972 B
#end_IndexSecondGO-memory

#start_IndexSecondGO-name
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.name
#end_IndexSecondGO-name

#start_IndexSecondGO-names
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.names
('__index0__',)
#end_IndexSecondGO-names

#start_IndexSecondGO-nbytes
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.nbytes
24
#end_IndexSecondGO-nbytes

#start_IndexSecondGO-ndim
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.ndim
1
#end_IndexSecondGO-ndim

#start_IndexSecondGO-positions
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.positions
[0 1 2]
#end_IndexSecondGO-positions

#start_IndexSecondGO-shape
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.shape
(3,)
#end_IndexSecondGO-shape

#start_IndexSecondGO-size
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.size
3
#end_IndexSecondGO-size

#start_IndexSecondGO-__array__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__array__()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecondGO-__array__()

#start_IndexSecondGO-__array_ufunc__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> np.array((0, 1, 0)) * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[s]')))
#end_IndexSecondGO-__array_ufunc__()

#start_IndexSecondGO-__bool__()
>>> s = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexSecondGO-__bool__()

#start_IndexSecondGO-__copy__()
>>> import copy
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> copy.copy(ix)
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecondGO-__copy__()

#start_IndexSecondGO-__deepcopy__()
>>> import copy
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> copy.deepcopy(ix)
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecondGO-__deepcopy__()

#start_IndexSecondGO-__len__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> len(ix)
3
#end_IndexSecondGO-__len__()

#start_IndexSecondGO-all()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.all()
True
#end_IndexSecondGO-all()

#start_IndexSecondGO-any()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.any()
True
#end_IndexSecondGO-any()

#start_IndexSecondGO-append()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.append('f')
ValueError('Error parsing datetime string "f" at position 0')
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecondGO-append()

#start_IndexSecondGO-astype()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.astype(str)
<IndexGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<<U38>
#end_IndexSecondGO-astype()

#start_IndexSecondGO-copy()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.copy()
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecondGO-copy()

#start_IndexSecondGO-cumprod()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.cumprod()
ValueError("could not find a matching type for multiply.accumulate, requested type has type code 'M'")
#end_IndexSecondGO-cumprod()

#start_IndexSecondGO-cumsum()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.cumsum()
ValueError("could not find a matching type for add.accumulate, requested type has type code 'M'")
#end_IndexSecondGO-cumsum()

#start_IndexSecondGO-difference()
>>> ix1 = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexSecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.difference(ix2)
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecondGO-difference()

#start_IndexSecondGO-dropfalsy()
>>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexSecondGO>
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
<datetime64[s]>
>>> ix.dropfalsy()
<IndexSecondGO>
1620-09-16T00:00:00
1620-11-21T00:00:00
<datetime64[s]>
#end_IndexSecondGO-dropfalsy()

#start_IndexSecondGO-dropna()
>>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexSecondGO>
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
<datetime64[s]>
>>> ix.dropna()
<IndexSecondGO>
1620-09-16T00:00:00
1620-11-21T00:00:00
<datetime64[s]>
#end_IndexSecondGO-dropna()

#start_IndexSecondGO-equals()
>>> ix1 = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexSecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.equals(ix2)
False
#end_IndexSecondGO-equals()

#start_IndexSecondGO-extend()
>>> ix1 = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexSecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.extend(ix2)
>>> ix1
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
2022-04-01T00:00:00
2021-12-31T00:00:00
2022-06-30T00:00:00
<datetime64[s]>
#end_IndexSecondGO-extend()

#start_IndexSecondGO-fillfalsy()
>>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexSecondGO>
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
<datetime64[s]>
>>> ix.fillfalsy('A')
ValueError('Error parsing datetime string "A" at position 0')
#end_IndexSecondGO-fillfalsy()

#start_IndexSecondGO-fillna()
>>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexSecondGO>
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
<datetime64[s]>
>>> ix.fillna(0)
<IndexSecondGO>
1620-09-16T00:00:00
1970-01-01T00:00:00
1620-11-21T00:00:00
<datetime64[s]>
#end_IndexSecondGO-fillna()

#start_IndexSecondGO-head()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.head(2)
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
<datetime64[s]>
#end_IndexSecondGO-head()

#start_IndexSecondGO-iloc_searchsorted()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.iloc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexSecondGO-iloc_searchsorted()

#start_IndexSecondGO-intersection()
>>> ix1 = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexSecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.intersection(ix2)
<IndexSecondGO>
<datetime64[s]>
#end_IndexSecondGO-intersection()

#start_IndexSecondGO-isin()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.isin(('1517-06-30',))
[False False False]
#end_IndexSecondGO-isin()

#start_IndexSecondGO-label_widths_at_depth()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> tuple(ix.label_widths_at_depth(0))
((numpy.datetime64('1517-04-01T00:00:00'), 1), (numpy.datetime64('1517-12-31T00:00:00'), 1), (numpy.datetime64('1517-06-30T00:00:00'), 1))
#end_IndexSecondGO-label_widths_at_depth()

#start_IndexSecondGO-level_add()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.level_add('A')
<IndexHierarchyGO>
A                  1517-04-01T00:00:00
A                  1517-12-31T00:00:00
A                  1517-06-30T00:00:00
<<U1>              <datetime64[s]>
#end_IndexSecondGO-level_add()

#start_IndexSecondGO-loc_searchsorted()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.loc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexSecondGO-loc_searchsorted()

#start_IndexSecondGO-loc_to_iloc()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.loc_to_iloc('d')
ValueError('Error parsing datetime string "d" at position 0')
>>> ix.loc_to_iloc(['a', 'e'])
ValueError('Cannot create a NumPy datetime other than NaT with generic units')
>>> ix.loc_to_iloc(slice('c', None))
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexSecondGO-loc_to_iloc()

#start_IndexSecondGO-max()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.max()
1517-12-31T00:00:00
#end_IndexSecondGO-max()

#start_IndexSecondGO-mean()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.mean()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))
#end_IndexSecondGO-mean()

#start_IndexSecondGO-median()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.median()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))
#end_IndexSecondGO-median()

#start_IndexSecondGO-min()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.min()
1517-04-01T00:00:00
#end_IndexSecondGO-min()

#start_IndexSecondGO-prod()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.prod()
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[s]'), dtype('<M8[s]')))
#end_IndexSecondGO-prod()

#start_IndexSecondGO-relabel()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)
<IndexSecondGO>
1970-01-01T00:00:01
1970-01-01T00:00:31
1970-01-01T00:00:30
<datetime64[s]>
#end_IndexSecondGO-relabel()

#start_IndexSecondGO-rename()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.rename('y')
<IndexSecondGO: y>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecondGO-rename()

#start_IndexSecondGO-roll()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.roll(2)
<IndexSecondGO>
1517-12-31T00:00:00
1517-06-30T00:00:00
1517-04-01T00:00:00
<datetime64[s]>
#end_IndexSecondGO-roll()

#start_IndexSecondGO-sample()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.sample(2, seed=0)
<IndexSecondGO>
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecondGO-sample()

#start_IndexSecondGO-sort()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.sort()
<IndexSecondGO>
1517-04-01T00:00:00
1517-06-30T00:00:00
1517-12-31T00:00:00
<datetime64[s]>
>>> ix.sort(ascending=False)
<IndexSecondGO>
1517-12-31T00:00:00
1517-06-30T00:00:00
1517-04-01T00:00:00
<datetime64[s]>
#end_IndexSecondGO-sort()

#start_IndexSecondGO-std()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.std()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))
#end_IndexSecondGO-std()

#start_IndexSecondGO-sum()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.sum()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))
#end_IndexSecondGO-sum()

#start_IndexSecondGO-tail()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.tail(2)
<IndexSecondGO>
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecondGO-tail()

#start_IndexSecondGO-union()
>>> ix1 = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexSecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.union(ix2)
<IndexSecondGO>
1517-04-01T00:00:00
1517-06-30T00:00:00
1517-12-31T00:00:00
2021-12-31T00:00:00
2022-04-01T00:00:00
2022-06-30T00:00:00
<datetime64[s]>
#end_IndexSecondGO-union()

#start_IndexSecondGO-unique()
>>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexSecondGO>
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
<datetime64[s]>
>>> ix.unique()
['1620-09-16T00:00:00'                 'NaT' '1620-11-21T00:00:00']
#end_IndexSecondGO-unique()

#start_IndexSecondGO-values_at_depth()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values_at_depth(0)
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecondGO-values_at_depth()

#start_IndexSecondGO-var()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.var()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))
#end_IndexSecondGO-var()

#start_IndexSecondGO-__contains__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__contains__('a')
ValueError('Error parsing datetime string "a" at position 0')
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__contains__('1517-06-30')
False
#end_IndexSecondGO-__contains__()

#start_IndexSecondGO-__iter__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01T00:00:00'), numpy.datetime64('1517-12-31T00:00:00'), numpy.datetime64('1517-06-30T00:00:00'))
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01T00:00:00'), numpy.datetime64('1517-12-31T00:00:00'), numpy.datetime64('1517-06-30T00:00:00'))
#end_IndexSecondGO-__iter__()

#start_IndexSecondGO-__reversed__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30T00:00:00'), numpy.datetime64('1517-12-31T00:00:00'), numpy.datetime64('1517-04-01T00:00:00'))
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30T00:00:00'), numpy.datetime64('1517-12-31T00:00:00'), numpy.datetime64('1517-04-01T00:00:00'))
#end_IndexSecondGO-__reversed__()

#start_IndexSecondGO-values
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecondGO-values

#start_IndexSecondGO-interface
>>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.interface
<Frame>
<Index>                              cls_name      group                doc                  <<U18>
<Index: signature>
__init__(labels, *, name, loc_is_... IndexSecondGO Constructor          Initializer. Args...
from_labels(labels, *, name)         IndexSecondGO Constructor          Construct an Inde...
from_pandas(value)                   IndexSecondGO Constructor          Given a Pandas in...
to_html(config, style_config)        IndexSecondGO Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexSecondGO Exporter             Return a complete...
to_pandas()                          IndexSecondGO Exporter             Return a Pandas I...
to_series()                          IndexSecondGO Exporter             Return a Series w...
to_visidata()                        IndexSecondGO Exporter             Open an interacti...
STATIC                               IndexSecondGO Attribute            bool(x) -> bool R...
depth                                IndexSecondGO Attribute            int([x]) -> integ...
dtype                                IndexSecondGO Attribute            Return the dtype ...
index_types                          IndexSecondGO Attribute            Return a Series o...
memory                               IndexSecondGO Attribute            Return a MemoryDi...
mloc                                 IndexSecondGO Attribute            The memory locati...
name                                 IndexSecondGO Attribute            A hashable label ...
names                                IndexSecondGO Attribute            Provide a suitabl...
nbytes                               IndexSecondGO Attribute            Return the total ...
...                                  ...           ...                  ...
via_str.rpartition(sep)              IndexSecondGO Accessor String      Partition (split)...
via_str.rsplit(sep, maxsplit)        IndexSecondGO Accessor String      For each element,...
via_str.rstrip(chars)                IndexSecondGO Accessor String      For each element,...
via_str.split(sep, maxsplit)         IndexSecondGO Accessor String      For each element,...
via_str.startswith(prefix, start,... IndexSecondGO Accessor String      Returns a contain...
via_str.strip(chars)                 IndexSecondGO Accessor String      For each element,...
via_str.swapcase()                   IndexSecondGO Accessor String      Return a containe...
via_str.title()                      IndexSecondGO Accessor String      Return a containe...
via_str.upper()                      IndexSecondGO Accessor String      Return a containe...
via_str.zfill(width)                 IndexSecondGO Accessor String      Return the string...
via_re(pattern, flags).search(pos... IndexSecondGO Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexSecondGO Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexSecondGO Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexSecondGO Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexSecondGO Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexSecondGO Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexSecondGO Accessor Regular ... Perform the same ...
<<U63>                               <<U13>        <<U27>               <<U83>
#end_IndexSecondGO-interface

#start_IndexSecondGO-__repr__()
>>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> repr(ix)
<IndexSecondGO>
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
<datetime64[s]>
#end_IndexSecondGO-__repr__()

#start_IndexSecondGO-__str__()
>>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> str(ix)
<IndexSecondGO>
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
<datetime64[s]>
#end_IndexSecondGO-__str__()

#start_IndexSecondGO-display()
>>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display()
<IndexSecondGO>
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
<datetime64[s]>
>>> ix.display(sf.DisplayConfig(type_show=False))
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
#end_IndexSecondGO-display()

#start_IndexSecondGO-display_tall()
>>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_tall()
<IndexSecondGO>
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
<datetime64[s]>
#end_IndexSecondGO-display_tall()

#start_IndexSecondGO-display_wide()
>>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_wide()
<IndexSecondGO>
1620-09-16T00:00:00
NaT
1620-11-21T00:00:00
<datetime64[s]>
#end_IndexSecondGO-display_wide()

#start_IndexSecondGO-drop.iloc[]
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.drop.iloc[1]
<IndexSecondGO>
1517-04-01T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.drop.iloc[1:]
<IndexSecondGO>
1517-04-01T00:00:00
<datetime64[s]>
>>> ix.drop.iloc[[0, 2]]
<IndexSecondGO>
1517-12-31T00:00:00
<datetime64[s]>
#end_IndexSecondGO-drop.iloc[]

#start_IndexSecondGO-drop.loc[]
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.drop.loc['1517-06-30']
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
<datetime64[s]>
>>> ix.drop.loc['1517-06-30':]
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
<datetime64[s]>
#end_IndexSecondGO-drop.loc[]

#start_IndexSecondGO-[]
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix[1]
1517-12-31T00:00:00
>>> ix[1:]
<IndexSecondGO>
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix[[0, 2]]
<IndexSecondGO>
1517-04-01T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecondGO-[]

#start_IndexSecondGO-iloc[]
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iloc[1]
1517-12-31T00:00:00
>>> ix.iloc[1:]
<IndexSecondGO>
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.iloc[[0, 2]]
<IndexSecondGO>
1517-04-01T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecondGO-iloc[]

#start_IndexSecondGO-loc[]
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.loc['1517-06-30']
<IndexSecondGO>
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.loc['1517-06-30':]
<IndexSecondGO>
1517-06-30T00:00:00
<datetime64[s]>
#end_IndexSecondGO-loc[]

#start_IndexSecondGO-iter_label()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label())
(numpy.datetime64('1517-04-01T00:00:00'), numpy.datetime64('1517-12-31T00:00:00'), numpy.datetime64('1517-06-30T00:00:00'))
#end_IndexSecondGO-iter_label()

#start_IndexSecondGO-iter_label().apply()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)
[1517 1517 1517]
#end_IndexSecondGO-iter_label().apply()

#start_IndexSecondGO-iter_label().apply_iter()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))
(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 31, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))
#end_IndexSecondGO-iter_label().apply_iter()

#start_IndexSecondGO-iter_label().apply_iter_items()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))
((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 31, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))
#end_IndexSecondGO-iter_label().apply_iter_items()

#start_IndexSecondGO-iter_label().apply_pool()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)
[ 4 12  6]
#end_IndexSecondGO-iter_label().apply_pool()

#start_IndexSecondGO-__add__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix + 2
['1517-04-01T00:00:02' '1517-12-31T00:00:02' '1517-06-30T00:00:02']
#end_IndexSecondGO-__add__()

#start_IndexSecondGO-__and__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix & True
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix & (False, True)
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexSecondGO-__and__()

#start_IndexSecondGO-__eq__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix == '1517-06-30'
[False False  True]
#end_IndexSecondGO-__eq__()

#start_IndexSecondGO-__floordiv__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix // '1517-06-30'
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexSecondGO-__floordiv__()

#start_IndexSecondGO-__ge__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix >= '1517-06-30'
[False  True  True]
#end_IndexSecondGO-__ge__()

#start_IndexSecondGO-__gt__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix > '1517-06-30'
[False  True False]
#end_IndexSecondGO-__gt__()

#start_IndexSecondGO-__le__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix <= '1517-06-30'
[ True False  True]
#end_IndexSecondGO-__le__()

#start_IndexSecondGO-__lt__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix < '1517-06-30'
[ True False False]
#end_IndexSecondGO-__lt__()

#start_IndexSecondGO-__matmul__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexSecondGO-__matmul__()

#start_IndexSecondGO-__mod__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix % '1517-06-30'
UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexSecondGO-__mod__()

#start_IndexSecondGO-__mul__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix * '1517-06-30'
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexSecondGO-__mul__()

#start_IndexSecondGO-__ne__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix != '1517-06-30'
[ True  True False]
#end_IndexSecondGO-__ne__()

#start_IndexSecondGO-__or__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix | True
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix | (False, True)
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexSecondGO-__or__()

#start_IndexSecondGO-__pow__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix ** '1517-06-30'
TypeError("ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexSecondGO-__pow__()

#start_IndexSecondGO-__radd__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' + ix
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexSecondGO-__radd__()

#start_IndexSecondGO-__rfloordiv__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' // ix
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexSecondGO-__rfloordiv__()

#start_IndexSecondGO-__rmatmul__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexSecondGO-__rmatmul__()

#start_IndexSecondGO-__rmul__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexSecondGO-__rmul__()

#start_IndexSecondGO-__rshift__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix >> 1
TypeError("ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexSecondGO-__rshift__()

#start_IndexSecondGO-__rsub__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' - ix
[  90 -184    0]
#end_IndexSecondGO-__rsub__()

#start_IndexSecondGO-__rtruediv__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' / ix
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexSecondGO-__rtruediv__()

#start_IndexSecondGO-__sub__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix - 2
['1517-03-31T23:59:58' '1517-12-30T23:59:58' '1517-06-29T23:59:58']
#end_IndexSecondGO-__sub__()

#start_IndexSecondGO-__truediv__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix / '1517-06-30'
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexSecondGO-__truediv__()

#start_IndexSecondGO-__xor__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix ^ True
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix ^ (False, True)
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexSecondGO-__xor__()

#start_IndexSecondGO-__abs__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> abs(ix)
UFuncTypeError(<ufunc 'absolute'>, (dtype('<M8[s]'), dtype('<M8[s]')))
#end_IndexSecondGO-__abs__()

#start_IndexSecondGO-__invert__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ~ix
TypeError("ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexSecondGO-__invert__()

#start_IndexSecondGO-__neg__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> -ix
UFuncTypeError(<ufunc 'negative'>, (dtype('<M8[s]'), dtype('<M8[s]')))
#end_IndexSecondGO-__neg__()

#start_IndexSecondGO-__pos__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> +ix
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecondGO-__pos__()

#start_IndexSecondGO-via_dt.year
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.year
[1517 1517 1517]
#end_IndexSecondGO-via_dt.year

#start_IndexSecondGO-via_dt.month
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.month
[ 4 12  6]
#end_IndexSecondGO-via_dt.month

#start_IndexSecondGO-via_dt.day
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.day
[ 1 31 30]
#end_IndexSecondGO-via_dt.day

#start_IndexSecondGO-via_dt.hour
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.hour
[0 0 0]
#end_IndexSecondGO-via_dt.hour

#start_IndexSecondGO-via_dt.minute
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.minute
[0 0 0]
#end_IndexSecondGO-via_dt.minute

#start_IndexSecondGO-via_dt.second
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.second
[0 0 0]
#end_IndexSecondGO-via_dt.second

#start_IndexSecondGO-via_dt.weekday()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.weekday()
[6 0 5]
#end_IndexSecondGO-via_dt.weekday()

#start_IndexSecondGO-via_dt.quarter()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.quarter()
[2 4 2]
#end_IndexSecondGO-via_dt.quarter()

#start_IndexSecondGO-via_dt.is_month_end()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_month_end()
[False  True  True]
#end_IndexSecondGO-via_dt.is_month_end()

#start_IndexSecondGO-via_dt.is_month_start()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_month_start()
[ True False False]
#end_IndexSecondGO-via_dt.is_month_start()

#start_IndexSecondGO-via_dt.is_year_end()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_year_end()
[False  True False]
#end_IndexSecondGO-via_dt.is_year_end()

#start_IndexSecondGO-via_dt.is_year_start()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_year_start()
[False False False]
#end_IndexSecondGO-via_dt.is_year_start()

#start_IndexSecondGO-via_dt.is_quarter_end()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_quarter_end()
[False  True  True]
#end_IndexSecondGO-via_dt.is_quarter_end()

#start_IndexSecondGO-via_dt.is_quarter_start()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_quarter_start()
[ True False False]
#end_IndexSecondGO-via_dt.is_quarter_start()

#start_IndexSecondGO-via_dt.timetuple()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.timetuple()
[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=365, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]
#end_IndexSecondGO-via_dt.timetuple()

#start_IndexSecondGO-via_dt.isoformat()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.isoformat()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecondGO-via_dt.isoformat()

#start_IndexSecondGO-via_dt.fromisoformat()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.fromisoformat()
RuntimeError('invalid dtype (datetime64[s]) for operation on string types')
#end_IndexSecondGO-via_dt.fromisoformat()

#start_IndexSecondGO-via_dt.strftime()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strftime("%A | %B")
['Sunday | April' 'Monday | December' 'Saturday | June']
#end_IndexSecondGO-via_dt.strftime()

#start_IndexSecondGO-via_dt.strptime()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strptime("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[s]) for operation on string types')
#end_IndexSecondGO-via_dt.strptime()

#start_IndexSecondGO-via_dt.strpdate()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strpdate("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[s]) for operation on string types')
#end_IndexSecondGO-via_dt.strpdate()

#start_IndexSecondGO-via_str.__getitem__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str[-1]
['0' '0' '0']
#end_IndexSecondGO-via_str.__getitem__()

#start_IndexSecondGO-via_str.capitalize()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.capitalize()
['1517-04-01t00:00:00' '1517-12-31t00:00:00' '1517-06-30t00:00:00']
#end_IndexSecondGO-via_str.capitalize()

#start_IndexSecondGO-via_str.center()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.center(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexSecondGO-via_str.center()

#start_IndexSecondGO-via_str.contains()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.contains('X')
[False False False]
#end_IndexSecondGO-via_str.contains()

#start_IndexSecondGO-via_str.count()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.count('X')
[0 0 0]
#end_IndexSecondGO-via_str.count()

#start_IndexSecondGO-via_str.decode()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30')).astype(bytes)
>>> ix
<IndexGO>
b'1517-04-01T00:00:00'
b'1517-12-31T00:00:00'
b'1517-06-30T00:00:00'
<|S38>
>>> ix.via_str.decode()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecondGO-via_str.decode()

#start_IndexSecondGO-via_str.encode()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.encode()
[b'1517-04-01T00:00:00' b'1517-12-31T00:00:00' b'1517-06-30T00:00:00']
#end_IndexSecondGO-via_str.encode()

#start_IndexSecondGO-via_str.endswith()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.endswith(' ')
[False False False]
#end_IndexSecondGO-via_str.endswith()

#start_IndexSecondGO-via_str.find()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.find('X')
[-1 -1 -1]
#end_IndexSecondGO-via_str.find()

#start_IndexSecondGO-via_str.format()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.format('{:-^10}')
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecondGO-via_str.format()

#start_IndexSecondGO-via_str.index()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.index('X')
ValueError('substring not found')
#end_IndexSecondGO-via_str.index()

#start_IndexSecondGO-via_str.isalnum()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.isalnum()
[False False False]
#end_IndexSecondGO-via_str.isalnum()

#start_IndexSecondGO-via_str.isalpha()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.isalpha()
[False False False]
#end_IndexSecondGO-via_str.isalpha()

#start_IndexSecondGO-via_str.isdecimal()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.isdecimal()
[False False False]
#end_IndexSecondGO-via_str.isdecimal()

#start_IndexSecondGO-via_str.isdigit()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.isdigit()
[False False False]
#end_IndexSecondGO-via_str.isdigit()

#start_IndexSecondGO-via_str.islower()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.islower()
[False False False]
#end_IndexSecondGO-via_str.islower()

#start_IndexSecondGO-via_str.isnumeric()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.isnumeric()
[False False False]
#end_IndexSecondGO-via_str.isnumeric()

#start_IndexSecondGO-via_str.isspace()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.isspace()
[False False False]
#end_IndexSecondGO-via_str.isspace()

#start_IndexSecondGO-via_str.istitle()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.istitle()
[ True  True  True]
#end_IndexSecondGO-via_str.istitle()

#start_IndexSecondGO-via_str.isupper()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.isupper()
[ True  True  True]
#end_IndexSecondGO-via_str.isupper()

#start_IndexSecondGO-via_str.ljust()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.ljust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexSecondGO-via_str.ljust()

#start_IndexSecondGO-via_str.len()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.len()
[19 19 19]
#end_IndexSecondGO-via_str.len()

#start_IndexSecondGO-via_str.lower()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.lower()
['1517-04-01t00:00:00' '1517-12-31t00:00:00' '1517-06-30t00:00:00']
#end_IndexSecondGO-via_str.lower()

#start_IndexSecondGO-via_str.lstrip()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.lstrip()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecondGO-via_str.lstrip()

#start_IndexSecondGO-via_str.partition()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.partition('X')
[('1517-04-01T00:00:00', '', '') ('1517-12-31T00:00:00', '', '')
 ('1517-06-30T00:00:00', '', '')]
#end_IndexSecondGO-via_str.partition()

#start_IndexSecondGO-via_str.replace()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.replace('X', '*')
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecondGO-via_str.replace()

#start_IndexSecondGO-via_str.rfind()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.rfind('X')
[-1 -1 -1]
#end_IndexSecondGO-via_str.rfind()

#start_IndexSecondGO-via_str.rindex()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.rindex('X')
ValueError('substring not found')
#end_IndexSecondGO-via_str.rindex()

#start_IndexSecondGO-via_str.rjust()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.rjust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexSecondGO-via_str.rjust()

#start_IndexSecondGO-via_str.rpartition()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.rpartition('X')
[('', '', '1517-04-01T00:00:00') ('', '', '1517-12-31T00:00:00')
 ('', '', '1517-06-30T00:00:00')]
#end_IndexSecondGO-via_str.rpartition()

#start_IndexSecondGO-via_str.rsplit()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.rsplit('X')
[('1517-04-01T00:00:00',) ('1517-12-31T00:00:00',)
 ('1517-06-30T00:00:00',)]
#end_IndexSecondGO-via_str.rsplit()

#start_IndexSecondGO-via_str.rstrip()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.rstrip()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecondGO-via_str.rstrip()

#start_IndexSecondGO-via_str.split()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.split('X')
[('1517-04-01T00:00:00',) ('1517-12-31T00:00:00',)
 ('1517-06-30T00:00:00',)]
#end_IndexSecondGO-via_str.split()

#start_IndexSecondGO-via_str.startswith()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.startswith('X')
[False False False]
#end_IndexSecondGO-via_str.startswith()

#start_IndexSecondGO-via_str.strip()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.strip()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecondGO-via_str.strip()

#start_IndexSecondGO-via_str.swapcase()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.swapcase()
['1517-04-01t00:00:00' '1517-12-31t00:00:00' '1517-06-30t00:00:00']
#end_IndexSecondGO-via_str.swapcase()

#start_IndexSecondGO-via_str.title()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.title()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecondGO-via_str.title()

#start_IndexSecondGO-via_str.upper()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.upper()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexSecondGO-via_str.upper()

#start_IndexSecondGO-via_str.zfill()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_str.zfill(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexSecondGO-via_str.zfill()

#start_IndexSecondGO-via_re().search()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_re('[X123]').search()
[ True  True  True]
#end_IndexSecondGO-via_re().search()

#start_IndexSecondGO-via_re().match()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_re('[X123]').match()
[ True  True  True]
#end_IndexSecondGO-via_re().match()

#start_IndexSecondGO-via_re().fullmatch()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_re('123').fullmatch()
[False False False]
#end_IndexSecondGO-via_re().fullmatch()

#start_IndexSecondGO-via_re().split()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_re('[X123]').split()
[('', '5', '7-04-0', 'T00:00:00')
 ('', '5', '7-', '', '-', '', 'T00:00:00')
 ('', '5', '7-06-', '0T00:00:00')]
#end_IndexSecondGO-via_re().split()

#start_IndexSecondGO-via_re().findall()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_re('[X123]').findall()
[('1', '1', '1') ('1', '1', '1', '2', '3', '1') ('1', '1', '3')]
#end_IndexSecondGO-via_re().findall()

#start_IndexSecondGO-via_re().sub()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_re('[X123]').sub('==')
['==5==7-04-0==T00:00:00' '==5==7-====-====T00:00:00'
 '==5==7-06-==0T00:00:00']
#end_IndexSecondGO-via_re().sub()

#start_IndexSecondGO-via_re().subn()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexSecondGO>
1517-04-01T00:00:00
1517-12-31T00:00:00
1517-06-30T00:00:00
<datetime64[s]>
>>> ix.via_re('[X123]').subn('==', 1)
[('==517-04-01T00:00:00', 1) ('==517-12-31T00:00:00', 1)
 ('==517-06-30T00:00:00', 1)]
#end_IndexSecondGO-via_re().subn()

#start_IndexSecondGO-via_values.apply()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_values.apply(np.sin)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexSecondGO-via_values.apply()

#start_IndexSecondGO-via_values.__array_ufunc__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> np.sin(ix.via_values)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexSecondGO-via_values.__array_ufunc__()

#start_IndexSecondGO-via_values.__call__()
>>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> np.sin(ix.via_values(unify_blocks=True))
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexSecondGO-via_values.__call__()

#start_IndexMillisecond-__init__()
>>> sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-__init__()

#start_IndexMillisecond-from_labels()
>>> sf.IndexMillisecond.from_labels(('1517-04-01', '1517-12-31', '1517-06-30'))
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-from_labels()

#start_IndexMillisecond-from_pandas()
>>> ix = pd.Index(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> sf.IndexMillisecond.from_pandas(ix)
<Index>
1517-04-01
1517-12-31
1517-06-30
<object>
#end_IndexMillisecond-from_pandas()

#start_IndexMillisecond-to_pandas()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.to_pandas()
OutOfBoundsDatetime('Out of bounds nanosecond timestamp: 1517-04-01 00:00:00')
#end_IndexMillisecond-to_pandas()

#start_IndexMillisecond-to_series()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.to_series()
<Series>
<Index>
0        1517-04-01T00:00:...
1        1517-12-31T00:00:...
2        1517-06-30T00:00:...
<int64>  <datetime64[ms]>
#end_IndexMillisecond-to_series()

#start_IndexMillisecond-STATIC
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.STATIC
True
#end_IndexMillisecond-STATIC

#start_IndexMillisecond-depth
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.depth
1
#end_IndexMillisecond-depth

#start_IndexMillisecond-dtype
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.dtype
datetime64[ms]
#end_IndexMillisecond-dtype

#start_IndexMillisecond-index_types
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.index_types
<Series>
<Index>
None     <IndexMillisecond>
<object> <object>
#end_IndexMillisecond-index_types

#start_IndexMillisecond-memory
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.memory
          L   Lu    LM  LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu
Name      16  B     16  B     16  B     16   B     16  B     16  B
Map       440 B     440 B     440 B     440  B     440 B     440 B
Labels    120 B     136 B     24  B     120  B     136 B     24  B
Positions 96  B     112 B     0   B     8.19 KB    136 B     24  B
Total     768 B     800 B     576 B     8.84 KB    824 B     600 B
#end_IndexMillisecond-memory

#start_IndexMillisecond-name
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.name
#end_IndexMillisecond-name

#start_IndexMillisecond-names
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.names
('__index0__',)
#end_IndexMillisecond-names

#start_IndexMillisecond-nbytes
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.nbytes
24
#end_IndexMillisecond-nbytes

#start_IndexMillisecond-ndim
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.ndim
1
#end_IndexMillisecond-ndim

#start_IndexMillisecond-positions
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.positions
[0 1 2]
#end_IndexMillisecond-positions

#start_IndexMillisecond-shape
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.shape
(3,)
#end_IndexMillisecond-shape

#start_IndexMillisecond-size
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.size
3
#end_IndexMillisecond-size

#start_IndexMillisecond-__array__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__array__()
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecond-__array__()

#start_IndexMillisecond-__array_ufunc__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> np.array((0, 1, 0)) * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[ms]')))
#end_IndexMillisecond-__array_ufunc__()

#start_IndexMillisecond-__bool__()
>>> s = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexMillisecond-__bool__()

#start_IndexMillisecond-__copy__()
>>> import copy
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> copy.copy(ix)
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-__copy__()

#start_IndexMillisecond-__deepcopy__()
>>> import copy
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> copy.deepcopy(ix)
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-__deepcopy__()

#start_IndexMillisecond-__len__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> len(ix)
3
#end_IndexMillisecond-__len__()

#start_IndexMillisecond-all()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.all()
True
#end_IndexMillisecond-all()

#start_IndexMillisecond-any()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.any()
True
#end_IndexMillisecond-any()

#start_IndexMillisecond-astype()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.astype(str)
<Index>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<<U42>
#end_IndexMillisecond-astype()

#start_IndexMillisecond-copy()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.copy()
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-copy()

#start_IndexMillisecond-cumprod()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.cumprod()
ValueError("could not find a matching type for multiply.accumulate, requested type has type code 'M'")
#end_IndexMillisecond-cumprod()

#start_IndexMillisecond-cumsum()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.cumsum()
ValueError("could not find a matching type for add.accumulate, requested type has type code 'M'")
#end_IndexMillisecond-cumsum()

#start_IndexMillisecond-difference()
>>> ix1 = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexMillisecond(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.difference(ix2)
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-difference()

#start_IndexMillisecond-dropfalsy()
>>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMillisecond>
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
<datetime64[ms]>
>>> ix.dropfalsy()
<IndexMillisecond>
1620-09-16T00:00:00.000
1620-11-21T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-dropfalsy()

#start_IndexMillisecond-dropna()
>>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMillisecond>
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
<datetime64[ms]>
>>> ix.dropna()
<IndexMillisecond>
1620-09-16T00:00:00.000
1620-11-21T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-dropna()

#start_IndexMillisecond-equals()
>>> ix1 = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexMillisecond(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.equals(ix2)
False
#end_IndexMillisecond-equals()

#start_IndexMillisecond-fillfalsy()
>>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMillisecond>
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
<datetime64[ms]>
>>> ix.fillfalsy('A')
ValueError('Error parsing datetime string "A" at position 0')
#end_IndexMillisecond-fillfalsy()

#start_IndexMillisecond-fillna()
>>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMillisecond>
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
<datetime64[ms]>
>>> ix.fillna(0)
<IndexMillisecond>
1620-09-16T00:00:00.000
1970-01-01T00:00:00.000
1620-11-21T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-fillna()

#start_IndexMillisecond-head()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.head(2)
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-head()

#start_IndexMillisecond-iloc_searchsorted()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.iloc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexMillisecond-iloc_searchsorted()

#start_IndexMillisecond-intersection()
>>> ix1 = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexMillisecond(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.intersection(ix2)
<IndexMillisecond>
<datetime64[ms]>
#end_IndexMillisecond-intersection()

#start_IndexMillisecond-isin()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.isin(('1517-06-30',))
[False False False]
#end_IndexMillisecond-isin()

#start_IndexMillisecond-label_widths_at_depth()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> tuple(ix.label_widths_at_depth(0))
((numpy.datetime64('1517-04-01T00:00:00.000'), 1), (numpy.datetime64('1517-12-31T00:00:00.000'), 1), (numpy.datetime64('1517-06-30T00:00:00.000'), 1))
#end_IndexMillisecond-label_widths_at_depth()

#start_IndexMillisecond-level_add()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.level_add('A')
<IndexHierarchy>
A                1517-04-01T00:00:...
A                1517-12-31T00:00:...
A                1517-06-30T00:00:...
<<U1>            <datetime64[ms]>
#end_IndexMillisecond-level_add()

#start_IndexMillisecond-loc_searchsorted()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.loc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexMillisecond-loc_searchsorted()

#start_IndexMillisecond-loc_to_iloc()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.loc_to_iloc('d')
ValueError('Error parsing datetime string "d" at position 0')
>>> ix.loc_to_iloc(['a', 'e'])
ValueError('Cannot create a NumPy datetime other than NaT with generic units')
>>> ix.loc_to_iloc(slice('c', None))
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexMillisecond-loc_to_iloc()

#start_IndexMillisecond-max()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.max()
1517-12-31T00:00:00.000
#end_IndexMillisecond-max()

#start_IndexMillisecond-mean()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.mean()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))
#end_IndexMillisecond-mean()

#start_IndexMillisecond-median()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.median()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))
#end_IndexMillisecond-median()

#start_IndexMillisecond-min()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.min()
1517-04-01T00:00:00.000
#end_IndexMillisecond-min()

#start_IndexMillisecond-prod()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.prod()
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))
#end_IndexMillisecond-prod()

#start_IndexMillisecond-relabel()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)
<IndexMillisecond>
1970-01-01T00:00:00.001
1970-01-01T00:00:00.031
1970-01-01T00:00:00.030
<datetime64[ms]>
#end_IndexMillisecond-relabel()

#start_IndexMillisecond-rename()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.rename('y')
<IndexMillisecond: y>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-rename()

#start_IndexMillisecond-roll()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.roll(2)
<IndexMillisecond>
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
1517-04-01T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-roll()

#start_IndexMillisecond-sample()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.sample(2, seed=0)
<IndexMillisecond>
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-sample()

#start_IndexMillisecond-sort()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.sort()
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-06-30T00:00:00.000
1517-12-31T00:00:00.000
<datetime64[ms]>
>>> ix.sort(ascending=False)
<IndexMillisecond>
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
1517-04-01T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-sort()

#start_IndexMillisecond-std()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.std()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))
#end_IndexMillisecond-std()

#start_IndexMillisecond-sum()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.sum()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))
#end_IndexMillisecond-sum()

#start_IndexMillisecond-tail()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.tail(2)
<IndexMillisecond>
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-tail()

#start_IndexMillisecond-union()
>>> ix1 = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexMillisecond(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.union(ix2)
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-06-30T00:00:00.000
1517-12-31T00:00:00.000
2021-12-31T00:00:00.000
2022-04-01T00:00:00.000
2022-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-union()

#start_IndexMillisecond-unique()
>>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMillisecond>
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
<datetime64[ms]>
>>> ix.unique()
['1620-09-16T00:00:00.000'                     'NaT'
 '1620-11-21T00:00:00.000']
#end_IndexMillisecond-unique()

#start_IndexMillisecond-values_at_depth()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values_at_depth(0)
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecond-values_at_depth()

#start_IndexMillisecond-var()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.var()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))
#end_IndexMillisecond-var()

#start_IndexMillisecond-__contains__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__contains__('a')
ValueError('Error parsing datetime string "a" at position 0')
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__contains__('1517-06-30')
False
#end_IndexMillisecond-__contains__()

#start_IndexMillisecond-__iter__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01T00:00:00.000'), numpy.datetime64('1517-12-31T00:00:00.000'), numpy.datetime64('1517-06-30T00:00:00.000'))
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01T00:00:00.000'), numpy.datetime64('1517-12-31T00:00:00.000'), numpy.datetime64('1517-06-30T00:00:00.000'))
#end_IndexMillisecond-__iter__()

#start_IndexMillisecond-__reversed__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30T00:00:00.000'), numpy.datetime64('1517-12-31T00:00:00.000'), numpy.datetime64('1517-04-01T00:00:00.000'))
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30T00:00:00.000'), numpy.datetime64('1517-12-31T00:00:00.000'), numpy.datetime64('1517-04-01T00:00:00.000'))
#end_IndexMillisecond-__reversed__()

#start_IndexMillisecond-values
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecond-values

#start_IndexMillisecond-interface
>>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.interface
<Frame>
<Index>                              cls_name         group                doc                  <<U18>
<Index: signature>
__init__(labels, *, name, loc_is_... IndexMillisecond Constructor          Initializer. Args...
from_labels(labels, *, name)         IndexMillisecond Constructor          Construct an Inde...
from_pandas(value)                   IndexMillisecond Constructor          Given a Pandas in...
to_html(config, style_config)        IndexMillisecond Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexMillisecond Exporter             Return a complete...
to_pandas()                          IndexMillisecond Exporter             Return a Pandas I...
to_series()                          IndexMillisecond Exporter             Return a Series w...
to_visidata()                        IndexMillisecond Exporter             Open an interacti...
STATIC                               IndexMillisecond Attribute            bool(x) -> bool R...
depth                                IndexMillisecond Attribute            int([x]) -> integ...
dtype                                IndexMillisecond Attribute            Return the dtype ...
index_types                          IndexMillisecond Attribute            Return a Series o...
memory                               IndexMillisecond Attribute            Return a MemoryDi...
mloc                                 IndexMillisecond Attribute            The memory locati...
name                                 IndexMillisecond Attribute            A hashable label ...
names                                IndexMillisecond Attribute            Provide a suitabl...
nbytes                               IndexMillisecond Attribute            Return the total ...
...                                  ...              ...                  ...
via_str.rpartition(sep)              IndexMillisecond Accessor String      Partition (split)...
via_str.rsplit(sep, maxsplit)        IndexMillisecond Accessor String      For each element,...
via_str.rstrip(chars)                IndexMillisecond Accessor String      For each element,...
via_str.split(sep, maxsplit)         IndexMillisecond Accessor String      For each element,...
via_str.startswith(prefix, start,... IndexMillisecond Accessor String      Returns a contain...
via_str.strip(chars)                 IndexMillisecond Accessor String      For each element,...
via_str.swapcase()                   IndexMillisecond Accessor String      Return a containe...
via_str.title()                      IndexMillisecond Accessor String      Return a containe...
via_str.upper()                      IndexMillisecond Accessor String      Return a containe...
via_str.zfill(width)                 IndexMillisecond Accessor String      Return the string...
via_re(pattern, flags).search(pos... IndexMillisecond Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexMillisecond Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexMillisecond Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexMillisecond Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexMillisecond Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexMillisecond Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexMillisecond Accessor Regular ... Perform the same ...
<<U63>                               <<U16>           <<U27>               <<U83>
#end_IndexMillisecond-interface

#start_IndexMillisecond-__repr__()
>>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> repr(ix)
<IndexMillisecond>
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-__repr__()

#start_IndexMillisecond-__str__()
>>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> str(ix)
<IndexMillisecond>
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-__str__()

#start_IndexMillisecond-display()
>>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display()
<IndexMillisecond>
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
<datetime64[ms]>
>>> ix.display(sf.DisplayConfig(type_show=False))
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
#end_IndexMillisecond-display()

#start_IndexMillisecond-display_tall()
>>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_tall()
<IndexMillisecond>
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-display_tall()

#start_IndexMillisecond-display_wide()
>>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_wide()
<IndexMillisecond>
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-display_wide()

#start_IndexMillisecond-drop.iloc[]
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.drop.iloc[1]
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.drop.iloc[1:]
<IndexMillisecond>
1517-04-01T00:00:00.000
<datetime64[ms]>
>>> ix.drop.iloc[[0, 2]]
<IndexMillisecond>
1517-12-31T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-drop.iloc[]

#start_IndexMillisecond-drop.loc[]
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.drop.loc['1517-06-30']
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
<datetime64[ms]>
>>> ix.drop.loc['1517-06-30':]
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-drop.loc[]

#start_IndexMillisecond-[]
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix[1]
1517-12-31T00:00:00.000
>>> ix[1:]
<IndexMillisecond>
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix[[0, 2]]
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-[]

#start_IndexMillisecond-iloc[]
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iloc[1]
1517-12-31T00:00:00.000
>>> ix.iloc[1:]
<IndexMillisecond>
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.iloc[[0, 2]]
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-iloc[]

#start_IndexMillisecond-loc[]
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.loc['1517-06-30']
<IndexMillisecond>
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.loc['1517-06-30':]
<IndexMillisecond>
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecond-loc[]

#start_IndexMillisecond-iter_label()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label())
(numpy.datetime64('1517-04-01T00:00:00.000'), numpy.datetime64('1517-12-31T00:00:00.000'), numpy.datetime64('1517-06-30T00:00:00.000'))
#end_IndexMillisecond-iter_label()

#start_IndexMillisecond-iter_label().apply()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)
[1517 1517 1517]
#end_IndexMillisecond-iter_label().apply()

#start_IndexMillisecond-iter_label().apply_iter()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))
(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 31, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))
#end_IndexMillisecond-iter_label().apply_iter()

#start_IndexMillisecond-iter_label().apply_iter_items()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))
((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 31, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))
#end_IndexMillisecond-iter_label().apply_iter_items()

#start_IndexMillisecond-iter_label().apply_pool()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)
[ 4 12  6]
#end_IndexMillisecond-iter_label().apply_pool()

#start_IndexMillisecond-__add__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix + 2
['1517-04-01T00:00:00.002' '1517-12-31T00:00:00.002'
 '1517-06-30T00:00:00.002']
#end_IndexMillisecond-__add__()

#start_IndexMillisecond-__and__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix & True
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix & (False, True)
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMillisecond-__and__()

#start_IndexMillisecond-__eq__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix == '1517-06-30'
[False False  True]
#end_IndexMillisecond-__eq__()

#start_IndexMillisecond-__floordiv__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix // '1517-06-30'
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMillisecond-__floordiv__()

#start_IndexMillisecond-__ge__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix >= '1517-06-30'
[False  True  True]
#end_IndexMillisecond-__ge__()

#start_IndexMillisecond-__gt__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix > '1517-06-30'
[False  True False]
#end_IndexMillisecond-__gt__()

#start_IndexMillisecond-__le__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix <= '1517-06-30'
[ True False  True]
#end_IndexMillisecond-__le__()

#start_IndexMillisecond-__lt__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix < '1517-06-30'
[ True False False]
#end_IndexMillisecond-__lt__()

#start_IndexMillisecond-__matmul__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexMillisecond-__matmul__()

#start_IndexMillisecond-__mod__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix % '1517-06-30'
UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMillisecond-__mod__()

#start_IndexMillisecond-__mul__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix * '1517-06-30'
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMillisecond-__mul__()

#start_IndexMillisecond-__ne__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix != '1517-06-30'
[ True  True False]
#end_IndexMillisecond-__ne__()

#start_IndexMillisecond-__or__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix | True
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix | (False, True)
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMillisecond-__or__()

#start_IndexMillisecond-__pow__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix ** '1517-06-30'
TypeError("ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMillisecond-__pow__()

#start_IndexMillisecond-__radd__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' + ix
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMillisecond-__radd__()

#start_IndexMillisecond-__rfloordiv__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' // ix
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMillisecond-__rfloordiv__()

#start_IndexMillisecond-__rmatmul__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexMillisecond-__rmatmul__()

#start_IndexMillisecond-__rmul__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMillisecond-__rmul__()

#start_IndexMillisecond-__rshift__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix >> 1
TypeError("ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMillisecond-__rshift__()

#start_IndexMillisecond-__rsub__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' - ix
[  90 -184    0]
#end_IndexMillisecond-__rsub__()

#start_IndexMillisecond-__rtruediv__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' / ix
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMillisecond-__rtruediv__()

#start_IndexMillisecond-__sub__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix - 2
['1517-03-31T23:59:59.998' '1517-12-30T23:59:59.998'
 '1517-06-29T23:59:59.998']
#end_IndexMillisecond-__sub__()

#start_IndexMillisecond-__truediv__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix / '1517-06-30'
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMillisecond-__truediv__()

#start_IndexMillisecond-__xor__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix ^ True
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix ^ (False, True)
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMillisecond-__xor__()

#start_IndexMillisecond-__abs__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> abs(ix)
UFuncTypeError(<ufunc 'absolute'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))
#end_IndexMillisecond-__abs__()

#start_IndexMillisecond-__invert__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ~ix
TypeError("ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMillisecond-__invert__()

#start_IndexMillisecond-__neg__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> -ix
UFuncTypeError(<ufunc 'negative'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))
#end_IndexMillisecond-__neg__()

#start_IndexMillisecond-__pos__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> +ix
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecond-__pos__()

#start_IndexMillisecond-via_dt.year
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.year
[1517 1517 1517]
#end_IndexMillisecond-via_dt.year

#start_IndexMillisecond-via_dt.month
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.month
[ 4 12  6]
#end_IndexMillisecond-via_dt.month

#start_IndexMillisecond-via_dt.day
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.day
[ 1 31 30]
#end_IndexMillisecond-via_dt.day

#start_IndexMillisecond-via_dt.hour
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.hour
[0 0 0]
#end_IndexMillisecond-via_dt.hour

#start_IndexMillisecond-via_dt.minute
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.minute
[0 0 0]
#end_IndexMillisecond-via_dt.minute

#start_IndexMillisecond-via_dt.second
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.second
[0 0 0]
#end_IndexMillisecond-via_dt.second

#start_IndexMillisecond-via_dt.weekday()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.weekday()
[6 0 5]
#end_IndexMillisecond-via_dt.weekday()

#start_IndexMillisecond-via_dt.quarter()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.quarter()
[2 4 2]
#end_IndexMillisecond-via_dt.quarter()

#start_IndexMillisecond-via_dt.is_month_end()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_month_end()
[False  True  True]
#end_IndexMillisecond-via_dt.is_month_end()

#start_IndexMillisecond-via_dt.is_month_start()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_month_start()
[ True False False]
#end_IndexMillisecond-via_dt.is_month_start()

#start_IndexMillisecond-via_dt.is_year_end()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_year_end()
[False  True False]
#end_IndexMillisecond-via_dt.is_year_end()

#start_IndexMillisecond-via_dt.is_year_start()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_year_start()
[False False False]
#end_IndexMillisecond-via_dt.is_year_start()

#start_IndexMillisecond-via_dt.is_quarter_end()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_quarter_end()
[False  True  True]
#end_IndexMillisecond-via_dt.is_quarter_end()

#start_IndexMillisecond-via_dt.is_quarter_start()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_quarter_start()
[ True False False]
#end_IndexMillisecond-via_dt.is_quarter_start()

#start_IndexMillisecond-via_dt.timetuple()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.timetuple()
[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=365, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]
#end_IndexMillisecond-via_dt.timetuple()

#start_IndexMillisecond-via_dt.isoformat()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.isoformat()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexMillisecond-via_dt.isoformat()

#start_IndexMillisecond-via_dt.fromisoformat()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.fromisoformat()
RuntimeError('invalid dtype (datetime64[ms]) for operation on string types')
#end_IndexMillisecond-via_dt.fromisoformat()

#start_IndexMillisecond-via_dt.strftime()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strftime("%A | %B")
['Sunday | April' 'Monday | December' 'Saturday | June']
#end_IndexMillisecond-via_dt.strftime()

#start_IndexMillisecond-via_dt.strptime()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strptime("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[ms]) for operation on string types')
#end_IndexMillisecond-via_dt.strptime()

#start_IndexMillisecond-via_dt.strpdate()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strpdate("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[ms]) for operation on string types')
#end_IndexMillisecond-via_dt.strpdate()

#start_IndexMillisecond-via_str.__getitem__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str[-1]
['0' '0' '0']
#end_IndexMillisecond-via_str.__getitem__()

#start_IndexMillisecond-via_str.capitalize()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.capitalize()
['1517-04-01t00:00:00.000' '1517-12-31t00:00:00.000'
 '1517-06-30t00:00:00.000']
#end_IndexMillisecond-via_str.capitalize()

#start_IndexMillisecond-via_str.center()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.center(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMillisecond-via_str.center()

#start_IndexMillisecond-via_str.contains()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.contains('X')
[False False False]
#end_IndexMillisecond-via_str.contains()

#start_IndexMillisecond-via_str.count()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.count('X')
[0 0 0]
#end_IndexMillisecond-via_str.count()

#start_IndexMillisecond-via_str.decode()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30')).astype(bytes)
>>> ix
<Index>
b'1517-04-01T00:00:00.000'
b'1517-12-31T00:00:00.000'
b'1517-06-30T00:00:00.000'
<|S42>
>>> ix.via_str.decode()
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecond-via_str.decode()

#start_IndexMillisecond-via_str.encode()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.encode()
[b'1517-04-01T00:00:00.000' b'1517-12-31T00:00:00.000'
 b'1517-06-30T00:00:00.000']
#end_IndexMillisecond-via_str.encode()

#start_IndexMillisecond-via_str.endswith()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.endswith(' ')
[False False False]
#end_IndexMillisecond-via_str.endswith()

#start_IndexMillisecond-via_str.find()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.find('X')
[-1 -1 -1]
#end_IndexMillisecond-via_str.find()

#start_IndexMillisecond-via_str.format()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.format('{:-^10}')
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecond-via_str.format()

#start_IndexMillisecond-via_str.index()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.index('X')
ValueError('substring not found')
#end_IndexMillisecond-via_str.index()

#start_IndexMillisecond-via_str.isalnum()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.isalnum()
[False False False]
#end_IndexMillisecond-via_str.isalnum()

#start_IndexMillisecond-via_str.isalpha()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.isalpha()
[False False False]
#end_IndexMillisecond-via_str.isalpha()

#start_IndexMillisecond-via_str.isdecimal()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.isdecimal()
[False False False]
#end_IndexMillisecond-via_str.isdecimal()

#start_IndexMillisecond-via_str.isdigit()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.isdigit()
[False False False]
#end_IndexMillisecond-via_str.isdigit()

#start_IndexMillisecond-via_str.islower()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.islower()
[False False False]
#end_IndexMillisecond-via_str.islower()

#start_IndexMillisecond-via_str.isnumeric()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.isnumeric()
[False False False]
#end_IndexMillisecond-via_str.isnumeric()

#start_IndexMillisecond-via_str.isspace()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.isspace()
[False False False]
#end_IndexMillisecond-via_str.isspace()

#start_IndexMillisecond-via_str.istitle()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.istitle()
[ True  True  True]
#end_IndexMillisecond-via_str.istitle()

#start_IndexMillisecond-via_str.isupper()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.isupper()
[ True  True  True]
#end_IndexMillisecond-via_str.isupper()

#start_IndexMillisecond-via_str.ljust()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.ljust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMillisecond-via_str.ljust()

#start_IndexMillisecond-via_str.len()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.len()
[23 23 23]
#end_IndexMillisecond-via_str.len()

#start_IndexMillisecond-via_str.lower()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.lower()
['1517-04-01t00:00:00.000' '1517-12-31t00:00:00.000'
 '1517-06-30t00:00:00.000']
#end_IndexMillisecond-via_str.lower()

#start_IndexMillisecond-via_str.lstrip()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.lstrip()
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecond-via_str.lstrip()

#start_IndexMillisecond-via_str.partition()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.partition('X')
[('1517-04-01T00:00:00.000', '', '') ('1517-12-31T00:00:00.000', '', '')
 ('1517-06-30T00:00:00.000', '', '')]
#end_IndexMillisecond-via_str.partition()

#start_IndexMillisecond-via_str.replace()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.replace('X', '*')
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecond-via_str.replace()

#start_IndexMillisecond-via_str.rfind()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.rfind('X')
[-1 -1 -1]
#end_IndexMillisecond-via_str.rfind()

#start_IndexMillisecond-via_str.rindex()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.rindex('X')
ValueError('substring not found')
#end_IndexMillisecond-via_str.rindex()

#start_IndexMillisecond-via_str.rjust()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.rjust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMillisecond-via_str.rjust()

#start_IndexMillisecond-via_str.rpartition()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.rpartition('X')
[('', '', '1517-04-01T00:00:00.000') ('', '', '1517-12-31T00:00:00.000')
 ('', '', '1517-06-30T00:00:00.000')]
#end_IndexMillisecond-via_str.rpartition()

#start_IndexMillisecond-via_str.rsplit()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.rsplit('X')
[('1517-04-01T00:00:00.000',) ('1517-12-31T00:00:00.000',)
 ('1517-06-30T00:00:00.000',)]
#end_IndexMillisecond-via_str.rsplit()

#start_IndexMillisecond-via_str.rstrip()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.rstrip()
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecond-via_str.rstrip()

#start_IndexMillisecond-via_str.split()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.split('X')
[('1517-04-01T00:00:00.000',) ('1517-12-31T00:00:00.000',)
 ('1517-06-30T00:00:00.000',)]
#end_IndexMillisecond-via_str.split()

#start_IndexMillisecond-via_str.startswith()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.startswith('X')
[False False False]
#end_IndexMillisecond-via_str.startswith()

#start_IndexMillisecond-via_str.strip()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.strip()
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecond-via_str.strip()

#start_IndexMillisecond-via_str.swapcase()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.swapcase()
['1517-04-01t00:00:00.000' '1517-12-31t00:00:00.000'
 '1517-06-30t00:00:00.000']
#end_IndexMillisecond-via_str.swapcase()

#start_IndexMillisecond-via_str.title()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.title()
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecond-via_str.title()

#start_IndexMillisecond-via_str.upper()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.upper()
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecond-via_str.upper()

#start_IndexMillisecond-via_str.zfill()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.zfill(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMillisecond-via_str.zfill()

#start_IndexMillisecond-via_re().search()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_re('[X123]').search()
[ True  True  True]
#end_IndexMillisecond-via_re().search()

#start_IndexMillisecond-via_re().match()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_re('[X123]').match()
[ True  True  True]
#end_IndexMillisecond-via_re().match()

#start_IndexMillisecond-via_re().fullmatch()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_re('123').fullmatch()
[False False False]
#end_IndexMillisecond-via_re().fullmatch()

#start_IndexMillisecond-via_re().split()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_re('[X123]').split()
[('', '5', '7-04-0', 'T00:00:00.000')
 ('', '5', '7-', '', '-', '', 'T00:00:00.000')
 ('', '5', '7-06-', '0T00:00:00.000')]
#end_IndexMillisecond-via_re().split()

#start_IndexMillisecond-via_re().findall()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_re('[X123]').findall()
[('1', '1', '1') ('1', '1', '1', '2', '3', '1') ('1', '1', '3')]
#end_IndexMillisecond-via_re().findall()

#start_IndexMillisecond-via_re().sub()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_re('[X123]').sub('==')
['==5==7-04-0==T00:00:00.000' '==5==7-====-====T00:00:00.000'
 '==5==7-06-==0T00:00:00.000']
#end_IndexMillisecond-via_re().sub()

#start_IndexMillisecond-via_re().subn()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecond>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_re('[X123]').subn('==', 1)
[('==517-04-01T00:00:00.000', 1) ('==517-12-31T00:00:00.000', 1)
 ('==517-06-30T00:00:00.000', 1)]
#end_IndexMillisecond-via_re().subn()

#start_IndexMillisecond-via_values.apply()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_values.apply(np.sin)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMillisecond-via_values.apply()

#start_IndexMillisecond-via_values.__array_ufunc__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> np.sin(ix.via_values)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMillisecond-via_values.__array_ufunc__()

#start_IndexMillisecond-via_values.__call__()
>>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> np.sin(ix.via_values(unify_blocks=True))
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMillisecond-via_values.__call__()

#start_IndexMillisecondGO-__init__()
>>> sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-__init__()

#start_IndexMillisecondGO-from_labels()
>>> sf.IndexMillisecondGO.from_labels(('1517-04-01', '1517-12-31', '1517-06-30'))
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-from_labels()

#start_IndexMillisecondGO-from_pandas()
>>> ix = pd.Index(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> sf.IndexMillisecondGO.from_pandas(ix)
<IndexGO>
1517-04-01
1517-12-31
1517-06-30
<object>
#end_IndexMillisecondGO-from_pandas()

#start_IndexMillisecondGO-to_pandas()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.to_pandas()
OutOfBoundsDatetime('Out of bounds nanosecond timestamp: 1517-04-01 00:00:00')
#end_IndexMillisecondGO-to_pandas()

#start_IndexMillisecondGO-to_series()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.to_series()
<Series>
<Index>
0        1517-04-01T00:00:...
1        1517-12-31T00:00:...
2        1517-06-30T00:00:...
<int64>  <datetime64[ms]>
#end_IndexMillisecondGO-to_series()

#start_IndexMillisecondGO-STATIC
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.STATIC
False
#end_IndexMillisecondGO-STATIC

#start_IndexMillisecondGO-depth
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.depth
1
#end_IndexMillisecondGO-depth

#start_IndexMillisecondGO-dtype
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.dtype
datetime64[ms]
#end_IndexMillisecondGO-dtype

#start_IndexMillisecondGO-index_types
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.index_types
<Series>
<Index>
None     <IndexMillisecondGO>
<object> <object>
#end_IndexMillisecondGO-index_types

#start_IndexMillisecondGO-memory
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.memory
          L    Lu    LM   LMu   LMD LMDu  R    Ru    RM   RMu   RMD RMDu
Name      16   B     16   B     16  B     16   B     16   B     16  B
Map       440  B     440  B     440 B     440  B     440  B     440 B
Labels    120  B     136  B     24  B     120  B     136  B     24  B
Positions 96   B     112  B     0   B     8.19 KB    136  B     24  B
Total     1.11 KB    1.14 KB    948 B     9.21 KB    1.17 KB    972 B
#end_IndexMillisecondGO-memory

#start_IndexMillisecondGO-name
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.name
#end_IndexMillisecondGO-name

#start_IndexMillisecondGO-names
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.names
('__index0__',)
#end_IndexMillisecondGO-names

#start_IndexMillisecondGO-nbytes
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.nbytes
24
#end_IndexMillisecondGO-nbytes

#start_IndexMillisecondGO-ndim
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.ndim
1
#end_IndexMillisecondGO-ndim

#start_IndexMillisecondGO-positions
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.positions
[0 1 2]
#end_IndexMillisecondGO-positions

#start_IndexMillisecondGO-shape
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.shape
(3,)
#end_IndexMillisecondGO-shape

#start_IndexMillisecondGO-size
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.size
3
#end_IndexMillisecondGO-size

#start_IndexMillisecondGO-__array__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__array__()
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecondGO-__array__()

#start_IndexMillisecondGO-__array_ufunc__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> np.array((0, 1, 0)) * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[ms]')))
#end_IndexMillisecondGO-__array_ufunc__()

#start_IndexMillisecondGO-__bool__()
>>> s = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexMillisecondGO-__bool__()

#start_IndexMillisecondGO-__copy__()
>>> import copy
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> copy.copy(ix)
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-__copy__()

#start_IndexMillisecondGO-__deepcopy__()
>>> import copy
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> copy.deepcopy(ix)
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-__deepcopy__()

#start_IndexMillisecondGO-__len__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> len(ix)
3
#end_IndexMillisecondGO-__len__()

#start_IndexMillisecondGO-all()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.all()
True
#end_IndexMillisecondGO-all()

#start_IndexMillisecondGO-any()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.any()
True
#end_IndexMillisecondGO-any()

#start_IndexMillisecondGO-append()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.append('f')
ValueError('Error parsing datetime string "f" at position 0')
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-append()

#start_IndexMillisecondGO-astype()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.astype(str)
<IndexGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<<U42>
#end_IndexMillisecondGO-astype()

#start_IndexMillisecondGO-copy()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.copy()
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-copy()

#start_IndexMillisecondGO-cumprod()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.cumprod()
ValueError("could not find a matching type for multiply.accumulate, requested type has type code 'M'")
#end_IndexMillisecondGO-cumprod()

#start_IndexMillisecondGO-cumsum()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.cumsum()
ValueError("could not find a matching type for add.accumulate, requested type has type code 'M'")
#end_IndexMillisecondGO-cumsum()

#start_IndexMillisecondGO-difference()
>>> ix1 = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexMillisecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.difference(ix2)
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-difference()

#start_IndexMillisecondGO-dropfalsy()
>>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMillisecondGO>
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
<datetime64[ms]>
>>> ix.dropfalsy()
<IndexMillisecondGO>
1620-09-16T00:00:00.000
1620-11-21T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-dropfalsy()

#start_IndexMillisecondGO-dropna()
>>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMillisecondGO>
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
<datetime64[ms]>
>>> ix.dropna()
<IndexMillisecondGO>
1620-09-16T00:00:00.000
1620-11-21T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-dropna()

#start_IndexMillisecondGO-equals()
>>> ix1 = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexMillisecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.equals(ix2)
False
#end_IndexMillisecondGO-equals()

#start_IndexMillisecondGO-extend()
>>> ix1 = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexMillisecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.extend(ix2)
>>> ix1
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
2022-04-01T00:00:00.000
2021-12-31T00:00:00.000
2022-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-extend()

#start_IndexMillisecondGO-fillfalsy()
>>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMillisecondGO>
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
<datetime64[ms]>
>>> ix.fillfalsy('A')
ValueError('Error parsing datetime string "A" at position 0')
#end_IndexMillisecondGO-fillfalsy()

#start_IndexMillisecondGO-fillna()
>>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMillisecondGO>
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
<datetime64[ms]>
>>> ix.fillna(0)
<IndexMillisecondGO>
1620-09-16T00:00:00.000
1970-01-01T00:00:00.000
1620-11-21T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-fillna()

#start_IndexMillisecondGO-head()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.head(2)
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-head()

#start_IndexMillisecondGO-iloc_searchsorted()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.iloc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexMillisecondGO-iloc_searchsorted()

#start_IndexMillisecondGO-intersection()
>>> ix1 = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexMillisecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.intersection(ix2)
<IndexMillisecondGO>
<datetime64[ms]>
#end_IndexMillisecondGO-intersection()

#start_IndexMillisecondGO-isin()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.isin(('1517-06-30',))
[False False False]
#end_IndexMillisecondGO-isin()

#start_IndexMillisecondGO-label_widths_at_depth()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> tuple(ix.label_widths_at_depth(0))
((numpy.datetime64('1517-04-01T00:00:00.000'), 1), (numpy.datetime64('1517-12-31T00:00:00.000'), 1), (numpy.datetime64('1517-06-30T00:00:00.000'), 1))
#end_IndexMillisecondGO-label_widths_at_depth()

#start_IndexMillisecondGO-level_add()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.level_add('A')
<IndexHierarchyGO>
A                  1517-04-01T00:00:...
A                  1517-12-31T00:00:...
A                  1517-06-30T00:00:...
<<U1>              <datetime64[ms]>
#end_IndexMillisecondGO-level_add()

#start_IndexMillisecondGO-loc_searchsorted()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.loc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexMillisecondGO-loc_searchsorted()

#start_IndexMillisecondGO-loc_to_iloc()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.loc_to_iloc('d')
ValueError('Error parsing datetime string "d" at position 0')
>>> ix.loc_to_iloc(['a', 'e'])
ValueError('Cannot create a NumPy datetime other than NaT with generic units')
>>> ix.loc_to_iloc(slice('c', None))
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexMillisecondGO-loc_to_iloc()

#start_IndexMillisecondGO-max()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.max()
1517-12-31T00:00:00.000
#end_IndexMillisecondGO-max()

#start_IndexMillisecondGO-mean()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.mean()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))
#end_IndexMillisecondGO-mean()

#start_IndexMillisecondGO-median()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.median()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))
#end_IndexMillisecondGO-median()

#start_IndexMillisecondGO-min()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.min()
1517-04-01T00:00:00.000
#end_IndexMillisecondGO-min()

#start_IndexMillisecondGO-prod()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.prod()
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))
#end_IndexMillisecondGO-prod()

#start_IndexMillisecondGO-relabel()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)
<IndexMillisecondGO>
1970-01-01T00:00:00.001
1970-01-01T00:00:00.031
1970-01-01T00:00:00.030
<datetime64[ms]>
#end_IndexMillisecondGO-relabel()

#start_IndexMillisecondGO-rename()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.rename('y')
<IndexMillisecondGO: y>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-rename()

#start_IndexMillisecondGO-roll()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.roll(2)
<IndexMillisecondGO>
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
1517-04-01T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-roll()

#start_IndexMillisecondGO-sample()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.sample(2, seed=0)
<IndexMillisecondGO>
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-sample()

#start_IndexMillisecondGO-sort()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.sort()
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-06-30T00:00:00.000
1517-12-31T00:00:00.000
<datetime64[ms]>
>>> ix.sort(ascending=False)
<IndexMillisecondGO>
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
1517-04-01T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-sort()

#start_IndexMillisecondGO-std()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.std()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))
#end_IndexMillisecondGO-std()

#start_IndexMillisecondGO-sum()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.sum()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))
#end_IndexMillisecondGO-sum()

#start_IndexMillisecondGO-tail()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.tail(2)
<IndexMillisecondGO>
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-tail()

#start_IndexMillisecondGO-union()
>>> ix1 = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexMillisecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.union(ix2)
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-06-30T00:00:00.000
1517-12-31T00:00:00.000
2021-12-31T00:00:00.000
2022-04-01T00:00:00.000
2022-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-union()

#start_IndexMillisecondGO-unique()
>>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMillisecondGO>
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
<datetime64[ms]>
>>> ix.unique()
['1620-09-16T00:00:00.000'                     'NaT'
 '1620-11-21T00:00:00.000']
#end_IndexMillisecondGO-unique()

#start_IndexMillisecondGO-values_at_depth()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values_at_depth(0)
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecondGO-values_at_depth()

#start_IndexMillisecondGO-var()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.var()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))
#end_IndexMillisecondGO-var()

#start_IndexMillisecondGO-__contains__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__contains__('a')
ValueError('Error parsing datetime string "a" at position 0')
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__contains__('1517-06-30')
False
#end_IndexMillisecondGO-__contains__()

#start_IndexMillisecondGO-__iter__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01T00:00:00.000'), numpy.datetime64('1517-12-31T00:00:00.000'), numpy.datetime64('1517-06-30T00:00:00.000'))
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01T00:00:00.000'), numpy.datetime64('1517-12-31T00:00:00.000'), numpy.datetime64('1517-06-30T00:00:00.000'))
#end_IndexMillisecondGO-__iter__()

#start_IndexMillisecondGO-__reversed__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30T00:00:00.000'), numpy.datetime64('1517-12-31T00:00:00.000'), numpy.datetime64('1517-04-01T00:00:00.000'))
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30T00:00:00.000'), numpy.datetime64('1517-12-31T00:00:00.000'), numpy.datetime64('1517-04-01T00:00:00.000'))
#end_IndexMillisecondGO-__reversed__()

#start_IndexMillisecondGO-values
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecondGO-values

#start_IndexMillisecondGO-interface
>>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.interface
<Frame>
<Index>                              cls_name           group                doc                  <<U18>
<Index: signature>
__init__(labels, *, name, loc_is_... IndexMillisecondGO Constructor          Initializer. Args...
from_labels(labels, *, name)         IndexMillisecondGO Constructor          Construct an Inde...
from_pandas(value)                   IndexMillisecondGO Constructor          Given a Pandas in...
to_html(config, style_config)        IndexMillisecondGO Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexMillisecondGO Exporter             Return a complete...
to_pandas()                          IndexMillisecondGO Exporter             Return a Pandas I...
to_series()                          IndexMillisecondGO Exporter             Return a Series w...
to_visidata()                        IndexMillisecondGO Exporter             Open an interacti...
STATIC                               IndexMillisecondGO Attribute            bool(x) -> bool R...
depth                                IndexMillisecondGO Attribute            int([x]) -> integ...
dtype                                IndexMillisecondGO Attribute            Return the dtype ...
index_types                          IndexMillisecondGO Attribute            Return a Series o...
memory                               IndexMillisecondGO Attribute            Return a MemoryDi...
mloc                                 IndexMillisecondGO Attribute            The memory locati...
name                                 IndexMillisecondGO Attribute            A hashable label ...
names                                IndexMillisecondGO Attribute            Provide a suitabl...
nbytes                               IndexMillisecondGO Attribute            Return the total ...
...                                  ...                ...                  ...
via_str.rpartition(sep)              IndexMillisecondGO Accessor String      Partition (split)...
via_str.rsplit(sep, maxsplit)        IndexMillisecondGO Accessor String      For each element,...
via_str.rstrip(chars)                IndexMillisecondGO Accessor String      For each element,...
via_str.split(sep, maxsplit)         IndexMillisecondGO Accessor String      For each element,...
via_str.startswith(prefix, start,... IndexMillisecondGO Accessor String      Returns a contain...
via_str.strip(chars)                 IndexMillisecondGO Accessor String      For each element,...
via_str.swapcase()                   IndexMillisecondGO Accessor String      Return a containe...
via_str.title()                      IndexMillisecondGO Accessor String      Return a containe...
via_str.upper()                      IndexMillisecondGO Accessor String      Return a containe...
via_str.zfill(width)                 IndexMillisecondGO Accessor String      Return the string...
via_re(pattern, flags).search(pos... IndexMillisecondGO Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexMillisecondGO Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexMillisecondGO Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexMillisecondGO Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexMillisecondGO Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexMillisecondGO Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexMillisecondGO Accessor Regular ... Perform the same ...
<<U63>                               <<U18>             <<U27>               <<U83>
#end_IndexMillisecondGO-interface

#start_IndexMillisecondGO-__repr__()
>>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> repr(ix)
<IndexMillisecondGO>
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-__repr__()

#start_IndexMillisecondGO-__str__()
>>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> str(ix)
<IndexMillisecondGO>
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-__str__()

#start_IndexMillisecondGO-display()
>>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display()
<IndexMillisecondGO>
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
<datetime64[ms]>
>>> ix.display(sf.DisplayConfig(type_show=False))
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
#end_IndexMillisecondGO-display()

#start_IndexMillisecondGO-display_tall()
>>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_tall()
<IndexMillisecondGO>
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-display_tall()

#start_IndexMillisecondGO-display_wide()
>>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_wide()
<IndexMillisecondGO>
1620-09-16T00:00:00.000
NaT
1620-11-21T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-display_wide()

#start_IndexMillisecondGO-drop.iloc[]
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.drop.iloc[1]
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.drop.iloc[1:]
<IndexMillisecondGO>
1517-04-01T00:00:00.000
<datetime64[ms]>
>>> ix.drop.iloc[[0, 2]]
<IndexMillisecondGO>
1517-12-31T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-drop.iloc[]

#start_IndexMillisecondGO-drop.loc[]
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.drop.loc['1517-06-30']
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
<datetime64[ms]>
>>> ix.drop.loc['1517-06-30':]
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-drop.loc[]

#start_IndexMillisecondGO-[]
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix[1]
1517-12-31T00:00:00.000
>>> ix[1:]
<IndexMillisecondGO>
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix[[0, 2]]
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-[]

#start_IndexMillisecondGO-iloc[]
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iloc[1]
1517-12-31T00:00:00.000
>>> ix.iloc[1:]
<IndexMillisecondGO>
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.iloc[[0, 2]]
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-iloc[]

#start_IndexMillisecondGO-loc[]
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.loc['1517-06-30']
<IndexMillisecondGO>
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.loc['1517-06-30':]
<IndexMillisecondGO>
1517-06-30T00:00:00.000
<datetime64[ms]>
#end_IndexMillisecondGO-loc[]

#start_IndexMillisecondGO-iter_label()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label())
(numpy.datetime64('1517-04-01T00:00:00.000'), numpy.datetime64('1517-12-31T00:00:00.000'), numpy.datetime64('1517-06-30T00:00:00.000'))
#end_IndexMillisecondGO-iter_label()

#start_IndexMillisecondGO-iter_label().apply()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)
[1517 1517 1517]
#end_IndexMillisecondGO-iter_label().apply()

#start_IndexMillisecondGO-iter_label().apply_iter()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))
(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 31, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))
#end_IndexMillisecondGO-iter_label().apply_iter()

#start_IndexMillisecondGO-iter_label().apply_iter_items()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))
((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 31, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))
#end_IndexMillisecondGO-iter_label().apply_iter_items()

#start_IndexMillisecondGO-iter_label().apply_pool()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)
[ 4 12  6]
#end_IndexMillisecondGO-iter_label().apply_pool()

#start_IndexMillisecondGO-__add__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix + 2
['1517-04-01T00:00:00.002' '1517-12-31T00:00:00.002'
 '1517-06-30T00:00:00.002']
#end_IndexMillisecondGO-__add__()

#start_IndexMillisecondGO-__and__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix & True
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix & (False, True)
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMillisecondGO-__and__()

#start_IndexMillisecondGO-__eq__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix == '1517-06-30'
[False False  True]
#end_IndexMillisecondGO-__eq__()

#start_IndexMillisecondGO-__floordiv__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix // '1517-06-30'
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMillisecondGO-__floordiv__()

#start_IndexMillisecondGO-__ge__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix >= '1517-06-30'
[False  True  True]
#end_IndexMillisecondGO-__ge__()

#start_IndexMillisecondGO-__gt__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix > '1517-06-30'
[False  True False]
#end_IndexMillisecondGO-__gt__()

#start_IndexMillisecondGO-__le__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix <= '1517-06-30'
[ True False  True]
#end_IndexMillisecondGO-__le__()

#start_IndexMillisecondGO-__lt__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix < '1517-06-30'
[ True False False]
#end_IndexMillisecondGO-__lt__()

#start_IndexMillisecondGO-__matmul__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexMillisecondGO-__matmul__()

#start_IndexMillisecondGO-__mod__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix % '1517-06-30'
UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMillisecondGO-__mod__()

#start_IndexMillisecondGO-__mul__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix * '1517-06-30'
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMillisecondGO-__mul__()

#start_IndexMillisecondGO-__ne__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix != '1517-06-30'
[ True  True False]
#end_IndexMillisecondGO-__ne__()

#start_IndexMillisecondGO-__or__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix | True
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix | (False, True)
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMillisecondGO-__or__()

#start_IndexMillisecondGO-__pow__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix ** '1517-06-30'
TypeError("ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMillisecondGO-__pow__()

#start_IndexMillisecondGO-__radd__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' + ix
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMillisecondGO-__radd__()

#start_IndexMillisecondGO-__rfloordiv__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' // ix
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMillisecondGO-__rfloordiv__()

#start_IndexMillisecondGO-__rmatmul__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexMillisecondGO-__rmatmul__()

#start_IndexMillisecondGO-__rmul__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMillisecondGO-__rmul__()

#start_IndexMillisecondGO-__rshift__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix >> 1
TypeError("ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMillisecondGO-__rshift__()

#start_IndexMillisecondGO-__rsub__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' - ix
[  90 -184    0]
#end_IndexMillisecondGO-__rsub__()

#start_IndexMillisecondGO-__rtruediv__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' / ix
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMillisecondGO-__rtruediv__()

#start_IndexMillisecondGO-__sub__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix - 2
['1517-03-31T23:59:59.998' '1517-12-30T23:59:59.998'
 '1517-06-29T23:59:59.998']
#end_IndexMillisecondGO-__sub__()

#start_IndexMillisecondGO-__truediv__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix / '1517-06-30'
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMillisecondGO-__truediv__()

#start_IndexMillisecondGO-__xor__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix ^ True
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix ^ (False, True)
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMillisecondGO-__xor__()

#start_IndexMillisecondGO-__abs__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> abs(ix)
UFuncTypeError(<ufunc 'absolute'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))
#end_IndexMillisecondGO-__abs__()

#start_IndexMillisecondGO-__invert__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ~ix
TypeError("ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMillisecondGO-__invert__()

#start_IndexMillisecondGO-__neg__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> -ix
UFuncTypeError(<ufunc 'negative'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))
#end_IndexMillisecondGO-__neg__()

#start_IndexMillisecondGO-__pos__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> +ix
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecondGO-__pos__()

#start_IndexMillisecondGO-via_dt.year
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.year
[1517 1517 1517]
#end_IndexMillisecondGO-via_dt.year

#start_IndexMillisecondGO-via_dt.month
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.month
[ 4 12  6]
#end_IndexMillisecondGO-via_dt.month

#start_IndexMillisecondGO-via_dt.day
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.day
[ 1 31 30]
#end_IndexMillisecondGO-via_dt.day

#start_IndexMillisecondGO-via_dt.hour
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.hour
[0 0 0]
#end_IndexMillisecondGO-via_dt.hour

#start_IndexMillisecondGO-via_dt.minute
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.minute
[0 0 0]
#end_IndexMillisecondGO-via_dt.minute

#start_IndexMillisecondGO-via_dt.second
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.second
[0 0 0]
#end_IndexMillisecondGO-via_dt.second

#start_IndexMillisecondGO-via_dt.weekday()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.weekday()
[6 0 5]
#end_IndexMillisecondGO-via_dt.weekday()

#start_IndexMillisecondGO-via_dt.quarter()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.quarter()
[2 4 2]
#end_IndexMillisecondGO-via_dt.quarter()

#start_IndexMillisecondGO-via_dt.is_month_end()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_month_end()
[False  True  True]
#end_IndexMillisecondGO-via_dt.is_month_end()

#start_IndexMillisecondGO-via_dt.is_month_start()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_month_start()
[ True False False]
#end_IndexMillisecondGO-via_dt.is_month_start()

#start_IndexMillisecondGO-via_dt.is_year_end()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_year_end()
[False  True False]
#end_IndexMillisecondGO-via_dt.is_year_end()

#start_IndexMillisecondGO-via_dt.is_year_start()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_year_start()
[False False False]
#end_IndexMillisecondGO-via_dt.is_year_start()

#start_IndexMillisecondGO-via_dt.is_quarter_end()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_quarter_end()
[False  True  True]
#end_IndexMillisecondGO-via_dt.is_quarter_end()

#start_IndexMillisecondGO-via_dt.is_quarter_start()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_quarter_start()
[ True False False]
#end_IndexMillisecondGO-via_dt.is_quarter_start()

#start_IndexMillisecondGO-via_dt.timetuple()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.timetuple()
[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=365, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]
#end_IndexMillisecondGO-via_dt.timetuple()

#start_IndexMillisecondGO-via_dt.isoformat()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.isoformat()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexMillisecondGO-via_dt.isoformat()

#start_IndexMillisecondGO-via_dt.fromisoformat()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.fromisoformat()
RuntimeError('invalid dtype (datetime64[ms]) for operation on string types')
#end_IndexMillisecondGO-via_dt.fromisoformat()

#start_IndexMillisecondGO-via_dt.strftime()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strftime("%A | %B")
['Sunday | April' 'Monday | December' 'Saturday | June']
#end_IndexMillisecondGO-via_dt.strftime()

#start_IndexMillisecondGO-via_dt.strptime()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strptime("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[ms]) for operation on string types')
#end_IndexMillisecondGO-via_dt.strptime()

#start_IndexMillisecondGO-via_dt.strpdate()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strpdate("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[ms]) for operation on string types')
#end_IndexMillisecondGO-via_dt.strpdate()

#start_IndexMillisecondGO-via_str.__getitem__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str[-1]
['0' '0' '0']
#end_IndexMillisecondGO-via_str.__getitem__()

#start_IndexMillisecondGO-via_str.capitalize()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.capitalize()
['1517-04-01t00:00:00.000' '1517-12-31t00:00:00.000'
 '1517-06-30t00:00:00.000']
#end_IndexMillisecondGO-via_str.capitalize()

#start_IndexMillisecondGO-via_str.center()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.center(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMillisecondGO-via_str.center()

#start_IndexMillisecondGO-via_str.contains()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.contains('X')
[False False False]
#end_IndexMillisecondGO-via_str.contains()

#start_IndexMillisecondGO-via_str.count()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.count('X')
[0 0 0]
#end_IndexMillisecondGO-via_str.count()

#start_IndexMillisecondGO-via_str.decode()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30')).astype(bytes)
>>> ix
<IndexGO>
b'1517-04-01T00:00:00.000'
b'1517-12-31T00:00:00.000'
b'1517-06-30T00:00:00.000'
<|S42>
>>> ix.via_str.decode()
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecondGO-via_str.decode()

#start_IndexMillisecondGO-via_str.encode()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.encode()
[b'1517-04-01T00:00:00.000' b'1517-12-31T00:00:00.000'
 b'1517-06-30T00:00:00.000']
#end_IndexMillisecondGO-via_str.encode()

#start_IndexMillisecondGO-via_str.endswith()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.endswith(' ')
[False False False]
#end_IndexMillisecondGO-via_str.endswith()

#start_IndexMillisecondGO-via_str.find()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.find('X')
[-1 -1 -1]
#end_IndexMillisecondGO-via_str.find()

#start_IndexMillisecondGO-via_str.format()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.format('{:-^10}')
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecondGO-via_str.format()

#start_IndexMillisecondGO-via_str.index()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.index('X')
ValueError('substring not found')
#end_IndexMillisecondGO-via_str.index()

#start_IndexMillisecondGO-via_str.isalnum()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.isalnum()
[False False False]
#end_IndexMillisecondGO-via_str.isalnum()

#start_IndexMillisecondGO-via_str.isalpha()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.isalpha()
[False False False]
#end_IndexMillisecondGO-via_str.isalpha()

#start_IndexMillisecondGO-via_str.isdecimal()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.isdecimal()
[False False False]
#end_IndexMillisecondGO-via_str.isdecimal()

#start_IndexMillisecondGO-via_str.isdigit()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.isdigit()
[False False False]
#end_IndexMillisecondGO-via_str.isdigit()

#start_IndexMillisecondGO-via_str.islower()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.islower()
[False False False]
#end_IndexMillisecondGO-via_str.islower()

#start_IndexMillisecondGO-via_str.isnumeric()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.isnumeric()
[False False False]
#end_IndexMillisecondGO-via_str.isnumeric()

#start_IndexMillisecondGO-via_str.isspace()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.isspace()
[False False False]
#end_IndexMillisecondGO-via_str.isspace()

#start_IndexMillisecondGO-via_str.istitle()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.istitle()
[ True  True  True]
#end_IndexMillisecondGO-via_str.istitle()

#start_IndexMillisecondGO-via_str.isupper()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.isupper()
[ True  True  True]
#end_IndexMillisecondGO-via_str.isupper()

#start_IndexMillisecondGO-via_str.ljust()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.ljust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMillisecondGO-via_str.ljust()

#start_IndexMillisecondGO-via_str.len()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.len()
[23 23 23]
#end_IndexMillisecondGO-via_str.len()

#start_IndexMillisecondGO-via_str.lower()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.lower()
['1517-04-01t00:00:00.000' '1517-12-31t00:00:00.000'
 '1517-06-30t00:00:00.000']
#end_IndexMillisecondGO-via_str.lower()

#start_IndexMillisecondGO-via_str.lstrip()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.lstrip()
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecondGO-via_str.lstrip()

#start_IndexMillisecondGO-via_str.partition()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.partition('X')
[('1517-04-01T00:00:00.000', '', '') ('1517-12-31T00:00:00.000', '', '')
 ('1517-06-30T00:00:00.000', '', '')]
#end_IndexMillisecondGO-via_str.partition()

#start_IndexMillisecondGO-via_str.replace()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.replace('X', '*')
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecondGO-via_str.replace()

#start_IndexMillisecondGO-via_str.rfind()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.rfind('X')
[-1 -1 -1]
#end_IndexMillisecondGO-via_str.rfind()

#start_IndexMillisecondGO-via_str.rindex()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.rindex('X')
ValueError('substring not found')
#end_IndexMillisecondGO-via_str.rindex()

#start_IndexMillisecondGO-via_str.rjust()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.rjust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMillisecondGO-via_str.rjust()

#start_IndexMillisecondGO-via_str.rpartition()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.rpartition('X')
[('', '', '1517-04-01T00:00:00.000') ('', '', '1517-12-31T00:00:00.000')
 ('', '', '1517-06-30T00:00:00.000')]
#end_IndexMillisecondGO-via_str.rpartition()

#start_IndexMillisecondGO-via_str.rsplit()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.rsplit('X')
[('1517-04-01T00:00:00.000',) ('1517-12-31T00:00:00.000',)
 ('1517-06-30T00:00:00.000',)]
#end_IndexMillisecondGO-via_str.rsplit()

#start_IndexMillisecondGO-via_str.rstrip()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.rstrip()
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecondGO-via_str.rstrip()

#start_IndexMillisecondGO-via_str.split()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.split('X')
[('1517-04-01T00:00:00.000',) ('1517-12-31T00:00:00.000',)
 ('1517-06-30T00:00:00.000',)]
#end_IndexMillisecondGO-via_str.split()

#start_IndexMillisecondGO-via_str.startswith()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.startswith('X')
[False False False]
#end_IndexMillisecondGO-via_str.startswith()

#start_IndexMillisecondGO-via_str.strip()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.strip()
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecondGO-via_str.strip()

#start_IndexMillisecondGO-via_str.swapcase()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.swapcase()
['1517-04-01t00:00:00.000' '1517-12-31t00:00:00.000'
 '1517-06-30t00:00:00.000']
#end_IndexMillisecondGO-via_str.swapcase()

#start_IndexMillisecondGO-via_str.title()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.title()
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecondGO-via_str.title()

#start_IndexMillisecondGO-via_str.upper()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.upper()
['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'
 '1517-06-30T00:00:00.000']
#end_IndexMillisecondGO-via_str.upper()

#start_IndexMillisecondGO-via_str.zfill()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_str.zfill(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMillisecondGO-via_str.zfill()

#start_IndexMillisecondGO-via_re().search()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_re('[X123]').search()
[ True  True  True]
#end_IndexMillisecondGO-via_re().search()

#start_IndexMillisecondGO-via_re().match()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_re('[X123]').match()
[ True  True  True]
#end_IndexMillisecondGO-via_re().match()

#start_IndexMillisecondGO-via_re().fullmatch()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_re('123').fullmatch()
[False False False]
#end_IndexMillisecondGO-via_re().fullmatch()

#start_IndexMillisecondGO-via_re().split()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_re('[X123]').split()
[('', '5', '7-04-0', 'T00:00:00.000')
 ('', '5', '7-', '', '-', '', 'T00:00:00.000')
 ('', '5', '7-06-', '0T00:00:00.000')]
#end_IndexMillisecondGO-via_re().split()

#start_IndexMillisecondGO-via_re().findall()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_re('[X123]').findall()
[('1', '1', '1') ('1', '1', '1', '2', '3', '1') ('1', '1', '3')]
#end_IndexMillisecondGO-via_re().findall()

#start_IndexMillisecondGO-via_re().sub()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_re('[X123]').sub('==')
['==5==7-04-0==T00:00:00.000' '==5==7-====-====T00:00:00.000'
 '==5==7-06-==0T00:00:00.000']
#end_IndexMillisecondGO-via_re().sub()

#start_IndexMillisecondGO-via_re().subn()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMillisecondGO>
1517-04-01T00:00:00.000
1517-12-31T00:00:00.000
1517-06-30T00:00:00.000
<datetime64[ms]>
>>> ix.via_re('[X123]').subn('==', 1)
[('==517-04-01T00:00:00.000', 1) ('==517-12-31T00:00:00.000', 1)
 ('==517-06-30T00:00:00.000', 1)]
#end_IndexMillisecondGO-via_re().subn()

#start_IndexMillisecondGO-via_values.apply()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_values.apply(np.sin)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMillisecondGO-via_values.apply()

#start_IndexMillisecondGO-via_values.__array_ufunc__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> np.sin(ix.via_values)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMillisecondGO-via_values.__array_ufunc__()

#start_IndexMillisecondGO-via_values.__call__()
>>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> np.sin(ix.via_values(unify_blocks=True))
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMillisecondGO-via_values.__call__()

#start_IndexMicrosecond-__init__()
>>> sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-__init__()

#start_IndexMicrosecond-from_labels()
>>> sf.IndexMicrosecond.from_labels(('1517-04-01', '1517-12-31', '1517-06-30'))
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-from_labels()

#start_IndexMicrosecond-from_pandas()
>>> ix = pd.Index(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> sf.IndexMicrosecond.from_pandas(ix)
<Index>
1517-04-01
1517-12-31
1517-06-30
<object>
#end_IndexMicrosecond-from_pandas()

#start_IndexMicrosecond-to_pandas()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.to_pandas()
OutOfBoundsDatetime('Out of bounds nanosecond timestamp: 1517-04-01 00:00:00')
#end_IndexMicrosecond-to_pandas()

#start_IndexMicrosecond-to_series()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.to_series()
<Series>
<Index>
0        1517-04-01T00:00:...
1        1517-12-31T00:00:...
2        1517-06-30T00:00:...
<int64>  <datetime64[us]>
#end_IndexMicrosecond-to_series()

#start_IndexMicrosecond-STATIC
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.STATIC
True
#end_IndexMicrosecond-STATIC

#start_IndexMicrosecond-depth
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.depth
1
#end_IndexMicrosecond-depth

#start_IndexMicrosecond-dtype
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.dtype
datetime64[us]
#end_IndexMicrosecond-dtype

#start_IndexMicrosecond-index_types
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.index_types
<Series>
<Index>
None     <IndexMicrosecond>
<object> <object>
#end_IndexMicrosecond-index_types

#start_IndexMicrosecond-memory
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.memory
          L   Lu    LM  LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu
Name      16  B     16  B     16  B     16   B     16  B     16  B
Map       440 B     440 B     440 B     440  B     440 B     440 B
Labels    120 B     136 B     24  B     120  B     136 B     24  B
Positions 96  B     112 B     0   B     8.19 KB    136 B     24  B
Total     768 B     800 B     576 B     8.84 KB    824 B     600 B
#end_IndexMicrosecond-memory

#start_IndexMicrosecond-name
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.name
#end_IndexMicrosecond-name

#start_IndexMicrosecond-names
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.names
('__index0__',)
#end_IndexMicrosecond-names

#start_IndexMicrosecond-nbytes
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.nbytes
24
#end_IndexMicrosecond-nbytes

#start_IndexMicrosecond-ndim
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.ndim
1
#end_IndexMicrosecond-ndim

#start_IndexMicrosecond-positions
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.positions
[0 1 2]
#end_IndexMicrosecond-positions

#start_IndexMicrosecond-shape
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.shape
(3,)
#end_IndexMicrosecond-shape

#start_IndexMicrosecond-size
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.size
3
#end_IndexMicrosecond-size

#start_IndexMicrosecond-__array__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__array__()
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecond-__array__()

#start_IndexMicrosecond-__array_ufunc__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> np.array((0, 1, 0)) * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[us]')))
#end_IndexMicrosecond-__array_ufunc__()

#start_IndexMicrosecond-__bool__()
>>> s = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexMicrosecond-__bool__()

#start_IndexMicrosecond-__copy__()
>>> import copy
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> copy.copy(ix)
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-__copy__()

#start_IndexMicrosecond-__deepcopy__()
>>> import copy
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> copy.deepcopy(ix)
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-__deepcopy__()

#start_IndexMicrosecond-__len__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> len(ix)
3
#end_IndexMicrosecond-__len__()

#start_IndexMicrosecond-all()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.all()
True
#end_IndexMicrosecond-all()

#start_IndexMicrosecond-any()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.any()
True
#end_IndexMicrosecond-any()

#start_IndexMicrosecond-astype()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.astype(str)
<Index>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<<U45>
#end_IndexMicrosecond-astype()

#start_IndexMicrosecond-copy()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.copy()
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-copy()

#start_IndexMicrosecond-cumprod()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.cumprod()
ValueError("could not find a matching type for multiply.accumulate, requested type has type code 'M'")
#end_IndexMicrosecond-cumprod()

#start_IndexMicrosecond-cumsum()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.cumsum()
ValueError("could not find a matching type for add.accumulate, requested type has type code 'M'")
#end_IndexMicrosecond-cumsum()

#start_IndexMicrosecond-difference()
>>> ix1 = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexMicrosecond(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.difference(ix2)
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-difference()

#start_IndexMicrosecond-dropfalsy()
>>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMicrosecond>
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
<datetime64[us]>
>>> ix.dropfalsy()
<IndexMicrosecond>
1620-09-16T00:00:00.000000
1620-11-21T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-dropfalsy()

#start_IndexMicrosecond-dropna()
>>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMicrosecond>
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
<datetime64[us]>
>>> ix.dropna()
<IndexMicrosecond>
1620-09-16T00:00:00.000000
1620-11-21T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-dropna()

#start_IndexMicrosecond-equals()
>>> ix1 = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexMicrosecond(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.equals(ix2)
False
#end_IndexMicrosecond-equals()

#start_IndexMicrosecond-fillfalsy()
>>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMicrosecond>
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
<datetime64[us]>
>>> ix.fillfalsy('A')
ValueError('Error parsing datetime string "A" at position 0')
#end_IndexMicrosecond-fillfalsy()

#start_IndexMicrosecond-fillna()
>>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMicrosecond>
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
<datetime64[us]>
>>> ix.fillna(0)
<IndexMicrosecond>
1620-09-16T00:00:00.000000
1970-01-01T00:00:00.000000
1620-11-21T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-fillna()

#start_IndexMicrosecond-head()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.head(2)
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-head()

#start_IndexMicrosecond-iloc_searchsorted()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.iloc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexMicrosecond-iloc_searchsorted()

#start_IndexMicrosecond-intersection()
>>> ix1 = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexMicrosecond(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.intersection(ix2)
<IndexMicrosecond>
<datetime64[us]>
#end_IndexMicrosecond-intersection()

#start_IndexMicrosecond-isin()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.isin(('1517-06-30',))
[False False False]
#end_IndexMicrosecond-isin()

#start_IndexMicrosecond-label_widths_at_depth()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> tuple(ix.label_widths_at_depth(0))
((numpy.datetime64('1517-04-01T00:00:00.000000'), 1), (numpy.datetime64('1517-12-31T00:00:00.000000'), 1), (numpy.datetime64('1517-06-30T00:00:00.000000'), 1))
#end_IndexMicrosecond-label_widths_at_depth()

#start_IndexMicrosecond-level_add()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.level_add('A')
<IndexHierarchy>
A                1517-04-01T00:00:...
A                1517-12-31T00:00:...
A                1517-06-30T00:00:...
<<U1>            <datetime64[us]>
#end_IndexMicrosecond-level_add()

#start_IndexMicrosecond-loc_searchsorted()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.loc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexMicrosecond-loc_searchsorted()

#start_IndexMicrosecond-loc_to_iloc()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.loc_to_iloc('d')
ValueError('Error parsing datetime string "d" at position 0')
>>> ix.loc_to_iloc(['a', 'e'])
ValueError('Cannot create a NumPy datetime other than NaT with generic units')
>>> ix.loc_to_iloc(slice('c', None))
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexMicrosecond-loc_to_iloc()

#start_IndexMicrosecond-max()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.max()
1517-12-31T00:00:00.000000
#end_IndexMicrosecond-max()

#start_IndexMicrosecond-mean()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.mean()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))
#end_IndexMicrosecond-mean()

#start_IndexMicrosecond-median()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.median()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))
#end_IndexMicrosecond-median()

#start_IndexMicrosecond-min()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.min()
1517-04-01T00:00:00.000000
#end_IndexMicrosecond-min()

#start_IndexMicrosecond-prod()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.prod()
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[us]'), dtype('<M8[us]')))
#end_IndexMicrosecond-prod()

#start_IndexMicrosecond-relabel()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)
<IndexMicrosecond>
1970-01-01T00:00:00.000001
1970-01-01T00:00:00.000031
1970-01-01T00:00:00.000030
<datetime64[us]>
#end_IndexMicrosecond-relabel()

#start_IndexMicrosecond-rename()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.rename('y')
<IndexMicrosecond: y>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-rename()

#start_IndexMicrosecond-roll()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.roll(2)
<IndexMicrosecond>
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
1517-04-01T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-roll()

#start_IndexMicrosecond-sample()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.sample(2, seed=0)
<IndexMicrosecond>
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-sample()

#start_IndexMicrosecond-sort()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.sort()
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-06-30T00:00:00.000000
1517-12-31T00:00:00.000000
<datetime64[us]>
>>> ix.sort(ascending=False)
<IndexMicrosecond>
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
1517-04-01T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-sort()

#start_IndexMicrosecond-std()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.std()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))
#end_IndexMicrosecond-std()

#start_IndexMicrosecond-sum()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.sum()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))
#end_IndexMicrosecond-sum()

#start_IndexMicrosecond-tail()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.tail(2)
<IndexMicrosecond>
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-tail()

#start_IndexMicrosecond-union()
>>> ix1 = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexMicrosecond(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.union(ix2)
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-06-30T00:00:00.000000
1517-12-31T00:00:00.000000
2021-12-31T00:00:00.000000
2022-04-01T00:00:00.000000
2022-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-union()

#start_IndexMicrosecond-unique()
>>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMicrosecond>
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
<datetime64[us]>
>>> ix.unique()
['1620-09-16T00:00:00.000000'                        'NaT'
 '1620-11-21T00:00:00.000000']
#end_IndexMicrosecond-unique()

#start_IndexMicrosecond-values_at_depth()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values_at_depth(0)
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecond-values_at_depth()

#start_IndexMicrosecond-var()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.var()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))
#end_IndexMicrosecond-var()

#start_IndexMicrosecond-__contains__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__contains__('a')
ValueError('Error parsing datetime string "a" at position 0')
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__contains__('1517-06-30')
False
#end_IndexMicrosecond-__contains__()

#start_IndexMicrosecond-__iter__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01T00:00:00.000000'), numpy.datetime64('1517-12-31T00:00:00.000000'), numpy.datetime64('1517-06-30T00:00:00.000000'))
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01T00:00:00.000000'), numpy.datetime64('1517-12-31T00:00:00.000000'), numpy.datetime64('1517-06-30T00:00:00.000000'))
#end_IndexMicrosecond-__iter__()

#start_IndexMicrosecond-__reversed__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30T00:00:00.000000'), numpy.datetime64('1517-12-31T00:00:00.000000'), numpy.datetime64('1517-04-01T00:00:00.000000'))
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30T00:00:00.000000'), numpy.datetime64('1517-12-31T00:00:00.000000'), numpy.datetime64('1517-04-01T00:00:00.000000'))
#end_IndexMicrosecond-__reversed__()

#start_IndexMicrosecond-values
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecond-values

#start_IndexMicrosecond-interface
>>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.interface
<Frame>
<Index>                              cls_name         group                doc                  <<U18>
<Index: signature>
__init__(labels, *, name, loc_is_... IndexMicrosecond Constructor          Initializer. Args...
from_labels(labels, *, name)         IndexMicrosecond Constructor          Construct an Inde...
from_pandas(value)                   IndexMicrosecond Constructor          Given a Pandas in...
to_html(config, style_config)        IndexMicrosecond Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexMicrosecond Exporter             Return a complete...
to_pandas()                          IndexMicrosecond Exporter             Return a Pandas I...
to_series()                          IndexMicrosecond Exporter             Return a Series w...
to_visidata()                        IndexMicrosecond Exporter             Open an interacti...
STATIC                               IndexMicrosecond Attribute            bool(x) -> bool R...
depth                                IndexMicrosecond Attribute            int([x]) -> integ...
dtype                                IndexMicrosecond Attribute            Return the dtype ...
index_types                          IndexMicrosecond Attribute            Return a Series o...
memory                               IndexMicrosecond Attribute            Return a MemoryDi...
mloc                                 IndexMicrosecond Attribute            The memory locati...
name                                 IndexMicrosecond Attribute            A hashable label ...
names                                IndexMicrosecond Attribute            Provide a suitabl...
nbytes                               IndexMicrosecond Attribute            Return the total ...
...                                  ...              ...                  ...
via_str.rpartition(sep)              IndexMicrosecond Accessor String      Partition (split)...
via_str.rsplit(sep, maxsplit)        IndexMicrosecond Accessor String      For each element,...
via_str.rstrip(chars)                IndexMicrosecond Accessor String      For each element,...
via_str.split(sep, maxsplit)         IndexMicrosecond Accessor String      For each element,...
via_str.startswith(prefix, start,... IndexMicrosecond Accessor String      Returns a contain...
via_str.strip(chars)                 IndexMicrosecond Accessor String      For each element,...
via_str.swapcase()                   IndexMicrosecond Accessor String      Return a containe...
via_str.title()                      IndexMicrosecond Accessor String      Return a containe...
via_str.upper()                      IndexMicrosecond Accessor String      Return a containe...
via_str.zfill(width)                 IndexMicrosecond Accessor String      Return the string...
via_re(pattern, flags).search(pos... IndexMicrosecond Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexMicrosecond Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexMicrosecond Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexMicrosecond Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexMicrosecond Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexMicrosecond Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexMicrosecond Accessor Regular ... Perform the same ...
<<U63>                               <<U16>           <<U27>               <<U83>
#end_IndexMicrosecond-interface

#start_IndexMicrosecond-__repr__()
>>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> repr(ix)
<IndexMicrosecond>
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-__repr__()

#start_IndexMicrosecond-__str__()
>>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> str(ix)
<IndexMicrosecond>
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-__str__()

#start_IndexMicrosecond-display()
>>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display()
<IndexMicrosecond>
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
<datetime64[us]>
>>> ix.display(sf.DisplayConfig(type_show=False))
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
#end_IndexMicrosecond-display()

#start_IndexMicrosecond-display_tall()
>>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_tall()
<IndexMicrosecond>
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-display_tall()

#start_IndexMicrosecond-display_wide()
>>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_wide()
<IndexMicrosecond>
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-display_wide()

#start_IndexMicrosecond-drop.iloc[]
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.drop.iloc[1]
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.drop.iloc[1:]
<IndexMicrosecond>
1517-04-01T00:00:00.000000
<datetime64[us]>
>>> ix.drop.iloc[[0, 2]]
<IndexMicrosecond>
1517-12-31T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-drop.iloc[]

#start_IndexMicrosecond-drop.loc[]
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.drop.loc['1517-06-30']
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
<datetime64[us]>
>>> ix.drop.loc['1517-06-30':]
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-drop.loc[]

#start_IndexMicrosecond-[]
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix[1]
1517-12-31T00:00:00.000000
>>> ix[1:]
<IndexMicrosecond>
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix[[0, 2]]
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-[]

#start_IndexMicrosecond-iloc[]
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iloc[1]
1517-12-31T00:00:00.000000
>>> ix.iloc[1:]
<IndexMicrosecond>
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.iloc[[0, 2]]
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-iloc[]

#start_IndexMicrosecond-loc[]
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.loc['1517-06-30']
<IndexMicrosecond>
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.loc['1517-06-30':]
<IndexMicrosecond>
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecond-loc[]

#start_IndexMicrosecond-iter_label()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label())
(numpy.datetime64('1517-04-01T00:00:00.000000'), numpy.datetime64('1517-12-31T00:00:00.000000'), numpy.datetime64('1517-06-30T00:00:00.000000'))
#end_IndexMicrosecond-iter_label()

#start_IndexMicrosecond-iter_label().apply()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)
[1517 1517 1517]
#end_IndexMicrosecond-iter_label().apply()

#start_IndexMicrosecond-iter_label().apply_iter()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))
(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 31, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))
#end_IndexMicrosecond-iter_label().apply_iter()

#start_IndexMicrosecond-iter_label().apply_iter_items()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))
((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 31, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))
#end_IndexMicrosecond-iter_label().apply_iter_items()

#start_IndexMicrosecond-iter_label().apply_pool()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)
[ 4 12  6]
#end_IndexMicrosecond-iter_label().apply_pool()

#start_IndexMicrosecond-__add__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix + 2
['1517-04-01T00:00:00.000002' '1517-12-31T00:00:00.000002'
 '1517-06-30T00:00:00.000002']
#end_IndexMicrosecond-__add__()

#start_IndexMicrosecond-__and__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix & True
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix & (False, True)
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMicrosecond-__and__()

#start_IndexMicrosecond-__eq__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix == '1517-06-30'
[False False  True]
#end_IndexMicrosecond-__eq__()

#start_IndexMicrosecond-__floordiv__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix // '1517-06-30'
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMicrosecond-__floordiv__()

#start_IndexMicrosecond-__ge__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix >= '1517-06-30'
[False  True  True]
#end_IndexMicrosecond-__ge__()

#start_IndexMicrosecond-__gt__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix > '1517-06-30'
[False  True False]
#end_IndexMicrosecond-__gt__()

#start_IndexMicrosecond-__le__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix <= '1517-06-30'
[ True False  True]
#end_IndexMicrosecond-__le__()

#start_IndexMicrosecond-__lt__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix < '1517-06-30'
[ True False False]
#end_IndexMicrosecond-__lt__()

#start_IndexMicrosecond-__matmul__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexMicrosecond-__matmul__()

#start_IndexMicrosecond-__mod__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix % '1517-06-30'
UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMicrosecond-__mod__()

#start_IndexMicrosecond-__mul__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix * '1517-06-30'
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMicrosecond-__mul__()

#start_IndexMicrosecond-__ne__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix != '1517-06-30'
[ True  True False]
#end_IndexMicrosecond-__ne__()

#start_IndexMicrosecond-__or__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix | True
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix | (False, True)
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMicrosecond-__or__()

#start_IndexMicrosecond-__pow__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix ** '1517-06-30'
TypeError("ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMicrosecond-__pow__()

#start_IndexMicrosecond-__radd__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' + ix
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMicrosecond-__radd__()

#start_IndexMicrosecond-__rfloordiv__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' // ix
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMicrosecond-__rfloordiv__()

#start_IndexMicrosecond-__rmatmul__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexMicrosecond-__rmatmul__()

#start_IndexMicrosecond-__rmul__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMicrosecond-__rmul__()

#start_IndexMicrosecond-__rshift__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix >> 1
TypeError("ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMicrosecond-__rshift__()

#start_IndexMicrosecond-__rsub__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' - ix
[  90 -184    0]
#end_IndexMicrosecond-__rsub__()

#start_IndexMicrosecond-__rtruediv__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' / ix
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMicrosecond-__rtruediv__()

#start_IndexMicrosecond-__sub__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix - 2
['1517-03-31T23:59:59.999998' '1517-12-30T23:59:59.999998'
 '1517-06-29T23:59:59.999998']
#end_IndexMicrosecond-__sub__()

#start_IndexMicrosecond-__truediv__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix / '1517-06-30'
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMicrosecond-__truediv__()

#start_IndexMicrosecond-__xor__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix ^ True
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix ^ (False, True)
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMicrosecond-__xor__()

#start_IndexMicrosecond-__abs__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> abs(ix)
UFuncTypeError(<ufunc 'absolute'>, (dtype('<M8[us]'), dtype('<M8[us]')))
#end_IndexMicrosecond-__abs__()

#start_IndexMicrosecond-__invert__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ~ix
TypeError("ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMicrosecond-__invert__()

#start_IndexMicrosecond-__neg__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> -ix
UFuncTypeError(<ufunc 'negative'>, (dtype('<M8[us]'), dtype('<M8[us]')))
#end_IndexMicrosecond-__neg__()

#start_IndexMicrosecond-__pos__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> +ix
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecond-__pos__()

#start_IndexMicrosecond-via_dt.year
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.year
[1517 1517 1517]
#end_IndexMicrosecond-via_dt.year

#start_IndexMicrosecond-via_dt.month
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.month
[ 4 12  6]
#end_IndexMicrosecond-via_dt.month

#start_IndexMicrosecond-via_dt.day
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.day
[ 1 31 30]
#end_IndexMicrosecond-via_dt.day

#start_IndexMicrosecond-via_dt.hour
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.hour
[0 0 0]
#end_IndexMicrosecond-via_dt.hour

#start_IndexMicrosecond-via_dt.minute
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.minute
[0 0 0]
#end_IndexMicrosecond-via_dt.minute

#start_IndexMicrosecond-via_dt.second
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.second
[0 0 0]
#end_IndexMicrosecond-via_dt.second

#start_IndexMicrosecond-via_dt.weekday()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.weekday()
[6 0 5]
#end_IndexMicrosecond-via_dt.weekday()

#start_IndexMicrosecond-via_dt.quarter()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.quarter()
[2 4 2]
#end_IndexMicrosecond-via_dt.quarter()

#start_IndexMicrosecond-via_dt.is_month_end()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_month_end()
[False  True  True]
#end_IndexMicrosecond-via_dt.is_month_end()

#start_IndexMicrosecond-via_dt.is_month_start()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_month_start()
[ True False False]
#end_IndexMicrosecond-via_dt.is_month_start()

#start_IndexMicrosecond-via_dt.is_year_end()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_year_end()
[False  True False]
#end_IndexMicrosecond-via_dt.is_year_end()

#start_IndexMicrosecond-via_dt.is_year_start()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_year_start()
[False False False]
#end_IndexMicrosecond-via_dt.is_year_start()

#start_IndexMicrosecond-via_dt.is_quarter_end()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_quarter_end()
[False  True  True]
#end_IndexMicrosecond-via_dt.is_quarter_end()

#start_IndexMicrosecond-via_dt.is_quarter_start()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_quarter_start()
[ True False False]
#end_IndexMicrosecond-via_dt.is_quarter_start()

#start_IndexMicrosecond-via_dt.timetuple()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.timetuple()
[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=365, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]
#end_IndexMicrosecond-via_dt.timetuple()

#start_IndexMicrosecond-via_dt.isoformat()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.isoformat()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexMicrosecond-via_dt.isoformat()

#start_IndexMicrosecond-via_dt.fromisoformat()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.fromisoformat()
RuntimeError('invalid dtype (datetime64[us]) for operation on string types')
#end_IndexMicrosecond-via_dt.fromisoformat()

#start_IndexMicrosecond-via_dt.strftime()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strftime("%A | %B")
['Sunday | April' 'Monday | December' 'Saturday | June']
#end_IndexMicrosecond-via_dt.strftime()

#start_IndexMicrosecond-via_dt.strptime()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strptime("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[us]) for operation on string types')
#end_IndexMicrosecond-via_dt.strptime()

#start_IndexMicrosecond-via_dt.strpdate()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strpdate("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[us]) for operation on string types')
#end_IndexMicrosecond-via_dt.strpdate()

#start_IndexMicrosecond-via_str.__getitem__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str[-1]
['0' '0' '0']
#end_IndexMicrosecond-via_str.__getitem__()

#start_IndexMicrosecond-via_str.capitalize()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.capitalize()
['1517-04-01t00:00:00.000000' '1517-12-31t00:00:00.000000'
 '1517-06-30t00:00:00.000000']
#end_IndexMicrosecond-via_str.capitalize()

#start_IndexMicrosecond-via_str.center()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.center(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMicrosecond-via_str.center()

#start_IndexMicrosecond-via_str.contains()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.contains('X')
[False False False]
#end_IndexMicrosecond-via_str.contains()

#start_IndexMicrosecond-via_str.count()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.count('X')
[0 0 0]
#end_IndexMicrosecond-via_str.count()

#start_IndexMicrosecond-via_str.decode()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30')).astype(bytes)
>>> ix
<Index>
b'1517-04-01T00:00:00.000000'
b'1517-12-31T00:00:00.000000'
b'1517-06-30T00:00:00.000000'
<|S45>
>>> ix.via_str.decode()
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecond-via_str.decode()

#start_IndexMicrosecond-via_str.encode()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.encode()
[b'1517-04-01T00:00:00.000000' b'1517-12-31T00:00:00.000000'
 b'1517-06-30T00:00:00.000000']
#end_IndexMicrosecond-via_str.encode()

#start_IndexMicrosecond-via_str.endswith()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.endswith(' ')
[False False False]
#end_IndexMicrosecond-via_str.endswith()

#start_IndexMicrosecond-via_str.find()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.find('X')
[-1 -1 -1]
#end_IndexMicrosecond-via_str.find()

#start_IndexMicrosecond-via_str.format()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.format('{:-^10}')
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecond-via_str.format()

#start_IndexMicrosecond-via_str.index()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.index('X')
ValueError('substring not found')
#end_IndexMicrosecond-via_str.index()

#start_IndexMicrosecond-via_str.isalnum()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.isalnum()
[False False False]
#end_IndexMicrosecond-via_str.isalnum()

#start_IndexMicrosecond-via_str.isalpha()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.isalpha()
[False False False]
#end_IndexMicrosecond-via_str.isalpha()

#start_IndexMicrosecond-via_str.isdecimal()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.isdecimal()
[False False False]
#end_IndexMicrosecond-via_str.isdecimal()

#start_IndexMicrosecond-via_str.isdigit()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.isdigit()
[False False False]
#end_IndexMicrosecond-via_str.isdigit()

#start_IndexMicrosecond-via_str.islower()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.islower()
[False False False]
#end_IndexMicrosecond-via_str.islower()

#start_IndexMicrosecond-via_str.isnumeric()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.isnumeric()
[False False False]
#end_IndexMicrosecond-via_str.isnumeric()

#start_IndexMicrosecond-via_str.isspace()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.isspace()
[False False False]
#end_IndexMicrosecond-via_str.isspace()

#start_IndexMicrosecond-via_str.istitle()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.istitle()
[ True  True  True]
#end_IndexMicrosecond-via_str.istitle()

#start_IndexMicrosecond-via_str.isupper()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.isupper()
[ True  True  True]
#end_IndexMicrosecond-via_str.isupper()

#start_IndexMicrosecond-via_str.ljust()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.ljust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMicrosecond-via_str.ljust()

#start_IndexMicrosecond-via_str.len()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.len()
[26 26 26]
#end_IndexMicrosecond-via_str.len()

#start_IndexMicrosecond-via_str.lower()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.lower()
['1517-04-01t00:00:00.000000' '1517-12-31t00:00:00.000000'
 '1517-06-30t00:00:00.000000']
#end_IndexMicrosecond-via_str.lower()

#start_IndexMicrosecond-via_str.lstrip()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.lstrip()
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecond-via_str.lstrip()

#start_IndexMicrosecond-via_str.partition()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.partition('X')
[('1517-04-01T00:00:00.000000', '', '')
 ('1517-12-31T00:00:00.000000', '', '')
 ('1517-06-30T00:00:00.000000', '', '')]
#end_IndexMicrosecond-via_str.partition()

#start_IndexMicrosecond-via_str.replace()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.replace('X', '*')
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecond-via_str.replace()

#start_IndexMicrosecond-via_str.rfind()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.rfind('X')
[-1 -1 -1]
#end_IndexMicrosecond-via_str.rfind()

#start_IndexMicrosecond-via_str.rindex()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.rindex('X')
ValueError('substring not found')
#end_IndexMicrosecond-via_str.rindex()

#start_IndexMicrosecond-via_str.rjust()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.rjust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMicrosecond-via_str.rjust()

#start_IndexMicrosecond-via_str.rpartition()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.rpartition('X')
[('', '', '1517-04-01T00:00:00.000000')
 ('', '', '1517-12-31T00:00:00.000000')
 ('', '', '1517-06-30T00:00:00.000000')]
#end_IndexMicrosecond-via_str.rpartition()

#start_IndexMicrosecond-via_str.rsplit()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.rsplit('X')
[('1517-04-01T00:00:00.000000',) ('1517-12-31T00:00:00.000000',)
 ('1517-06-30T00:00:00.000000',)]
#end_IndexMicrosecond-via_str.rsplit()

#start_IndexMicrosecond-via_str.rstrip()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.rstrip()
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecond-via_str.rstrip()

#start_IndexMicrosecond-via_str.split()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.split('X')
[('1517-04-01T00:00:00.000000',) ('1517-12-31T00:00:00.000000',)
 ('1517-06-30T00:00:00.000000',)]
#end_IndexMicrosecond-via_str.split()

#start_IndexMicrosecond-via_str.startswith()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.startswith('X')
[False False False]
#end_IndexMicrosecond-via_str.startswith()

#start_IndexMicrosecond-via_str.strip()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.strip()
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecond-via_str.strip()

#start_IndexMicrosecond-via_str.swapcase()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.swapcase()
['1517-04-01t00:00:00.000000' '1517-12-31t00:00:00.000000'
 '1517-06-30t00:00:00.000000']
#end_IndexMicrosecond-via_str.swapcase()

#start_IndexMicrosecond-via_str.title()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.title()
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecond-via_str.title()

#start_IndexMicrosecond-via_str.upper()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.upper()
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecond-via_str.upper()

#start_IndexMicrosecond-via_str.zfill()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.zfill(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMicrosecond-via_str.zfill()

#start_IndexMicrosecond-via_re().search()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_re('[X123]').search()
[ True  True  True]
#end_IndexMicrosecond-via_re().search()

#start_IndexMicrosecond-via_re().match()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_re('[X123]').match()
[ True  True  True]
#end_IndexMicrosecond-via_re().match()

#start_IndexMicrosecond-via_re().fullmatch()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_re('123').fullmatch()
[False False False]
#end_IndexMicrosecond-via_re().fullmatch()

#start_IndexMicrosecond-via_re().split()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_re('[X123]').split()
[('', '5', '7-04-0', 'T00:00:00.000000')
 ('', '5', '7-', '', '-', '', 'T00:00:00.000000')
 ('', '5', '7-06-', '0T00:00:00.000000')]
#end_IndexMicrosecond-via_re().split()

#start_IndexMicrosecond-via_re().findall()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_re('[X123]').findall()
[('1', '1', '1') ('1', '1', '1', '2', '3', '1') ('1', '1', '3')]
#end_IndexMicrosecond-via_re().findall()

#start_IndexMicrosecond-via_re().sub()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_re('[X123]').sub('==')
['==5==7-04-0==T00:00:00.000000' '==5==7-====-====T00:00:00.000000'
 '==5==7-06-==0T00:00:00.000000']
#end_IndexMicrosecond-via_re().sub()

#start_IndexMicrosecond-via_re().subn()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecond>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_re('[X123]').subn('==', 1)
[('==517-04-01T00:00:00.000000', 1) ('==517-12-31T00:00:00.000000', 1)
 ('==517-06-30T00:00:00.000000', 1)]
#end_IndexMicrosecond-via_re().subn()

#start_IndexMicrosecond-via_values.apply()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_values.apply(np.sin)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMicrosecond-via_values.apply()

#start_IndexMicrosecond-via_values.__array_ufunc__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> np.sin(ix.via_values)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMicrosecond-via_values.__array_ufunc__()

#start_IndexMicrosecond-via_values.__call__()
>>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> np.sin(ix.via_values(unify_blocks=True))
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMicrosecond-via_values.__call__()

#start_IndexMicrosecondGO-__init__()
>>> sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-__init__()

#start_IndexMicrosecondGO-from_labels()
>>> sf.IndexMicrosecondGO.from_labels(('1517-04-01', '1517-12-31', '1517-06-30'))
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-from_labels()

#start_IndexMicrosecondGO-from_pandas()
>>> ix = pd.Index(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> sf.IndexMicrosecondGO.from_pandas(ix)
<IndexGO>
1517-04-01
1517-12-31
1517-06-30
<object>
#end_IndexMicrosecondGO-from_pandas()

#start_IndexMicrosecondGO-to_pandas()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.to_pandas()
OutOfBoundsDatetime('Out of bounds nanosecond timestamp: 1517-04-01 00:00:00')
#end_IndexMicrosecondGO-to_pandas()

#start_IndexMicrosecondGO-to_series()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.to_series()
<Series>
<Index>
0        1517-04-01T00:00:...
1        1517-12-31T00:00:...
2        1517-06-30T00:00:...
<int64>  <datetime64[us]>
#end_IndexMicrosecondGO-to_series()

#start_IndexMicrosecondGO-STATIC
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.STATIC
False
#end_IndexMicrosecondGO-STATIC

#start_IndexMicrosecondGO-depth
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.depth
1
#end_IndexMicrosecondGO-depth

#start_IndexMicrosecondGO-dtype
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.dtype
datetime64[us]
#end_IndexMicrosecondGO-dtype

#start_IndexMicrosecondGO-index_types
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.index_types
<Series>
<Index>
None     <IndexMicrosecondGO>
<object> <object>
#end_IndexMicrosecondGO-index_types

#start_IndexMicrosecondGO-memory
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.memory
          L    Lu    LM   LMu   LMD LMDu  R    Ru    RM   RMu   RMD RMDu
Name      16   B     16   B     16  B     16   B     16   B     16  B
Map       440  B     440  B     440 B     440  B     440  B     440 B
Labels    120  B     136  B     24  B     120  B     136  B     24  B
Positions 96   B     112  B     0   B     8.19 KB    136  B     24  B
Total     1.11 KB    1.14 KB    948 B     9.21 KB    1.17 KB    972 B
#end_IndexMicrosecondGO-memory

#start_IndexMicrosecondGO-name
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.name
#end_IndexMicrosecondGO-name

#start_IndexMicrosecondGO-names
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.names
('__index0__',)
#end_IndexMicrosecondGO-names

#start_IndexMicrosecondGO-nbytes
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.nbytes
24
#end_IndexMicrosecondGO-nbytes

#start_IndexMicrosecondGO-ndim
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.ndim
1
#end_IndexMicrosecondGO-ndim

#start_IndexMicrosecondGO-positions
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.positions
[0 1 2]
#end_IndexMicrosecondGO-positions

#start_IndexMicrosecondGO-shape
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.shape
(3,)
#end_IndexMicrosecondGO-shape

#start_IndexMicrosecondGO-size
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.size
3
#end_IndexMicrosecondGO-size

#start_IndexMicrosecondGO-__array__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__array__()
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecondGO-__array__()

#start_IndexMicrosecondGO-__array_ufunc__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> np.array((0, 1, 0)) * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[us]')))
#end_IndexMicrosecondGO-__array_ufunc__()

#start_IndexMicrosecondGO-__bool__()
>>> s = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexMicrosecondGO-__bool__()

#start_IndexMicrosecondGO-__copy__()
>>> import copy
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> copy.copy(ix)
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-__copy__()

#start_IndexMicrosecondGO-__deepcopy__()
>>> import copy
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> copy.deepcopy(ix)
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-__deepcopy__()

#start_IndexMicrosecondGO-__len__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> len(ix)
3
#end_IndexMicrosecondGO-__len__()

#start_IndexMicrosecondGO-all()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.all()
True
#end_IndexMicrosecondGO-all()

#start_IndexMicrosecondGO-any()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.any()
True
#end_IndexMicrosecondGO-any()

#start_IndexMicrosecondGO-append()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.append('f')
ValueError('Error parsing datetime string "f" at position 0')
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-append()

#start_IndexMicrosecondGO-astype()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.astype(str)
<IndexGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<<U45>
#end_IndexMicrosecondGO-astype()

#start_IndexMicrosecondGO-copy()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.copy()
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-copy()

#start_IndexMicrosecondGO-cumprod()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.cumprod()
ValueError("could not find a matching type for multiply.accumulate, requested type has type code 'M'")
#end_IndexMicrosecondGO-cumprod()

#start_IndexMicrosecondGO-cumsum()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.cumsum()
ValueError("could not find a matching type for add.accumulate, requested type has type code 'M'")
#end_IndexMicrosecondGO-cumsum()

#start_IndexMicrosecondGO-difference()
>>> ix1 = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexMicrosecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.difference(ix2)
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-difference()

#start_IndexMicrosecondGO-dropfalsy()
>>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMicrosecondGO>
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
<datetime64[us]>
>>> ix.dropfalsy()
<IndexMicrosecondGO>
1620-09-16T00:00:00.000000
1620-11-21T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-dropfalsy()

#start_IndexMicrosecondGO-dropna()
>>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMicrosecondGO>
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
<datetime64[us]>
>>> ix.dropna()
<IndexMicrosecondGO>
1620-09-16T00:00:00.000000
1620-11-21T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-dropna()

#start_IndexMicrosecondGO-equals()
>>> ix1 = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexMicrosecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.equals(ix2)
False
#end_IndexMicrosecondGO-equals()

#start_IndexMicrosecondGO-extend()
>>> ix1 = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexMicrosecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.extend(ix2)
>>> ix1
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
2022-04-01T00:00:00.000000
2021-12-31T00:00:00.000000
2022-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-extend()

#start_IndexMicrosecondGO-fillfalsy()
>>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMicrosecondGO>
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
<datetime64[us]>
>>> ix.fillfalsy('A')
ValueError('Error parsing datetime string "A" at position 0')
#end_IndexMicrosecondGO-fillfalsy()

#start_IndexMicrosecondGO-fillna()
>>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMicrosecondGO>
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
<datetime64[us]>
>>> ix.fillna(0)
<IndexMicrosecondGO>
1620-09-16T00:00:00.000000
1970-01-01T00:00:00.000000
1620-11-21T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-fillna()

#start_IndexMicrosecondGO-head()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.head(2)
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-head()

#start_IndexMicrosecondGO-iloc_searchsorted()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.iloc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexMicrosecondGO-iloc_searchsorted()

#start_IndexMicrosecondGO-intersection()
>>> ix1 = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexMicrosecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.intersection(ix2)
<IndexMicrosecondGO>
<datetime64[us]>
#end_IndexMicrosecondGO-intersection()

#start_IndexMicrosecondGO-isin()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.isin(('1517-06-30',))
[False False False]
#end_IndexMicrosecondGO-isin()

#start_IndexMicrosecondGO-label_widths_at_depth()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> tuple(ix.label_widths_at_depth(0))
((numpy.datetime64('1517-04-01T00:00:00.000000'), 1), (numpy.datetime64('1517-12-31T00:00:00.000000'), 1), (numpy.datetime64('1517-06-30T00:00:00.000000'), 1))
#end_IndexMicrosecondGO-label_widths_at_depth()

#start_IndexMicrosecondGO-level_add()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.level_add('A')
<IndexHierarchyGO>
A                  1517-04-01T00:00:...
A                  1517-12-31T00:00:...
A                  1517-06-30T00:00:...
<<U1>              <datetime64[us]>
#end_IndexMicrosecondGO-level_add()

#start_IndexMicrosecondGO-loc_searchsorted()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.loc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexMicrosecondGO-loc_searchsorted()

#start_IndexMicrosecondGO-loc_to_iloc()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.loc_to_iloc('d')
ValueError('Error parsing datetime string "d" at position 0')
>>> ix.loc_to_iloc(['a', 'e'])
ValueError('Cannot create a NumPy datetime other than NaT with generic units')
>>> ix.loc_to_iloc(slice('c', None))
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexMicrosecondGO-loc_to_iloc()

#start_IndexMicrosecondGO-max()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.max()
1517-12-31T00:00:00.000000
#end_IndexMicrosecondGO-max()

#start_IndexMicrosecondGO-mean()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.mean()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))
#end_IndexMicrosecondGO-mean()

#start_IndexMicrosecondGO-median()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.median()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))
#end_IndexMicrosecondGO-median()

#start_IndexMicrosecondGO-min()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.min()
1517-04-01T00:00:00.000000
#end_IndexMicrosecondGO-min()

#start_IndexMicrosecondGO-prod()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.prod()
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[us]'), dtype('<M8[us]')))
#end_IndexMicrosecondGO-prod()

#start_IndexMicrosecondGO-relabel()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)
<IndexMicrosecondGO>
1970-01-01T00:00:00.000001
1970-01-01T00:00:00.000031
1970-01-01T00:00:00.000030
<datetime64[us]>
#end_IndexMicrosecondGO-relabel()

#start_IndexMicrosecondGO-rename()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.rename('y')
<IndexMicrosecondGO: y>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-rename()

#start_IndexMicrosecondGO-roll()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.roll(2)
<IndexMicrosecondGO>
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
1517-04-01T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-roll()

#start_IndexMicrosecondGO-sample()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.sample(2, seed=0)
<IndexMicrosecondGO>
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-sample()

#start_IndexMicrosecondGO-sort()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.sort()
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-06-30T00:00:00.000000
1517-12-31T00:00:00.000000
<datetime64[us]>
>>> ix.sort(ascending=False)
<IndexMicrosecondGO>
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
1517-04-01T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-sort()

#start_IndexMicrosecondGO-std()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.std()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))
#end_IndexMicrosecondGO-std()

#start_IndexMicrosecondGO-sum()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.sum()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))
#end_IndexMicrosecondGO-sum()

#start_IndexMicrosecondGO-tail()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.tail(2)
<IndexMicrosecondGO>
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-tail()

#start_IndexMicrosecondGO-union()
>>> ix1 = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix2 = sf.IndexMicrosecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.union(ix2)
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-06-30T00:00:00.000000
1517-12-31T00:00:00.000000
2021-12-31T00:00:00.000000
2022-04-01T00:00:00.000000
2022-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-union()

#start_IndexMicrosecondGO-unique()
>>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix
<IndexMicrosecondGO>
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
<datetime64[us]>
>>> ix.unique()
['1620-09-16T00:00:00.000000'                        'NaT'
 '1620-11-21T00:00:00.000000']
#end_IndexMicrosecondGO-unique()

#start_IndexMicrosecondGO-values_at_depth()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values_at_depth(0)
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecondGO-values_at_depth()

#start_IndexMicrosecondGO-var()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.var()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))
#end_IndexMicrosecondGO-var()

#start_IndexMicrosecondGO-__contains__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__contains__('a')
ValueError('Error parsing datetime string "a" at position 0')
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.__contains__('1517-06-30')
False
#end_IndexMicrosecondGO-__contains__()

#start_IndexMicrosecondGO-__iter__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01T00:00:00.000000'), numpy.datetime64('1517-12-31T00:00:00.000000'), numpy.datetime64('1517-06-30T00:00:00.000000'))
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1517-04-01T00:00:00.000000'), numpy.datetime64('1517-12-31T00:00:00.000000'), numpy.datetime64('1517-06-30T00:00:00.000000'))
#end_IndexMicrosecondGO-__iter__()

#start_IndexMicrosecondGO-__reversed__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30T00:00:00.000000'), numpy.datetime64('1517-12-31T00:00:00.000000'), numpy.datetime64('1517-04-01T00:00:00.000000'))
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1517-06-30T00:00:00.000000'), numpy.datetime64('1517-12-31T00:00:00.000000'), numpy.datetime64('1517-04-01T00:00:00.000000'))
#end_IndexMicrosecondGO-__reversed__()

#start_IndexMicrosecondGO-values
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.values
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecondGO-values

#start_IndexMicrosecondGO-interface
>>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.interface
<Frame>
<Index>                              cls_name           group                doc                  <<U18>
<Index: signature>
__init__(labels, *, name, loc_is_... IndexMicrosecondGO Constructor          Initializer. Args...
from_labels(labels, *, name)         IndexMicrosecondGO Constructor          Construct an Inde...
from_pandas(value)                   IndexMicrosecondGO Constructor          Given a Pandas in...
to_html(config, style_config)        IndexMicrosecondGO Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexMicrosecondGO Exporter             Return a complete...
to_pandas()                          IndexMicrosecondGO Exporter             Return a Pandas I...
to_series()                          IndexMicrosecondGO Exporter             Return a Series w...
to_visidata()                        IndexMicrosecondGO Exporter             Open an interacti...
STATIC                               IndexMicrosecondGO Attribute            bool(x) -> bool R...
depth                                IndexMicrosecondGO Attribute            int([x]) -> integ...
dtype                                IndexMicrosecondGO Attribute            Return the dtype ...
index_types                          IndexMicrosecondGO Attribute            Return a Series o...
memory                               IndexMicrosecondGO Attribute            Return a MemoryDi...
mloc                                 IndexMicrosecondGO Attribute            The memory locati...
name                                 IndexMicrosecondGO Attribute            A hashable label ...
names                                IndexMicrosecondGO Attribute            Provide a suitabl...
nbytes                               IndexMicrosecondGO Attribute            Return the total ...
...                                  ...                ...                  ...
via_str.rpartition(sep)              IndexMicrosecondGO Accessor String      Partition (split)...
via_str.rsplit(sep, maxsplit)        IndexMicrosecondGO Accessor String      For each element,...
via_str.rstrip(chars)                IndexMicrosecondGO Accessor String      For each element,...
via_str.split(sep, maxsplit)         IndexMicrosecondGO Accessor String      For each element,...
via_str.startswith(prefix, start,... IndexMicrosecondGO Accessor String      Returns a contain...
via_str.strip(chars)                 IndexMicrosecondGO Accessor String      For each element,...
via_str.swapcase()                   IndexMicrosecondGO Accessor String      Return a containe...
via_str.title()                      IndexMicrosecondGO Accessor String      Return a containe...
via_str.upper()                      IndexMicrosecondGO Accessor String      Return a containe...
via_str.zfill(width)                 IndexMicrosecondGO Accessor String      Return the string...
via_re(pattern, flags).search(pos... IndexMicrosecondGO Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexMicrosecondGO Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexMicrosecondGO Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexMicrosecondGO Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexMicrosecondGO Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexMicrosecondGO Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexMicrosecondGO Accessor Regular ... Perform the same ...
<<U63>                               <<U18>             <<U27>               <<U83>
#end_IndexMicrosecondGO-interface

#start_IndexMicrosecondGO-__repr__()
>>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> repr(ix)
<IndexMicrosecondGO>
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-__repr__()

#start_IndexMicrosecondGO-__str__()
>>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> str(ix)
<IndexMicrosecondGO>
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-__str__()

#start_IndexMicrosecondGO-display()
>>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display()
<IndexMicrosecondGO>
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
<datetime64[us]>
>>> ix.display(sf.DisplayConfig(type_show=False))
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
#end_IndexMicrosecondGO-display()

#start_IndexMicrosecondGO-display_tall()
>>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_tall()
<IndexMicrosecondGO>
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-display_tall()

#start_IndexMicrosecondGO-display_wide()
>>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))
>>> ix.display_wide()
<IndexMicrosecondGO>
1620-09-16T00:00:00.000000
NaT
1620-11-21T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-display_wide()

#start_IndexMicrosecondGO-drop.iloc[]
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.drop.iloc[1]
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.drop.iloc[1:]
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
<datetime64[us]>
>>> ix.drop.iloc[[0, 2]]
<IndexMicrosecondGO>
1517-12-31T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-drop.iloc[]

#start_IndexMicrosecondGO-drop.loc[]
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.drop.loc['1517-06-30']
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
<datetime64[us]>
>>> ix.drop.loc['1517-06-30':]
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-drop.loc[]

#start_IndexMicrosecondGO-[]
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix[1]
1517-12-31T00:00:00.000000
>>> ix[1:]
<IndexMicrosecondGO>
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix[[0, 2]]
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-[]

#start_IndexMicrosecondGO-iloc[]
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iloc[1]
1517-12-31T00:00:00.000000
>>> ix.iloc[1:]
<IndexMicrosecondGO>
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.iloc[[0, 2]]
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-iloc[]

#start_IndexMicrosecondGO-loc[]
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.loc['1517-06-30']
<IndexMicrosecondGO>
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.loc['1517-06-30':]
<IndexMicrosecondGO>
1517-06-30T00:00:00.000000
<datetime64[us]>
#end_IndexMicrosecondGO-loc[]

#start_IndexMicrosecondGO-iter_label()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label())
(numpy.datetime64('1517-04-01T00:00:00.000000'), numpy.datetime64('1517-12-31T00:00:00.000000'), numpy.datetime64('1517-06-30T00:00:00.000000'))
#end_IndexMicrosecondGO-iter_label()

#start_IndexMicrosecondGO-iter_label().apply()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)
[1517 1517 1517]
#end_IndexMicrosecondGO-iter_label().apply()

#start_IndexMicrosecondGO-iter_label().apply_iter()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))
(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 31, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))
#end_IndexMicrosecondGO-iter_label().apply_iter()

#start_IndexMicrosecondGO-iter_label().apply_iter_items()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))
((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 31, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))
#end_IndexMicrosecondGO-iter_label().apply_iter_items()

#start_IndexMicrosecondGO-iter_label().apply_pool()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)
[ 4 12  6]
#end_IndexMicrosecondGO-iter_label().apply_pool()

#start_IndexMicrosecondGO-__add__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix + 2
['1517-04-01T00:00:00.000002' '1517-12-31T00:00:00.000002'
 '1517-06-30T00:00:00.000002']
#end_IndexMicrosecondGO-__add__()

#start_IndexMicrosecondGO-__and__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix & True
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix & (False, True)
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMicrosecondGO-__and__()

#start_IndexMicrosecondGO-__eq__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix == '1517-06-30'
[False False  True]
#end_IndexMicrosecondGO-__eq__()

#start_IndexMicrosecondGO-__floordiv__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix // '1517-06-30'
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMicrosecondGO-__floordiv__()

#start_IndexMicrosecondGO-__ge__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix >= '1517-06-30'
[False  True  True]
#end_IndexMicrosecondGO-__ge__()

#start_IndexMicrosecondGO-__gt__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix > '1517-06-30'
[False  True False]
#end_IndexMicrosecondGO-__gt__()

#start_IndexMicrosecondGO-__le__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix <= '1517-06-30'
[ True False  True]
#end_IndexMicrosecondGO-__le__()

#start_IndexMicrosecondGO-__lt__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix < '1517-06-30'
[ True False False]
#end_IndexMicrosecondGO-__lt__()

#start_IndexMicrosecondGO-__matmul__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexMicrosecondGO-__matmul__()

#start_IndexMicrosecondGO-__mod__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix % '1517-06-30'
UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMicrosecondGO-__mod__()

#start_IndexMicrosecondGO-__mul__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix * '1517-06-30'
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMicrosecondGO-__mul__()

#start_IndexMicrosecondGO-__ne__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix != '1517-06-30'
[ True  True False]
#end_IndexMicrosecondGO-__ne__()

#start_IndexMicrosecondGO-__or__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix | True
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix | (False, True)
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMicrosecondGO-__or__()

#start_IndexMicrosecondGO-__pow__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix ** '1517-06-30'
TypeError("ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMicrosecondGO-__pow__()

#start_IndexMicrosecondGO-__radd__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' + ix
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMicrosecondGO-__radd__()

#start_IndexMicrosecondGO-__rfloordiv__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' // ix
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMicrosecondGO-__rfloordiv__()

#start_IndexMicrosecondGO-__rmatmul__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexMicrosecondGO-__rmatmul__()

#start_IndexMicrosecondGO-__rmul__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMicrosecondGO-__rmul__()

#start_IndexMicrosecondGO-__rshift__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix >> 1
TypeError("ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMicrosecondGO-__rshift__()

#start_IndexMicrosecondGO-__rsub__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' - ix
[  90 -184    0]
#end_IndexMicrosecondGO-__rsub__()

#start_IndexMicrosecondGO-__rtruediv__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> '1517-06-30' / ix
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMicrosecondGO-__rtruediv__()

#start_IndexMicrosecondGO-__sub__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix - 2
['1517-03-31T23:59:59.999998' '1517-12-30T23:59:59.999998'
 '1517-06-29T23:59:59.999998']
#end_IndexMicrosecondGO-__sub__()

#start_IndexMicrosecondGO-__truediv__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix / '1517-06-30'
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexMicrosecondGO-__truediv__()

#start_IndexMicrosecondGO-__xor__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix ^ True
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix ^ (False, True)
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMicrosecondGO-__xor__()

#start_IndexMicrosecondGO-__abs__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> abs(ix)
UFuncTypeError(<ufunc 'absolute'>, (dtype('<M8[us]'), dtype('<M8[us]')))
#end_IndexMicrosecondGO-__abs__()

#start_IndexMicrosecondGO-__invert__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ~ix
TypeError("ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMicrosecondGO-__invert__()

#start_IndexMicrosecondGO-__neg__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> -ix
UFuncTypeError(<ufunc 'negative'>, (dtype('<M8[us]'), dtype('<M8[us]')))
#end_IndexMicrosecondGO-__neg__()

#start_IndexMicrosecondGO-__pos__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> +ix
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecondGO-__pos__()

#start_IndexMicrosecondGO-via_dt.year
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.year
[1517 1517 1517]
#end_IndexMicrosecondGO-via_dt.year

#start_IndexMicrosecondGO-via_dt.month
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.month
[ 4 12  6]
#end_IndexMicrosecondGO-via_dt.month

#start_IndexMicrosecondGO-via_dt.day
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.day
[ 1 31 30]
#end_IndexMicrosecondGO-via_dt.day

#start_IndexMicrosecondGO-via_dt.hour
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.hour
[0 0 0]
#end_IndexMicrosecondGO-via_dt.hour

#start_IndexMicrosecondGO-via_dt.minute
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.minute
[0 0 0]
#end_IndexMicrosecondGO-via_dt.minute

#start_IndexMicrosecondGO-via_dt.second
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.second
[0 0 0]
#end_IndexMicrosecondGO-via_dt.second

#start_IndexMicrosecondGO-via_dt.weekday()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.weekday()
[6 0 5]
#end_IndexMicrosecondGO-via_dt.weekday()

#start_IndexMicrosecondGO-via_dt.quarter()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.quarter()
[2 4 2]
#end_IndexMicrosecondGO-via_dt.quarter()

#start_IndexMicrosecondGO-via_dt.is_month_end()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_month_end()
[False  True  True]
#end_IndexMicrosecondGO-via_dt.is_month_end()

#start_IndexMicrosecondGO-via_dt.is_month_start()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_month_start()
[ True False False]
#end_IndexMicrosecondGO-via_dt.is_month_start()

#start_IndexMicrosecondGO-via_dt.is_year_end()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_year_end()
[False  True False]
#end_IndexMicrosecondGO-via_dt.is_year_end()

#start_IndexMicrosecondGO-via_dt.is_year_start()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_year_start()
[False False False]
#end_IndexMicrosecondGO-via_dt.is_year_start()

#start_IndexMicrosecondGO-via_dt.is_quarter_end()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_quarter_end()
[False  True  True]
#end_IndexMicrosecondGO-via_dt.is_quarter_end()

#start_IndexMicrosecondGO-via_dt.is_quarter_start()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.is_quarter_start()
[ True False False]
#end_IndexMicrosecondGO-via_dt.is_quarter_start()

#start_IndexMicrosecondGO-via_dt.timetuple()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.timetuple()
[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=365, tm_isdst=-1)
 time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]
#end_IndexMicrosecondGO-via_dt.timetuple()

#start_IndexMicrosecondGO-via_dt.isoformat()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.isoformat()
['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']
#end_IndexMicrosecondGO-via_dt.isoformat()

#start_IndexMicrosecondGO-via_dt.fromisoformat()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.fromisoformat()
RuntimeError('invalid dtype (datetime64[us]) for operation on string types')
#end_IndexMicrosecondGO-via_dt.fromisoformat()

#start_IndexMicrosecondGO-via_dt.strftime()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strftime("%A | %B")
['Sunday | April' 'Monday | December' 'Saturday | June']
#end_IndexMicrosecondGO-via_dt.strftime()

#start_IndexMicrosecondGO-via_dt.strptime()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strptime("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[us]) for operation on string types')
#end_IndexMicrosecondGO-via_dt.strptime()

#start_IndexMicrosecondGO-via_dt.strpdate()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_dt.strpdate("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[us]) for operation on string types')
#end_IndexMicrosecondGO-via_dt.strpdate()

#start_IndexMicrosecondGO-via_str.__getitem__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str[-1]
['0' '0' '0']
#end_IndexMicrosecondGO-via_str.__getitem__()

#start_IndexMicrosecondGO-via_str.capitalize()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.capitalize()
['1517-04-01t00:00:00.000000' '1517-12-31t00:00:00.000000'
 '1517-06-30t00:00:00.000000']
#end_IndexMicrosecondGO-via_str.capitalize()

#start_IndexMicrosecondGO-via_str.center()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.center(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMicrosecondGO-via_str.center()

#start_IndexMicrosecondGO-via_str.contains()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.contains('X')
[False False False]
#end_IndexMicrosecondGO-via_str.contains()

#start_IndexMicrosecondGO-via_str.count()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.count('X')
[0 0 0]
#end_IndexMicrosecondGO-via_str.count()

#start_IndexMicrosecondGO-via_str.decode()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30')).astype(bytes)
>>> ix
<IndexGO>
b'1517-04-01T00:00:00.000000'
b'1517-12-31T00:00:00.000000'
b'1517-06-30T00:00:00.000000'
<|S45>
>>> ix.via_str.decode()
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecondGO-via_str.decode()

#start_IndexMicrosecondGO-via_str.encode()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.encode()
[b'1517-04-01T00:00:00.000000' b'1517-12-31T00:00:00.000000'
 b'1517-06-30T00:00:00.000000']
#end_IndexMicrosecondGO-via_str.encode()

#start_IndexMicrosecondGO-via_str.endswith()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.endswith(' ')
[False False False]
#end_IndexMicrosecondGO-via_str.endswith()

#start_IndexMicrosecondGO-via_str.find()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.find('X')
[-1 -1 -1]
#end_IndexMicrosecondGO-via_str.find()

#start_IndexMicrosecondGO-via_str.format()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.format('{:-^10}')
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecondGO-via_str.format()

#start_IndexMicrosecondGO-via_str.index()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.index('X')
ValueError('substring not found')
#end_IndexMicrosecondGO-via_str.index()

#start_IndexMicrosecondGO-via_str.isalnum()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.isalnum()
[False False False]
#end_IndexMicrosecondGO-via_str.isalnum()

#start_IndexMicrosecondGO-via_str.isalpha()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.isalpha()
[False False False]
#end_IndexMicrosecondGO-via_str.isalpha()

#start_IndexMicrosecondGO-via_str.isdecimal()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.isdecimal()
[False False False]
#end_IndexMicrosecondGO-via_str.isdecimal()

#start_IndexMicrosecondGO-via_str.isdigit()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.isdigit()
[False False False]
#end_IndexMicrosecondGO-via_str.isdigit()

#start_IndexMicrosecondGO-via_str.islower()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.islower()
[False False False]
#end_IndexMicrosecondGO-via_str.islower()

#start_IndexMicrosecondGO-via_str.isnumeric()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.isnumeric()
[False False False]
#end_IndexMicrosecondGO-via_str.isnumeric()

#start_IndexMicrosecondGO-via_str.isspace()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.isspace()
[False False False]
#end_IndexMicrosecondGO-via_str.isspace()

#start_IndexMicrosecondGO-via_str.istitle()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.istitle()
[ True  True  True]
#end_IndexMicrosecondGO-via_str.istitle()

#start_IndexMicrosecondGO-via_str.isupper()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.isupper()
[ True  True  True]
#end_IndexMicrosecondGO-via_str.isupper()

#start_IndexMicrosecondGO-via_str.ljust()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.ljust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMicrosecondGO-via_str.ljust()

#start_IndexMicrosecondGO-via_str.len()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.len()
[26 26 26]
#end_IndexMicrosecondGO-via_str.len()

#start_IndexMicrosecondGO-via_str.lower()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.lower()
['1517-04-01t00:00:00.000000' '1517-12-31t00:00:00.000000'
 '1517-06-30t00:00:00.000000']
#end_IndexMicrosecondGO-via_str.lower()

#start_IndexMicrosecondGO-via_str.lstrip()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.lstrip()
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecondGO-via_str.lstrip()

#start_IndexMicrosecondGO-via_str.partition()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.partition('X')
[('1517-04-01T00:00:00.000000', '', '')
 ('1517-12-31T00:00:00.000000', '', '')
 ('1517-06-30T00:00:00.000000', '', '')]
#end_IndexMicrosecondGO-via_str.partition()

#start_IndexMicrosecondGO-via_str.replace()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.replace('X', '*')
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecondGO-via_str.replace()

#start_IndexMicrosecondGO-via_str.rfind()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.rfind('X')
[-1 -1 -1]
#end_IndexMicrosecondGO-via_str.rfind()

#start_IndexMicrosecondGO-via_str.rindex()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.rindex('X')
ValueError('substring not found')
#end_IndexMicrosecondGO-via_str.rindex()

#start_IndexMicrosecondGO-via_str.rjust()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.rjust(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMicrosecondGO-via_str.rjust()

#start_IndexMicrosecondGO-via_str.rpartition()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.rpartition('X')
[('', '', '1517-04-01T00:00:00.000000')
 ('', '', '1517-12-31T00:00:00.000000')
 ('', '', '1517-06-30T00:00:00.000000')]
#end_IndexMicrosecondGO-via_str.rpartition()

#start_IndexMicrosecondGO-via_str.rsplit()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.rsplit('X')
[('1517-04-01T00:00:00.000000',) ('1517-12-31T00:00:00.000000',)
 ('1517-06-30T00:00:00.000000',)]
#end_IndexMicrosecondGO-via_str.rsplit()

#start_IndexMicrosecondGO-via_str.rstrip()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.rstrip()
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecondGO-via_str.rstrip()

#start_IndexMicrosecondGO-via_str.split()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.split('X')
[('1517-04-01T00:00:00.000000',) ('1517-12-31T00:00:00.000000',)
 ('1517-06-30T00:00:00.000000',)]
#end_IndexMicrosecondGO-via_str.split()

#start_IndexMicrosecondGO-via_str.startswith()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.startswith('X')
[False False False]
#end_IndexMicrosecondGO-via_str.startswith()

#start_IndexMicrosecondGO-via_str.strip()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.strip()
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecondGO-via_str.strip()

#start_IndexMicrosecondGO-via_str.swapcase()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.swapcase()
['1517-04-01t00:00:00.000000' '1517-12-31t00:00:00.000000'
 '1517-06-30t00:00:00.000000']
#end_IndexMicrosecondGO-via_str.swapcase()

#start_IndexMicrosecondGO-via_str.title()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.title()
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecondGO-via_str.title()

#start_IndexMicrosecondGO-via_str.upper()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.upper()
['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'
 '1517-06-30T00:00:00.000000']
#end_IndexMicrosecondGO-via_str.upper()

#start_IndexMicrosecondGO-via_str.zfill()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_str.zfill(8)
['1517-04-' '1517-12-' '1517-06-']
#end_IndexMicrosecondGO-via_str.zfill()

#start_IndexMicrosecondGO-via_re().search()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_re('[X123]').search()
[ True  True  True]
#end_IndexMicrosecondGO-via_re().search()

#start_IndexMicrosecondGO-via_re().match()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_re('[X123]').match()
[ True  True  True]
#end_IndexMicrosecondGO-via_re().match()

#start_IndexMicrosecondGO-via_re().fullmatch()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_re('123').fullmatch()
[False False False]
#end_IndexMicrosecondGO-via_re().fullmatch()

#start_IndexMicrosecondGO-via_re().split()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_re('[X123]').split()
[('', '5', '7-04-0', 'T00:00:00.000000')
 ('', '5', '7-', '', '-', '', 'T00:00:00.000000')
 ('', '5', '7-06-', '0T00:00:00.000000')]
#end_IndexMicrosecondGO-via_re().split()

#start_IndexMicrosecondGO-via_re().findall()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_re('[X123]').findall()
[('1', '1', '1') ('1', '1', '1', '2', '3', '1') ('1', '1', '3')]
#end_IndexMicrosecondGO-via_re().findall()

#start_IndexMicrosecondGO-via_re().sub()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_re('[X123]').sub('==')
['==5==7-04-0==T00:00:00.000000' '==5==7-====-====T00:00:00.000000'
 '==5==7-06-==0T00:00:00.000000']
#end_IndexMicrosecondGO-via_re().sub()

#start_IndexMicrosecondGO-via_re().subn()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix
<IndexMicrosecondGO>
1517-04-01T00:00:00.000000
1517-12-31T00:00:00.000000
1517-06-30T00:00:00.000000
<datetime64[us]>
>>> ix.via_re('[X123]').subn('==', 1)
[('==517-04-01T00:00:00.000000', 1) ('==517-12-31T00:00:00.000000', 1)
 ('==517-06-30T00:00:00.000000', 1)]
#end_IndexMicrosecondGO-via_re().subn()

#start_IndexMicrosecondGO-via_values.apply()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> ix.via_values.apply(np.sin)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMicrosecondGO-via_values.apply()

#start_IndexMicrosecondGO-via_values.__array_ufunc__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> np.sin(ix.via_values)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMicrosecondGO-via_values.__array_ufunc__()

#start_IndexMicrosecondGO-via_values.__call__()
>>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))
>>> np.sin(ix.via_values(unify_blocks=True))
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexMicrosecondGO-via_values.__call__()

#start_IndexNanosecond-__init__()
>>> sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-__init__()

#start_IndexNanosecond-from_labels()
>>> sf.IndexNanosecond.from_labels(('1789-05-05', '1789-12-31', '1799-11-09'))
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-from_labels()

#start_IndexNanosecond-from_pandas()
>>> ix = pd.Index(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> sf.IndexNanosecond.from_pandas(ix)
<Index>
1789-05-05
1789-12-31
1799-11-09
<object>
#end_IndexNanosecond-from_pandas()

#start_IndexNanosecond-to_pandas()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.to_pandas()
DatetimeIndex(['1789-05-05', '1789-12-31', '1799-11-09'], dtype='datetime64[ns]', freq=None)
#end_IndexNanosecond-to_pandas()

#start_IndexNanosecond-to_series()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.to_series()
<Series>
<Index>
0        1789-05-05T00:00:...
1        1789-12-31T00:00:...
2        1799-11-09T00:00:...
<int64>  <datetime64[ns]>
#end_IndexNanosecond-to_series()

#start_IndexNanosecond-STATIC
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.STATIC
True
#end_IndexNanosecond-STATIC

#start_IndexNanosecond-depth
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.depth
1
#end_IndexNanosecond-depth

#start_IndexNanosecond-dtype
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.dtype
datetime64[ns]
#end_IndexNanosecond-dtype

#start_IndexNanosecond-index_types
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.index_types
<Series>
<Index>
None     <IndexNanosecond>
<object> <object>
#end_IndexNanosecond-index_types

#start_IndexNanosecond-memory
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.memory
          L   Lu    LM  LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu
Name      16  B     16  B     16  B     16   B     16  B     16  B
Map       440 B     440 B     440 B     440  B     440 B     440 B
Labels    120 B     136 B     24  B     120  B     136 B     24  B
Positions 96  B     112 B     0   B     8.19 KB    136 B     24  B
Total     768 B     800 B     576 B     8.84 KB    824 B     600 B
#end_IndexNanosecond-memory

#start_IndexNanosecond-name
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.name
#end_IndexNanosecond-name

#start_IndexNanosecond-names
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.names
('__index0__',)
#end_IndexNanosecond-names

#start_IndexNanosecond-nbytes
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.nbytes
24
#end_IndexNanosecond-nbytes

#start_IndexNanosecond-ndim
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.ndim
1
#end_IndexNanosecond-ndim

#start_IndexNanosecond-positions
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.positions
[0 1 2]
#end_IndexNanosecond-positions

#start_IndexNanosecond-shape
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.shape
(3,)
#end_IndexNanosecond-shape

#start_IndexNanosecond-size
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.size
3
#end_IndexNanosecond-size

#start_IndexNanosecond-__array__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.__array__()
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecond-__array__()

#start_IndexNanosecond-__array_ufunc__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> np.array((0, 1, 0)) * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[ns]')))
#end_IndexNanosecond-__array_ufunc__()

#start_IndexNanosecond-__bool__()
>>> s = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexNanosecond-__bool__()

#start_IndexNanosecond-__copy__()
>>> import copy
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> copy.copy(ix)
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-__copy__()

#start_IndexNanosecond-__deepcopy__()
>>> import copy
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> copy.deepcopy(ix)
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-__deepcopy__()

#start_IndexNanosecond-__len__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> len(ix)
3
#end_IndexNanosecond-__len__()

#start_IndexNanosecond-all()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.all()
True
#end_IndexNanosecond-all()

#start_IndexNanosecond-any()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.any()
True
#end_IndexNanosecond-any()

#start_IndexNanosecond-astype()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.astype(str)
<Index>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<<U48>
#end_IndexNanosecond-astype()

#start_IndexNanosecond-copy()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.copy()
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-copy()

#start_IndexNanosecond-cumprod()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.cumprod()
ValueError("could not find a matching type for multiply.accumulate, requested type has type code 'M'")
#end_IndexNanosecond-cumprod()

#start_IndexNanosecond-cumsum()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.cumsum()
ValueError("could not find a matching type for add.accumulate, requested type has type code 'M'")
#end_IndexNanosecond-cumsum()

#start_IndexNanosecond-difference()
>>> ix1 = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix2 = sf.IndexNanosecond(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.difference(ix2)
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-difference()

#start_IndexNanosecond-dropfalsy()
>>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.dropfalsy()
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-dropfalsy()

#start_IndexNanosecond-dropna()
>>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.dropna()
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-dropna()

#start_IndexNanosecond-equals()
>>> ix1 = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix2 = sf.IndexNanosecond(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.equals(ix2)
False
#end_IndexNanosecond-equals()

#start_IndexNanosecond-fillfalsy()
>>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.fillfalsy('A')
ValueError('Error parsing datetime string "A" at position 0')
#end_IndexNanosecond-fillfalsy()

#start_IndexNanosecond-fillna()
>>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.fillna(0)
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1970-01-01T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-fillna()

#start_IndexNanosecond-head()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.head(2)
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-head()

#start_IndexNanosecond-iloc_searchsorted()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.iloc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexNanosecond-iloc_searchsorted()

#start_IndexNanosecond-intersection()
>>> ix1 = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix2 = sf.IndexNanosecond(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.intersection(ix2)
<IndexNanosecond>
<datetime64[ns]>
#end_IndexNanosecond-intersection()

#start_IndexNanosecond-isin()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.isin(('1789-05-05',))
[False False False]
#end_IndexNanosecond-isin()

#start_IndexNanosecond-label_widths_at_depth()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> tuple(ix.label_widths_at_depth(0))
((numpy.datetime64('1789-05-05T00:00:00.000000000'), 1), (numpy.datetime64('1789-12-31T00:00:00.000000000'), 1), (numpy.datetime64('1799-11-09T00:00:00.000000000'), 1))
#end_IndexNanosecond-label_widths_at_depth()

#start_IndexNanosecond-level_add()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.level_add('A')
<IndexHierarchy>
A                1789-05-05T00:00:...
A                1789-12-31T00:00:...
A                1799-11-09T00:00:...
<<U1>            <datetime64[ns]>
#end_IndexNanosecond-level_add()

#start_IndexNanosecond-loc_searchsorted()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.loc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexNanosecond-loc_searchsorted()

#start_IndexNanosecond-loc_to_iloc()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.loc_to_iloc('d')
ValueError('Error parsing datetime string "d" at position 0')
>>> ix.loc_to_iloc(['a', 'e'])
ValueError('Cannot create a NumPy datetime other than NaT with generic units')
>>> ix.loc_to_iloc(slice('c', None))
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexNanosecond-loc_to_iloc()

#start_IndexNanosecond-max()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.max()
1799-11-09T00:00:00.000000000
#end_IndexNanosecond-max()

#start_IndexNanosecond-mean()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.mean()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))
#end_IndexNanosecond-mean()

#start_IndexNanosecond-median()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.median()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))
#end_IndexNanosecond-median()

#start_IndexNanosecond-min()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.min()
1789-05-05T00:00:00.000000000
#end_IndexNanosecond-min()

#start_IndexNanosecond-prod()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.prod()
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))
#end_IndexNanosecond-prod()

#start_IndexNanosecond-relabel()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)
<IndexNanosecond>
1970-01-01T00:00:00.000000005
1970-01-01T00:00:00.000000031
1970-01-01T00:00:00.000000009
<datetime64[ns]>
#end_IndexNanosecond-relabel()

#start_IndexNanosecond-rename()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.rename('y')
<IndexNanosecond: y>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-rename()

#start_IndexNanosecond-roll()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.roll(2)
<IndexNanosecond>
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
1789-05-05T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-roll()

#start_IndexNanosecond-sample()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.sample(2, seed=0)
<IndexNanosecond>
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-sample()

#start_IndexNanosecond-sort()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.sort()
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.sort(ascending=False)
<IndexNanosecond>
1799-11-09T00:00:00.000000000
1789-12-31T00:00:00.000000000
1789-05-05T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-sort()

#start_IndexNanosecond-std()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.std()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))
#end_IndexNanosecond-std()

#start_IndexNanosecond-sum()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.sum()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))
#end_IndexNanosecond-sum()

#start_IndexNanosecond-tail()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.tail(2)
<IndexNanosecond>
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-tail()

#start_IndexNanosecond-union()
>>> ix1 = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix2 = sf.IndexNanosecond(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.union(ix2)
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
2021-12-31T00:00:00.000000000
2022-04-01T00:00:00.000000000
2022-06-30T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-union()

#start_IndexNanosecond-unique()
>>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.unique()
['1789-05-05T00:00:00.000000000'                           'NaT'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecond-unique()

#start_IndexNanosecond-values_at_depth()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.values_at_depth(0)
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecond-values_at_depth()

#start_IndexNanosecond-var()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.var()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))
#end_IndexNanosecond-var()

#start_IndexNanosecond-__contains__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.__contains__('a')
ValueError('Error parsing datetime string "a" at position 0')
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.__contains__('1789-05-05')
False
#end_IndexNanosecond-__contains__()

#start_IndexNanosecond-__iter__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1789-05-05T00:00:00.000000000'), numpy.datetime64('1789-12-31T00:00:00.000000000'), numpy.datetime64('1799-11-09T00:00:00.000000000'))
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1789-05-05T00:00:00.000000000'), numpy.datetime64('1789-12-31T00:00:00.000000000'), numpy.datetime64('1799-11-09T00:00:00.000000000'))
#end_IndexNanosecond-__iter__()

#start_IndexNanosecond-__reversed__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1799-11-09T00:00:00.000000000'), numpy.datetime64('1789-12-31T00:00:00.000000000'), numpy.datetime64('1789-05-05T00:00:00.000000000'))
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1799-11-09T00:00:00.000000000'), numpy.datetime64('1789-12-31T00:00:00.000000000'), numpy.datetime64('1789-05-05T00:00:00.000000000'))
#end_IndexNanosecond-__reversed__()

#start_IndexNanosecond-values
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.values
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.values
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecond-values

#start_IndexNanosecond-interface
>>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))
>>> ix.interface
<Frame>
<Index>                              cls_name        group                doc                  <<U18>
<Index: signature>
__init__(labels, *, name, loc_is_... IndexNanosecond Constructor          Initializer. Args...
from_labels(labels, *, name)         IndexNanosecond Constructor          Construct an Inde...
from_pandas(value)                   IndexNanosecond Constructor          Given a Pandas in...
to_html(config, style_config)        IndexNanosecond Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexNanosecond Exporter             Return a complete...
to_pandas()                          IndexNanosecond Exporter             Return a Pandas I...
to_series()                          IndexNanosecond Exporter             Return a Series w...
to_visidata()                        IndexNanosecond Exporter             Open an interacti...
STATIC                               IndexNanosecond Attribute            bool(x) -> bool R...
depth                                IndexNanosecond Attribute            int([x]) -> integ...
dtype                                IndexNanosecond Attribute            Return the dtype ...
index_types                          IndexNanosecond Attribute            Return a Series o...
memory                               IndexNanosecond Attribute            Return a MemoryDi...
mloc                                 IndexNanosecond Attribute            The memory locati...
name                                 IndexNanosecond Attribute            A hashable label ...
names                                IndexNanosecond Attribute            Provide a suitabl...
nbytes                               IndexNanosecond Attribute            Return the total ...
...                                  ...             ...                  ...
via_str.rpartition(sep)              IndexNanosecond Accessor String      Partition (split)...
via_str.rsplit(sep, maxsplit)        IndexNanosecond Accessor String      For each element,...
via_str.rstrip(chars)                IndexNanosecond Accessor String      For each element,...
via_str.split(sep, maxsplit)         IndexNanosecond Accessor String      For each element,...
via_str.startswith(prefix, start,... IndexNanosecond Accessor String      Returns a contain...
via_str.strip(chars)                 IndexNanosecond Accessor String      For each element,...
via_str.swapcase()                   IndexNanosecond Accessor String      Return a containe...
via_str.title()                      IndexNanosecond Accessor String      Return a containe...
via_str.upper()                      IndexNanosecond Accessor String      Return a containe...
via_str.zfill(width)                 IndexNanosecond Accessor String      Return the string...
via_re(pattern, flags).search(pos... IndexNanosecond Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexNanosecond Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexNanosecond Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexNanosecond Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexNanosecond Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexNanosecond Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexNanosecond Accessor Regular ... Perform the same ...
<<U63>                               <<U15>          <<U27>               <<U83>
#end_IndexNanosecond-interface

#start_IndexNanosecond-__repr__()
>>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))
>>> repr(ix)
<IndexNanosecond>
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-__repr__()

#start_IndexNanosecond-__str__()
>>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))
>>> str(ix)
<IndexNanosecond>
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-__str__()

#start_IndexNanosecond-display()
>>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))
>>> ix.display()
<IndexNanosecond>
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.display(sf.DisplayConfig(type_show=False))
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
#end_IndexNanosecond-display()

#start_IndexNanosecond-display_tall()
>>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))
>>> ix.display_tall()
<IndexNanosecond>
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-display_tall()

#start_IndexNanosecond-display_wide()
>>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))
>>> ix.display_wide()
<IndexNanosecond>
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-display_wide()

#start_IndexNanosecond-drop.iloc[]
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.drop.iloc[1]
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.drop.iloc[1:]
<IndexNanosecond>
1789-05-05T00:00:00.000000000
<datetime64[ns]>
>>> ix.drop.iloc[[0, 2]]
<IndexNanosecond>
1789-12-31T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-drop.iloc[]

#start_IndexNanosecond-drop.loc[]
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.drop.loc['1789-05-05']
<IndexNanosecond>
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.drop.loc['1789-05-05':]
<IndexNanosecond>
<datetime64[ns]>
#end_IndexNanosecond-drop.loc[]

#start_IndexNanosecond-[]
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix[1]
1789-12-31T00:00:00.000000000
>>> ix[1:]
<IndexNanosecond>
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix[[0, 2]]
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-[]

#start_IndexNanosecond-iloc[]
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.iloc[1]
1789-12-31T00:00:00.000000000
>>> ix.iloc[1:]
<IndexNanosecond>
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.iloc[[0, 2]]
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-iloc[]

#start_IndexNanosecond-loc[]
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.loc['1789-05-05']
<IndexNanosecond>
1789-05-05T00:00:00.000000000
<datetime64[ns]>
>>> ix.loc['1789-05-05':]
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecond-loc[]

#start_IndexNanosecond-iter_label()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> tuple(ix.iter_label())
(numpy.datetime64('1789-05-05T00:00:00.000000000'), numpy.datetime64('1789-12-31T00:00:00.000000000'), numpy.datetime64('1799-11-09T00:00:00.000000000'))
#end_IndexNanosecond-iter_label()

#start_IndexNanosecond-iter_label().apply()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)
[1789 1789 1799]
#end_IndexNanosecond-iter_label().apply()

#start_IndexNanosecond-iter_label().apply_iter()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))
(datetime.datetime(1789, 5, 5, 0, 0), datetime.datetime(1789, 12, 31, 0, 0), datetime.datetime(1799, 11, 9, 0, 0))
#end_IndexNanosecond-iter_label().apply_iter()

#start_IndexNanosecond-iter_label().apply_iter_items()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))
((0, datetime.datetime(1789, 5, 5, 0, 0)), (1, datetime.datetime(1789, 12, 31, 0, 0)), (2, datetime.datetime(1799, 11, 9, 0, 0)))
#end_IndexNanosecond-iter_label().apply_iter_items()

#start_IndexNanosecond-iter_label().apply_pool()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)
[ 5 12 11]
#end_IndexNanosecond-iter_label().apply_pool()

#start_IndexNanosecond-__add__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix + 2
['1789-05-05T00:00:00.000000002' '1789-12-31T00:00:00.000000002'
 '1799-11-09T00:00:00.000000002']
#end_IndexNanosecond-__add__()

#start_IndexNanosecond-__and__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix & True
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix & (False, True)
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexNanosecond-__and__()

#start_IndexNanosecond-__eq__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix == '1789-05-05'
[ True False False]
#end_IndexNanosecond-__eq__()

#start_IndexNanosecond-__floordiv__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix // '1789-05-05'
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexNanosecond-__floordiv__()

#start_IndexNanosecond-__ge__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix >= '1789-05-05'
[ True  True  True]
#end_IndexNanosecond-__ge__()

#start_IndexNanosecond-__gt__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix > '1789-05-05'
[False  True  True]
#end_IndexNanosecond-__gt__()

#start_IndexNanosecond-__le__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix <= '1789-05-05'
[ True False False]
#end_IndexNanosecond-__le__()

#start_IndexNanosecond-__lt__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix < '1789-05-05'
[False False False]
#end_IndexNanosecond-__lt__()

#start_IndexNanosecond-__matmul__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexNanosecond-__matmul__()

#start_IndexNanosecond-__mod__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix % '1789-05-05'
UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexNanosecond-__mod__()

#start_IndexNanosecond-__mul__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix * '1789-05-05'
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexNanosecond-__mul__()

#start_IndexNanosecond-__ne__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix != '1789-05-05'
[False  True  True]
#end_IndexNanosecond-__ne__()

#start_IndexNanosecond-__or__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix | True
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix | (False, True)
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexNanosecond-__or__()

#start_IndexNanosecond-__pow__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix ** '1789-05-05'
TypeError("ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexNanosecond-__pow__()

#start_IndexNanosecond-__radd__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> '1789-05-05' + ix
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexNanosecond-__radd__()

#start_IndexNanosecond-__rfloordiv__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> '1789-05-05' // ix
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexNanosecond-__rfloordiv__()

#start_IndexNanosecond-__rmatmul__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexNanosecond-__rmatmul__()

#start_IndexNanosecond-__rmul__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> '1789-05-05' * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexNanosecond-__rmul__()

#start_IndexNanosecond-__rshift__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix >> 1
TypeError("ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexNanosecond-__rshift__()

#start_IndexNanosecond-__rsub__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> '1789-05-05' - ix
[    0  -240 -3840]
#end_IndexNanosecond-__rsub__()

#start_IndexNanosecond-__rtruediv__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> '1789-05-05' / ix
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexNanosecond-__rtruediv__()

#start_IndexNanosecond-__sub__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix - 2
['1789-05-04T23:59:59.999999998' '1789-12-30T23:59:59.999999998'
 '1799-11-08T23:59:59.999999998']
#end_IndexNanosecond-__sub__()

#start_IndexNanosecond-__truediv__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix / '1789-05-05'
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexNanosecond-__truediv__()

#start_IndexNanosecond-__xor__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix ^ True
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix ^ (False, True)
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexNanosecond-__xor__()

#start_IndexNanosecond-__abs__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> abs(ix)
UFuncTypeError(<ufunc 'absolute'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))
#end_IndexNanosecond-__abs__()

#start_IndexNanosecond-__invert__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ~ix
TypeError("ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexNanosecond-__invert__()

#start_IndexNanosecond-__neg__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> -ix
UFuncTypeError(<ufunc 'negative'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))
#end_IndexNanosecond-__neg__()

#start_IndexNanosecond-__pos__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> +ix
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecond-__pos__()

#start_IndexNanosecond-via_dt.year
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.year
[1789 1789 1799]
#end_IndexNanosecond-via_dt.year

#start_IndexNanosecond-via_dt.month
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.month
[ 5 12 11]
#end_IndexNanosecond-via_dt.month

#start_IndexNanosecond-via_dt.day
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.day
[ 5 31  9]
#end_IndexNanosecond-via_dt.day

#start_IndexNanosecond-via_dt.hour
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.hour
[0 0 0]
#end_IndexNanosecond-via_dt.hour

#start_IndexNanosecond-via_dt.minute
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.minute
[0 0 0]
#end_IndexNanosecond-via_dt.minute

#start_IndexNanosecond-via_dt.second
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.second
[0 0 0]
#end_IndexNanosecond-via_dt.second

#start_IndexNanosecond-via_dt.weekday()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.weekday()
[1 3 5]
#end_IndexNanosecond-via_dt.weekday()

#start_IndexNanosecond-via_dt.quarter()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.quarter()
[2 4 4]
#end_IndexNanosecond-via_dt.quarter()

#start_IndexNanosecond-via_dt.is_month_end()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.is_month_end()
[False  True False]
#end_IndexNanosecond-via_dt.is_month_end()

#start_IndexNanosecond-via_dt.is_month_start()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.is_month_start()
[False False False]
#end_IndexNanosecond-via_dt.is_month_start()

#start_IndexNanosecond-via_dt.is_year_end()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.is_year_end()
[False  True False]
#end_IndexNanosecond-via_dt.is_year_end()

#start_IndexNanosecond-via_dt.is_year_start()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.is_year_start()
[False False False]
#end_IndexNanosecond-via_dt.is_year_start()

#start_IndexNanosecond-via_dt.is_quarter_end()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.is_quarter_end()
[False  True False]
#end_IndexNanosecond-via_dt.is_quarter_end()

#start_IndexNanosecond-via_dt.is_quarter_start()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.is_quarter_start()
[False False False]
#end_IndexNanosecond-via_dt.is_quarter_start()

#start_IndexNanosecond-via_dt.timetuple()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.timetuple()
RuntimeError('invalid dtype (datetime64[ns]) for date operation')
#end_IndexNanosecond-via_dt.timetuple()

#start_IndexNanosecond-via_dt.isoformat()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.isoformat()
RuntimeError('invalid dtype (datetime64[ns]) for date operation')
#end_IndexNanosecond-via_dt.isoformat()

#start_IndexNanosecond-via_dt.fromisoformat()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.fromisoformat()
RuntimeError('invalid dtype (datetime64[ns]) for operation on string types')
#end_IndexNanosecond-via_dt.fromisoformat()

#start_IndexNanosecond-via_dt.strftime()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.strftime("%A | %B")
RuntimeError('invalid dtype (datetime64[ns]) for date operation')
#end_IndexNanosecond-via_dt.strftime()

#start_IndexNanosecond-via_dt.strptime()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.strptime("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[ns]) for operation on string types')
#end_IndexNanosecond-via_dt.strptime()

#start_IndexNanosecond-via_dt.strpdate()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.strpdate("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[ns]) for operation on string types')
#end_IndexNanosecond-via_dt.strpdate()

#start_IndexNanosecond-via_str.__getitem__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str[-1]
['0' '0' '0']
#end_IndexNanosecond-via_str.__getitem__()

#start_IndexNanosecond-via_str.capitalize()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.capitalize()
['1789-05-05t00:00:00.000000000' '1789-12-31t00:00:00.000000000'
 '1799-11-09t00:00:00.000000000']
#end_IndexNanosecond-via_str.capitalize()

#start_IndexNanosecond-via_str.center()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.center(8)
['1789-05-' '1789-12-' '1799-11-']
#end_IndexNanosecond-via_str.center()

#start_IndexNanosecond-via_str.contains()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.contains('X')
[False False False]
#end_IndexNanosecond-via_str.contains()

#start_IndexNanosecond-via_str.count()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.count('X')
[0 0 0]
#end_IndexNanosecond-via_str.count()

#start_IndexNanosecond-via_str.decode()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09')).astype(bytes)
>>> ix
<Index>
b'1789-05-05T00:00:00.000000000'
b'1789-12-31T00:00:00.000000000'
b'1799-11-09T00:00:00.000000000'
<|S48>
>>> ix.via_str.decode()
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecond-via_str.decode()

#start_IndexNanosecond-via_str.encode()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.encode()
[b'1789-05-05T00:00:00.000000000' b'1789-12-31T00:00:00.000000000'
 b'1799-11-09T00:00:00.000000000']
#end_IndexNanosecond-via_str.encode()

#start_IndexNanosecond-via_str.endswith()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.endswith(' ')
[False False False]
#end_IndexNanosecond-via_str.endswith()

#start_IndexNanosecond-via_str.find()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.find('X')
[-1 -1 -1]
#end_IndexNanosecond-via_str.find()

#start_IndexNanosecond-via_str.format()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.format('{:-^10}')
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecond-via_str.format()

#start_IndexNanosecond-via_str.index()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.index('X')
ValueError('substring not found')
#end_IndexNanosecond-via_str.index()

#start_IndexNanosecond-via_str.isalnum()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.isalnum()
[False False False]
#end_IndexNanosecond-via_str.isalnum()

#start_IndexNanosecond-via_str.isalpha()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.isalpha()
[False False False]
#end_IndexNanosecond-via_str.isalpha()

#start_IndexNanosecond-via_str.isdecimal()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.isdecimal()
[False False False]
#end_IndexNanosecond-via_str.isdecimal()

#start_IndexNanosecond-via_str.isdigit()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.isdigit()
[False False False]
#end_IndexNanosecond-via_str.isdigit()

#start_IndexNanosecond-via_str.islower()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.islower()
[False False False]
#end_IndexNanosecond-via_str.islower()

#start_IndexNanosecond-via_str.isnumeric()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.isnumeric()
[False False False]
#end_IndexNanosecond-via_str.isnumeric()

#start_IndexNanosecond-via_str.isspace()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.isspace()
[False False False]
#end_IndexNanosecond-via_str.isspace()

#start_IndexNanosecond-via_str.istitle()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.istitle()
[ True  True  True]
#end_IndexNanosecond-via_str.istitle()

#start_IndexNanosecond-via_str.isupper()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.isupper()
[ True  True  True]
#end_IndexNanosecond-via_str.isupper()

#start_IndexNanosecond-via_str.ljust()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.ljust(8)
['1789-05-' '1789-12-' '1799-11-']
#end_IndexNanosecond-via_str.ljust()

#start_IndexNanosecond-via_str.len()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.len()
[29 29 29]
#end_IndexNanosecond-via_str.len()

#start_IndexNanosecond-via_str.lower()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.lower()
['1789-05-05t00:00:00.000000000' '1789-12-31t00:00:00.000000000'
 '1799-11-09t00:00:00.000000000']
#end_IndexNanosecond-via_str.lower()

#start_IndexNanosecond-via_str.lstrip()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.lstrip()
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecond-via_str.lstrip()

#start_IndexNanosecond-via_str.partition()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.partition('X')
[('1789-05-05T00:00:00.000000000', '', '')
 ('1789-12-31T00:00:00.000000000', '', '')
 ('1799-11-09T00:00:00.000000000', '', '')]
#end_IndexNanosecond-via_str.partition()

#start_IndexNanosecond-via_str.replace()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.replace('X', '*')
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecond-via_str.replace()

#start_IndexNanosecond-via_str.rfind()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.rfind('X')
[-1 -1 -1]
#end_IndexNanosecond-via_str.rfind()

#start_IndexNanosecond-via_str.rindex()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.rindex('X')
ValueError('substring not found')
#end_IndexNanosecond-via_str.rindex()

#start_IndexNanosecond-via_str.rjust()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.rjust(8)
['1789-05-' '1789-12-' '1799-11-']
#end_IndexNanosecond-via_str.rjust()

#start_IndexNanosecond-via_str.rpartition()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.rpartition('X')
[('', '', '1789-05-05T00:00:00.000000000')
 ('', '', '1789-12-31T00:00:00.000000000')
 ('', '', '1799-11-09T00:00:00.000000000')]
#end_IndexNanosecond-via_str.rpartition()

#start_IndexNanosecond-via_str.rsplit()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.rsplit('X')
[('1789-05-05T00:00:00.000000000',) ('1789-12-31T00:00:00.000000000',)
 ('1799-11-09T00:00:00.000000000',)]
#end_IndexNanosecond-via_str.rsplit()

#start_IndexNanosecond-via_str.rstrip()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.rstrip()
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecond-via_str.rstrip()

#start_IndexNanosecond-via_str.split()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.split('X')
[('1789-05-05T00:00:00.000000000',) ('1789-12-31T00:00:00.000000000',)
 ('1799-11-09T00:00:00.000000000',)]
#end_IndexNanosecond-via_str.split()

#start_IndexNanosecond-via_str.startswith()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.startswith('X')
[False False False]
#end_IndexNanosecond-via_str.startswith()

#start_IndexNanosecond-via_str.strip()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.strip()
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecond-via_str.strip()

#start_IndexNanosecond-via_str.swapcase()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.swapcase()
['1789-05-05t00:00:00.000000000' '1789-12-31t00:00:00.000000000'
 '1799-11-09t00:00:00.000000000']
#end_IndexNanosecond-via_str.swapcase()

#start_IndexNanosecond-via_str.title()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.title()
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecond-via_str.title()

#start_IndexNanosecond-via_str.upper()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.upper()
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecond-via_str.upper()

#start_IndexNanosecond-via_str.zfill()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.zfill(8)
['1789-05-' '1789-12-' '1799-11-']
#end_IndexNanosecond-via_str.zfill()

#start_IndexNanosecond-via_re().search()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_re('[X123]').search()
[ True  True  True]
#end_IndexNanosecond-via_re().search()

#start_IndexNanosecond-via_re().match()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_re('[X123]').match()
[ True  True  True]
#end_IndexNanosecond-via_re().match()

#start_IndexNanosecond-via_re().fullmatch()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_re('123').fullmatch()
[False False False]
#end_IndexNanosecond-via_re().fullmatch()

#start_IndexNanosecond-via_re().split()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_re('[X123]').split()
[('', '789-05-05T00:00:00.000000000')
 ('', '789-', '', '-', '', 'T00:00:00.000000000')
 ('', '799-', '', '-09T00:00:00.000000000')]
#end_IndexNanosecond-via_re().split()

#start_IndexNanosecond-via_re().findall()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_re('[X123]').findall()
[('1',) ('1', '1', '2', '3', '1') ('1', '1', '1')]
#end_IndexNanosecond-via_re().findall()

#start_IndexNanosecond-via_re().sub()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_re('[X123]').sub('==')
['==789-05-05T00:00:00.000000000' '==789-====-====T00:00:00.000000000'
 '==799-====-09T00:00:00.000000000']
#end_IndexNanosecond-via_re().sub()

#start_IndexNanosecond-via_re().subn()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecond>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_re('[X123]').subn('==', 1)
[('==789-05-05T00:00:00.000000000', 1)
 ('==789-12-31T00:00:00.000000000', 1)
 ('==799-11-09T00:00:00.000000000', 1)]
#end_IndexNanosecond-via_re().subn()

#start_IndexNanosecond-via_values.apply()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_values.apply(np.sin)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexNanosecond-via_values.apply()

#start_IndexNanosecond-via_values.__array_ufunc__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> np.sin(ix.via_values)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexNanosecond-via_values.__array_ufunc__()

#start_IndexNanosecond-via_values.__call__()
>>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> np.sin(ix.via_values(unify_blocks=True))
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexNanosecond-via_values.__call__()

#start_IndexNanosecondGO-__init__()
>>> sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-__init__()

#start_IndexNanosecondGO-from_labels()
>>> sf.IndexNanosecondGO.from_labels(('1789-05-05', '1789-12-31', '1799-11-09'))
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-from_labels()

#start_IndexNanosecondGO-from_pandas()
>>> ix = pd.Index(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> sf.IndexNanosecondGO.from_pandas(ix)
<IndexGO>
1789-05-05
1789-12-31
1799-11-09
<object>
#end_IndexNanosecondGO-from_pandas()

#start_IndexNanosecondGO-to_pandas()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.to_pandas()
DatetimeIndex(['1789-05-05', '1789-12-31', '1799-11-09'], dtype='datetime64[ns]', freq=None)
#end_IndexNanosecondGO-to_pandas()

#start_IndexNanosecondGO-to_series()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.to_series()
<Series>
<Index>
0        1789-05-05T00:00:...
1        1789-12-31T00:00:...
2        1799-11-09T00:00:...
<int64>  <datetime64[ns]>
#end_IndexNanosecondGO-to_series()

#start_IndexNanosecondGO-STATIC
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.STATIC
False
#end_IndexNanosecondGO-STATIC

#start_IndexNanosecondGO-depth
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.depth
1
#end_IndexNanosecondGO-depth

#start_IndexNanosecondGO-dtype
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.dtype
datetime64[ns]
#end_IndexNanosecondGO-dtype

#start_IndexNanosecondGO-index_types
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.index_types
<Series>
<Index>
None     <IndexNanosecondGO>
<object> <object>
#end_IndexNanosecondGO-index_types

#start_IndexNanosecondGO-memory
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.memory
          L    Lu    LM   LMu   LMD LMDu  R    Ru    RM   RMu   RMD RMDu
Name      16   B     16   B     16  B     16   B     16   B     16  B
Map       440  B     440  B     440 B     440  B     440  B     440 B
Labels    120  B     136  B     24  B     120  B     136  B     24  B
Positions 96   B     112  B     0   B     8.19 KB    136  B     24  B
Total     1.08 KB    1.11 KB    912 B     9.17 KB    1.13 KB    936 B
#end_IndexNanosecondGO-memory

#start_IndexNanosecondGO-name
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.name
#end_IndexNanosecondGO-name

#start_IndexNanosecondGO-names
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.names
('__index0__',)
#end_IndexNanosecondGO-names

#start_IndexNanosecondGO-nbytes
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.nbytes
24
#end_IndexNanosecondGO-nbytes

#start_IndexNanosecondGO-ndim
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.ndim
1
#end_IndexNanosecondGO-ndim

#start_IndexNanosecondGO-positions
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.positions
[0 1 2]
#end_IndexNanosecondGO-positions

#start_IndexNanosecondGO-shape
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.shape
(3,)
#end_IndexNanosecondGO-shape

#start_IndexNanosecondGO-size
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.size
3
#end_IndexNanosecondGO-size

#start_IndexNanosecondGO-__array__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.__array__()
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecondGO-__array__()

#start_IndexNanosecondGO-__array_ufunc__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> np.array((0, 1, 0)) * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[ns]')))
#end_IndexNanosecondGO-__array_ufunc__()

#start_IndexNanosecondGO-__bool__()
>>> s = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexNanosecondGO-__bool__()

#start_IndexNanosecondGO-__copy__()
>>> import copy
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> copy.copy(ix)
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-__copy__()

#start_IndexNanosecondGO-__deepcopy__()
>>> import copy
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> copy.deepcopy(ix)
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-__deepcopy__()

#start_IndexNanosecondGO-__len__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> len(ix)
3
#end_IndexNanosecondGO-__len__()

#start_IndexNanosecondGO-all()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.all()
True
#end_IndexNanosecondGO-all()

#start_IndexNanosecondGO-any()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.any()
True
#end_IndexNanosecondGO-any()

#start_IndexNanosecondGO-append()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.append('f')
ValueError('Error parsing datetime string "f" at position 0')
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-append()

#start_IndexNanosecondGO-astype()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.astype(str)
<IndexGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<<U48>
#end_IndexNanosecondGO-astype()

#start_IndexNanosecondGO-copy()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.copy()
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-copy()

#start_IndexNanosecondGO-cumprod()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.cumprod()
ValueError("could not find a matching type for multiply.accumulate, requested type has type code 'M'")
#end_IndexNanosecondGO-cumprod()

#start_IndexNanosecondGO-cumsum()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.cumsum()
ValueError("could not find a matching type for add.accumulate, requested type has type code 'M'")
#end_IndexNanosecondGO-cumsum()

#start_IndexNanosecondGO-difference()
>>> ix1 = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix2 = sf.IndexNanosecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.difference(ix2)
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-difference()

#start_IndexNanosecondGO-dropfalsy()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.dropfalsy()
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-dropfalsy()

#start_IndexNanosecondGO-dropna()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.dropna()
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-dropna()

#start_IndexNanosecondGO-equals()
>>> ix1 = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix2 = sf.IndexNanosecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.equals(ix2)
False
#end_IndexNanosecondGO-equals()

#start_IndexNanosecondGO-extend()
>>> ix1 = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix2 = sf.IndexNanosecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.extend(ix2)
>>> ix1
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
2022-04-01T00:00:00.000000000
2021-12-31T00:00:00.000000000
2022-06-30T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-extend()

#start_IndexNanosecondGO-fillfalsy()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.fillfalsy('A')
ValueError('Error parsing datetime string "A" at position 0')
#end_IndexNanosecondGO-fillfalsy()

#start_IndexNanosecondGO-fillna()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.fillna(0)
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1970-01-01T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-fillna()

#start_IndexNanosecondGO-head()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.head(2)
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-head()

#start_IndexNanosecondGO-iloc_searchsorted()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.iloc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexNanosecondGO-iloc_searchsorted()

#start_IndexNanosecondGO-intersection()
>>> ix1 = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix2 = sf.IndexNanosecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.intersection(ix2)
<IndexNanosecondGO>
<datetime64[ns]>
#end_IndexNanosecondGO-intersection()

#start_IndexNanosecondGO-isin()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.isin(('1789-05-05',))
[False False False]
#end_IndexNanosecondGO-isin()

#start_IndexNanosecondGO-label_widths_at_depth()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> tuple(ix.label_widths_at_depth(0))
((numpy.datetime64('1789-05-05T00:00:00.000000000'), 1), (numpy.datetime64('1789-12-31T00:00:00.000000000'), 1), (numpy.datetime64('1799-11-09T00:00:00.000000000'), 1))
#end_IndexNanosecondGO-label_widths_at_depth()

#start_IndexNanosecondGO-level_add()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.level_add('A')
<IndexHierarchyGO>
A                  1789-05-05T00:00:...
A                  1789-12-31T00:00:...
A                  1799-11-09T00:00:...
<<U1>              <datetime64[ns]>
#end_IndexNanosecondGO-level_add()

#start_IndexNanosecondGO-loc_searchsorted()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.loc_searchsorted('c')
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexNanosecondGO-loc_searchsorted()

#start_IndexNanosecondGO-loc_to_iloc()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.loc_to_iloc('d')
ValueError('Error parsing datetime string "d" at position 0')
>>> ix.loc_to_iloc(['a', 'e'])
ValueError('Cannot create a NumPy datetime other than NaT with generic units')
>>> ix.loc_to_iloc(slice('c', None))
ValueError('Error parsing datetime string "c" at position 0')
#end_IndexNanosecondGO-loc_to_iloc()

#start_IndexNanosecondGO-max()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.max()
1799-11-09T00:00:00.000000000
#end_IndexNanosecondGO-max()

#start_IndexNanosecondGO-mean()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.mean()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))
#end_IndexNanosecondGO-mean()

#start_IndexNanosecondGO-median()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.median()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))
#end_IndexNanosecondGO-median()

#start_IndexNanosecondGO-min()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.min()
1789-05-05T00:00:00.000000000
#end_IndexNanosecondGO-min()

#start_IndexNanosecondGO-prod()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.prod()
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))
#end_IndexNanosecondGO-prod()

#start_IndexNanosecondGO-relabel()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)
<IndexNanosecondGO>
1970-01-01T00:00:00.000000005
1970-01-01T00:00:00.000000031
1970-01-01T00:00:00.000000009
<datetime64[ns]>
#end_IndexNanosecondGO-relabel()

#start_IndexNanosecondGO-rename()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.rename('y')
<IndexNanosecondGO: y>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-rename()

#start_IndexNanosecondGO-roll()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.roll(2)
<IndexNanosecondGO>
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
1789-05-05T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-roll()

#start_IndexNanosecondGO-sample()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.sample(2, seed=0)
<IndexNanosecondGO>
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-sample()

#start_IndexNanosecondGO-sort()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.sort()
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.sort(ascending=False)
<IndexNanosecondGO>
1799-11-09T00:00:00.000000000
1789-12-31T00:00:00.000000000
1789-05-05T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-sort()

#start_IndexNanosecondGO-std()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.std()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))
#end_IndexNanosecondGO-std()

#start_IndexNanosecondGO-sum()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.sum()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))
#end_IndexNanosecondGO-sum()

#start_IndexNanosecondGO-tail()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.tail(2)
<IndexNanosecondGO>
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-tail()

#start_IndexNanosecondGO-union()
>>> ix1 = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix2 = sf.IndexNanosecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))
>>> ix1.union(ix2)
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
2021-12-31T00:00:00.000000000
2022-04-01T00:00:00.000000000
2022-06-30T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-union()

#start_IndexNanosecondGO-unique()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.unique()
['1789-05-05T00:00:00.000000000'                           'NaT'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecondGO-unique()

#start_IndexNanosecondGO-values_at_depth()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.values_at_depth(0)
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecondGO-values_at_depth()

#start_IndexNanosecondGO-var()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.var()
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))
#end_IndexNanosecondGO-var()

#start_IndexNanosecondGO-__contains__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.__contains__('a')
ValueError('Error parsing datetime string "a" at position 0')
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.__contains__('1789-05-05')
False
#end_IndexNanosecondGO-__contains__()

#start_IndexNanosecondGO-__iter__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1789-05-05T00:00:00.000000000'), numpy.datetime64('1789-12-31T00:00:00.000000000'), numpy.datetime64('1799-11-09T00:00:00.000000000'))
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> tuple(ix.__iter__())
(numpy.datetime64('1789-05-05T00:00:00.000000000'), numpy.datetime64('1789-12-31T00:00:00.000000000'), numpy.datetime64('1799-11-09T00:00:00.000000000'))
#end_IndexNanosecondGO-__iter__()

#start_IndexNanosecondGO-__reversed__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1799-11-09T00:00:00.000000000'), numpy.datetime64('1789-12-31T00:00:00.000000000'), numpy.datetime64('1789-05-05T00:00:00.000000000'))
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> tuple(ix.__reversed__())
(numpy.datetime64('1799-11-09T00:00:00.000000000'), numpy.datetime64('1789-12-31T00:00:00.000000000'), numpy.datetime64('1789-05-05T00:00:00.000000000'))
#end_IndexNanosecondGO-__reversed__()

#start_IndexNanosecondGO-values
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.values
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.values
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecondGO-values

#start_IndexNanosecondGO-interface
>>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))
>>> ix.interface
<Frame>
<Index>                              cls_name          group                doc                  <<U18>
<Index: signature>
__init__(labels, *, name, loc_is_... IndexNanosecondGO Constructor          Initializer. Args...
from_labels(labels, *, name)         IndexNanosecondGO Constructor          Construct an Inde...
from_pandas(value)                   IndexNanosecondGO Constructor          Given a Pandas in...
to_html(config, style_config)        IndexNanosecondGO Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexNanosecondGO Exporter             Return a complete...
to_pandas()                          IndexNanosecondGO Exporter             Return a Pandas I...
to_series()                          IndexNanosecondGO Exporter             Return a Series w...
to_visidata()                        IndexNanosecondGO Exporter             Open an interacti...
STATIC                               IndexNanosecondGO Attribute            bool(x) -> bool R...
depth                                IndexNanosecondGO Attribute            int([x]) -> integ...
dtype                                IndexNanosecondGO Attribute            Return the dtype ...
index_types                          IndexNanosecondGO Attribute            Return a Series o...
memory                               IndexNanosecondGO Attribute            Return a MemoryDi...
mloc                                 IndexNanosecondGO Attribute            The memory locati...
name                                 IndexNanosecondGO Attribute            A hashable label ...
names                                IndexNanosecondGO Attribute            Provide a suitabl...
nbytes                               IndexNanosecondGO Attribute            Return the total ...
...                                  ...               ...                  ...
via_str.rpartition(sep)              IndexNanosecondGO Accessor String      Partition (split)...
via_str.rsplit(sep, maxsplit)        IndexNanosecondGO Accessor String      For each element,...
via_str.rstrip(chars)                IndexNanosecondGO Accessor String      For each element,...
via_str.split(sep, maxsplit)         IndexNanosecondGO Accessor String      For each element,...
via_str.startswith(prefix, start,... IndexNanosecondGO Accessor String      Returns a contain...
via_str.strip(chars)                 IndexNanosecondGO Accessor String      For each element,...
via_str.swapcase()                   IndexNanosecondGO Accessor String      Return a containe...
via_str.title()                      IndexNanosecondGO Accessor String      Return a containe...
via_str.upper()                      IndexNanosecondGO Accessor String      Return a containe...
via_str.zfill(width)                 IndexNanosecondGO Accessor String      Return the string...
via_re(pattern, flags).search(pos... IndexNanosecondGO Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexNanosecondGO Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexNanosecondGO Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexNanosecondGO Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexNanosecondGO Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexNanosecondGO Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexNanosecondGO Accessor Regular ... Perform the same ...
<<U63>                               <<U17>            <<U27>               <<U83>
#end_IndexNanosecondGO-interface

#start_IndexNanosecondGO-__repr__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))
>>> repr(ix)
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-__repr__()

#start_IndexNanosecondGO-__str__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))
>>> str(ix)
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-__str__()

#start_IndexNanosecondGO-display()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))
>>> ix.display()
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.display(sf.DisplayConfig(type_show=False))
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
#end_IndexNanosecondGO-display()

#start_IndexNanosecondGO-display_tall()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))
>>> ix.display_tall()
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-display_tall()

#start_IndexNanosecondGO-display_wide()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))
>>> ix.display_wide()
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
NaT
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-display_wide()

#start_IndexNanosecondGO-drop.iloc[]
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.drop.iloc[1]
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.drop.iloc[1:]
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
<datetime64[ns]>
>>> ix.drop.iloc[[0, 2]]
<IndexNanosecondGO>
1789-12-31T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-drop.iloc[]

#start_IndexNanosecondGO-drop.loc[]
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.drop.loc['1789-05-05']
<IndexNanosecondGO>
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.drop.loc['1789-05-05':]
<IndexNanosecondGO>
<datetime64[ns]>
#end_IndexNanosecondGO-drop.loc[]

#start_IndexNanosecondGO-[]
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix[1]
1789-12-31T00:00:00.000000000
>>> ix[1:]
<IndexNanosecondGO>
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix[[0, 2]]
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-[]

#start_IndexNanosecondGO-iloc[]
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.iloc[1]
1789-12-31T00:00:00.000000000
>>> ix.iloc[1:]
<IndexNanosecondGO>
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.iloc[[0, 2]]
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-iloc[]

#start_IndexNanosecondGO-loc[]
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.loc['1789-05-05']
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
<datetime64[ns]>
>>> ix.loc['1789-05-05':]
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
#end_IndexNanosecondGO-loc[]

#start_IndexNanosecondGO-iter_label()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> tuple(ix.iter_label())
(numpy.datetime64('1789-05-05T00:00:00.000000000'), numpy.datetime64('1789-12-31T00:00:00.000000000'), numpy.datetime64('1799-11-09T00:00:00.000000000'))
#end_IndexNanosecondGO-iter_label()

#start_IndexNanosecondGO-iter_label().apply()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)
[1789 1789 1799]
#end_IndexNanosecondGO-iter_label().apply()

#start_IndexNanosecondGO-iter_label().apply_iter()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))
(datetime.datetime(1789, 5, 5, 0, 0), datetime.datetime(1789, 12, 31, 0, 0), datetime.datetime(1799, 11, 9, 0, 0))
#end_IndexNanosecondGO-iter_label().apply_iter()

#start_IndexNanosecondGO-iter_label().apply_iter_items()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))
((0, datetime.datetime(1789, 5, 5, 0, 0)), (1, datetime.datetime(1789, 12, 31, 0, 0)), (2, datetime.datetime(1799, 11, 9, 0, 0)))
#end_IndexNanosecondGO-iter_label().apply_iter_items()

#start_IndexNanosecondGO-iter_label().apply_pool()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)
[ 5 12 11]
#end_IndexNanosecondGO-iter_label().apply_pool()

#start_IndexNanosecondGO-__add__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix + 2
['1789-05-05T00:00:00.000000002' '1789-12-31T00:00:00.000000002'
 '1799-11-09T00:00:00.000000002']
#end_IndexNanosecondGO-__add__()

#start_IndexNanosecondGO-__and__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix & True
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix & (False, True)
TypeError("ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexNanosecondGO-__and__()

#start_IndexNanosecondGO-__eq__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix == '1789-05-05'
[ True False False]
#end_IndexNanosecondGO-__eq__()

#start_IndexNanosecondGO-__floordiv__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix // '1789-05-05'
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexNanosecondGO-__floordiv__()

#start_IndexNanosecondGO-__ge__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix >= '1789-05-05'
[ True  True  True]
#end_IndexNanosecondGO-__ge__()

#start_IndexNanosecondGO-__gt__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix > '1789-05-05'
[False  True  True]
#end_IndexNanosecondGO-__gt__()

#start_IndexNanosecondGO-__le__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix <= '1789-05-05'
[ True False False]
#end_IndexNanosecondGO-__le__()

#start_IndexNanosecondGO-__lt__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix < '1789-05-05'
[False False False]
#end_IndexNanosecondGO-__lt__()

#start_IndexNanosecondGO-__matmul__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexNanosecondGO-__matmul__()

#start_IndexNanosecondGO-__mod__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix % '1789-05-05'
UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexNanosecondGO-__mod__()

#start_IndexNanosecondGO-__mul__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix * '1789-05-05'
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexNanosecondGO-__mul__()

#start_IndexNanosecondGO-__ne__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix != '1789-05-05'
[False  True  True]
#end_IndexNanosecondGO-__ne__()

#start_IndexNanosecondGO-__or__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix | True
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix | (False, True)
TypeError("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexNanosecondGO-__or__()

#start_IndexNanosecondGO-__pow__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix ** '1789-05-05'
TypeError("ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexNanosecondGO-__pow__()

#start_IndexNanosecondGO-__radd__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> '1789-05-05' + ix
UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexNanosecondGO-__radd__()

#start_IndexNanosecondGO-__rfloordiv__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> '1789-05-05' // ix
UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexNanosecondGO-__rfloordiv__()

#start_IndexNanosecondGO-__rmatmul__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix @ (3, 0, 4, 0)
NotImplementedError('matrix multiplication not supported')
#end_IndexNanosecondGO-__rmatmul__()

#start_IndexNanosecondGO-__rmul__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> '1789-05-05' * ix
UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexNanosecondGO-__rmul__()

#start_IndexNanosecondGO-__rshift__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix >> 1
TypeError("ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexNanosecondGO-__rshift__()

#start_IndexNanosecondGO-__rsub__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> '1789-05-05' - ix
[    0  -240 -3840]
#end_IndexNanosecondGO-__rsub__()

#start_IndexNanosecondGO-__rtruediv__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> '1789-05-05' / ix
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexNanosecondGO-__rtruediv__()

#start_IndexNanosecondGO-__sub__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix - 2
['1789-05-04T23:59:59.999999998' '1789-12-30T23:59:59.999999998'
 '1799-11-08T23:59:59.999999998']
#end_IndexNanosecondGO-__sub__()

#start_IndexNanosecondGO-__truediv__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix / '1789-05-05'
UFuncTypeError(<ufunc 'true_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))
#end_IndexNanosecondGO-__truediv__()

#start_IndexNanosecondGO-__xor__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix ^ True
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
>>> ix ^ (False, True)
TypeError("ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexNanosecondGO-__xor__()

#start_IndexNanosecondGO-__abs__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> abs(ix)
UFuncTypeError(<ufunc 'absolute'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))
#end_IndexNanosecondGO-__abs__()

#start_IndexNanosecondGO-__invert__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ~ix
TypeError("ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexNanosecondGO-__invert__()

#start_IndexNanosecondGO-__neg__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> -ix
UFuncTypeError(<ufunc 'negative'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))
#end_IndexNanosecondGO-__neg__()

#start_IndexNanosecondGO-__pos__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> +ix
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecondGO-__pos__()

#start_IndexNanosecondGO-via_dt.year
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.year
[1789 1789 1799]
#end_IndexNanosecondGO-via_dt.year

#start_IndexNanosecondGO-via_dt.month
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.month
[ 5 12 11]
#end_IndexNanosecondGO-via_dt.month

#start_IndexNanosecondGO-via_dt.day
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.day
[ 5 31  9]
#end_IndexNanosecondGO-via_dt.day

#start_IndexNanosecondGO-via_dt.hour
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.hour
[0 0 0]
#end_IndexNanosecondGO-via_dt.hour

#start_IndexNanosecondGO-via_dt.minute
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.minute
[0 0 0]
#end_IndexNanosecondGO-via_dt.minute

#start_IndexNanosecondGO-via_dt.second
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.second
[0 0 0]
#end_IndexNanosecondGO-via_dt.second

#start_IndexNanosecondGO-via_dt.weekday()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.weekday()
[1 3 5]
#end_IndexNanosecondGO-via_dt.weekday()

#start_IndexNanosecondGO-via_dt.quarter()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.quarter()
[2 4 4]
#end_IndexNanosecondGO-via_dt.quarter()

#start_IndexNanosecondGO-via_dt.is_month_end()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.is_month_end()
[False  True False]
#end_IndexNanosecondGO-via_dt.is_month_end()

#start_IndexNanosecondGO-via_dt.is_month_start()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.is_month_start()
[False False False]
#end_IndexNanosecondGO-via_dt.is_month_start()

#start_IndexNanosecondGO-via_dt.is_year_end()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.is_year_end()
[False  True False]
#end_IndexNanosecondGO-via_dt.is_year_end()

#start_IndexNanosecondGO-via_dt.is_year_start()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.is_year_start()
[False False False]
#end_IndexNanosecondGO-via_dt.is_year_start()

#start_IndexNanosecondGO-via_dt.is_quarter_end()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.is_quarter_end()
[False  True False]
#end_IndexNanosecondGO-via_dt.is_quarter_end()

#start_IndexNanosecondGO-via_dt.is_quarter_start()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.is_quarter_start()
[False False False]
#end_IndexNanosecondGO-via_dt.is_quarter_start()

#start_IndexNanosecondGO-via_dt.timetuple()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.timetuple()
RuntimeError('invalid dtype (datetime64[ns]) for date operation')
#end_IndexNanosecondGO-via_dt.timetuple()

#start_IndexNanosecondGO-via_dt.isoformat()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.isoformat()
RuntimeError('invalid dtype (datetime64[ns]) for date operation')
#end_IndexNanosecondGO-via_dt.isoformat()

#start_IndexNanosecondGO-via_dt.fromisoformat()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.fromisoformat()
RuntimeError('invalid dtype (datetime64[ns]) for operation on string types')
#end_IndexNanosecondGO-via_dt.fromisoformat()

#start_IndexNanosecondGO-via_dt.strftime()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.strftime("%A | %B")
RuntimeError('invalid dtype (datetime64[ns]) for date operation')
#end_IndexNanosecondGO-via_dt.strftime()

#start_IndexNanosecondGO-via_dt.strptime()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.strptime("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[ns]) for operation on string types')
#end_IndexNanosecondGO-via_dt.strptime()

#start_IndexNanosecondGO-via_dt.strpdate()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_dt.strpdate("%m/%d/%Y")
RuntimeError('invalid dtype (datetime64[ns]) for operation on string types')
#end_IndexNanosecondGO-via_dt.strpdate()

#start_IndexNanosecondGO-via_str.__getitem__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str[-1]
['0' '0' '0']
#end_IndexNanosecondGO-via_str.__getitem__()

#start_IndexNanosecondGO-via_str.capitalize()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.capitalize()
['1789-05-05t00:00:00.000000000' '1789-12-31t00:00:00.000000000'
 '1799-11-09t00:00:00.000000000']
#end_IndexNanosecondGO-via_str.capitalize()

#start_IndexNanosecondGO-via_str.center()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.center(8)
['1789-05-' '1789-12-' '1799-11-']
#end_IndexNanosecondGO-via_str.center()

#start_IndexNanosecondGO-via_str.contains()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.contains('X')
[False False False]
#end_IndexNanosecondGO-via_str.contains()

#start_IndexNanosecondGO-via_str.count()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.count('X')
[0 0 0]
#end_IndexNanosecondGO-via_str.count()

#start_IndexNanosecondGO-via_str.decode()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09')).astype(bytes)
>>> ix
<IndexGO>
b'1789-05-05T00:00:00.000000000'
b'1789-12-31T00:00:00.000000000'
b'1799-11-09T00:00:00.000000000'
<|S48>
>>> ix.via_str.decode()
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecondGO-via_str.decode()

#start_IndexNanosecondGO-via_str.encode()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.encode()
[b'1789-05-05T00:00:00.000000000' b'1789-12-31T00:00:00.000000000'
 b'1799-11-09T00:00:00.000000000']
#end_IndexNanosecondGO-via_str.encode()

#start_IndexNanosecondGO-via_str.endswith()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.endswith(' ')
[False False False]
#end_IndexNanosecondGO-via_str.endswith()

#start_IndexNanosecondGO-via_str.find()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.find('X')
[-1 -1 -1]
#end_IndexNanosecondGO-via_str.find()

#start_IndexNanosecondGO-via_str.format()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.format('{:-^10}')
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecondGO-via_str.format()

#start_IndexNanosecondGO-via_str.index()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.index('X')
ValueError('substring not found')
#end_IndexNanosecondGO-via_str.index()

#start_IndexNanosecondGO-via_str.isalnum()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.isalnum()
[False False False]
#end_IndexNanosecondGO-via_str.isalnum()

#start_IndexNanosecondGO-via_str.isalpha()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.isalpha()
[False False False]
#end_IndexNanosecondGO-via_str.isalpha()

#start_IndexNanosecondGO-via_str.isdecimal()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.isdecimal()
[False False False]
#end_IndexNanosecondGO-via_str.isdecimal()

#start_IndexNanosecondGO-via_str.isdigit()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.isdigit()
[False False False]
#end_IndexNanosecondGO-via_str.isdigit()

#start_IndexNanosecondGO-via_str.islower()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.islower()
[False False False]
#end_IndexNanosecondGO-via_str.islower()

#start_IndexNanosecondGO-via_str.isnumeric()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.isnumeric()
[False False False]
#end_IndexNanosecondGO-via_str.isnumeric()

#start_IndexNanosecondGO-via_str.isspace()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.isspace()
[False False False]
#end_IndexNanosecondGO-via_str.isspace()

#start_IndexNanosecondGO-via_str.istitle()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.istitle()
[ True  True  True]
#end_IndexNanosecondGO-via_str.istitle()

#start_IndexNanosecondGO-via_str.isupper()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.isupper()
[ True  True  True]
#end_IndexNanosecondGO-via_str.isupper()

#start_IndexNanosecondGO-via_str.ljust()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.ljust(8)
['1789-05-' '1789-12-' '1799-11-']
#end_IndexNanosecondGO-via_str.ljust()

#start_IndexNanosecondGO-via_str.len()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.len()
[29 29 29]
#end_IndexNanosecondGO-via_str.len()

#start_IndexNanosecondGO-via_str.lower()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.lower()
['1789-05-05t00:00:00.000000000' '1789-12-31t00:00:00.000000000'
 '1799-11-09t00:00:00.000000000']
#end_IndexNanosecondGO-via_str.lower()

#start_IndexNanosecondGO-via_str.lstrip()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.lstrip()
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecondGO-via_str.lstrip()

#start_IndexNanosecondGO-via_str.partition()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.partition('X')
[('1789-05-05T00:00:00.000000000', '', '')
 ('1789-12-31T00:00:00.000000000', '', '')
 ('1799-11-09T00:00:00.000000000', '', '')]
#end_IndexNanosecondGO-via_str.partition()

#start_IndexNanosecondGO-via_str.replace()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.replace('X', '*')
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecondGO-via_str.replace()

#start_IndexNanosecondGO-via_str.rfind()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.rfind('X')
[-1 -1 -1]
#end_IndexNanosecondGO-via_str.rfind()

#start_IndexNanosecondGO-via_str.rindex()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.rindex('X')
ValueError('substring not found')
#end_IndexNanosecondGO-via_str.rindex()

#start_IndexNanosecondGO-via_str.rjust()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.rjust(8)
['1789-05-' '1789-12-' '1799-11-']
#end_IndexNanosecondGO-via_str.rjust()

#start_IndexNanosecondGO-via_str.rpartition()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.rpartition('X')
[('', '', '1789-05-05T00:00:00.000000000')
 ('', '', '1789-12-31T00:00:00.000000000')
 ('', '', '1799-11-09T00:00:00.000000000')]
#end_IndexNanosecondGO-via_str.rpartition()

#start_IndexNanosecondGO-via_str.rsplit()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.rsplit('X')
[('1789-05-05T00:00:00.000000000',) ('1789-12-31T00:00:00.000000000',)
 ('1799-11-09T00:00:00.000000000',)]
#end_IndexNanosecondGO-via_str.rsplit()

#start_IndexNanosecondGO-via_str.rstrip()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.rstrip()
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecondGO-via_str.rstrip()

#start_IndexNanosecondGO-via_str.split()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.split('X')
[('1789-05-05T00:00:00.000000000',) ('1789-12-31T00:00:00.000000000',)
 ('1799-11-09T00:00:00.000000000',)]
#end_IndexNanosecondGO-via_str.split()

#start_IndexNanosecondGO-via_str.startswith()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.startswith('X')
[False False False]
#end_IndexNanosecondGO-via_str.startswith()

#start_IndexNanosecondGO-via_str.strip()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.strip()
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecondGO-via_str.strip()

#start_IndexNanosecondGO-via_str.swapcase()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.swapcase()
['1789-05-05t00:00:00.000000000' '1789-12-31t00:00:00.000000000'
 '1799-11-09t00:00:00.000000000']
#end_IndexNanosecondGO-via_str.swapcase()

#start_IndexNanosecondGO-via_str.title()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.title()
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecondGO-via_str.title()

#start_IndexNanosecondGO-via_str.upper()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.upper()
['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'
 '1799-11-09T00:00:00.000000000']
#end_IndexNanosecondGO-via_str.upper()

#start_IndexNanosecondGO-via_str.zfill()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_str.zfill(8)
['1789-05-' '1789-12-' '1799-11-']
#end_IndexNanosecondGO-via_str.zfill()

#start_IndexNanosecondGO-via_re().search()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_re('[X123]').search()
[ True  True  True]
#end_IndexNanosecondGO-via_re().search()

#start_IndexNanosecondGO-via_re().match()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_re('[X123]').match()
[ True  True  True]
#end_IndexNanosecondGO-via_re().match()

#start_IndexNanosecondGO-via_re().fullmatch()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_re('123').fullmatch()
[False False False]
#end_IndexNanosecondGO-via_re().fullmatch()

#start_IndexNanosecondGO-via_re().split()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_re('[X123]').split()
[('', '789-05-05T00:00:00.000000000')
 ('', '789-', '', '-', '', 'T00:00:00.000000000')
 ('', '799-', '', '-09T00:00:00.000000000')]
#end_IndexNanosecondGO-via_re().split()

#start_IndexNanosecondGO-via_re().findall()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_re('[X123]').findall()
[('1',) ('1', '1', '2', '3', '1') ('1', '1', '1')]
#end_IndexNanosecondGO-via_re().findall()

#start_IndexNanosecondGO-via_re().sub()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_re('[X123]').sub('==')
['==789-05-05T00:00:00.000000000' '==789-====-====T00:00:00.000000000'
 '==799-====-09T00:00:00.000000000']
#end_IndexNanosecondGO-via_re().sub()

#start_IndexNanosecondGO-via_re().subn()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix
<IndexNanosecondGO>
1789-05-05T00:00:00.000000000
1789-12-31T00:00:00.000000000
1799-11-09T00:00:00.000000000
<datetime64[ns]>
>>> ix.via_re('[X123]').subn('==', 1)
[('==789-05-05T00:00:00.000000000', 1)
 ('==789-12-31T00:00:00.000000000', 1)
 ('==799-11-09T00:00:00.000000000', 1)]
#end_IndexNanosecondGO-via_re().subn()

#start_IndexNanosecondGO-via_values.apply()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> ix.via_values.apply(np.sin)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexNanosecondGO-via_values.apply()

#start_IndexNanosecondGO-via_values.__array_ufunc__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> np.sin(ix.via_values)
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexNanosecondGO-via_values.__array_ufunc__()

#start_IndexNanosecondGO-via_values.__call__()
>>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))
>>> np.sin(ix.via_values(unify_blocks=True))
TypeError("ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexNanosecondGO-via_values.__call__()

#start_IndexHierarchy-__init__()
>>> a = np.array([[0, 0, 1, 1], [0, 1, 0, 1]])
>>> a.flags.writeable = False
>>> sf.IndexHierarchy((sf.Index(('a', 'b')), sf.Index((1024, 2048))), indexers=a)
<IndexHierarchy>
a                1024
a                2048
b                1024
b                2048
<<U1>            <int64>
#end_IndexHierarchy-__init__()

#start_IndexHierarchy-from_index_items()
>>> ix1 = sf.Index(('a', 'b', 'c'), name='x')
>>> ix2 = sf.Index((1024, 2048, 4096), name='y')
>>> ih1 = sf.IndexHierarchy.from_index_items(((ix1.name, ix1), (ix2.name, ix2)), name='ih1')
>>> ih1
<IndexHierarchy: ih1>
x                     a
x                     b
x                     c
y                     1024
y                     2048
y                     4096
<<U1>                 <object>
>>> ih2 = sf.IndexHierarchy.from_index_items(((ix2.name, ix2), (ix1.name, ix1)), name='ih2')
>>> sf.IndexHierarchy.from_index_items(((ih1.name, ih1), (ih2.name, ih2)))
<IndexHierarchy>
ih1              x     a
ih1              x     b
ih1              x     c
ih1              y     1024
ih1              y     2048
ih1              y     4096
ih2              y     1024
ih2              y     2048
ih2              y     4096
ih2              x     a
ih2              x     b
ih2              x     c
<<U3>            <<U1> <object>
#end_IndexHierarchy-from_index_items()

#start_IndexHierarchy-from_labels()
>>> sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
<IndexHierarchy: x>
a                   1024    True
a                   2048    True
a                   2048    False
b                   1024    True
<<U1>               <int64> <bool>
#end_IndexHierarchy-from_labels()

#start_IndexHierarchy-from_labels_delimited()
>>> sf.IndexHierarchy.from_labels_delimited(("'a'|1024|False", "'b'|1024|True", "'b'|2048|False"), delimiter='|')
<IndexHierarchy>
a                1024    False
b                1024    True
b                2048    False
<<U1>            <int64> <bool>
#end_IndexHierarchy-from_labels_delimited()

#start_IndexHierarchy-from_names()
>>> sf.IndexHierarchy.from_names(('x', 'y', 'z'))
<IndexHierarchy: ('x', 'y', 'z')>
<float64>                         <float64> <float64>
#end_IndexHierarchy-from_names()

#start_IndexHierarchy-from_pandas()
>>> mi = pd.MultiIndex.from_product((('a', 'b'), (1024, 2048)))
>>> sf.IndexHierarchy.from_pandas(mi)
<IndexHierarchy>
a                1024
a                2048
b                1024
b                2048
<object>         <int64>
#end_IndexHierarchy-from_pandas()

#start_IndexHierarchy-from_product()
>>> sf.IndexHierarchy.from_product(('a', 'b'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))
<IndexHierarchy: x>
a                   1517-04-01
a                   1620-11-21
b                   1517-04-01
b                   1620-11-21
<<U1>               <datetime64[D]>
#end_IndexHierarchy-from_product()

#start_IndexHierarchy-from_tree()
>>> sf.IndexHierarchy.from_tree({'a': {1024: (False, True), 2048: (True,)}})
<IndexHierarchy>
a                1024    False
a                1024    True
a                2048    True
<<U1>            <int64> <bool>
#end_IndexHierarchy-from_tree()

#start_IndexHierarchy-from_values_per_depth()
>>> sf.IndexHierarchy.from_values_per_depth((('a', 'a', 'b', 'b'), (0, 1, 0, 1)))
<IndexHierarchy>
a                0
a                1
b                0
b                1
<<U1>            <int64>
>>> sf.IndexHierarchy.from_values_per_depth((range(0, 12, 2), range(6)))
<IndexHierarchy>
0                0
2                1
4                2
6                3
8                4
10               5
<int64>          <int64>
#end_IndexHierarchy-from_values_per_depth()

#start_IndexHierarchy-to_frame()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih.to_frame()
<Frame>
<Index> 0     1       2      <int64>
<Index>
0       a     1024    True
1       a     2048    True
2       a     2048    False
3       b     1024    True
<int64> <<U1> <int64> <bool>
#end_IndexHierarchy-to_frame()

#start_IndexHierarchy-to_frame_go()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih.to_frame_go()
<FrameGO>
<IndexGO> 0     1       2      <int64>
<Index>
0         a     1024    True
1         a     2048    True
2         a     2048    False
3         b     1024    True
<int64>   <<U1> <int64> <bool>
#end_IndexHierarchy-to_frame_go()

#start_IndexHierarchy-to_pandas()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih.to_pandas()
MultiIndex([('a', 1024,  True),
            ('a', 2048,  True),
            ('a', 2048, False),
            ('b', 1024,  True)],
           name='x')
#end_IndexHierarchy-to_pandas()

#start_IndexHierarchy-to_tree()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih.to_tree()
{'a': {1024: <Index>
True
<bool>, 2048: <Index>
True
False
<bool>}, 'b': {1024: <Index>
True
<bool>}}
#end_IndexHierarchy-to_tree()

#start_IndexHierarchy-STATIC
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.STATIC
True
#end_IndexHierarchy-STATIC

#start_IndexHierarchy-depth
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.depth
3
#end_IndexHierarchy-depth

#start_IndexHierarchy-dtypes
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.dtypes
<Series>
<Index>
x        <U1
y        int64
z        datetime64[D]
<<U1>    <object>
#end_IndexHierarchy-dtypes

#start_IndexHierarchy-index_types
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.index_types
<Series>
<Index>
x        <Index>
y        <Index>
z        <IndexDate>
<<U1>    <object>
#end_IndexHierarchy-index_types

#start_IndexHierarchy-memory
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.memory
         L    Lu    LM   LMu   LMD  LMDu  R     Ru    RM   RMu   RMD  RMDu
Name     214  B     214  B     214  B     214   B     214  B     214  B
Indices  2.23 KB    2.33 KB    1.67 KB    10.33 KB    2.39 KB    1.73 KB
Indexers 184  B     184  B     72   B     184   B     184  B     72   B
Blocks   1.37 KB    1.41 KB    1.09 KB    1.37  KB    1.41 KB    1.09 KB
Values   16   B     16   B     16   B     16    B     16   B     16   B
Total    4.72 KB    4.87 KB    3.67 KB    12.81 KB    4.94 KB    3.73 KB
#end_IndexHierarchy-memory

#start_IndexHierarchy-name
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.name
('x', 'y', 'z')
#end_IndexHierarchy-name

#start_IndexHierarchy-names
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.names
('x', 'y', 'z')
#end_IndexHierarchy-names

#start_IndexHierarchy-nbytes
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.nbytes
677
#end_IndexHierarchy-nbytes

#start_IndexHierarchy-ndim
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.ndim
2
#end_IndexHierarchy-ndim

#start_IndexHierarchy-positions
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.positions
[0 1 2]
#end_IndexHierarchy-positions

#start_IndexHierarchy-shape
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.shape
(3, 3)
#end_IndexHierarchy-shape

#start_IndexHierarchy-size
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.size
9
#end_IndexHierarchy-size

#start_IndexHierarchy-__array__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.__array__()
[[    0  1024    32]
 [    1 -2048    32]
 [    1  1024    32]]
#end_IndexHierarchy-__array__()

#start_IndexHierarchy-__array_ufunc__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih
<IndexHierarchy: ('x', 'y', 'z')>
0                                 1024    32
1                                 -2048   32
1                                 1024    32
<int64>                           <int64> <int64>
>>> np.array((0, 1, 0)) * ih
[[    0  1024     0]
 [    0 -2048     0]
 [    0  1024     0]]
#end_IndexHierarchy-__array_ufunc__()

#start_IndexHierarchy-__bool__()
>>> s = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexHierarchy-__bool__()

#start_IndexHierarchy-__copy__()
>>> import copy
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> copy.copy(ih)
<IndexHierarchy: ('x', 'y', 'z')>
0                                 1024    32
1                                 -2048   32
1                                 1024    32
<int64>                           <int64> <int64>
#end_IndexHierarchy-__copy__()

#start_IndexHierarchy-__deepcopy__()
>>> import copy
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> copy.deepcopy(ih)
<IndexHierarchy: ('x', 'y', 'z')>
0                                 1024    32
1                                 -2048   32
1                                 1024    32
<int64>                           <int64> <int64>
#end_IndexHierarchy-__deepcopy__()

#start_IndexHierarchy-__len__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> len(ih)
3
#end_IndexHierarchy-__len__()

#start_IndexHierarchy-all()
>>> ih = sf.IndexHierarchy.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))
>>> ih.all()
[False  True False]
#end_IndexHierarchy-all()

#start_IndexHierarchy-any()
>>> ih = sf.IndexHierarchy.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))
>>> ih.any()
[ True  True  True]
#end_IndexHierarchy-any()

#start_IndexHierarchy-astype[]()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih
<IndexHierarchy: ('x', 'y', 'z')>
a                                 1024    1517-04-01
a                                 2048    1789-12-31
b                                 0       1620-11-21
<<U1>                             <int64> <datetime64[D]>
>>> ih.astype[1](bool)
<IndexHierarchy>
a                True   1517-04-01
a                True   1789-12-31
b                False  1620-11-21
<<U1>            <bool> <datetime64[D]>
#end_IndexHierarchy-astype[]()

#start_IndexHierarchy-astype()
>>> ih = sf.IndexHierarchy.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))
>>> ih
<IndexHierarchy: ('x', 'y', 'z')>
False                             True   True
True                              True   True
False                             True   False
<bool>                            <bool> <bool>
>>> ih.astype(str)
<IndexHierarchy>
False            True  True
True             True  True
False            True  False
<<U5>            <<U5> <<U5>
#end_IndexHierarchy-astype()

#start_IndexHierarchy-copy()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.copy()
<IndexHierarchy: ('x', 'y', 'z')>
0                                 1024    32
1                                 -2048   32
1                                 1024    32
<int64>                           <int64> <int64>
#end_IndexHierarchy-copy()

#start_IndexHierarchy-cumprod()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.cumprod()
[[          0        1024          32]
 [          0    -2097152        1024]
 [          0 -2147483648       32768]]
#end_IndexHierarchy-cumprod()

#start_IndexHierarchy-cumsum()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.cumsum()
[[    0  1024    32]
 [    1 -1024    64]
 [    2     0    96]]
#end_IndexHierarchy-cumsum()

#start_IndexHierarchy-difference()
>>> ih1 = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')
>>> ih2 = sf.IndexHierarchy.from_labels((('a', 1024, True), ('b', 1024, True)), name='y')
>>> ih1.difference(ih2)
<IndexHierarchy>
a                2048    False
a                2048    True
<<U1>            <int64> <bool>
#end_IndexHierarchy-difference()

#start_IndexHierarchy-dropfalsy()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('', 0, False), ('b', 1024, True)), name='x')
>>> ih
<IndexHierarchy: x>
a                   1024    True
                    0       False
b                   1024    True
<<U1>               <int64> <bool>
>>> ih.dropfalsy()
<IndexHierarchy: x>
a                   1024    True
b                   1024    True
<<U1>               <int64> <bool>
#end_IndexHierarchy-dropfalsy()

#start_IndexHierarchy-dropna()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih
<IndexHierarchy: ('x', 'y')>
0.0                          1024.0
1.0                          2048.0
nan                          nan
<float64>                    <float64>
>>> ih.dropna()
<IndexHierarchy: ('x', 'y')>
0.0                          1024.0
1.0                          2048.0
<float64>                    <float64>
#end_IndexHierarchy-dropna()

#start_IndexHierarchy-equals()
>>> ih1 = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')
>>> ih2 = sf.IndexHierarchy.from_labels((('a', 1024, True), ('b', 1024, True)), name='y')
>>> ih1.equals(ih2)
False
#end_IndexHierarchy-equals()

#start_IndexHierarchy-fillfalsy()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('', 0, False), ('b', 1024, True)), name='x')
>>> ih
<IndexHierarchy: x>
a                   1024    True
                    0       False
b                   1024    True
<<U1>               <int64> <bool>
>>> ih.fillfalsy(-1)
<IndexHierarchy: x>
a                   1024    True
-1                  -1      -1
b                   1024    True
<object>            <int64> <object>
#end_IndexHierarchy-fillfalsy()

#start_IndexHierarchy-fillna()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih
<IndexHierarchy: ('x', 'y')>
0.0                          1024.0
1.0                          2048.0
nan                          nan
<float64>                    <float64>
>>> ih.fillna(0)
<IndexHierarchy: ('x', 'y')>
0.0                          1024.0
1.0                          2048.0
0.0                          0.0
<float64>                    <float64>
#end_IndexHierarchy-fillna()

#start_IndexHierarchy-flat()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih
<IndexHierarchy: ('x', 'y', 'z')>
a                                 1024    1517-04-01
a                                 2048    1789-12-31
b                                 0       1620-11-21
<<U1>                             <int64> <datetime64[D]>
>>> ih.flat().display_wide()
<Index: ('x', 'y', 'z')>
('a', 1024, numpy.datetime64('1517-04-01'))
('a', 2048, numpy.datetime64('1789-12-31'))
('b', 0, numpy.datetime64('1620-11-21'))
<object>
#end_IndexHierarchy-flat()

#start_IndexHierarchy-head()
>>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))
>>> ih
<IndexHierarchy: x>
a                   1517-04-01
a                   1620-11-21
b                   1517-04-01
b                   1620-11-21
c                   1517-04-01
c                   1620-11-21
<<U1>               <datetime64[D]>
>>> ih.head(2)
<IndexHierarchy: x>
a                   1517-04-01
a                   1620-11-21
<<U1>               <datetime64[D]>
#end_IndexHierarchy-head()

#start_IndexHierarchy-iloc_searchsorted()
>>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))
>>> ih
<IndexHierarchy: x>
a                   1517-04-01
a                   1620-11-21
b                   1517-04-01
b                   1620-11-21
c                   1517-04-01
c                   1620-11-21
<<U1>               <datetime64[D]>
>>> ih.iloc_searchsorted(('b', np.datetime64('1620-11-21')))
3
#end_IndexHierarchy-iloc_searchsorted()

#start_IndexHierarchy-index_at_depth()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.index_at_depth(0)
<Index>
a
b
<<U1>
>>> ih.index_at_depth([2, 0])
(<IndexDate>
1517-04-01
1789-12-31
1620-11-21
<datetime64[D]>, <Index>
a
b
<<U1>)
#end_IndexHierarchy-index_at_depth()

#start_IndexHierarchy-indexer_at_depth()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.indexer_at_depth(0)
[0 0 1]
>>> ih.indexer_at_depth([2, 0])
[[0 1 2]
 [0 0 1]]
#end_IndexHierarchy-indexer_at_depth()

#start_IndexHierarchy-intersection()
>>> ih1 = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')
>>> ih2 = sf.IndexHierarchy.from_labels((('a', 1024, True), ('b', 1024, True)), name='y')
>>> ih1.intersection(ih2)
<IndexHierarchy>
a                1024    True
<<U1>            <int64> <bool>
#end_IndexHierarchy-intersection()

#start_IndexHierarchy-isin()
>>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))
>>> ih.isin((('c', np.datetime64('1517-04-01')), ('a', np.datetime64('1620-11-21'))))
[False  True False False  True False]
#end_IndexHierarchy-isin()

#start_IndexHierarchy-label_widths_at_depth()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih
<IndexHierarchy: x>
a                   1024    True
a                   2048    True
a                   2048    False
b                   1024    True
<<U1>               <int64> <bool>
>>> tuple(ih.label_widths_at_depth(0))
(('a', 3), ('b', 1))
>>> tuple(ih.label_widths_at_depth(1))
((1024, 1), (2048, 2), (1024, 1))
>>> tuple(ih.label_widths_at_depth(2))
((True, 1), (True, 1), (False, 1), (True, 1))
#end_IndexHierarchy-label_widths_at_depth()

#start_IndexHierarchy-level_add()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih
<IndexHierarchy: ('x', 'y')>
0.0                          1024.0
1.0                          2048.0
nan                          nan
<float64>                    <float64>
>>> ih.level_add('A')
<IndexHierarchy: ('x', 'y')>
A                            0.0       1024.0
A                            1.0       2048.0
A                            nan       nan
<<U1>                        <float64> <float64>
#end_IndexHierarchy-level_add()

#start_IndexHierarchy-level_drop()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih
<IndexHierarchy: ('x', 'y', 'z')>
a                                 1024    1517-04-01
a                                 2048    1789-12-31
b                                 0       1620-11-21
<<U1>                             <int64> <datetime64[D]>
>>> ih.level_drop()
<IndexHierarchy: ('y', 'z')>
1024                         1517-04-01
2048                         1789-12-31
0                            1620-11-21
<int64>                      <datetime64[D]>
#end_IndexHierarchy-level_drop()

#start_IndexHierarchy-loc_searchsorted()
>>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))
>>> ih
<IndexHierarchy: x>
a                   1517-04-01
a                   1620-11-21
b                   1517-04-01
b                   1620-11-21
c                   1517-04-01
c                   1620-11-21
<<U1>               <datetime64[D]>
>>> ih.loc_searchsorted(('b', np.datetime64('1620-11-21')))
('b', numpy.datetime64('1620-11-21'))
#end_IndexHierarchy-loc_searchsorted()

#start_IndexHierarchy-loc_to_iloc()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih
<IndexHierarchy: x>
a                   1024    True
a                   2048    True
a                   2048    False
b                   1024    True
<<U1>               <int64> <bool>
>>> ih.loc_to_iloc(('b', 1024, True))
3
>>> ih.loc_to_iloc([('a', 1024, True), ('b', 1024, True)])
[0, 3]
>>> ih.loc_to_iloc(slice(('a', 2048, False), None))
slice(2, None, None)
#end_IndexHierarchy-loc_to_iloc()

#start_IndexHierarchy-max()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.max()
[   1 1024   32]
#end_IndexHierarchy-max()

#start_IndexHierarchy-mean()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.mean()
NotImplementedError('<function mean at 0x7f89741a9e50> for IndexHierarchy is not defined; convert to Frame.')
#end_IndexHierarchy-mean()

#start_IndexHierarchy-median()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.median()
NotImplementedError('<function median at 0x7f89740465e0> for IndexHierarchy is not defined; convert to Frame.')
#end_IndexHierarchy-median()

#start_IndexHierarchy-min()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.min()
[   0 1024   32]
#end_IndexHierarchy-min()

#start_IndexHierarchy-prod()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.prod()
[          0 -2147483648       32768]
#end_IndexHierarchy-prod()

#start_IndexHierarchy-rehierarch()
>>> ih = sf.IndexHierarchy.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')
>>> ih.rehierarch([2, 0, 1])
<IndexHierarchy>
True             b     1024
True             a     1024
True             a     2048
False            a     2048
<bool>           <<U1> <int64>
#end_IndexHierarchy-rehierarch()

#start_IndexHierarchy-relabel()
>>> ih = sf.IndexHierarchy.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')
>>> ih.relabel(lambda l: (l[0], l[1], str(l[2])[0]))
<IndexHierarchy: x>
b                   1024    T
a                   1024    T
a                   2048    T
a                   2048    F
<<U1>               <int64> <<U1>
#end_IndexHierarchy-relabel()

#start_IndexHierarchy-relabel_at_depth()
>>> ih = sf.IndexHierarchy.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')
>>> ih.relabel_at_depth(lambda l: str(l)[0], depth_level=[1, 2])
<IndexHierarchy: x>
b                   1     T
a                   1     T
a                   2     T
a                   2     F
<<U1>               <<U1> <<U1>
#end_IndexHierarchy-relabel_at_depth()

#start_IndexHierarchy-rename()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih.rename('y')
<IndexHierarchy: y>
a                   1024    True
a                   2048    True
a                   2048    False
b                   1024    True
<<U1>               <int64> <bool>
#end_IndexHierarchy-rename()

#start_IndexHierarchy-roll()
>>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))
>>> ih
<IndexHierarchy: x>
a                   1517-04-01
a                   1620-11-21
b                   1517-04-01
b                   1620-11-21
c                   1517-04-01
c                   1620-11-21
<<U1>               <datetime64[D]>
>>> ih.roll(2)
<IndexHierarchy: x>
c                   1517-04-01
c                   1620-11-21
a                   1517-04-01
a                   1620-11-21
b                   1517-04-01
b                   1620-11-21
<<U1>               <datetime64[D]>
#end_IndexHierarchy-roll()

#start_IndexHierarchy-sample()
>>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))
>>> ih
<IndexHierarchy: x>
a                   1517-04-01
a                   1620-11-21
b                   1517-04-01
b                   1620-11-21
c                   1517-04-01
c                   1620-11-21
<<U1>               <datetime64[D]>
>>> ih.sample(2, seed=0)
<IndexHierarchy: x>
b                   1517-04-01
c                   1620-11-21
<<U1>               <datetime64[D]>
#end_IndexHierarchy-sample()

#start_IndexHierarchy-sort()
>>> ih = sf.IndexHierarchy.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')
>>> ih
<IndexHierarchy: x>
b                   1024    True
a                   1024    True
a                   2048    True
a                   2048    False
<<U1>               <int64> <bool>
>>> ih.sort()
<IndexHierarchy: x>
a                   1024    True
a                   2048    False
a                   2048    True
b                   1024    True
<<U1>               <int64> <bool>
>>> ih.sort(ascending=False)
<IndexHierarchy: x>
b                   1024    True
a                   2048    True
a                   2048    False
a                   1024    True
<<U1>               <int64> <bool>
#end_IndexHierarchy-sort()

#start_IndexHierarchy-std()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.std()
NotImplementedError('functools.partial(<function std at 0x7f89741b1040>, ddof=0) for IndexHierarchy is not defined; convert to Frame.')
#end_IndexHierarchy-std()

#start_IndexHierarchy-sum()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.sum()
[ 2  0 96]
#end_IndexHierarchy-sum()

#start_IndexHierarchy-tail()
>>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))
>>> ih
<IndexHierarchy: x>
a                   1517-04-01
a                   1620-11-21
b                   1517-04-01
b                   1620-11-21
c                   1517-04-01
c                   1620-11-21
<<U1>               <datetime64[D]>
>>> ih.tail(2)
<IndexHierarchy: x>
c                   1517-04-01
c                   1620-11-21
<<U1>               <datetime64[D]>
#end_IndexHierarchy-tail()

#start_IndexHierarchy-union()
>>> ih1 = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')
>>> ih2 = sf.IndexHierarchy.from_labels((('a', 1024, True), ('b', 1024, True)), name='y')
>>> ih1.union(ih2)
<IndexHierarchy>
a                1024    True
a                2048    False
a                2048    True
b                1024    True
<<U1>            <int64> <bool>
#end_IndexHierarchy-union()

#start_IndexHierarchy-unique()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih
<IndexHierarchy: ('x', 'y')>
0.0                          1024.0
1.0                          2048.0
nan                          nan
<float64>                    <float64>
>>> ih.unique()
[ 0.  1. nan]
#end_IndexHierarchy-unique()

#start_IndexHierarchy-values_at_depth()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.values_at_depth(0)
['a' 'a' 'b']
>>> ih.values_at_depth(2)
['1517-04-01' '1789-12-31' '1620-11-21']
#end_IndexHierarchy-values_at_depth()

#start_IndexHierarchy-var()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.var()
NotImplementedError('functools.partial(<function var at 0x7f89741b11f0>, ddof=0) for IndexHierarchy is not defined; convert to Frame.')
#end_IndexHierarchy-var()

#start_IndexHierarchy-__contains__()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.__contains__('a')
RuntimeError('Invalid key length for a; must be length 3.')
#end_IndexHierarchy-__contains__()

#start_IndexHierarchy-__iter__()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> tuple(ih.__iter__())
(('a', 1024, numpy.datetime64('1517-04-01')), ('a', 2048, numpy.datetime64('1789-12-31')), ('b', 0, numpy.datetime64('1620-11-21')))
#end_IndexHierarchy-__iter__()

#start_IndexHierarchy-__reversed__()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> tuple(ih.__reversed__())
(('b', 0, datetime.date(1620, 11, 21)), ('a', 2048, datetime.date(1789, 12, 31)), ('a', 1024, datetime.date(1517, 4, 1)))
#end_IndexHierarchy-__reversed__()

#start_IndexHierarchy-values
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.values
[['a' 1024 datetime.date(1517, 4, 1)]
 ['a' 2048 datetime.date(1789, 12, 31)]
 ['b' 0 datetime.date(1620, 11, 21)]]
#end_IndexHierarchy-values

#start_IndexHierarchy-interface
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.interface
<Frame>
<Index>                              cls_name       group                doc                  <<U18>
<Index: signature>
__init__(indices, *, indexers, na... IndexHierarchy Constructor          Initializer. Args...
from_index_items(items, *, index_... IndexHierarchy Constructor          Given an iterable...
from_labels(labels, *, name, reor... IndexHierarchy Constructor          Construct an Inde...
from_labels_delimited(labels, *, ... IndexHierarchy Constructor          Construct an Inde...
from_names(names)                    IndexHierarchy Constructor          Construct a zero-...
from_pandas(value)                   IndexHierarchy Constructor          Given a Pandas in...
from_product(*, name, index_const... IndexHierarchy Constructor          Given groups of i...
from_tree(tree, *, name, index_co... IndexHierarchy Constructor          Convert into a In...
from_values_per_depth(values, *, ... IndexHierarchy Constructor          Construct an Inde...
to_frame()                           IndexHierarchy Exporter             Return Frame vers...
to_frame_go()                        IndexHierarchy Exporter             Return a FrameGO ...
to_html(config, style_config)        IndexHierarchy Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexHierarchy Exporter             Return a complete...
to_pandas()                          IndexHierarchy Exporter             Return a Pandas M...
to_tree()                            IndexHierarchy Exporter             Returns the tree ...
to_visidata()                        IndexHierarchy Exporter             Open an interacti...
STATIC                               IndexHierarchy Attribute            bool(x) -> bool R...
...                                  ...            ...                  ...
via_T.__le__(other)                  IndexHierarchy Accessor Transpose
via_T.__eq__(other)                  IndexHierarchy Accessor Transpose
via_T.__ne__(other)                  IndexHierarchy Accessor Transpose
via_T.__gt__(other)                  IndexHierarchy Accessor Transpose
via_T.__ge__(other)                  IndexHierarchy Accessor Transpose
via_T.__radd__(other)                IndexHierarchy Accessor Transpose
via_T.__rsub__(other)                IndexHierarchy Accessor Transpose
via_T.__rmul__(other)                IndexHierarchy Accessor Transpose
via_T.__rtruediv__(other)            IndexHierarchy Accessor Transpose
via_T.__rfloordiv__(other)           IndexHierarchy Accessor Transpose
via_re(pattern, flags).search(pos... IndexHierarchy Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexHierarchy Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexHierarchy Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexHierarchy Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexHierarchy Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexHierarchy Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexHierarchy Accessor Regular ... Perform the same ...
<<U63>                               <<U14>         <<U27>               <<U83>
#end_IndexHierarchy-interface

#start_IndexHierarchy-__repr__()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> repr(ih)
<IndexHierarchy: ('x', 'y', 'z')>
a                                 1024    1517-04-01
a                                 2048    1789-12-31
b                                 0       1620-11-21
<<U1>                             <int64> <datetime64[D]>
#end_IndexHierarchy-__repr__()

#start_IndexHierarchy-__str__()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> str(ih)
<IndexHierarchy: ('x', 'y', 'z')>
a                                 1024    1517-04-01
a                                 2048    1789-12-31
b                                 0       1620-11-21
<<U1>                             <int64> <datetime64[D]>
#end_IndexHierarchy-__str__()

#start_IndexHierarchy-display()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.display()
<IndexHierarchy: ('x', 'y', 'z')>
a                                 1024    1517-04-01
a                                 2048    1789-12-31
b                                 0       1620-11-21
<<U1>                             <int64> <datetime64[D]>
>>> ih.display(sf.DisplayConfig(type_show=False))
a 1024 1517-04-01
a 2048 1789-12-31
b 0    1620-11-21
#end_IndexHierarchy-display()

#start_IndexHierarchy-display_tall()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.display_tall()
<IndexHierarchy: ('x', 'y', 'z')>
a                                 1024    1517-04-01
a                                 2048    1789-12-31
b                                 0       1620-11-21
<<U1>                             <int64> <datetime64[D]>
#end_IndexHierarchy-display_tall()

#start_IndexHierarchy-display_wide()
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.display_wide()
<IndexHierarchy: ('x', 'y', 'z')>
a                                 1024    1517-04-01
a                                 2048    1789-12-31
b                                 0       1620-11-21
<<U1>                             <int64> <datetime64[D]>
#end_IndexHierarchy-display_wide()

#start_IndexHierarchy-[]
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih[2]
('a', 2048, False)
>>> ih[2:]
<IndexHierarchy: x>
a                   2048    False
b                   1024    True
<<U1>               <int64> <bool>
>>> ih[[0, 3]]
<IndexHierarchy: x>
a                   1024    True
b                   1024    True
<<U1>               <int64> <bool>
#end_IndexHierarchy-[]

#start_IndexHierarchy-iloc[]
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih.iloc[2]
('a', 2048, False)
>>> ih.iloc[2:]
<IndexHierarchy: x>
a                   2048    False
b                   1024    True
<<U1>               <int64> <bool>
>>> ih.iloc[[0, 3]]
<IndexHierarchy: x>
a                   1024    True
b                   1024    True
<<U1>               <int64> <bool>
#end_IndexHierarchy-iloc[]

#start_IndexHierarchy-loc[]
>>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih.loc[('a', 2048, True)]
('a', 2048, True)
>>> ih.loc[('a', 2048, True):]
<IndexHierarchy: x>
a                   2048    True
a                   2048    False
b                   1024    True
<<U1>               <int64> <bool>
>>> ih.loc[[('a', 2048, True), ('b', 1024, True)]]
<IndexHierarchy: x>
a                   2048    True
b                   1024    True
<<U1>               <int64> <bool>
#end_IndexHierarchy-loc[]

#start_IndexHierarchy-iter_label()
>>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')
>>> tuple(ih.iter_label())
(('a', 1024), ('a', 4096), ('a', 2048), ('b', 1024), ('b', 4096), ('b', 2048), ('c', 1024), ('c', 4096), ('c', 2048))
#end_IndexHierarchy-iter_label()

#start_IndexHierarchy-iter_label().apply()
>>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')
>>> ih.iter_label().apply(lambda l: (l[0].upper(), l[1]))
[('A', 1024) ('A', 4096) ('A', 2048) ('B', 1024) ('B', 4096) ('B', 2048)
 ('C', 1024) ('C', 4096) ('C', 2048)]
#end_IndexHierarchy-iter_label().apply()

#start_IndexHierarchy-iter_label().apply_iter()
>>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')
>>> tuple(ih.iter_label().apply_iter(lambda l: (l[0].upper(), l[1])))
(('A', 1024), ('A', 4096), ('A', 2048), ('B', 1024), ('B', 4096), ('B', 2048), ('C', 1024), ('C', 4096), ('C', 2048))
#end_IndexHierarchy-iter_label().apply_iter()

#start_IndexHierarchy-iter_label().apply_iter_items()
>>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')
>>> tuple(ih.iter_label().apply_iter_items(lambda l: (l[0].upper(), l[1])))
((0, ('A', 1024)), (1, ('A', 4096)), (2, ('A', 2048)), (3, ('B', 1024)), (4, ('B', 4096)), (5, ('B', 2048)), (6, ('C', 1024)), (7, ('C', 4096)), (8, ('C', 2048)))
#end_IndexHierarchy-iter_label().apply_iter_items()

#start_IndexHierarchy-iter_label().apply_pool()
>>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')
>>> ih.iter_label().apply_pool(lambda l: (l[0].upper(), l[1]), use_threads=True)
[('A', 1024) ('A', 4096) ('A', 2048) ('B', 1024) ('B', 4096) ('B', 2048)
 ('C', 1024) ('C', 4096) ('C', 2048)]
#end_IndexHierarchy-iter_label().apply_pool()

#start_IndexHierarchy-__add__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih + 8
[[    8  1032    40]
 [    9 -2040    40]
 [    9  1032    40]]
#end_IndexHierarchy-__add__()

#start_IndexHierarchy-__and__()
>>> ih = sf.IndexHierarchy.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))
>>> ih & True
[[False  True  True]
 [ True  True  True]
 [False  True False]]
>>> ih & (False, True, True)
[[False  True  True]
 [False  True  True]
 [False  True False]]
#end_IndexHierarchy-__and__()

#start_IndexHierarchy-__eq__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih == 8
[[False False False]
 [False False False]
 [False False False]]
#end_IndexHierarchy-__eq__()

#start_IndexHierarchy-__floordiv__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih // 8
[[   0  128    4]
 [   0 -256    4]
 [   0  128    4]]
#end_IndexHierarchy-__floordiv__()

#start_IndexHierarchy-__ge__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih >= 8
[[False  True  True]
 [False False  True]
 [False  True  True]]
#end_IndexHierarchy-__ge__()

#start_IndexHierarchy-__gt__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih > 8
[[False  True  True]
 [False False  True]
 [False  True  True]]
#end_IndexHierarchy-__gt__()

#start_IndexHierarchy-__le__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih <= 8
[[ True False False]
 [ True  True False]
 [ True False False]]
#end_IndexHierarchy-__le__()

#start_IndexHierarchy-__lt__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih < 8
[[ True False False]
 [ True  True False]
 [ True False False]]
#end_IndexHierarchy-__lt__()

#start_IndexHierarchy-__matmul__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih @ (3, 0, 4)
[128 131 131]
#end_IndexHierarchy-__matmul__()

#start_IndexHierarchy-__mod__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih % 8
[[0 0 0]
 [1 0 0]
 [1 0 0]]
#end_IndexHierarchy-__mod__()

#start_IndexHierarchy-__mul__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih * 8
[[     0   8192    256]
 [     8 -16384    256]
 [     8   8192    256]]
#end_IndexHierarchy-__mul__()

#start_IndexHierarchy-__ne__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih != 8
[[ True  True  True]
 [ True  True  True]
 [ True  True  True]]
#end_IndexHierarchy-__ne__()

#start_IndexHierarchy-__or__()
>>> ih = sf.IndexHierarchy.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))
>>> ih | True
[[ True  True  True]
 [ True  True  True]
 [ True  True  True]]
>>> ih | (False, True, True)
[[False  True  True]
 [ True  True  True]
 [False  True  True]]
#end_IndexHierarchy-__or__()

#start_IndexHierarchy-__pow__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih ** 8
[[            0             0 1099511627776]
 [            1             0 1099511627776]
 [            1             0 1099511627776]]
#end_IndexHierarchy-__pow__()

#start_IndexHierarchy-__radd__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> 8 + ih
[[    8  1032    40]
 [    9 -2040    40]
 [    9  1032    40]]
#end_IndexHierarchy-__radd__()

#start_IndexHierarchy-__rfloordiv__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> 8 // ih
[[ 0  0  0]
 [ 8 -1  0]
 [ 8  0  0]]
#end_IndexHierarchy-__rfloordiv__()

#start_IndexHierarchy-__rmatmul__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih @ (3, 0, 4)
[128 131 131]
#end_IndexHierarchy-__rmatmul__()

#start_IndexHierarchy-__rmul__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> 8 * ih
[[     0   8192    256]
 [     8 -16384    256]
 [     8   8192    256]]
#end_IndexHierarchy-__rmul__()

#start_IndexHierarchy-__rshift__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih >> 1
[[    0   512    16]
 [    0 -1024    16]
 [    0   512    16]]
#end_IndexHierarchy-__rshift__()

#start_IndexHierarchy-__rsub__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> 8 - ih
[[    8 -1016   -24]
 [    7  2056   -24]
 [    7 -1016   -24]]
#end_IndexHierarchy-__rsub__()

#start_IndexHierarchy-__rtruediv__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> 8 / ih
[[         inf  7.81250e-03  2.50000e-01]
 [ 8.00000e+00 -3.90625e-03  2.50000e-01]
 [ 8.00000e+00  7.81250e-03  2.50000e-01]]
#end_IndexHierarchy-__rtruediv__()

#start_IndexHierarchy-__sub__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih - 8
[[   -8  1016    24]
 [   -7 -2056    24]
 [   -7  1016    24]]
#end_IndexHierarchy-__sub__()

#start_IndexHierarchy-__truediv__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih / 8
[[ 0.00e+00  1.28e+02  4.00e+00]
 [ 1.25e-01 -2.56e+02  4.00e+00]
 [ 1.25e-01  1.28e+02  4.00e+00]]
#end_IndexHierarchy-__truediv__()

#start_IndexHierarchy-__xor__()
>>> ih = sf.IndexHierarchy.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))
>>> ih ^ True
[[ True False False]
 [False False False]
 [ True False  True]]
>>> ih ^ (False, True, True)
[[False False False]
 [ True False False]
 [False False  True]]
#end_IndexHierarchy-__xor__()

#start_IndexHierarchy-__abs__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> abs(ih)
[[   0 1024   32]
 [   1 2048   32]
 [   1 1024   32]]
#end_IndexHierarchy-__abs__()

#start_IndexHierarchy-__invert__()
>>> ih = sf.IndexHierarchy.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))
>>> ~ih
[[ True False False]
 [False False False]
 [ True False  True]]
#end_IndexHierarchy-__invert__()

#start_IndexHierarchy-__neg__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> -ih
[[    0 -1024   -32]
 [   -1  2048   -32]
 [   -1 -1024   -32]]
#end_IndexHierarchy-__neg__()

#start_IndexHierarchy-__pos__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> +ih
[[    0  1024    32]
 [    1 -2048    32]
 [    1  1024    32]]
#end_IndexHierarchy-__pos__()

#start_IndexHierarchy-via_dt.year
>>> import datetime
>>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.year
[[1517 2022]
 [1517 2021]
 [1517 2022]]
#end_IndexHierarchy-via_dt.year

#start_IndexHierarchy-via_dt.month
>>> import datetime
>>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.month
[[ 4  4]
 [12 12]
 [ 6  6]]
#end_IndexHierarchy-via_dt.month

#start_IndexHierarchy-via_dt.day
>>> import datetime
>>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.day
[[ 1  1]
 [31 31]
 [30 30]]
#end_IndexHierarchy-via_dt.day

#start_IndexHierarchy-via_dt.hour
>>> import datetime
>>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.hour
[[0 0]
 [0 0]
 [0 0]]
#end_IndexHierarchy-via_dt.hour

#start_IndexHierarchy-via_dt.minute
>>> import datetime
>>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.minute
[[0 0]
 [0 0]
 [0 0]]
#end_IndexHierarchy-via_dt.minute

#start_IndexHierarchy-via_dt.second
>>> import datetime
>>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.second
[[0 0]
 [0 0]
 [0 0]]
#end_IndexHierarchy-via_dt.second

#start_IndexHierarchy-via_dt.weekday()
>>> import datetime
>>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.weekday()
[[6 4]
 [0 4]
 [5 3]]
#end_IndexHierarchy-via_dt.weekday()

#start_IndexHierarchy-via_dt.quarter()
>>> import datetime
>>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.quarter()
[[2 2]
 [4 4]
 [2 2]]
#end_IndexHierarchy-via_dt.quarter()

#start_IndexHierarchy-via_dt.is_month_end()
>>> import datetime
>>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.is_month_end()
[[False False]
 [ True  True]
 [ True  True]]
#end_IndexHierarchy-via_dt.is_month_end()

#start_IndexHierarchy-via_dt.is_month_start()
>>> import datetime
>>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.is_month_start()
[[ True  True]
 [False False]
 [False False]]
#end_IndexHierarchy-via_dt.is_month_start()

#start_IndexHierarchy-via_dt.is_year_end()
>>> import datetime
>>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.is_year_end()
[[False False]
 [ True  True]
 [False False]]
#end_IndexHierarchy-via_dt.is_year_end()

#start_IndexHierarchy-via_dt.is_year_start()
>>> import datetime
>>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.is_year_start()
[[False False]
 [False False]
 [False False]]
#end_IndexHierarchy-via_dt.is_year_start()

#start_IndexHierarchy-via_dt.is_quarter_end()
>>> import datetime
>>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.is_quarter_end()
[[False False]
 [ True  True]
 [ True  True]]
#end_IndexHierarchy-via_dt.is_quarter_end()

#start_IndexHierarchy-via_dt.is_quarter_start()
>>> import datetime
>>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.is_quarter_start()
[[ True  True]
 [False False]
 [False False]]
#end_IndexHierarchy-via_dt.is_quarter_start()

#start_IndexHierarchy-via_dt.timetuple()
>>> import datetime
>>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.timetuple()
[[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)
  time.struct_time(tm_year=2022, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=4, tm_yday=91, tm_isdst=-1)]
 [time.struct_time(tm_year=1517, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=365, tm_isdst=-1)
  time.struct_time(tm_year=2021, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=4, tm_yday=365, tm_isdst=-1)]
 [time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)
  time.struct_time(tm_year=2022, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=181, tm_isdst=-1)]]
#end_IndexHierarchy-via_dt.timetuple()

#start_IndexHierarchy-via_dt.isoformat()
>>> import datetime
>>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.isoformat()
[['1517-04-01' '2022-04-01']
 ['1517-12-31' '2021-12-31']
 ['1517-06-30' '2022-06-30']]
#end_IndexHierarchy-via_dt.isoformat()

#start_IndexHierarchy-via_dt.fromisoformat()
>>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')))
>>> ih.via_dt.fromisoformat()
[[datetime.date(1517, 4, 1) datetime.date(2022, 4, 1)]
 [datetime.date(1517, 12, 31) datetime.date(2021, 12, 31)]
 [datetime.date(1517, 6, 30) datetime.date(2022, 6, 30)]]
#end_IndexHierarchy-via_dt.fromisoformat()

#start_IndexHierarchy-via_dt.strftime()
>>> import datetime
>>> ih = sf.IndexHierarchy.from_labels(((datetime.datetime(1517, 1, 1), datetime.datetime(2022, 4, 1, 8, 30, 59)), (datetime.datetime(1517, 4, 1), datetime.datetime(2022, 12, 31, 8, 30, 59))))
>>> ih.via_dt.strftime("%A | %B")
[['Monday | January' 'Friday | April']
 ['Sunday | April' 'Saturday | December']]
#end_IndexHierarchy-via_dt.strftime()

#start_IndexHierarchy-via_dt.strptime()
>>> ih = sf.IndexHierarchy.from_labels((('4/1/1517', '4/1/2022'), ('12/31/1517', '12/31/2021'), ('6/30/1517', '6/30/2022')))
>>> ih.via_dt.strptime("%m/%d/%Y")
[[datetime.datetime(1517, 4, 1, 0, 0) datetime.datetime(2022, 4, 1, 0, 0)]
 [datetime.datetime(1517, 12, 31, 0, 0)
  datetime.datetime(2021, 12, 31, 0, 0)]
 [datetime.datetime(1517, 6, 30, 0, 0)
  datetime.datetime(2022, 6, 30, 0, 0)]]
#end_IndexHierarchy-via_dt.strptime()

#start_IndexHierarchy-via_dt.strpdate()
>>> ih = sf.IndexHierarchy.from_labels((('4/1/1517', '4/1/2022'), ('12/31/1517', '12/31/2021'), ('6/30/1517', '6/30/2022')))
>>> ih.via_dt.strpdate("%m/%d/%Y")
[[datetime.date(1517, 4, 1) datetime.date(2022, 4, 1)]
 [datetime.date(1517, 12, 31) datetime.date(2021, 12, 31)]
 [datetime.date(1517, 6, 30) datetime.date(2022, 6, 30)]]
#end_IndexHierarchy-via_dt.strpdate()

#start_IndexHierarchy-via_str.__getitem__()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str[-1]
[[' ' '7']
 ['Z' '7']
 ['3' '7']
 [' ' '1']]
#end_IndexHierarchy-via_str.__getitem__()

#start_IndexHierarchy-via_str.capitalize()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.capitalize()
[['Qrs ' '4/1/1517']
 ['Xyz' '12/31/1517']
 ['123' '6/30/1517']
 [' wx ' '12/31/2021']]
#end_IndexHierarchy-via_str.capitalize()

#start_IndexHierarchy-via_str.center()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.center(8)
[['  qrs   ' '4/1/1517']
 ['  XYZ   ' '12/31/15']
 ['  123   ' '6/30/151']
 ['   wX   ' '12/31/20']]
#end_IndexHierarchy-via_str.center()

#start_IndexHierarchy-via_str.contains()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.contains('X')
[[False False]
 [ True False]
 [False False]
 [ True False]]
#end_IndexHierarchy-via_str.contains()

#start_IndexHierarchy-via_str.count()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.count('X')
[[0 0]
 [1 0]
 [0 0]
 [1 0]]
#end_IndexHierarchy-via_str.count()

#start_IndexHierarchy-via_str.decode()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021'))).astype(bytes)
>>> ih
<IndexHierarchy>
b'qrs '          b'4/1/1517'
b'XYZ'           b'12/31/1517'
b'123'           b'6/30/1517'
b' wX '          b'12/31/2021'
<|S4>            <|S10>
>>> ih.via_str.decode()
[['qrs ' '4/1/1517']
 ['XYZ' '12/31/1517']
 ['123' '6/30/1517']
 [' wX ' '12/31/2021']]
#end_IndexHierarchy-via_str.decode()

#start_IndexHierarchy-via_str.encode()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.encode()
[[b'qrs ' b'4/1/1517']
 [b'XYZ' b'12/31/1517']
 [b'123' b'6/30/1517']
 [b' wX ' b'12/31/2021']]
#end_IndexHierarchy-via_str.encode()

#start_IndexHierarchy-via_str.endswith()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.endswith(' ')
[[ True False]
 [False False]
 [False False]
 [ True False]]
#end_IndexHierarchy-via_str.endswith()

#start_IndexHierarchy-via_str.find()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.find('X')
[[-1 -1]
 [ 0 -1]
 [-1 -1]
 [ 2 -1]]
#end_IndexHierarchy-via_str.find()

#start_IndexHierarchy-via_str.format()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.format('{:-^10}')
[['---qrs ---' '-4/1/1517-']
 ['---XYZ----' '12/31/1517']
 ['---123----' '6/30/1517-']
 ['--- wX ---' '12/31/2021']]
#end_IndexHierarchy-via_str.format()

#start_IndexHierarchy-via_str.index()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.index('X')
ValueError('substring not found')
#end_IndexHierarchy-via_str.index()

#start_IndexHierarchy-via_str.isalnum()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.isalnum()
[[False False]
 [ True False]
 [ True False]
 [False False]]
#end_IndexHierarchy-via_str.isalnum()

#start_IndexHierarchy-via_str.isalpha()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.isalpha()
[[False False]
 [ True False]
 [False False]
 [False False]]
#end_IndexHierarchy-via_str.isalpha()

#start_IndexHierarchy-via_str.isdecimal()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.isdecimal()
[[False False]
 [False False]
 [ True False]
 [False False]]
#end_IndexHierarchy-via_str.isdecimal()

#start_IndexHierarchy-via_str.isdigit()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.isdigit()
[[False False]
 [False False]
 [ True False]
 [False False]]
#end_IndexHierarchy-via_str.isdigit()

#start_IndexHierarchy-via_str.islower()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.islower()
[[ True False]
 [False False]
 [False False]
 [False False]]
#end_IndexHierarchy-via_str.islower()

#start_IndexHierarchy-via_str.isnumeric()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.isnumeric()
[[False False]
 [False False]
 [ True False]
 [False False]]
#end_IndexHierarchy-via_str.isnumeric()

#start_IndexHierarchy-via_str.isspace()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.isspace()
[[False False]
 [False False]
 [False False]
 [False False]]
#end_IndexHierarchy-via_str.isspace()

#start_IndexHierarchy-via_str.istitle()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.istitle()
[[False False]
 [False False]
 [False False]
 [False False]]
#end_IndexHierarchy-via_str.istitle()

#start_IndexHierarchy-via_str.isupper()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.isupper()
[[False False]
 [ True False]
 [False False]
 [False False]]
#end_IndexHierarchy-via_str.isupper()

#start_IndexHierarchy-via_str.ljust()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.ljust(8)
[['qrs     ' '4/1/1517']
 ['XYZ     ' '12/31/15']
 ['123     ' '6/30/151']
 [' wX     ' '12/31/20']]
#end_IndexHierarchy-via_str.ljust()

#start_IndexHierarchy-via_str.len()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.len()
[[ 4  8]
 [ 3 10]
 [ 3  9]
 [ 4 10]]
#end_IndexHierarchy-via_str.len()

#start_IndexHierarchy-via_str.lower()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.lower()
[['qrs ' '4/1/1517']
 ['xyz' '12/31/1517']
 ['123' '6/30/1517']
 [' wx ' '12/31/2021']]
#end_IndexHierarchy-via_str.lower()

#start_IndexHierarchy-via_str.lstrip()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.lstrip()
[['qrs ' '4/1/1517']
 ['XYZ' '12/31/1517']
 ['123' '6/30/1517']
 ['wX ' '12/31/2021']]
#end_IndexHierarchy-via_str.lstrip()

#start_IndexHierarchy-via_str.partition()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.partition('X')
[[('qrs ', '', '') ('4/1/1517', '', '')]
 [('', 'X', 'YZ') ('12/31/1517', '', '')]
 [('123', '', '') ('6/30/1517', '', '')]
 [(' w', 'X', ' ') ('12/31/2021', '', '')]]
#end_IndexHierarchy-via_str.partition()

#start_IndexHierarchy-via_str.replace()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.replace('X', '*')
[['qrs ' '4/1/1517']
 ['*YZ' '12/31/1517']
 ['123' '6/30/1517']
 [' w* ' '12/31/2021']]
#end_IndexHierarchy-via_str.replace()

#start_IndexHierarchy-via_str.rfind()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.rfind('X')
[[-1 -1]
 [ 0 -1]
 [-1 -1]
 [ 2 -1]]
#end_IndexHierarchy-via_str.rfind()

#start_IndexHierarchy-via_str.rindex()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.rindex('X')
ValueError('substring not found')
#end_IndexHierarchy-via_str.rindex()

#start_IndexHierarchy-via_str.rjust()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.rjust(8)
[['    qrs ' '4/1/1517']
 ['     XYZ' '12/31/15']
 ['     123' '6/30/151']
 ['     wX ' '12/31/20']]
#end_IndexHierarchy-via_str.rjust()

#start_IndexHierarchy-via_str.rpartition()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.rpartition('X')
[[('', '', 'qrs ') ('', '', '4/1/1517')]
 [('', 'X', 'YZ') ('', '', '12/31/1517')]
 [('', '', '123') ('', '', '6/30/1517')]
 [(' w', 'X', ' ') ('', '', '12/31/2021')]]
#end_IndexHierarchy-via_str.rpartition()

#start_IndexHierarchy-via_str.rsplit()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.rsplit('X')
[[('qrs ',) ('4/1/1517',)]
 [('', 'YZ') ('12/31/1517',)]
 [('123',) ('6/30/1517',)]
 [(' w', ' ') ('12/31/2021',)]]
#end_IndexHierarchy-via_str.rsplit()

#start_IndexHierarchy-via_str.rstrip()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.rstrip()
[['qrs' '4/1/1517']
 ['XYZ' '12/31/1517']
 ['123' '6/30/1517']
 [' wX' '12/31/2021']]
#end_IndexHierarchy-via_str.rstrip()

#start_IndexHierarchy-via_str.split()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.split('X')
[[('qrs ',) ('4/1/1517',)]
 [('', 'YZ') ('12/31/1517',)]
 [('123',) ('6/30/1517',)]
 [(' w', ' ') ('12/31/2021',)]]
#end_IndexHierarchy-via_str.split()

#start_IndexHierarchy-via_str.startswith()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.startswith('X')
[[False False]
 [ True False]
 [False False]
 [False False]]
#end_IndexHierarchy-via_str.startswith()

#start_IndexHierarchy-via_str.strip()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.strip()
[['qrs' '4/1/1517']
 ['XYZ' '12/31/1517']
 ['123' '6/30/1517']
 ['wX' '12/31/2021']]
#end_IndexHierarchy-via_str.strip()

#start_IndexHierarchy-via_str.swapcase()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.swapcase()
[['QRS ' '4/1/1517']
 ['xyz' '12/31/1517']
 ['123' '6/30/1517']
 [' Wx ' '12/31/2021']]
#end_IndexHierarchy-via_str.swapcase()

#start_IndexHierarchy-via_str.title()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.title()
[['Qrs ' '4/1/1517']
 ['Xyz' '12/31/1517']
 ['123' '6/30/1517']
 [' Wx ' '12/31/2021']]
#end_IndexHierarchy-via_str.title()

#start_IndexHierarchy-via_str.upper()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.upper()
[['QRS ' '4/1/1517']
 ['XYZ' '12/31/1517']
 ['123' '6/30/1517']
 [' WX ' '12/31/2021']]
#end_IndexHierarchy-via_str.upper()

#start_IndexHierarchy-via_str.zfill()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_str.zfill(8)
[['0000qrs ' '4/1/1517']
 ['00000XYZ' '12/31/15']
 ['00000123' '6/30/151']
 ['0000 wX ' '12/31/20']]
#end_IndexHierarchy-via_str.zfill()

#start_IndexHierarchy-via_T.via_fill_value()
>>> 
#end_IndexHierarchy-via_T.via_fill_value()

#start_IndexHierarchy-via_T.__add__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T + (0, 1, 1, -1)
[[0.000e+00 1.024e+03]
 [2.000e+00       nan]
 [1.100e+01 2.049e+03]
 [      nan       nan]]
#end_IndexHierarchy-via_T.__add__()

#start_IndexHierarchy-via_T.__sub__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T - (0, 1, 1, -1)
[[   0. 1024.]
 [   0.   nan]
 [   9. 2047.]
 [  nan   nan]]
#end_IndexHierarchy-via_T.__sub__()

#start_IndexHierarchy-via_T.__mul__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T * (0, 1, 1, -1)
[[0.000e+00 0.000e+00]
 [1.000e+00       nan]
 [1.000e+01 2.048e+03]
 [      nan       nan]]
#end_IndexHierarchy-via_T.__mul__()

#start_IndexHierarchy-via_T.__truediv__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T / (0, 1, 1, -1)
[[      nan       inf]
 [1.000e+00       nan]
 [1.000e+01 2.048e+03]
 [      nan       nan]]
#end_IndexHierarchy-via_T.__truediv__()

#start_IndexHierarchy-via_T.__floordiv__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T // (0, 1, 1, -1)
[[      nan       nan]
 [1.000e+00       nan]
 [1.000e+01 2.048e+03]
 [      nan       nan]]
#end_IndexHierarchy-via_T.__floordiv__()

#start_IndexHierarchy-via_T.__mod__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T % (0, 1, 1, -1)
[[nan nan]
 [ 0. nan]
 [ 0.  0.]
 [nan nan]]
#end_IndexHierarchy-via_T.__mod__()

#start_IndexHierarchy-via_T.__pow__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T ** (0, 1, 1, -1)
[[1.000e+00 1.000e+00]
 [1.000e+00       nan]
 [1.000e+01 2.048e+03]
 [      nan       nan]]
#end_IndexHierarchy-via_T.__pow__()

#start_IndexHierarchy-via_T.__lshift__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))
>>> ih.via_T << (1, 2, 1, 2)
TypeError("ufunc 'left_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHierarchy-via_T.__lshift__()

#start_IndexHierarchy-via_T.__rshift__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))
>>> ih.via_T >> (1, 2, 1, 2)
TypeError("ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHierarchy-via_T.__rshift__()

#start_IndexHierarchy-via_T.__and__()
>>> ih = sf.IndexHierarchy.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))
>>> ih.via_T & (True, False, True)
[[False  True  True]
 [False False False]
 [False  True False]]
#end_IndexHierarchy-via_T.__and__()

#start_IndexHierarchy-via_T.__xor__()
>>> ih = sf.IndexHierarchy.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))
>>> ih.via_T ^ (True, False, True)
[[ True False False]
 [ True  True  True]
 [ True False  True]]
#end_IndexHierarchy-via_T.__xor__()

#start_IndexHierarchy-via_T.__or__()
>>> ih = sf.IndexHierarchy.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))
>>> ih.via_T | (True, False, True)
[[ True  True  True]
 [ True  True  True]
 [ True  True  True]]
#end_IndexHierarchy-via_T.__or__()

#start_IndexHierarchy-via_T.__lt__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T < (0, 1, 1, -1)
[[False False]
 [False False]
 [False False]
 [False False]]
#end_IndexHierarchy-via_T.__lt__()

#start_IndexHierarchy-via_T.__le__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T <= (0, 1, 1, -1)
[[ True False]
 [ True False]
 [False False]
 [False False]]
#end_IndexHierarchy-via_T.__le__()

#start_IndexHierarchy-via_T.__eq__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T == (0, 1, 1, -1)
[[ True False]
 [ True False]
 [False False]
 [False False]]
#end_IndexHierarchy-via_T.__eq__()

#start_IndexHierarchy-via_T.__ne__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T != (0, 1, 1, -1)
[[False  True]
 [False  True]
 [ True  True]
 [ True  True]]
#end_IndexHierarchy-via_T.__ne__()

#start_IndexHierarchy-via_T.__gt__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T > (0, 1, 1, -1)
[[False  True]
 [False False]
 [ True  True]
 [False False]]
#end_IndexHierarchy-via_T.__gt__()

#start_IndexHierarchy-via_T.__ge__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T >= (0, 1, 1, -1)
[[ True  True]
 [ True False]
 [ True  True]
 [False False]]
#end_IndexHierarchy-via_T.__ge__()

#start_IndexHierarchy-via_T.__radd__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T + (0, 1, 1, -1)
[[0.000e+00 1.024e+03]
 [2.000e+00       nan]
 [1.100e+01 2.049e+03]
 [      nan       nan]]
#end_IndexHierarchy-via_T.__radd__()

#start_IndexHierarchy-via_T.__rsub__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T - (0, 1, 1, -1)
[[   0. 1024.]
 [   0.   nan]
 [   9. 2047.]
 [  nan   nan]]
#end_IndexHierarchy-via_T.__rsub__()

#start_IndexHierarchy-via_T.__rmul__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T * (0, 1, 1, -1)
[[0.000e+00 0.000e+00]
 [1.000e+00       nan]
 [1.000e+01 2.048e+03]
 [      nan       nan]]
#end_IndexHierarchy-via_T.__rmul__()

#start_IndexHierarchy-via_T.__rtruediv__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T / (0, 1, 1, -1)
[[      nan       inf]
 [1.000e+00       nan]
 [1.000e+01 2.048e+03]
 [      nan       nan]]
#end_IndexHierarchy-via_T.__rtruediv__()

#start_IndexHierarchy-via_T.__rfloordiv__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T // (0, 1, 1, -1)
[[      nan       nan]
 [1.000e+00       nan]
 [1.000e+01 2.048e+03]
 [      nan       nan]]
#end_IndexHierarchy-via_T.__rfloordiv__()

#start_IndexHierarchy-via_re().search()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_re('[X123]').search()
[[False  True]
 [ True  True]
 [ True  True]
 [ True  True]]
#end_IndexHierarchy-via_re().search()

#start_IndexHierarchy-via_re().match()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_re('[X123]').match()
[[False False]
 [ True  True]
 [ True False]
 [False  True]]
#end_IndexHierarchy-via_re().match()

#start_IndexHierarchy-via_re().fullmatch()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_re('123').fullmatch()
[[False False]
 [False False]
 [ True False]
 [False False]]
#end_IndexHierarchy-via_re().fullmatch()

#start_IndexHierarchy-via_re().split()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_re('[X123]').split()
[[('qrs ',) ('4/', '/', '5', '7')]
 [('', 'YZ') ('', '', '/', '', '/', '5', '7')]
 [('', '', '', '') ('6/', '0/', '5', '7')]
 [(' w', ' ') ('', '', '/', '', '/', '0', '', '')]]
#end_IndexHierarchy-via_re().split()

#start_IndexHierarchy-via_re().findall()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_re('[X123]').findall()
[[() ('1', '1', '1')]
 [('X',) ('1', '2', '3', '1', '1', '1')]
 [('1', '2', '3') ('3', '1', '1')]
 [('X',) ('1', '2', '3', '1', '2', '2', '1')]]
#end_IndexHierarchy-via_re().findall()

#start_IndexHierarchy-via_re().sub()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_re('[X123]').sub('==')
[['qrs ' '4/==/==5==7']
 ['==YZ' '====/====/==5==7']
 ['======' '6/==0/==5==7']
 [' w== ' '====/====/==0====']]
#end_IndexHierarchy-via_re().sub()

#start_IndexHierarchy-via_re().subn()
>>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchy>
qrs              4/1/1517
XYZ              12/31/1517
123              6/30/1517
 wX              12/31/2021
<<U4>            <<U10>
>>> ih.via_re('[X123]').subn('==', 1)
[[('qrs ', 0) ('4/==/1517', 1)]
 [('==YZ', 1) ('==2/31/1517', 1)]
 [('==23', 1) ('6/==0/1517', 1)]
 [(' w== ', 1) ('==2/31/2021', 1)]]
#end_IndexHierarchy-via_re().subn()

#start_IndexHierarchy-via_values.apply()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.via_values.apply(np.sin)
<IndexHierarchy: ('x', 'y', 'z')>
0.0                               -0.15853338004399595 0.5514266812416906
0.8414709848078965                0.31305701279012343  0.5514266812416906
0.8414709848078965                -0.15853338004399595 0.5514266812416906
<float64>                         <float64>            <float64>
#end_IndexHierarchy-via_values.apply()

#start_IndexHierarchy-via_values.__array_ufunc__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> np.sin(ih.via_values)
<IndexHierarchy: ('x', 'y', 'z')>
0.0                               -0.15853338004399595 0.5514266812416906
0.8414709848078965                0.31305701279012343  0.5514266812416906
0.8414709848078965                -0.15853338004399595 0.5514266812416906
<float64>                         <float64>            <float64>
#end_IndexHierarchy-via_values.__array_ufunc__()

#start_IndexHierarchy-via_values.__call__()
>>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> np.sin(ih.via_values(unify_blocks=True))
<IndexHierarchy: ('x', 'y', 'z')>
0.0                               -0.15853338004399595 0.5514266812416906
0.8414709848078965                0.31305701279012343  0.5514266812416906
0.8414709848078965                -0.15853338004399595 0.5514266812416906
<float64>                         <float64>            <float64>
#end_IndexHierarchy-via_values.__call__()

#start_IndexHierarchyGO-__init__()
>>> a = np.array([[0, 0, 1, 1], [0, 1, 0, 1]])
>>> a.flags.writeable = False
>>> sf.IndexHierarchyGO((sf.Index(('a', 'b')), sf.Index((1024, 2048))), indexers=a)
<IndexHierarchyGO>
a                  1024
a                  2048
b                  1024
b                  2048
<<U1>              <int64>
#end_IndexHierarchyGO-__init__()

#start_IndexHierarchyGO-from_index_items()
>>> ix1 = sf.Index(('a', 'b', 'c'), name='x')
>>> ix2 = sf.Index((1024, 2048, 4096), name='y')
>>> ih1 = sf.IndexHierarchyGO.from_index_items(((ix1.name, ix1), (ix2.name, ix2)), name='ih1')
>>> ih1
<IndexHierarchyGO: ih1>
x                       a
x                       b
x                       c
y                       1024
y                       2048
y                       4096
<<U1>                   <object>
>>> ih2 = sf.IndexHierarchyGO.from_index_items(((ix2.name, ix2), (ix1.name, ix1)), name='ih2')
>>> sf.IndexHierarchyGO.from_index_items(((ih1.name, ih1), (ih2.name, ih2)))
<IndexHierarchyGO>
ih1                x     a
ih1                x     b
ih1                x     c
ih1                y     1024
ih1                y     2048
ih1                y     4096
ih2                y     1024
ih2                y     2048
ih2                y     4096
ih2                x     a
ih2                x     b
ih2                x     c
<<U3>              <<U1> <object>
#end_IndexHierarchyGO-from_index_items()

#start_IndexHierarchyGO-from_labels()
>>> sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
<IndexHierarchyGO: x>
a                     1024    True
a                     2048    True
a                     2048    False
b                     1024    True
<<U1>                 <int64> <bool>
#end_IndexHierarchyGO-from_labels()

#start_IndexHierarchyGO-from_labels_delimited()
>>> sf.IndexHierarchyGO.from_labels_delimited(("'a'|1024|False", "'b'|1024|True", "'b'|2048|False"), delimiter='|')
<IndexHierarchyGO>
a                  1024    False
b                  1024    True
b                  2048    False
<<U1>              <int64> <bool>
#end_IndexHierarchyGO-from_labels_delimited()

#start_IndexHierarchyGO-from_names()
>>> sf.IndexHierarchyGO.from_names(('x', 'y', 'z'))
<IndexHierarchyGO: ('x', 'y', 'z')>
<float64>                           <float64> <float64>
#end_IndexHierarchyGO-from_names()

#start_IndexHierarchyGO-from_pandas()
>>> mi = pd.MultiIndex.from_product((('a', 'b'), (1024, 2048)))
>>> sf.IndexHierarchyGO.from_pandas(mi)
<IndexHierarchyGO>
a                  1024
a                  2048
b                  1024
b                  2048
<object>           <int64>
#end_IndexHierarchyGO-from_pandas()

#start_IndexHierarchyGO-from_product()
>>> sf.IndexHierarchyGO.from_product(('a', 'b'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))
<IndexHierarchyGO: x>
a                     1517-04-01
a                     1620-11-21
b                     1517-04-01
b                     1620-11-21
<<U1>                 <datetime64[D]>
#end_IndexHierarchyGO-from_product()

#start_IndexHierarchyGO-from_tree()
>>> sf.IndexHierarchyGO.from_tree({'a': {1024: (False, True), 2048: (True,)}})
<IndexHierarchyGO>
a                  1024    False
a                  1024    True
a                  2048    True
<<U1>              <int64> <bool>
#end_IndexHierarchyGO-from_tree()

#start_IndexHierarchyGO-from_values_per_depth()
>>> sf.IndexHierarchyGO.from_values_per_depth((('a', 'a', 'b', 'b'), (0, 1, 0, 1)))
<IndexHierarchyGO>
a                  0
a                  1
b                  0
b                  1
<<U1>              <int64>
>>> sf.IndexHierarchyGO.from_values_per_depth((range(0, 12, 2), range(6)))
<IndexHierarchyGO>
0                  0
2                  1
4                  2
6                  3
8                  4
10                 5
<int64>            <int64>
#end_IndexHierarchyGO-from_values_per_depth()

#start_IndexHierarchyGO-to_frame()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih.to_frame()
<Frame>
<Index> 0     1       2      <int64>
<Index>
0       a     1024    True
1       a     2048    True
2       a     2048    False
3       b     1024    True
<int64> <<U1> <int64> <bool>
#end_IndexHierarchyGO-to_frame()

#start_IndexHierarchyGO-to_frame_go()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih.to_frame_go()
<FrameGO>
<IndexGO> 0     1       2      <int64>
<Index>
0         a     1024    True
1         a     2048    True
2         a     2048    False
3         b     1024    True
<int64>   <<U1> <int64> <bool>
#end_IndexHierarchyGO-to_frame_go()

#start_IndexHierarchyGO-to_pandas()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih.to_pandas()
MultiIndex([('a', 1024,  True),
            ('a', 2048,  True),
            ('a', 2048, False),
            ('b', 1024,  True)],
           name='x')
#end_IndexHierarchyGO-to_pandas()

#start_IndexHierarchyGO-to_tree()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih.to_tree()
{'a': {1024: <IndexGO>
True
<bool>, 2048: <IndexGO>
True
False
<bool>}, 'b': {1024: <IndexGO>
True
<bool>}}
#end_IndexHierarchyGO-to_tree()

#start_IndexHierarchyGO-STATIC
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.STATIC
False
#end_IndexHierarchyGO-STATIC

#start_IndexHierarchyGO-depth
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.depth
3
#end_IndexHierarchyGO-depth

#start_IndexHierarchyGO-dtypes
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.dtypes
<Series>
<Index>
x        <U1
y        int64
z        datetime64[D]
<<U1>    <object>
#end_IndexHierarchyGO-dtypes

#start_IndexHierarchyGO-index_types
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.index_types
<Series>
<Index>
x        <IndexGO>
y        <IndexGO>
z        <IndexDateGO>
<<U1>    <object>
#end_IndexHierarchyGO-index_types

#start_IndexHierarchyGO-memory
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.memory
         L    Lu    LM   LMu   LMD  LMDu  R     Ru    RM   RMu   RMD  RMDu
Name     214  B     214  B     214  B     214   B     214  B     214  B
Indices  3.14 KB    3.23 KB    2.57 KB    11.23 KB    3.29 KB    2.64 KB
Indexers 184  B     184  B     72   B     184   B     184  B     72   B
Blocks   1.37 KB    1.41 KB    1.09 KB    1.37  KB    1.41 KB    1.09 KB
Values   16   B     16   B     16   B     16    B     16   B     16   B
Total    5.28 KB    5.43 KB    4.23 KB    13.37 KB    5.5  KB    4.29 KB
#end_IndexHierarchyGO-memory

#start_IndexHierarchyGO-name
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.name
('x', 'y', 'z')
#end_IndexHierarchyGO-name

#start_IndexHierarchyGO-names
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.names
('x', 'y', 'z')
#end_IndexHierarchyGO-names

#start_IndexHierarchyGO-nbytes
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.nbytes
677
#end_IndexHierarchyGO-nbytes

#start_IndexHierarchyGO-ndim
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.ndim
2
#end_IndexHierarchyGO-ndim

#start_IndexHierarchyGO-positions
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.positions
[0 1 2]
#end_IndexHierarchyGO-positions

#start_IndexHierarchyGO-shape
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.shape
(3, 3)
#end_IndexHierarchyGO-shape

#start_IndexHierarchyGO-size
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.size
9
#end_IndexHierarchyGO-size

#start_IndexHierarchyGO-__array__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.__array__()
[[    0  1024    32]
 [    1 -2048    32]
 [    1  1024    32]]
#end_IndexHierarchyGO-__array__()

#start_IndexHierarchyGO-__array_ufunc__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih
<IndexHierarchyGO: ('x', 'y', 'z')>
0                                   1024    32
1                                   -2048   32
1                                   1024    32
<int64>                             <int64> <int64>
>>> np.array((0, 1, 0)) * ih
[[    0  1024     0]
 [    0 -2048     0]
 [    0  1024     0]]
#end_IndexHierarchyGO-__array_ufunc__()

#start_IndexHierarchyGO-__bool__()
>>> s = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_IndexHierarchyGO-__bool__()

#start_IndexHierarchyGO-__copy__()
>>> import copy
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> copy.copy(ih)
<IndexHierarchyGO: ('x', 'y', 'z')>
0                                   1024    32
1                                   -2048   32
1                                   1024    32
<int64>                             <int64> <int64>
#end_IndexHierarchyGO-__copy__()

#start_IndexHierarchyGO-__deepcopy__()
>>> import copy
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> copy.deepcopy(ih)
<IndexHierarchyGO: ('x', 'y', 'z')>
0                                   1024    32
1                                   -2048   32
1                                   1024    32
<int64>                             <int64> <int64>
#end_IndexHierarchyGO-__deepcopy__()

#start_IndexHierarchyGO-__len__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> len(ih)
3
#end_IndexHierarchyGO-__len__()

#start_IndexHierarchyGO-all()
>>> ih = sf.IndexHierarchyGO.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))
>>> ih.all()
[False  True False]
#end_IndexHierarchyGO-all()

#start_IndexHierarchyGO-any()
>>> ih = sf.IndexHierarchyGO.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))
>>> ih.any()
[ True  True  True]
#end_IndexHierarchyGO-any()

#start_IndexHierarchyGO-append()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih.append(('b', 4096, True))
>>> ih
<IndexHierarchyGO: x>
a                     1024    True
a                     2048    True
a                     2048    False
b                     1024    True
b                     4096    True
<<U1>                 <int64> <bool>
#end_IndexHierarchyGO-append()

#start_IndexHierarchyGO-astype[]()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih
<IndexHierarchyGO: ('x', 'y', 'z')>
a                                   1024    1517-04-01
a                                   2048    1789-12-31
b                                   0       1620-11-21
<<U1>                               <int64> <datetime64[D]>
>>> ih.astype[1](bool)
<IndexHierarchyGO>
a                  True   1517-04-01
a                  True   1789-12-31
b                  False  1620-11-21
<<U1>              <bool> <datetime64[D]>
#end_IndexHierarchyGO-astype[]()

#start_IndexHierarchyGO-astype()
>>> ih = sf.IndexHierarchyGO.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))
>>> ih
<IndexHierarchyGO: ('x', 'y', 'z')>
False                               True   True
True                                True   True
False                               True   False
<bool>                              <bool> <bool>
>>> ih.astype(str)
<IndexHierarchyGO>
False              True  True
True               True  True
False              True  False
<<U5>              <<U5> <<U5>
#end_IndexHierarchyGO-astype()

#start_IndexHierarchyGO-copy()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.copy()
<IndexHierarchyGO: ('x', 'y', 'z')>
0                                   1024    32
1                                   -2048   32
1                                   1024    32
<int64>                             <int64> <int64>
#end_IndexHierarchyGO-copy()

#start_IndexHierarchyGO-cumprod()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.cumprod()
[[          0        1024          32]
 [          0    -2097152        1024]
 [          0 -2147483648       32768]]
#end_IndexHierarchyGO-cumprod()

#start_IndexHierarchyGO-cumsum()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.cumsum()
[[    0  1024    32]
 [    1 -1024    64]
 [    2     0    96]]
#end_IndexHierarchyGO-cumsum()

#start_IndexHierarchyGO-difference()
>>> ih1 = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')
>>> ih2 = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('b', 1024, True)), name='y')
>>> ih1.difference(ih2)
<IndexHierarchyGO>
a                  2048    False
a                  2048    True
<<U1>              <int64> <bool>
#end_IndexHierarchyGO-difference()

#start_IndexHierarchyGO-dropfalsy()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('', 0, False), ('b', 1024, True)), name='x')
>>> ih
<IndexHierarchyGO: x>
a                     1024    True
                      0       False
b                     1024    True
<<U1>                 <int64> <bool>
>>> ih.dropfalsy()
<IndexHierarchyGO: x>
a                     1024    True
b                     1024    True
<<U1>                 <int64> <bool>
#end_IndexHierarchyGO-dropfalsy()

#start_IndexHierarchyGO-dropna()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih
<IndexHierarchyGO: ('x', 'y')>
0.0                            1024.0
1.0                            2048.0
nan                            nan
<float64>                      <float64>
>>> ih.dropna()
<IndexHierarchyGO: ('x', 'y')>
0.0                            1024.0
1.0                            2048.0
<float64>                      <float64>
#end_IndexHierarchyGO-dropna()

#start_IndexHierarchyGO-equals()
>>> ih1 = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')
>>> ih2 = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('b', 1024, True)), name='y')
>>> ih1.equals(ih2)
False
#end_IndexHierarchyGO-equals()

#start_IndexHierarchyGO-extend()
>>> ih1 = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih2 = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('', 0, False), ('b', 1024, True)), name='x')
>>> ih1.extend(ih2)
>>> ih1
ErrorInitIndexNonUnique(('a', 1024, True))
#end_IndexHierarchyGO-extend()

#start_IndexHierarchyGO-fillfalsy()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('', 0, False), ('b', 1024, True)), name='x')
>>> ih
<IndexHierarchyGO: x>
a                     1024    True
                      0       False
b                     1024    True
<<U1>                 <int64> <bool>
>>> ih.fillfalsy(-1)
<IndexHierarchyGO: x>
a                     1024    True
-1                    -1      -1
b                     1024    True
<object>              <int64> <object>
#end_IndexHierarchyGO-fillfalsy()

#start_IndexHierarchyGO-fillna()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih
<IndexHierarchyGO: ('x', 'y')>
0.0                            1024.0
1.0                            2048.0
nan                            nan
<float64>                      <float64>
>>> ih.fillna(0)
<IndexHierarchyGO: ('x', 'y')>
0.0                            1024.0
1.0                            2048.0
0.0                            0.0
<float64>                      <float64>
#end_IndexHierarchyGO-fillna()

#start_IndexHierarchyGO-flat()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih
<IndexHierarchyGO: ('x', 'y', 'z')>
a                                   1024    1517-04-01
a                                   2048    1789-12-31
b                                   0       1620-11-21
<<U1>                               <int64> <datetime64[D]>
>>> ih.flat().display_wide()
<IndexGO: ('x', 'y', 'z')>
('a', 1024, numpy.datetime64('1517-04-01'))
('a', 2048, numpy.datetime64('1789-12-31'))
('b', 0, numpy.datetime64('1620-11-21'))
<object>
#end_IndexHierarchyGO-flat()

#start_IndexHierarchyGO-head()
>>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))
>>> ih
<IndexHierarchyGO: x>
a                     1517-04-01
a                     1620-11-21
b                     1517-04-01
b                     1620-11-21
c                     1517-04-01
c                     1620-11-21
<<U1>                 <datetime64[D]>
>>> ih.head(2)
<IndexHierarchyGO: x>
a                     1517-04-01
a                     1620-11-21
<<U1>                 <datetime64[D]>
#end_IndexHierarchyGO-head()

#start_IndexHierarchyGO-iloc_searchsorted()
>>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))
>>> ih
<IndexHierarchyGO: x>
a                     1517-04-01
a                     1620-11-21
b                     1517-04-01
b                     1620-11-21
c                     1517-04-01
c                     1620-11-21
<<U1>                 <datetime64[D]>
>>> ih.iloc_searchsorted(('b', np.datetime64('1620-11-21')))
3
#end_IndexHierarchyGO-iloc_searchsorted()

#start_IndexHierarchyGO-index_at_depth()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.index_at_depth(0)
<IndexGO>
a
b
<<U1>
>>> ih.index_at_depth([2, 0])
(<IndexDateGO>
1517-04-01
1789-12-31
1620-11-21
<datetime64[D]>, <IndexGO>
a
b
<<U1>)
#end_IndexHierarchyGO-index_at_depth()

#start_IndexHierarchyGO-indexer_at_depth()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.indexer_at_depth(0)
[0 0 1]
>>> ih.indexer_at_depth([2, 0])
[[0 1 2]
 [0 0 1]]
#end_IndexHierarchyGO-indexer_at_depth()

#start_IndexHierarchyGO-intersection()
>>> ih1 = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')
>>> ih2 = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('b', 1024, True)), name='y')
>>> ih1.intersection(ih2)
<IndexHierarchyGO>
a                  1024    True
<<U1>              <int64> <bool>
#end_IndexHierarchyGO-intersection()

#start_IndexHierarchyGO-isin()
>>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))
>>> ih.isin((('c', np.datetime64('1517-04-01')), ('a', np.datetime64('1620-11-21'))))
[False  True False False  True False]
#end_IndexHierarchyGO-isin()

#start_IndexHierarchyGO-label_widths_at_depth()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih
<IndexHierarchyGO: x>
a                     1024    True
a                     2048    True
a                     2048    False
b                     1024    True
<<U1>                 <int64> <bool>
>>> tuple(ih.label_widths_at_depth(0))
(('a', 3), ('b', 1))
>>> tuple(ih.label_widths_at_depth(1))
((1024, 1), (2048, 2), (1024, 1))
>>> tuple(ih.label_widths_at_depth(2))
((True, 1), (True, 1), (False, 1), (True, 1))
#end_IndexHierarchyGO-label_widths_at_depth()

#start_IndexHierarchyGO-level_add()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih
<IndexHierarchyGO: ('x', 'y')>
0.0                            1024.0
1.0                            2048.0
nan                            nan
<float64>                      <float64>
>>> ih.level_add('A')
<IndexHierarchyGO: ('x', 'y')>
A                              0.0       1024.0
A                              1.0       2048.0
A                              nan       nan
<<U1>                          <float64> <float64>
#end_IndexHierarchyGO-level_add()

#start_IndexHierarchyGO-level_drop()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih
<IndexHierarchyGO: ('x', 'y', 'z')>
a                                   1024    1517-04-01
a                                   2048    1789-12-31
b                                   0       1620-11-21
<<U1>                               <int64> <datetime64[D]>
>>> ih.level_drop()
<IndexHierarchyGO: ('y', 'z')>
1024                           1517-04-01
2048                           1789-12-31
0                              1620-11-21
<int64>                        <datetime64[D]>
#end_IndexHierarchyGO-level_drop()

#start_IndexHierarchyGO-loc_searchsorted()
>>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))
>>> ih
<IndexHierarchyGO: x>
a                     1517-04-01
a                     1620-11-21
b                     1517-04-01
b                     1620-11-21
c                     1517-04-01
c                     1620-11-21
<<U1>                 <datetime64[D]>
>>> ih.loc_searchsorted(('b', np.datetime64('1620-11-21')))
('b', numpy.datetime64('1620-11-21'))
#end_IndexHierarchyGO-loc_searchsorted()

#start_IndexHierarchyGO-loc_to_iloc()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih
<IndexHierarchyGO: x>
a                     1024    True
a                     2048    True
a                     2048    False
b                     1024    True
<<U1>                 <int64> <bool>
>>> ih.loc_to_iloc(('b', 1024, True))
3
>>> ih.loc_to_iloc([('a', 1024, True), ('b', 1024, True)])
[0, 3]
>>> ih.loc_to_iloc(slice(('a', 2048, False), None))
slice(2, None, None)
#end_IndexHierarchyGO-loc_to_iloc()

#start_IndexHierarchyGO-max()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.max()
[   1 1024   32]
#end_IndexHierarchyGO-max()

#start_IndexHierarchyGO-mean()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.mean()
NotImplementedError('<function mean at 0x7f89741a9e50> for IndexHierarchyGO is not defined; convert to Frame.')
#end_IndexHierarchyGO-mean()

#start_IndexHierarchyGO-median()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.median()
NotImplementedError('<function median at 0x7f89740465e0> for IndexHierarchyGO is not defined; convert to Frame.')
#end_IndexHierarchyGO-median()

#start_IndexHierarchyGO-min()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.min()
[   0 1024   32]
#end_IndexHierarchyGO-min()

#start_IndexHierarchyGO-prod()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.prod()
[          0 -2147483648       32768]
#end_IndexHierarchyGO-prod()

#start_IndexHierarchyGO-rehierarch()
>>> ih = sf.IndexHierarchyGO.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')
>>> ih.rehierarch([2, 0, 1])
<IndexHierarchyGO>
True               b     1024
True               a     1024
True               a     2048
False              a     2048
<bool>             <<U1> <int64>
#end_IndexHierarchyGO-rehierarch()

#start_IndexHierarchyGO-relabel()
>>> ih = sf.IndexHierarchyGO.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')
>>> ih.relabel(lambda l: (l[0], l[1], str(l[2])[0]))
<IndexHierarchyGO: x>
b                     1024    T
a                     1024    T
a                     2048    T
a                     2048    F
<<U1>                 <int64> <<U1>
#end_IndexHierarchyGO-relabel()

#start_IndexHierarchyGO-relabel_at_depth()
>>> ih = sf.IndexHierarchyGO.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')
>>> ih.relabel_at_depth(lambda l: str(l)[0], depth_level=[1, 2])
<IndexHierarchyGO: x>
b                     1     T
a                     1     T
a                     2     T
a                     2     F
<<U1>                 <<U1> <<U1>
#end_IndexHierarchyGO-relabel_at_depth()

#start_IndexHierarchyGO-rename()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih.rename('y')
<IndexHierarchyGO: y>
a                     1024    True
a                     2048    True
a                     2048    False
b                     1024    True
<<U1>                 <int64> <bool>
#end_IndexHierarchyGO-rename()

#start_IndexHierarchyGO-roll()
>>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))
>>> ih
<IndexHierarchyGO: x>
a                     1517-04-01
a                     1620-11-21
b                     1517-04-01
b                     1620-11-21
c                     1517-04-01
c                     1620-11-21
<<U1>                 <datetime64[D]>
>>> ih.roll(2)
<IndexHierarchyGO: x>
c                     1517-04-01
c                     1620-11-21
a                     1517-04-01
a                     1620-11-21
b                     1517-04-01
b                     1620-11-21
<<U1>                 <datetime64[D]>
#end_IndexHierarchyGO-roll()

#start_IndexHierarchyGO-sample()
>>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))
>>> ih
<IndexHierarchyGO: x>
a                     1517-04-01
a                     1620-11-21
b                     1517-04-01
b                     1620-11-21
c                     1517-04-01
c                     1620-11-21
<<U1>                 <datetime64[D]>
>>> ih.sample(2, seed=0)
<IndexHierarchyGO: x>
b                     1517-04-01
c                     1620-11-21
<<U1>                 <datetime64[D]>
#end_IndexHierarchyGO-sample()

#start_IndexHierarchyGO-sort()
>>> ih = sf.IndexHierarchyGO.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')
>>> ih
<IndexHierarchyGO: x>
b                     1024    True
a                     1024    True
a                     2048    True
a                     2048    False
<<U1>                 <int64> <bool>
>>> ih.sort()
<IndexHierarchyGO: x>
a                     1024    True
a                     2048    False
a                     2048    True
b                     1024    True
<<U1>                 <int64> <bool>
>>> ih.sort(ascending=False)
<IndexHierarchyGO: x>
b                     1024    True
a                     2048    True
a                     2048    False
a                     1024    True
<<U1>                 <int64> <bool>
#end_IndexHierarchyGO-sort()

#start_IndexHierarchyGO-std()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.std()
NotImplementedError('functools.partial(<function std at 0x7f89741b1040>, ddof=0) for IndexHierarchyGO is not defined; convert to Frame.')
#end_IndexHierarchyGO-std()

#start_IndexHierarchyGO-sum()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.sum()
[ 2  0 96]
#end_IndexHierarchyGO-sum()

#start_IndexHierarchyGO-tail()
>>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))
>>> ih
<IndexHierarchyGO: x>
a                     1517-04-01
a                     1620-11-21
b                     1517-04-01
b                     1620-11-21
c                     1517-04-01
c                     1620-11-21
<<U1>                 <datetime64[D]>
>>> ih.tail(2)
<IndexHierarchyGO: x>
c                     1517-04-01
c                     1620-11-21
<<U1>                 <datetime64[D]>
#end_IndexHierarchyGO-tail()

#start_IndexHierarchyGO-union()
>>> ih1 = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')
>>> ih2 = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('b', 1024, True)), name='y')
>>> ih1.union(ih2)
<IndexHierarchyGO>
a                  1024    True
a                  2048    False
a                  2048    True
b                  1024    True
<<U1>              <int64> <bool>
#end_IndexHierarchyGO-union()

#start_IndexHierarchyGO-unique()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih
<IndexHierarchyGO: ('x', 'y')>
0.0                            1024.0
1.0                            2048.0
nan                            nan
<float64>                      <float64>
>>> ih.unique()
[ 0.  1. nan]
#end_IndexHierarchyGO-unique()

#start_IndexHierarchyGO-values_at_depth()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.values_at_depth(0)
['a' 'a' 'b']
>>> ih.values_at_depth(2)
['1517-04-01' '1789-12-31' '1620-11-21']
#end_IndexHierarchyGO-values_at_depth()

#start_IndexHierarchyGO-var()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.var()
NotImplementedError('functools.partial(<function var at 0x7f89741b11f0>, ddof=0) for IndexHierarchyGO is not defined; convert to Frame.')
#end_IndexHierarchyGO-var()

#start_IndexHierarchyGO-__contains__()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.__contains__('a')
RuntimeError('Invalid key length for a; must be length 3.')
#end_IndexHierarchyGO-__contains__()

#start_IndexHierarchyGO-__iter__()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> tuple(ih.__iter__())
(('a', 1024, numpy.datetime64('1517-04-01')), ('a', 2048, numpy.datetime64('1789-12-31')), ('b', 0, numpy.datetime64('1620-11-21')))
#end_IndexHierarchyGO-__iter__()

#start_IndexHierarchyGO-__reversed__()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> tuple(ih.__reversed__())
(('b', 0, datetime.date(1620, 11, 21)), ('a', 2048, datetime.date(1789, 12, 31)), ('a', 1024, datetime.date(1517, 4, 1)))
#end_IndexHierarchyGO-__reversed__()

#start_IndexHierarchyGO-values
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.values
[['a' 1024 datetime.date(1517, 4, 1)]
 ['a' 2048 datetime.date(1789, 12, 31)]
 ['b' 0 datetime.date(1620, 11, 21)]]
#end_IndexHierarchyGO-values

#start_IndexHierarchyGO-interface
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.interface
<Frame>
<Index>                              cls_name         group                doc                  <<U18>
<Index: signature>
__init__(indices, *, indexers, na... IndexHierarchyGO Constructor          Initializer. Args...
from_index_items(items, *, index_... IndexHierarchyGO Constructor          Given an iterable...
from_labels(labels, *, name, reor... IndexHierarchyGO Constructor          Construct an Inde...
from_labels_delimited(labels, *, ... IndexHierarchyGO Constructor          Construct an Inde...
from_names(names)                    IndexHierarchyGO Constructor          Construct a zero-...
from_pandas(value)                   IndexHierarchyGO Constructor          Given a Pandas in...
from_product(*, name, index_const... IndexHierarchyGO Constructor          Given groups of i...
from_tree(tree, *, name, index_co... IndexHierarchyGO Constructor          Convert into a In...
from_values_per_depth(values, *, ... IndexHierarchyGO Constructor          Construct an Inde...
to_frame()                           IndexHierarchyGO Exporter             Return Frame vers...
to_frame_go()                        IndexHierarchyGO Exporter             Return a FrameGO ...
to_html(config, style_config)        IndexHierarchyGO Exporter             Return an HTML ta...
to_html_datatables(fp, *, show, c... IndexHierarchyGO Exporter             Return a complete...
to_pandas()                          IndexHierarchyGO Exporter             Return a Pandas M...
to_tree()                            IndexHierarchyGO Exporter             Returns the tree ...
to_visidata()                        IndexHierarchyGO Exporter             Open an interacti...
STATIC                               IndexHierarchyGO Attribute            bool(x) -> bool R...
...                                  ...              ...                  ...
via_T.__le__(other)                  IndexHierarchyGO Accessor Transpose
via_T.__eq__(other)                  IndexHierarchyGO Accessor Transpose
via_T.__ne__(other)                  IndexHierarchyGO Accessor Transpose
via_T.__gt__(other)                  IndexHierarchyGO Accessor Transpose
via_T.__ge__(other)                  IndexHierarchyGO Accessor Transpose
via_T.__radd__(other)                IndexHierarchyGO Accessor Transpose
via_T.__rsub__(other)                IndexHierarchyGO Accessor Transpose
via_T.__rmul__(other)                IndexHierarchyGO Accessor Transpose
via_T.__rtruediv__(other)            IndexHierarchyGO Accessor Transpose
via_T.__rfloordiv__(other)           IndexHierarchyGO Accessor Transpose
via_re(pattern, flags).search(pos... IndexHierarchyGO Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... IndexHierarchyGO Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... IndexHierarchyGO Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... IndexHierarchyGO Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... IndexHierarchyGO Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... IndexHierarchyGO Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... IndexHierarchyGO Accessor Regular ... Perform the same ...
<<U63>                               <<U16>           <<U27>               <<U83>
#end_IndexHierarchyGO-interface

#start_IndexHierarchyGO-__repr__()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> repr(ih)
<IndexHierarchyGO: ('x', 'y', 'z')>
a                                   1024    1517-04-01
a                                   2048    1789-12-31
b                                   0       1620-11-21
<<U1>                               <int64> <datetime64[D]>
#end_IndexHierarchyGO-__repr__()

#start_IndexHierarchyGO-__str__()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> str(ih)
<IndexHierarchyGO: ('x', 'y', 'z')>
a                                   1024    1517-04-01
a                                   2048    1789-12-31
b                                   0       1620-11-21
<<U1>                               <int64> <datetime64[D]>
#end_IndexHierarchyGO-__str__()

#start_IndexHierarchyGO-display()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.display()
<IndexHierarchyGO: ('x', 'y', 'z')>
a                                   1024    1517-04-01
a                                   2048    1789-12-31
b                                   0       1620-11-21
<<U1>                               <int64> <datetime64[D]>
>>> ih.display(sf.DisplayConfig(type_show=False))
a 1024 1517-04-01
a 2048 1789-12-31
b 0    1620-11-21
#end_IndexHierarchyGO-display()

#start_IndexHierarchyGO-display_tall()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.display_tall()
<IndexHierarchyGO: ('x', 'y', 'z')>
a                                   1024    1517-04-01
a                                   2048    1789-12-31
b                                   0       1620-11-21
<<U1>                               <int64> <datetime64[D]>
#end_IndexHierarchyGO-display_tall()

#start_IndexHierarchyGO-display_wide()
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))
>>> ih.display_wide()
<IndexHierarchyGO: ('x', 'y', 'z')>
a                                   1024    1517-04-01
a                                   2048    1789-12-31
b                                   0       1620-11-21
<<U1>                               <int64> <datetime64[D]>
#end_IndexHierarchyGO-display_wide()

#start_IndexHierarchyGO-[]
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih[2]
('a', 2048, False)
>>> ih[2:]
<IndexHierarchyGO: x>
a                     2048    False
b                     1024    True
<<U1>                 <int64> <bool>
>>> ih[[0, 3]]
<IndexHierarchyGO: x>
a                     1024    True
b                     1024    True
<<U1>                 <int64> <bool>
#end_IndexHierarchyGO-[]

#start_IndexHierarchyGO-iloc[]
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih.iloc[2]
('a', 2048, False)
>>> ih.iloc[2:]
<IndexHierarchyGO: x>
a                     2048    False
b                     1024    True
<<U1>                 <int64> <bool>
>>> ih.iloc[[0, 3]]
<IndexHierarchyGO: x>
a                     1024    True
b                     1024    True
<<U1>                 <int64> <bool>
#end_IndexHierarchyGO-iloc[]

#start_IndexHierarchyGO-loc[]
>>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')
>>> ih.loc[('a', 2048, True)]
('a', 2048, True)
>>> ih.loc[('a', 2048, True):]
<IndexHierarchyGO: x>
a                     2048    True
a                     2048    False
b                     1024    True
<<U1>                 <int64> <bool>
>>> ih.loc[[('a', 2048, True), ('b', 1024, True)]]
<IndexHierarchyGO: x>
a                     2048    True
b                     1024    True
<<U1>                 <int64> <bool>
#end_IndexHierarchyGO-loc[]

#start_IndexHierarchyGO-iter_label()
>>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')
>>> tuple(ih.iter_label())
(('a', 1024), ('a', 4096), ('a', 2048), ('b', 1024), ('b', 4096), ('b', 2048), ('c', 1024), ('c', 4096), ('c', 2048))
#end_IndexHierarchyGO-iter_label()

#start_IndexHierarchyGO-iter_label().apply()
>>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')
>>> ih.iter_label().apply(lambda l: (l[0].upper(), l[1]))
[('A', 1024) ('A', 4096) ('A', 2048) ('B', 1024) ('B', 4096) ('B', 2048)
 ('C', 1024) ('C', 4096) ('C', 2048)]
#end_IndexHierarchyGO-iter_label().apply()

#start_IndexHierarchyGO-iter_label().apply_iter()
>>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')
>>> tuple(ih.iter_label().apply_iter(lambda l: (l[0].upper(), l[1])))
(('A', 1024), ('A', 4096), ('A', 2048), ('B', 1024), ('B', 4096), ('B', 2048), ('C', 1024), ('C', 4096), ('C', 2048))
#end_IndexHierarchyGO-iter_label().apply_iter()

#start_IndexHierarchyGO-iter_label().apply_iter_items()
>>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')
>>> tuple(ih.iter_label().apply_iter_items(lambda l: (l[0].upper(), l[1])))
((0, ('A', 1024)), (1, ('A', 4096)), (2, ('A', 2048)), (3, ('B', 1024)), (4, ('B', 4096)), (5, ('B', 2048)), (6, ('C', 1024)), (7, ('C', 4096)), (8, ('C', 2048)))
#end_IndexHierarchyGO-iter_label().apply_iter_items()

#start_IndexHierarchyGO-iter_label().apply_pool()
>>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')
>>> ih.iter_label().apply_pool(lambda l: (l[0].upper(), l[1]), use_threads=True)
[('A', 1024) ('A', 4096) ('A', 2048) ('B', 1024) ('B', 4096) ('B', 2048)
 ('C', 1024) ('C', 4096) ('C', 2048)]
#end_IndexHierarchyGO-iter_label().apply_pool()

#start_IndexHierarchyGO-__add__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih + 8
[[    8  1032    40]
 [    9 -2040    40]
 [    9  1032    40]]
#end_IndexHierarchyGO-__add__()

#start_IndexHierarchyGO-__and__()
>>> ih = sf.IndexHierarchyGO.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))
>>> ih & True
[[False  True  True]
 [ True  True  True]
 [False  True False]]
>>> ih & (False, True, True)
[[False  True  True]
 [False  True  True]
 [False  True False]]
#end_IndexHierarchyGO-__and__()

#start_IndexHierarchyGO-__eq__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih == 8
[[False False False]
 [False False False]
 [False False False]]
#end_IndexHierarchyGO-__eq__()

#start_IndexHierarchyGO-__floordiv__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih // 8
[[   0  128    4]
 [   0 -256    4]
 [   0  128    4]]
#end_IndexHierarchyGO-__floordiv__()

#start_IndexHierarchyGO-__ge__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih >= 8
[[False  True  True]
 [False False  True]
 [False  True  True]]
#end_IndexHierarchyGO-__ge__()

#start_IndexHierarchyGO-__gt__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih > 8
[[False  True  True]
 [False False  True]
 [False  True  True]]
#end_IndexHierarchyGO-__gt__()

#start_IndexHierarchyGO-__le__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih <= 8
[[ True False False]
 [ True  True False]
 [ True False False]]
#end_IndexHierarchyGO-__le__()

#start_IndexHierarchyGO-__lt__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih < 8
[[ True False False]
 [ True  True False]
 [ True False False]]
#end_IndexHierarchyGO-__lt__()

#start_IndexHierarchyGO-__matmul__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih @ (3, 0, 4)
[128 131 131]
#end_IndexHierarchyGO-__matmul__()

#start_IndexHierarchyGO-__mod__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih % 8
[[0 0 0]
 [1 0 0]
 [1 0 0]]
#end_IndexHierarchyGO-__mod__()

#start_IndexHierarchyGO-__mul__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih * 8
[[     0   8192    256]
 [     8 -16384    256]
 [     8   8192    256]]
#end_IndexHierarchyGO-__mul__()

#start_IndexHierarchyGO-__ne__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih != 8
[[ True  True  True]
 [ True  True  True]
 [ True  True  True]]
#end_IndexHierarchyGO-__ne__()

#start_IndexHierarchyGO-__or__()
>>> ih = sf.IndexHierarchyGO.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))
>>> ih | True
[[ True  True  True]
 [ True  True  True]
 [ True  True  True]]
>>> ih | (False, True, True)
[[False  True  True]
 [ True  True  True]
 [False  True  True]]
#end_IndexHierarchyGO-__or__()

#start_IndexHierarchyGO-__pow__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih ** 8
[[            0             0 1099511627776]
 [            1             0 1099511627776]
 [            1             0 1099511627776]]
#end_IndexHierarchyGO-__pow__()

#start_IndexHierarchyGO-__radd__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> 8 + ih
[[    8  1032    40]
 [    9 -2040    40]
 [    9  1032    40]]
#end_IndexHierarchyGO-__radd__()

#start_IndexHierarchyGO-__rfloordiv__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> 8 // ih
[[ 0  0  0]
 [ 8 -1  0]
 [ 8  0  0]]
#end_IndexHierarchyGO-__rfloordiv__()

#start_IndexHierarchyGO-__rmatmul__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih @ (3, 0, 4)
[128 131 131]
#end_IndexHierarchyGO-__rmatmul__()

#start_IndexHierarchyGO-__rmul__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> 8 * ih
[[     0   8192    256]
 [     8 -16384    256]
 [     8   8192    256]]
#end_IndexHierarchyGO-__rmul__()

#start_IndexHierarchyGO-__rshift__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih >> 1
[[    0   512    16]
 [    0 -1024    16]
 [    0   512    16]]
#end_IndexHierarchyGO-__rshift__()

#start_IndexHierarchyGO-__rsub__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> 8 - ih
[[    8 -1016   -24]
 [    7  2056   -24]
 [    7 -1016   -24]]
#end_IndexHierarchyGO-__rsub__()

#start_IndexHierarchyGO-__rtruediv__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> 8 / ih
[[         inf  7.81250e-03  2.50000e-01]
 [ 8.00000e+00 -3.90625e-03  2.50000e-01]
 [ 8.00000e+00  7.81250e-03  2.50000e-01]]
#end_IndexHierarchyGO-__rtruediv__()

#start_IndexHierarchyGO-__sub__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih - 8
[[   -8  1016    24]
 [   -7 -2056    24]
 [   -7  1016    24]]
#end_IndexHierarchyGO-__sub__()

#start_IndexHierarchyGO-__truediv__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih / 8
[[ 0.00e+00  1.28e+02  4.00e+00]
 [ 1.25e-01 -2.56e+02  4.00e+00]
 [ 1.25e-01  1.28e+02  4.00e+00]]
#end_IndexHierarchyGO-__truediv__()

#start_IndexHierarchyGO-__xor__()
>>> ih = sf.IndexHierarchyGO.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))
>>> ih ^ True
[[ True False False]
 [False False False]
 [ True False  True]]
>>> ih ^ (False, True, True)
[[False False False]
 [ True False False]
 [False False  True]]
#end_IndexHierarchyGO-__xor__()

#start_IndexHierarchyGO-__abs__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> abs(ih)
[[   0 1024   32]
 [   1 2048   32]
 [   1 1024   32]]
#end_IndexHierarchyGO-__abs__()

#start_IndexHierarchyGO-__invert__()
>>> ih = sf.IndexHierarchyGO.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))
>>> ~ih
[[ True False False]
 [False False False]
 [ True False  True]]
#end_IndexHierarchyGO-__invert__()

#start_IndexHierarchyGO-__neg__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> -ih
[[    0 -1024   -32]
 [   -1  2048   -32]
 [   -1 -1024   -32]]
#end_IndexHierarchyGO-__neg__()

#start_IndexHierarchyGO-__pos__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> +ih
[[    0  1024    32]
 [    1 -2048    32]
 [    1  1024    32]]
#end_IndexHierarchyGO-__pos__()

#start_IndexHierarchyGO-via_dt.year
>>> import datetime
>>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.year
[[1517 2022]
 [1517 2021]
 [1517 2022]]
#end_IndexHierarchyGO-via_dt.year

#start_IndexHierarchyGO-via_dt.month
>>> import datetime
>>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.month
[[ 4  4]
 [12 12]
 [ 6  6]]
#end_IndexHierarchyGO-via_dt.month

#start_IndexHierarchyGO-via_dt.day
>>> import datetime
>>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.day
[[ 1  1]
 [31 31]
 [30 30]]
#end_IndexHierarchyGO-via_dt.day

#start_IndexHierarchyGO-via_dt.hour
>>> import datetime
>>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.hour
[[0 0]
 [0 0]
 [0 0]]
#end_IndexHierarchyGO-via_dt.hour

#start_IndexHierarchyGO-via_dt.minute
>>> import datetime
>>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.minute
[[0 0]
 [0 0]
 [0 0]]
#end_IndexHierarchyGO-via_dt.minute

#start_IndexHierarchyGO-via_dt.second
>>> import datetime
>>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.second
[[0 0]
 [0 0]
 [0 0]]
#end_IndexHierarchyGO-via_dt.second

#start_IndexHierarchyGO-via_dt.weekday()
>>> import datetime
>>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.weekday()
[[6 4]
 [0 4]
 [5 3]]
#end_IndexHierarchyGO-via_dt.weekday()

#start_IndexHierarchyGO-via_dt.quarter()
>>> import datetime
>>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.quarter()
[[2 2]
 [4 4]
 [2 2]]
#end_IndexHierarchyGO-via_dt.quarter()

#start_IndexHierarchyGO-via_dt.is_month_end()
>>> import datetime
>>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.is_month_end()
[[False False]
 [ True  True]
 [ True  True]]
#end_IndexHierarchyGO-via_dt.is_month_end()

#start_IndexHierarchyGO-via_dt.is_month_start()
>>> import datetime
>>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.is_month_start()
[[ True  True]
 [False False]
 [False False]]
#end_IndexHierarchyGO-via_dt.is_month_start()

#start_IndexHierarchyGO-via_dt.is_year_end()
>>> import datetime
>>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.is_year_end()
[[False False]
 [ True  True]
 [False False]]
#end_IndexHierarchyGO-via_dt.is_year_end()

#start_IndexHierarchyGO-via_dt.is_year_start()
>>> import datetime
>>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.is_year_start()
[[False False]
 [False False]
 [False False]]
#end_IndexHierarchyGO-via_dt.is_year_start()

#start_IndexHierarchyGO-via_dt.is_quarter_end()
>>> import datetime
>>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.is_quarter_end()
[[False False]
 [ True  True]
 [ True  True]]
#end_IndexHierarchyGO-via_dt.is_quarter_end()

#start_IndexHierarchyGO-via_dt.is_quarter_start()
>>> import datetime
>>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.is_quarter_start()
[[ True  True]
 [False False]
 [False False]]
#end_IndexHierarchyGO-via_dt.is_quarter_start()

#start_IndexHierarchyGO-via_dt.timetuple()
>>> import datetime
>>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.timetuple()
[[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)
  time.struct_time(tm_year=2022, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=4, tm_yday=91, tm_isdst=-1)]
 [time.struct_time(tm_year=1517, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=365, tm_isdst=-1)
  time.struct_time(tm_year=2021, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=4, tm_yday=365, tm_isdst=-1)]
 [time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)
  time.struct_time(tm_year=2022, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=181, tm_isdst=-1)]]
#end_IndexHierarchyGO-via_dt.timetuple()

#start_IndexHierarchyGO-via_dt.isoformat()
>>> import datetime
>>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)
>>> ih.via_dt.isoformat()
[['1517-04-01' '2022-04-01']
 ['1517-12-31' '2021-12-31']
 ['1517-06-30' '2022-06-30']]
#end_IndexHierarchyGO-via_dt.isoformat()

#start_IndexHierarchyGO-via_dt.fromisoformat()
>>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')))
>>> ih.via_dt.fromisoformat()
[[datetime.date(1517, 4, 1) datetime.date(2022, 4, 1)]
 [datetime.date(1517, 12, 31) datetime.date(2021, 12, 31)]
 [datetime.date(1517, 6, 30) datetime.date(2022, 6, 30)]]
#end_IndexHierarchyGO-via_dt.fromisoformat()

#start_IndexHierarchyGO-via_dt.strftime()
>>> import datetime
>>> ih = sf.IndexHierarchyGO.from_labels(((datetime.datetime(1517, 1, 1), datetime.datetime(2022, 4, 1, 8, 30, 59)), (datetime.datetime(1517, 4, 1), datetime.datetime(2022, 12, 31, 8, 30, 59))))
>>> ih.via_dt.strftime("%A | %B")
[['Monday | January' 'Friday | April']
 ['Sunday | April' 'Saturday | December']]
#end_IndexHierarchyGO-via_dt.strftime()

#start_IndexHierarchyGO-via_dt.strptime()
>>> ih = sf.IndexHierarchyGO.from_labels((('4/1/1517', '4/1/2022'), ('12/31/1517', '12/31/2021'), ('6/30/1517', '6/30/2022')))
>>> ih.via_dt.strptime("%m/%d/%Y")
[[datetime.datetime(1517, 4, 1, 0, 0) datetime.datetime(2022, 4, 1, 0, 0)]
 [datetime.datetime(1517, 12, 31, 0, 0)
  datetime.datetime(2021, 12, 31, 0, 0)]
 [datetime.datetime(1517, 6, 30, 0, 0)
  datetime.datetime(2022, 6, 30, 0, 0)]]
#end_IndexHierarchyGO-via_dt.strptime()

#start_IndexHierarchyGO-via_dt.strpdate()
>>> ih = sf.IndexHierarchyGO.from_labels((('4/1/1517', '4/1/2022'), ('12/31/1517', '12/31/2021'), ('6/30/1517', '6/30/2022')))
>>> ih.via_dt.strpdate("%m/%d/%Y")
[[datetime.date(1517, 4, 1) datetime.date(2022, 4, 1)]
 [datetime.date(1517, 12, 31) datetime.date(2021, 12, 31)]
 [datetime.date(1517, 6, 30) datetime.date(2022, 6, 30)]]
#end_IndexHierarchyGO-via_dt.strpdate()

#start_IndexHierarchyGO-via_str.__getitem__()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str[-1]
[[' ' '7']
 ['Z' '7']
 ['3' '7']
 [' ' '1']]
#end_IndexHierarchyGO-via_str.__getitem__()

#start_IndexHierarchyGO-via_str.capitalize()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.capitalize()
[['Qrs ' '4/1/1517']
 ['Xyz' '12/31/1517']
 ['123' '6/30/1517']
 [' wx ' '12/31/2021']]
#end_IndexHierarchyGO-via_str.capitalize()

#start_IndexHierarchyGO-via_str.center()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.center(8)
[['  qrs   ' '4/1/1517']
 ['  XYZ   ' '12/31/15']
 ['  123   ' '6/30/151']
 ['   wX   ' '12/31/20']]
#end_IndexHierarchyGO-via_str.center()

#start_IndexHierarchyGO-via_str.contains()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.contains('X')
[[False False]
 [ True False]
 [False False]
 [ True False]]
#end_IndexHierarchyGO-via_str.contains()

#start_IndexHierarchyGO-via_str.count()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.count('X')
[[0 0]
 [1 0]
 [0 0]
 [1 0]]
#end_IndexHierarchyGO-via_str.count()

#start_IndexHierarchyGO-via_str.decode()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021'))).astype(bytes)
>>> ih
<IndexHierarchyGO>
b'qrs '            b'4/1/1517'
b'XYZ'             b'12/31/1517'
b'123'             b'6/30/1517'
b' wX '            b'12/31/2021'
<|S4>              <|S10>
>>> ih.via_str.decode()
[['qrs ' '4/1/1517']
 ['XYZ' '12/31/1517']
 ['123' '6/30/1517']
 [' wX ' '12/31/2021']]
#end_IndexHierarchyGO-via_str.decode()

#start_IndexHierarchyGO-via_str.encode()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.encode()
[[b'qrs ' b'4/1/1517']
 [b'XYZ' b'12/31/1517']
 [b'123' b'6/30/1517']
 [b' wX ' b'12/31/2021']]
#end_IndexHierarchyGO-via_str.encode()

#start_IndexHierarchyGO-via_str.endswith()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.endswith(' ')
[[ True False]
 [False False]
 [False False]
 [ True False]]
#end_IndexHierarchyGO-via_str.endswith()

#start_IndexHierarchyGO-via_str.find()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.find('X')
[[-1 -1]
 [ 0 -1]
 [-1 -1]
 [ 2 -1]]
#end_IndexHierarchyGO-via_str.find()

#start_IndexHierarchyGO-via_str.format()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.format('{:-^10}')
[['---qrs ---' '-4/1/1517-']
 ['---XYZ----' '12/31/1517']
 ['---123----' '6/30/1517-']
 ['--- wX ---' '12/31/2021']]
#end_IndexHierarchyGO-via_str.format()

#start_IndexHierarchyGO-via_str.index()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.index('X')
ValueError('substring not found')
#end_IndexHierarchyGO-via_str.index()

#start_IndexHierarchyGO-via_str.isalnum()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.isalnum()
[[False False]
 [ True False]
 [ True False]
 [False False]]
#end_IndexHierarchyGO-via_str.isalnum()

#start_IndexHierarchyGO-via_str.isalpha()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.isalpha()
[[False False]
 [ True False]
 [False False]
 [False False]]
#end_IndexHierarchyGO-via_str.isalpha()

#start_IndexHierarchyGO-via_str.isdecimal()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.isdecimal()
[[False False]
 [False False]
 [ True False]
 [False False]]
#end_IndexHierarchyGO-via_str.isdecimal()

#start_IndexHierarchyGO-via_str.isdigit()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.isdigit()
[[False False]
 [False False]
 [ True False]
 [False False]]
#end_IndexHierarchyGO-via_str.isdigit()

#start_IndexHierarchyGO-via_str.islower()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.islower()
[[ True False]
 [False False]
 [False False]
 [False False]]
#end_IndexHierarchyGO-via_str.islower()

#start_IndexHierarchyGO-via_str.isnumeric()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.isnumeric()
[[False False]
 [False False]
 [ True False]
 [False False]]
#end_IndexHierarchyGO-via_str.isnumeric()

#start_IndexHierarchyGO-via_str.isspace()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.isspace()
[[False False]
 [False False]
 [False False]
 [False False]]
#end_IndexHierarchyGO-via_str.isspace()

#start_IndexHierarchyGO-via_str.istitle()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.istitle()
[[False False]
 [False False]
 [False False]
 [False False]]
#end_IndexHierarchyGO-via_str.istitle()

#start_IndexHierarchyGO-via_str.isupper()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.isupper()
[[False False]
 [ True False]
 [False False]
 [False False]]
#end_IndexHierarchyGO-via_str.isupper()

#start_IndexHierarchyGO-via_str.ljust()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.ljust(8)
[['qrs     ' '4/1/1517']
 ['XYZ     ' '12/31/15']
 ['123     ' '6/30/151']
 [' wX     ' '12/31/20']]
#end_IndexHierarchyGO-via_str.ljust()

#start_IndexHierarchyGO-via_str.len()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.len()
[[ 4  8]
 [ 3 10]
 [ 3  9]
 [ 4 10]]
#end_IndexHierarchyGO-via_str.len()

#start_IndexHierarchyGO-via_str.lower()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.lower()
[['qrs ' '4/1/1517']
 ['xyz' '12/31/1517']
 ['123' '6/30/1517']
 [' wx ' '12/31/2021']]
#end_IndexHierarchyGO-via_str.lower()

#start_IndexHierarchyGO-via_str.lstrip()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.lstrip()
[['qrs ' '4/1/1517']
 ['XYZ' '12/31/1517']
 ['123' '6/30/1517']
 ['wX ' '12/31/2021']]
#end_IndexHierarchyGO-via_str.lstrip()

#start_IndexHierarchyGO-via_str.partition()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.partition('X')
[[('qrs ', '', '') ('4/1/1517', '', '')]
 [('', 'X', 'YZ') ('12/31/1517', '', '')]
 [('123', '', '') ('6/30/1517', '', '')]
 [(' w', 'X', ' ') ('12/31/2021', '', '')]]
#end_IndexHierarchyGO-via_str.partition()

#start_IndexHierarchyGO-via_str.replace()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.replace('X', '*')
[['qrs ' '4/1/1517']
 ['*YZ' '12/31/1517']
 ['123' '6/30/1517']
 [' w* ' '12/31/2021']]
#end_IndexHierarchyGO-via_str.replace()

#start_IndexHierarchyGO-via_str.rfind()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.rfind('X')
[[-1 -1]
 [ 0 -1]
 [-1 -1]
 [ 2 -1]]
#end_IndexHierarchyGO-via_str.rfind()

#start_IndexHierarchyGO-via_str.rindex()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.rindex('X')
ValueError('substring not found')
#end_IndexHierarchyGO-via_str.rindex()

#start_IndexHierarchyGO-via_str.rjust()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.rjust(8)
[['    qrs ' '4/1/1517']
 ['     XYZ' '12/31/15']
 ['     123' '6/30/151']
 ['     wX ' '12/31/20']]
#end_IndexHierarchyGO-via_str.rjust()

#start_IndexHierarchyGO-via_str.rpartition()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.rpartition('X')
[[('', '', 'qrs ') ('', '', '4/1/1517')]
 [('', 'X', 'YZ') ('', '', '12/31/1517')]
 [('', '', '123') ('', '', '6/30/1517')]
 [(' w', 'X', ' ') ('', '', '12/31/2021')]]
#end_IndexHierarchyGO-via_str.rpartition()

#start_IndexHierarchyGO-via_str.rsplit()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.rsplit('X')
[[('qrs ',) ('4/1/1517',)]
 [('', 'YZ') ('12/31/1517',)]
 [('123',) ('6/30/1517',)]
 [(' w', ' ') ('12/31/2021',)]]
#end_IndexHierarchyGO-via_str.rsplit()

#start_IndexHierarchyGO-via_str.rstrip()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.rstrip()
[['qrs' '4/1/1517']
 ['XYZ' '12/31/1517']
 ['123' '6/30/1517']
 [' wX' '12/31/2021']]
#end_IndexHierarchyGO-via_str.rstrip()

#start_IndexHierarchyGO-via_str.split()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.split('X')
[[('qrs ',) ('4/1/1517',)]
 [('', 'YZ') ('12/31/1517',)]
 [('123',) ('6/30/1517',)]
 [(' w', ' ') ('12/31/2021',)]]
#end_IndexHierarchyGO-via_str.split()

#start_IndexHierarchyGO-via_str.startswith()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.startswith('X')
[[False False]
 [ True False]
 [False False]
 [False False]]
#end_IndexHierarchyGO-via_str.startswith()

#start_IndexHierarchyGO-via_str.strip()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.strip()
[['qrs' '4/1/1517']
 ['XYZ' '12/31/1517']
 ['123' '6/30/1517']
 ['wX' '12/31/2021']]
#end_IndexHierarchyGO-via_str.strip()

#start_IndexHierarchyGO-via_str.swapcase()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.swapcase()
[['QRS ' '4/1/1517']
 ['xyz' '12/31/1517']
 ['123' '6/30/1517']
 [' Wx ' '12/31/2021']]
#end_IndexHierarchyGO-via_str.swapcase()

#start_IndexHierarchyGO-via_str.title()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.title()
[['Qrs ' '4/1/1517']
 ['Xyz' '12/31/1517']
 ['123' '6/30/1517']
 [' Wx ' '12/31/2021']]
#end_IndexHierarchyGO-via_str.title()

#start_IndexHierarchyGO-via_str.upper()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.upper()
[['QRS ' '4/1/1517']
 ['XYZ' '12/31/1517']
 ['123' '6/30/1517']
 [' WX ' '12/31/2021']]
#end_IndexHierarchyGO-via_str.upper()

#start_IndexHierarchyGO-via_str.zfill()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_str.zfill(8)
[['0000qrs ' '4/1/1517']
 ['00000XYZ' '12/31/15']
 ['00000123' '6/30/151']
 ['0000 wX ' '12/31/20']]
#end_IndexHierarchyGO-via_str.zfill()

#start_IndexHierarchyGO-via_T.via_fill_value()
>>> 
#end_IndexHierarchyGO-via_T.via_fill_value()

#start_IndexHierarchyGO-via_T.__add__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T + (0, 1, 1, -1)
[[0.000e+00 1.024e+03]
 [2.000e+00       nan]
 [1.100e+01 2.049e+03]
 [      nan       nan]]
#end_IndexHierarchyGO-via_T.__add__()

#start_IndexHierarchyGO-via_T.__sub__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T - (0, 1, 1, -1)
[[   0. 1024.]
 [   0.   nan]
 [   9. 2047.]
 [  nan   nan]]
#end_IndexHierarchyGO-via_T.__sub__()

#start_IndexHierarchyGO-via_T.__mul__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T * (0, 1, 1, -1)
[[0.000e+00 0.000e+00]
 [1.000e+00       nan]
 [1.000e+01 2.048e+03]
 [      nan       nan]]
#end_IndexHierarchyGO-via_T.__mul__()

#start_IndexHierarchyGO-via_T.__truediv__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T / (0, 1, 1, -1)
[[      nan       inf]
 [1.000e+00       nan]
 [1.000e+01 2.048e+03]
 [      nan       nan]]
#end_IndexHierarchyGO-via_T.__truediv__()

#start_IndexHierarchyGO-via_T.__floordiv__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T // (0, 1, 1, -1)
[[      nan       nan]
 [1.000e+00       nan]
 [1.000e+01 2.048e+03]
 [      nan       nan]]
#end_IndexHierarchyGO-via_T.__floordiv__()

#start_IndexHierarchyGO-via_T.__mod__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T % (0, 1, 1, -1)
[[nan nan]
 [ 0. nan]
 [ 0.  0.]
 [nan nan]]
#end_IndexHierarchyGO-via_T.__mod__()

#start_IndexHierarchyGO-via_T.__pow__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T ** (0, 1, 1, -1)
[[1.000e+00 1.000e+00]
 [1.000e+00       nan]
 [1.000e+01 2.048e+03]
 [      nan       nan]]
#end_IndexHierarchyGO-via_T.__pow__()

#start_IndexHierarchyGO-via_T.__lshift__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))
>>> ih.via_T << (1, 2, 1, 2)
TypeError("ufunc 'left_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHierarchyGO-via_T.__lshift__()

#start_IndexHierarchyGO-via_T.__rshift__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))
>>> ih.via_T >> (1, 2, 1, 2)
TypeError("ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
#end_IndexHierarchyGO-via_T.__rshift__()

#start_IndexHierarchyGO-via_T.__and__()
>>> ih = sf.IndexHierarchyGO.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))
>>> ih.via_T & (True, False, True)
[[False  True  True]
 [False False False]
 [False  True False]]
#end_IndexHierarchyGO-via_T.__and__()

#start_IndexHierarchyGO-via_T.__xor__()
>>> ih = sf.IndexHierarchyGO.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))
>>> ih.via_T ^ (True, False, True)
[[ True False False]
 [ True  True  True]
 [ True False  True]]
#end_IndexHierarchyGO-via_T.__xor__()

#start_IndexHierarchyGO-via_T.__or__()
>>> ih = sf.IndexHierarchyGO.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))
>>> ih.via_T | (True, False, True)
[[ True  True  True]
 [ True  True  True]
 [ True  True  True]]
#end_IndexHierarchyGO-via_T.__or__()

#start_IndexHierarchyGO-via_T.__lt__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T < (0, 1, 1, -1)
[[False False]
 [False False]
 [False False]
 [False False]]
#end_IndexHierarchyGO-via_T.__lt__()

#start_IndexHierarchyGO-via_T.__le__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T <= (0, 1, 1, -1)
[[ True False]
 [ True False]
 [False False]
 [False False]]
#end_IndexHierarchyGO-via_T.__le__()

#start_IndexHierarchyGO-via_T.__eq__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T == (0, 1, 1, -1)
[[ True False]
 [ True False]
 [False False]
 [False False]]
#end_IndexHierarchyGO-via_T.__eq__()

#start_IndexHierarchyGO-via_T.__ne__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T != (0, 1, 1, -1)
[[False  True]
 [False  True]
 [ True  True]
 [ True  True]]
#end_IndexHierarchyGO-via_T.__ne__()

#start_IndexHierarchyGO-via_T.__gt__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T > (0, 1, 1, -1)
[[False  True]
 [False False]
 [ True  True]
 [False False]]
#end_IndexHierarchyGO-via_T.__gt__()

#start_IndexHierarchyGO-via_T.__ge__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T >= (0, 1, 1, -1)
[[ True  True]
 [ True False]
 [ True  True]
 [False False]]
#end_IndexHierarchyGO-via_T.__ge__()

#start_IndexHierarchyGO-via_T.__radd__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T + (0, 1, 1, -1)
[[0.000e+00 1.024e+03]
 [2.000e+00       nan]
 [1.100e+01 2.049e+03]
 [      nan       nan]]
#end_IndexHierarchyGO-via_T.__radd__()

#start_IndexHierarchyGO-via_T.__rsub__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T - (0, 1, 1, -1)
[[   0. 1024.]
 [   0.   nan]
 [   9. 2047.]
 [  nan   nan]]
#end_IndexHierarchyGO-via_T.__rsub__()

#start_IndexHierarchyGO-via_T.__rmul__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T * (0, 1, 1, -1)
[[0.000e+00 0.000e+00]
 [1.000e+00       nan]
 [1.000e+01 2.048e+03]
 [      nan       nan]]
#end_IndexHierarchyGO-via_T.__rmul__()

#start_IndexHierarchyGO-via_T.__rtruediv__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T / (0, 1, 1, -1)
[[      nan       inf]
 [1.000e+00       nan]
 [1.000e+01 2.048e+03]
 [      nan       nan]]
#end_IndexHierarchyGO-via_T.__rtruediv__()

#start_IndexHierarchyGO-via_T.__rfloordiv__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))
>>> ih.via_T // (0, 1, 1, -1)
[[      nan       nan]
 [1.000e+00       nan]
 [1.000e+01 2.048e+03]
 [      nan       nan]]
#end_IndexHierarchyGO-via_T.__rfloordiv__()

#start_IndexHierarchyGO-via_re().search()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_re('[X123]').search()
[[False  True]
 [ True  True]
 [ True  True]
 [ True  True]]
#end_IndexHierarchyGO-via_re().search()

#start_IndexHierarchyGO-via_re().match()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_re('[X123]').match()
[[False False]
 [ True  True]
 [ True False]
 [False  True]]
#end_IndexHierarchyGO-via_re().match()

#start_IndexHierarchyGO-via_re().fullmatch()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_re('123').fullmatch()
[[False False]
 [False False]
 [ True False]
 [False False]]
#end_IndexHierarchyGO-via_re().fullmatch()

#start_IndexHierarchyGO-via_re().split()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_re('[X123]').split()
[[('qrs ',) ('4/', '/', '5', '7')]
 [('', 'YZ') ('', '', '/', '', '/', '5', '7')]
 [('', '', '', '') ('6/', '0/', '5', '7')]
 [(' w', ' ') ('', '', '/', '', '/', '0', '', '')]]
#end_IndexHierarchyGO-via_re().split()

#start_IndexHierarchyGO-via_re().findall()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_re('[X123]').findall()
[[() ('1', '1', '1')]
 [('X',) ('1', '2', '3', '1', '1', '1')]
 [('1', '2', '3') ('3', '1', '1')]
 [('X',) ('1', '2', '3', '1', '2', '2', '1')]]
#end_IndexHierarchyGO-via_re().findall()

#start_IndexHierarchyGO-via_re().sub()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_re('[X123]').sub('==')
[['qrs ' '4/==/==5==7']
 ['==YZ' '====/====/==5==7']
 ['======' '6/==0/==5==7']
 [' w== ' '====/====/==0====']]
#end_IndexHierarchyGO-via_re().sub()

#start_IndexHierarchyGO-via_re().subn()
>>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))
>>> ih
<IndexHierarchyGO>
qrs                4/1/1517
XYZ                12/31/1517
123                6/30/1517
 wX                12/31/2021
<<U4>              <<U10>
>>> ih.via_re('[X123]').subn('==', 1)
[[('qrs ', 0) ('4/==/1517', 1)]
 [('==YZ', 1) ('==2/31/1517', 1)]
 [('==23', 1) ('6/==0/1517', 1)]
 [(' w== ', 1) ('==2/31/2021', 1)]]
#end_IndexHierarchyGO-via_re().subn()

#start_IndexHierarchyGO-via_values.apply()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> ih.via_values.apply(np.sin)
<IndexHierarchyGO: ('x', 'y', 'z')>
0.0                                 -0.15853338004399595 0.5514266812416906
0.8414709848078965                  0.31305701279012343  0.5514266812416906
0.8414709848078965                  -0.15853338004399595 0.5514266812416906
<float64>                           <float64>            <float64>
#end_IndexHierarchyGO-via_values.apply()

#start_IndexHierarchyGO-via_values.__array_ufunc__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> np.sin(ih.via_values)
<IndexHierarchyGO: ('x', 'y', 'z')>
0.0                                 -0.15853338004399595 0.5514266812416906
0.8414709848078965                  0.31305701279012343  0.5514266812416906
0.8414709848078965                  -0.15853338004399595 0.5514266812416906
<float64>                           <float64>            <float64>
#end_IndexHierarchyGO-via_values.__array_ufunc__()

#start_IndexHierarchyGO-via_values.__call__()
>>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))
>>> np.sin(ih.via_values(unify_blocks=True))
<IndexHierarchyGO: ('x', 'y', 'z')>
0.0                                 -0.15853338004399595 0.5514266812416906
0.8414709848078965                  0.31305701279012343  0.5514266812416906
0.8414709848078965                  -0.15853338004399595 0.5514266812416906
<float64>                           <float64>            <float64>
#end_IndexHierarchyGO-via_values.__call__()

#start_Bus-__init__()
>>> sf.Bus((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), index=('a', 'b'))
<Bus>
<Index>
a       Frame
b       Frame
<<U1>   <object>
#end_Bus-__init__()

#start_Bus-from_concat()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> sf.Bus.from_concat((b1, b2))
<Bus>
<Index>
x       Frame
y       Frame
v       Frame
w       Frame
<<U1>   <object>
#end_Bus-from_concat()

#start_Bus-from_dict()
>>> sf.Bus.from_dict(dict(j=sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), k=sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')))
<Bus>
<Index>
j       Frame
k       Frame
<<U1>   <object>
#end_Bus-from_dict()

#start_Bus-from_frames()
>>> sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
<Bus: i>
<Index>
x        Frame
y        Frame
<<U1>    <object>
#end_Bus-from_frames()

#start_Bus-from_hdf5()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.to_hdf5('/tmp/b.hdf5')
>>> sf.Bus.from_hdf5('/tmp/b.hdf5')
<Bus>
<Index>
x       <FrameDeferred>
y       <FrameDeferred>
<<U1>   <object>
#end_Bus-from_hdf5()

#start_Bus-from_items()
>>> sf.Bus.from_items((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'))))
<Bus>
<Index>
i       Frame
j       Frame
<<U1>   <object>
#end_Bus-from_items()

#start_Bus-from_series()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> s = sf.Series((f1, f2), index=(f1.name, f2.name))
>>> sf.Bus.from_series(s)
<Bus>
<Index>
x       Frame
y       Frame
<<U1>   <object>
#end_Bus-from_series()

#start_Bus-from_sqlite()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.to_sqlite('/tmp/b.sqlite')
>>> sf.Bus.from_sqlite('/tmp/b.sqlite')
<Bus>
<Index>
x       <FrameDeferred>
y       <FrameDeferred>
<<U1>   <object>
#end_Bus-from_sqlite()

#start_Bus-from_xlsx()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.to_xlsx('/tmp/b.xlsx')
>>> sf.Bus.from_xlsx('/tmp/b.xlsx')
<Bus>
<Index>
x       <FrameDeferred>
y       <FrameDeferred>
<<U1>   <object>
#end_Bus-from_xlsx()

#start_Bus-from_zip_csv()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.to_zip_csv('/tmp/b.zip')
>>> sf.Bus.from_zip_csv('/tmp/b.zip')
<Bus>
<Index>
x       <FrameDeferred>
y       <FrameDeferred>
<<U1>   <object>
#end_Bus-from_zip_csv()

#start_Bus-from_zip_npy()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.to_zip_npy('/tmp/b.zip')
>>> sf.Bus.from_zip_npy('/tmp/b.zip')
<Bus>
<Index>
x       <FrameDeferred>
y       <FrameDeferred>
<<U1>   <object>
#end_Bus-from_zip_npy()

#start_Bus-from_zip_npz()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.to_zip_npz('/tmp/b.zip')
>>> sf.Bus.from_zip_npz('/tmp/b.zip')
<Bus>
<Index>
x       <FrameDeferred>
y       <FrameDeferred>
<<U1>   <object>
#end_Bus-from_zip_npz()

#start_Bus-from_zip_parquet()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.to_zip_parquet('/tmp/b.zip')
>>> sf.Bus.from_zip_parquet('/tmp/b.zip')
<Bus>
<Index>
x       <FrameDeferred>
y       <FrameDeferred>
<<U1>   <object>
#end_Bus-from_zip_parquet()

#start_Bus-from_zip_pickle()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.to_zip_pickle('/tmp/b.zip')
>>> sf.Bus.from_zip_pickle('/tmp/b.zip')
<Bus>
<Index>
x       <FrameDeferred>
y       <FrameDeferred>
<<U1>   <object>
#end_Bus-from_zip_pickle()

#start_Bus-from_zip_tsv()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.to_zip_tsv('/tmp/b.zip')
>>> sf.Bus.from_zip_tsv('/tmp/b.zip')
<Bus>
<Index>
x       <FrameDeferred>
y       <FrameDeferred>
<<U1>   <object>
#end_Bus-from_zip_tsv()

#start_Bus-to_hdf5()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b
<Bus: i>
<Index>
x        Frame
y        Frame
<<U1>    <object>
>>> b.to_hdf5('/tmp/b.hdf5')
#end_Bus-to_hdf5()

#start_Bus-to_series()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.to_series()
<Series: i>
<Index>
x           Frame
y           Frame
<<U1>       <object>
#end_Bus-to_series()

#start_Bus-to_sqlite()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b
<Bus: i>
<Index>
x        Frame
y        Frame
<<U1>    <object>
>>> b.to_sqlite('/tmp/b.sqlite')
#end_Bus-to_sqlite()

#start_Bus-to_xlsx()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b
<Bus: i>
<Index>
x        Frame
y        Frame
<<U1>    <object>
>>> b.to_xlsx('/tmp/b.xlsx')
#end_Bus-to_xlsx()

#start_Bus-to_zip_csv()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b
<Bus: i>
<Index>
x        Frame
y        Frame
<<U1>    <object>
>>> b.to_zip_csv('/tmp/b.zip')
#end_Bus-to_zip_csv()

#start_Bus-to_zip_npy()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b
<Bus: i>
<Index>
x        Frame
y        Frame
<<U1>    <object>
>>> b.to_zip_npy('/tmp/b.zip')
#end_Bus-to_zip_npy()

#start_Bus-to_zip_npz()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b
<Bus: i>
<Index>
x        Frame
y        Frame
<<U1>    <object>
>>> b.to_zip_npz('/tmp/b.zip')
#end_Bus-to_zip_npz()

#start_Bus-to_zip_parquet()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b
<Bus: i>
<Index>
x        Frame
y        Frame
<<U1>    <object>
>>> b.to_zip_parquet('/tmp/b.zip')
#end_Bus-to_zip_parquet()

#start_Bus-to_zip_pickle()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b
<Bus: i>
<Index>
x        Frame
y        Frame
<<U1>    <object>
>>> b.to_zip_pickle('/tmp/b.zip')
#end_Bus-to_zip_pickle()

#start_Bus-to_zip_tsv()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b
<Bus: i>
<Index>
x        Frame
y        Frame
<<U1>    <object>
>>> b.to_zip_tsv('/tmp/b.zip')
#end_Bus-to_zip_tsv()

#start_Bus-STATIC
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.STATIC
False
#end_Bus-STATIC

#start_Bus-dtype
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.dtype
object
#end_Bus-dtype

#start_Bus-dtypes
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.dtypes
<Frame>
<Index> a        b        c        d        <<U1>
<Index>
x       int64    int64    None     None
y       None     None     bool     bool
<<U1>   <object> <object> <object> <object>
#end_Bus-dtypes

#start_Bus-index
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.index
<Index>
x
y
<<U1>
#end_Bus-index

#start_Bus-memory
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.memory
      L    Lu    LM   LMu   LMD  LMDu  R     Ru    RM   RMu   RMD  RMDu
Total 6.02 KB    1.58 KB    1.14 KB    14.12 KB    1.59 KB    1.15 KB
#end_Bus-memory

#start_Bus-name
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.name
i
#end_Bus-name

#start_Bus-nbytes
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.nbytes
54
#end_Bus-nbytes

#start_Bus-ndim
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.ndim
1
#end_Bus-ndim

#start_Bus-shape
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.shape
(2,)
#end_Bus-shape

#start_Bus-shapes
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.shapes
<Series: shape>
<Index>
x               (3, 2)
y               (3, 2)
<<U1>           <object>
#end_Bus-shapes

#start_Bus-size
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.size
2
#end_Bus-size

#start_Bus-status
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.status
<Frame>
<Index> loaded size      nbytes    shape    <<U6>
<Index>
x       True   6.0       48.0      (3, 2)
y       True   6.0       6.0       (3, 2)
<<U1>   <bool> <float64> <float64> <object>
#end_Bus-status

#start_Bus-__bool__()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> bool(b)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_Bus-__bool__()

#start_Bus-__len__()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> len(b)
2
#end_Bus-__len__()

#start_Bus-equals()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> b1.equals(b2)
False
#end_Bus-equals()

#start_Bus-head()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> b
<Bus: k>
<Index>
x        Frame
y        Frame
v        Frame
w        Frame
<<U1>    <object>
>>> b.head(2)
<Bus: k>
<Index>
x        Frame
y        Frame
<<U1>    <object>
#end_Bus-head()

#start_Bus-rehierarch()
>>> b = sf.Bus.from_items(((('i', 1024), sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), (('j', 4096), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), (('j', 2048), sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))), index_constructor=sf.IndexHierarchy.from_labels)
>>> b
<Bus>
<IndexHierarchy>
i                1024    Frame
j                4096    Frame
j                2048    Frame
<<U1>            <int64> <object>
>>> b.rehierarch((1, 0))
<Bus>
<IndexHierarchy>
1024             i     Frame
4096             j     Frame
2048             j     Frame
<int64>          <<U1> <object>
#end_Bus-rehierarch()

#start_Bus-reindex()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b
<Bus: i>
<Index>
x        Frame
y        Frame
<<U1>    <object>
>>> b.reindex(('y', 'z'), fill_value=sf.Frame()).status
<Frame>
<Index> loaded size      nbytes    shape    <<U6>
<Index>
y       True   6.0       6.0       (3, 2)
z       True   0.0       0.0       (0, 0)
<<U1>   <bool> <float64> <float64> <object>
#end_Bus-reindex()

#start_Bus-relabel()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b
<Bus: i>
<Index>
x        Frame
y        Frame
<<U1>    <object>
>>> b.relabel(('A', 'B'))
<Bus: i>
<Index>
A        Frame
B        Frame
<<U1>    <object>
>>> b.relabel(dict(x='A'))
<Bus: i>
<Index>
A        Frame
y        Frame
<<U1>    <object>
>>> b.relabel(lambda l: f'+{l.upper()}+')
<Bus: i>
<Index>
+X+      Frame
+Y+      Frame
<<U3>    <object>
#end_Bus-relabel()

#start_Bus-relabel_flat()
>>> b = sf.Bus.from_items(((('i', 1024), sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), (('j', 4096), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), (('j', 2048), sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))), index_constructor=sf.IndexHierarchy.from_labels)
>>> b
<Bus>
<IndexHierarchy>
i                1024    Frame
j                4096    Frame
j                2048    Frame
<<U1>            <int64> <object>
>>> b.relabel_flat()
<Bus>
<Index>
('i', 1024) Frame
('j', 4096) Frame
('j', 2048) Frame
<object>    <object>
#end_Bus-relabel_flat()

#start_Bus-relabel_level_add()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b
<Bus: i>
<Index>
x        Frame
y        Frame
<<U1>    <object>
>>> b.relabel_level_add(2048)
<Bus: i>
<IndexHierarchy>
2048             x     Frame
2048             y     Frame
<int64>          <<U1> <object>
#end_Bus-relabel_level_add()

#start_Bus-relabel_level_drop()
>>> b = sf.Bus.from_items(((('i', 1024), sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), (('j', 4096), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), (('j', 2048), sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))), index_constructor=sf.IndexHierarchy.from_labels)
>>> b
<Bus>
<IndexHierarchy>
i                1024    Frame
j                4096    Frame
j                2048    Frame
<<U1>            <int64> <object>
>>> b.relabel_level_drop()
<Bus>
<Index>
1024    Frame
4096    Frame
2048    Frame
<int64> <object>
#end_Bus-relabel_level_drop()

#start_Bus-rename()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b
<Bus: i>
<Index>
x        Frame
y        Frame
<<U1>    <object>
>>> b.rename('j')
<Bus: j>
<Index>
x        Frame
y        Frame
<<U1>    <object>
#end_Bus-rename()

#start_Bus-roll()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> b
<Bus: k>
<Index>
x        Frame
y        Frame
v        Frame
w        Frame
<<U1>    <object>
>>> b.roll(2)
<Bus: k>
<Index>
x        Frame
y        Frame
v        Frame
w        Frame
<<U1>    <object>
#end_Bus-roll()

#start_Bus-shift()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> b
<Bus: k>
<Index>
x        Frame
y        Frame
v        Frame
w        Frame
<<U1>    <object>
>>> b.shift(2, fill_value=sf.Frame()).status
<Frame>
<Index> loaded size      nbytes    shape    <<U6>
<Index>
x       True   0.0       0.0       (0, 0)
y       True   0.0       0.0       (0, 0)
v       True   6.0       48.0      (3, 2)
w       True   6.0       6.0       (3, 2)
<<U1>   <bool> <float64> <float64> <object>
#end_Bus-shift()

#start_Bus-sort_index()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> b
<Bus: k>
<Index>
x        Frame
y        Frame
v        Frame
w        Frame
<<U1>    <object>
>>> b.sort_index()
<Bus: k>
<Index>
v        Frame
w        Frame
x        Frame
y        Frame
<<U1>    <object>
>>> b.sort_index(ascending=False)
<Bus: k>
<Index>
y        Frame
x        Frame
w        Frame
v        Frame
<<U1>    <object>
#end_Bus-sort_index()

#start_Bus-sort_values()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> b
<Bus: k>
<Index>
x        Frame
y        Frame
v        Frame
w        Frame
<<U1>    <object>
>>> b.sort_values(key=lambda s:s.iter_element().apply(lambda f: f.nbytes))
<Bus: k>
<Index>
y        Frame
w        Frame
x        Frame
v        Frame
<<U1>    <object>
>>> b.sort_values(key=lambda s:s.iter_element().apply(lambda f: f.nbytes), ascending=False)
<Bus: k>
<Index>
v        Frame
x        Frame
w        Frame
y        Frame
<<U1>    <object>
#end_Bus-sort_values()

#start_Bus-tail()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> b
<Bus: k>
<Index>
x        Frame
y        Frame
v        Frame
w        Frame
<<U1>    <object>
>>> b.tail(2)
<Bus: k>
<Index>
v        Frame
w        Frame
<<U1>    <object>
#end_Bus-tail()

#start_Bus-unpersist()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b1.to_zip_npz('/tmp/b.zip')
>>> b2 = sf.Bus.from_zip_npz('/tmp/b.zip')
>>> b2
<Bus>
<Index>
x       <FrameDeferred>
y       <FrameDeferred>
<<U1>   <object>
>>> tuple(b2.values)
(<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>, <Frame: y>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          False  True
r          False  True
<<U1>      <bool> <bool>)
>>> b2
<Bus>
<Index>
x       Frame
y       Frame
<<U1>   <object>
>>> b2.unpersist()
>>> b2
<Bus>
<Index>
x       <FrameDeferred>
y       <FrameDeferred>
<<U1>   <object>
#end_Bus-unpersist()

#start_Bus-__contains__()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.__contains__('a')
False
#end_Bus-__contains__()

#start_Bus-__iter__()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> tuple(b.__iter__())
('x', 'y')
#end_Bus-__iter__()

#start_Bus-__reversed__()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> tuple(b.__reversed__())
('y', 'x')
#end_Bus-__reversed__()

#start_Bus-get()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.get('a')
>>> b.get('z', -1)
-1
#end_Bus-get()

#start_Bus-items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> tuple(b.items())
(('x', <Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>), ('y', <Frame: y>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          False  True
r          False  True
<<U1>      <bool> <bool>))
#end_Bus-items()

#start_Bus-keys()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.keys()
<Index>
x
y
<<U1>
#end_Bus-keys()

#start_Bus-values
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.values
[<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>
 <Frame: y>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          False  True
r          False  True
<<U1>      <bool> <bool>]
#end_Bus-values

#start_Bus-interface
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.interface
<Frame>
<Index>                              cls_name group       doc                  <<U18>
<Index: signature>
__init__(frames, *, index, index_... Bus      Constructor Default Bus const...
from_concat(containers, *, index,... Bus      Constructor Concatenate multi...
from_dict(mapping, *, name, index... Bus      Constructor Bus construction ...
from_frames(frames, *, index_cons... Bus      Constructor Return a Bus from...
from_hdf5(fp, *, config, max_pers... Bus      Constructor Given a file path...
from_items(pairs, *, config, name... Bus      Constructor Return a Bus from...
from_series(series, *, store, con... Bus      Constructor Create a Bus from...
from_sqlite(fp, *, config, max_pe... Bus      Constructor Given a file path...
from_xlsx(fp, *, config, max_pers... Bus      Constructor Given a file path...
from_zip_csv(fp, *, config, max_p... Bus      Constructor Given a file path...
from_zip_npy(fp, *, config, max_p... Bus      Constructor Given a file path...
from_zip_npz(fp, *, config, max_p... Bus      Constructor Given a file path...
from_zip_parquet(fp, *, config, m... Bus      Constructor Given a file path...
from_zip_pickle(fp, *, config, ma... Bus      Constructor Given a file path...
from_zip_tsv(fp, *, config, max_p... Bus      Constructor Given a file path...
to_hdf5(fp, *, config)               Bus      Exporter    Write the complet...
to_series()                          Bus      Exporter    Return a Series w...
...                                  ...      ...         ...
display_wide(config)                 Bus      Display     Maximize horizont...
drop[key]                            Bus      Selector    Label-based selec...
drop.iloc[key]                       Bus      Selector
drop.loc[key]                        Bus      Selector
[key]                                Bus      Selector    Selector of value...
iloc[key]                            Bus      Selector
loc[key]                             Bus      Selector
iter_element()                       Bus      Iterator    Iterator of eleme...
iter_element().apply(func, *, dty... Bus      Iterator    Apply a function ...
iter_element().apply_iter(func)      Bus      Iterator    Apply a function ...
iter_element().apply_iter_items(f... Bus      Iterator    Apply a function ...
iter_element().apply_pool(func, *... Bus      Iterator    Apply a function ...
iter_element_items()                 Bus      Iterator    Iterator of label...
iter_element_items().apply(func, ... Bus      Iterator    Apply a function ...
iter_element_items().apply_iter(f... Bus      Iterator    Apply a function ...
iter_element_items().apply_iter_i... Bus      Iterator    Apply a function ...
iter_element_items().apply_pool(f... Bus      Iterator    Apply a function ...
<<U58>                               <<U3>    <<U15>      <<U83>
#end_Bus-interface

#start_Bus-__repr__()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> repr(b)
<Bus: i>
<Index>
x        Frame
y        Frame
<<U1>    <object>
#end_Bus-__repr__()

#start_Bus-__str__()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> str(b)
<Bus: i>
<Index>
x        Frame
y        Frame
<<U1>    <object>
#end_Bus-__str__()

#start_Bus-display()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.display()
<Bus: i>
<Index>
x        Frame
y        Frame
<<U1>    <object>
>>> b.display(sf.DisplayConfig(type_show=False))
x Frame
y Frame
#end_Bus-display()

#start_Bus-display_tall()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.display_tall()
<Bus: i>
<Index>
x        Frame
y        Frame
<<U1>    <object>
#end_Bus-display_tall()

#start_Bus-display_wide()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b.display_wide()
<Bus: i>
<Index>
x        Frame
y        Frame
<<U1>    <object>
#end_Bus-display_wide()

#start_Bus-drop[]
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> b.drop['x']
<Bus: k>
<Index>
y        Frame
v        Frame
w        Frame
<<U1>    <object>
>>> b.drop['v':]
<Bus: k>
<Index>
x        Frame
y        Frame
<<U1>    <object>
>>> b.drop[['w', 'y']]
<Bus: k>
<Index>
x        Frame
v        Frame
<<U1>    <object>
#end_Bus-drop[]

#start_Bus-drop.iloc[]
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> b.drop.iloc[1]
<Bus: k>
<Index>
x        Frame
v        Frame
w        Frame
<<U1>    <object>
>>> b.drop.iloc[1:]
<Bus: k>
<Index>
x        Frame
<<U1>    <object>
>>> b.drop.iloc[[0, 3]]
<Bus: k>
<Index>
y        Frame
v        Frame
<<U1>    <object>
#end_Bus-drop.iloc[]

#start_Bus-drop.loc[]
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> b.drop.loc['w']
<Bus: k>
<Index>
x        Frame
y        Frame
v        Frame
<<U1>    <object>
>>> b.drop.loc['v':]
<Bus: k>
<Index>
x        Frame
y        Frame
<<U1>    <object>
>>> b.drop.loc[['v', 'x']]
<Bus: k>
<Index>
y        Frame
w        Frame
<<U1>    <object>
#end_Bus-drop.loc[]

#start_Bus-[]
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> b['w']
<Frame: w>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          True   False
r          True   True
<<U1>      <bool> <bool>
>>> b['v':]
<Bus: k>
<Index>
v        Frame
w        Frame
<<U1>    <object>
>>> b[['v', 'x']]
<Bus: k>
<Index>
v        Frame
x        Frame
<<U1>    <object>
#end_Bus-[]

#start_Bus-iloc[]
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> b.iloc[1]
<Frame: y>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          False  True
r          False  True
<<U1>      <bool> <bool>
>>> b.iloc[1:]
<Bus: k>
<Index>
y        Frame
v        Frame
w        Frame
<<U1>    <object>
>>> b.iloc[[0, 3]]
<Bus: k>
<Index>
x        Frame
w        Frame
<<U1>    <object>
#end_Bus-iloc[]

#start_Bus-loc[]
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> b.loc['w']
<Frame: w>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          True   False
r          True   True
<<U1>      <bool> <bool>
>>> b.loc['v':]
<Bus: k>
<Index>
v        Frame
w        Frame
<<U1>    <object>
>>> b.loc[['v', 'x']]
<Bus: k>
<Index>
v        Frame
x        Frame
<<U1>    <object>
#end_Bus-loc[]

#start_Bus-iter_element()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> tuple(b.iter_element())
(<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>, <Frame: y>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          False  True
r          False  True
<<U1>      <bool> <bool>, <Frame: v>
<Index>    a       b       <<U1>
<Index>
p          40      41
q          42      43
r          44      45
<<U1>      <int64> <int64>, <Frame: w>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          True   False
r          True   True
<<U1>      <bool> <bool>)
#end_Bus-iter_element()

#start_Bus-iter_element().apply()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> b.iter_element().apply(lambda f: f.shape)
<Series>
<Index>
x        (3, 2)
y        (3, 2)
v        (3, 2)
w        (3, 2)
<<U1>    <object>
#end_Bus-iter_element().apply()

#start_Bus-iter_element().apply_iter()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> b
<Bus: k>
<Index>
x        Frame
y        Frame
v        Frame
w        Frame
<<U1>    <object>
>>> tuple(b.iter_element().apply_iter(lambda f: f.nbytes))
(48, 6, 48, 6)
#end_Bus-iter_element().apply_iter()

#start_Bus-iter_element().apply_iter_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> b
<Bus: k>
<Index>
x        Frame
y        Frame
v        Frame
w        Frame
<<U1>    <object>
>>> tuple(b.iter_element().apply_iter_items(lambda f: f.nbytes))
(('x', 48), ('y', 6), ('v', 48), ('w', 6))
#end_Bus-iter_element().apply_iter_items()

#start_Bus-iter_element().apply_pool()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> b
<Bus: k>
<Index>
x        Frame
y        Frame
v        Frame
w        Frame
<<U1>    <object>
>>> def func(f): return f.sum().sum()
>>> b.iter_element().apply_pool(func, use_threads=True)
<Series>
<Index>
x        15
y        3
v        255
w        4
<<U1>    <int64>
#end_Bus-iter_element().apply_pool()

#start_Bus-iter_element_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> tuple(b.iter_element_items())
(('x', <Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>), ('y', <Frame: y>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          False  True
r          False  True
<<U1>      <bool> <bool>), ('v', <Frame: v>
<Index>    a       b       <<U1>
<Index>
p          40      41
q          42      43
r          44      45
<<U1>      <int64> <int64>), ('w', <Frame: w>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          True   False
r          True   True
<<U1>      <bool> <bool>))
#end_Bus-iter_element_items()

#start_Bus-iter_element_items().apply()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> b.iter_element_items().apply(lambda l, f: f.size if l != 'v' else 0)
<Series>
<Index>
x        6
y        6
v        0
w        6
<<U1>    <int64>
#end_Bus-iter_element_items().apply()

#start_Bus-iter_element_items().apply_iter()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> b
<Bus: k>
<Index>
x        Frame
y        Frame
v        Frame
w        Frame
<<U1>    <object>
>>> tuple(b.iter_element_items().apply_iter(lambda l, f: f.shape if l != 'x' else 0))
(0, (3, 2), (3, 2), (3, 2))
#end_Bus-iter_element_items().apply_iter()

#start_Bus-iter_element_items().apply_iter_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> b
<Bus: k>
<Index>
x        Frame
y        Frame
v        Frame
w        Frame
<<U1>    <object>
>>> tuple(b.iter_element_items().apply_iter_items(lambda l, f: f.shape if l != 'x' else 0))
(('x', 0), ('y', (3, 2)), ('v', (3, 2)), ('w', (3, 2)))
#end_Bus-iter_element_items().apply_iter_items()

#start_Bus-iter_element_items().apply_pool()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> b
<Bus: k>
<Index>
x        Frame
y        Frame
v        Frame
w        Frame
<<U1>    <object>
>>> def func(pair): return pair[1].sum().sum() if pair[0] != 'v' else -1
>>> b.iter_element_items().apply_pool(func, use_threads=True)
<Series>
<Index>
x        15
y        3
v        -1
w        4
<<U1>    <int64>
#end_Bus-iter_element_items().apply_pool()

#start_Yarn-__init__()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> sf.Yarn((b1, b2), index=('2020-01', '2020-02', '2020-03', '2020-04'), index_constructor=sf.IndexYearMonth)
<Yarn>
<IndexYearMonth>
2020-01          Frame
2020-02          Frame
2020-03          Frame
2020-04          Frame
<datetime64[M]>  <object>
#end_Yarn-__init__()

#start_Yarn-from_buses()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> sf.Yarn.from_buses((b1, b2), retain_labels=True)
<Yarn>
<IndexHierarchy>
i                x     Frame
i                y     Frame
j                v     Frame
j                w     Frame
<<U1>            <<U1> <object>
>>> sf.Yarn.from_buses((b1, b2), retain_labels=False)
<Yarn>
<Index>
x       Frame
y       Frame
v       Frame
w       Frame
<<U1>   <object>
#end_Yarn-from_buses()

#start_Yarn-from_concat()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> b3 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> y1 = sf.Yarn.from_buses((b1, b2), retain_labels=True)
>>> y2 = sf.Yarn.from_buses((b3,), retain_labels=True)
>>> sf.Yarn.from_concat((y1, y2))
<Yarn>
<IndexHierarchy>
i                x     Frame
i                y     Frame
j                v     Frame
j                w     Frame
k                x     Frame
k                y     Frame
k                v     Frame
k                w     Frame
<<U1>            <<U1> <object>
#end_Yarn-from_concat()

#start_Yarn-to_hdf5()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> y
<Yarn>
<Index>
x       Frame
y       Frame
v       Frame
w       Frame
<<U1>   <object>
>>> y.to_hdf5('/tmp/y.hdf5')
#end_Yarn-to_hdf5()

#start_Yarn-to_series()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> y
<Yarn>
<Index>
x       Frame
y       Frame
v       Frame
w       Frame
<<U1>   <object>
>>> y.to_series()
<Series>
<Index>
x        Frame
y        Frame
v        Frame
w        Frame
<<U1>    <object>
#end_Yarn-to_series()

#start_Yarn-to_sqlite()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> y
<Yarn>
<Index>
x       Frame
y       Frame
v       Frame
w       Frame
<<U1>   <object>
>>> y.to_sqlite('/tmp/y.sqlite')
#end_Yarn-to_sqlite()

#start_Yarn-to_xlsx()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> y
<Yarn>
<Index>
x       Frame
y       Frame
v       Frame
w       Frame
<<U1>   <object>
>>> y.to_xlsx('/tmp/y.xlsx')
#end_Yarn-to_xlsx()

#start_Yarn-to_zip_csv()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)
>>> y
<Yarn>
<IndexHierarchy>
i                x     Frame
i                y     Frame
j                v     Frame
j                w     Frame
<<U1>            <<U1> <object>
>>> y.to_zip_csv('/tmp/y.zip', config=sf.StoreConfig(label_encoder=str))
#end_Yarn-to_zip_csv()

#start_Yarn-to_zip_npy()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)
>>> y
<Yarn>
<IndexHierarchy>
i                x     Frame
i                y     Frame
j                v     Frame
j                w     Frame
<<U1>            <<U1> <object>
>>> y.to_zip_npy('/tmp/y.zip', config=sf.StoreConfig(label_encoder=str))
#end_Yarn-to_zip_npy()

#start_Yarn-to_zip_npz()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)
>>> y
<Yarn>
<IndexHierarchy>
i                x     Frame
i                y     Frame
j                v     Frame
j                w     Frame
<<U1>            <<U1> <object>
>>> y.to_zip_npz('/tmp/y.zip', config=sf.StoreConfig(label_encoder=str))
#end_Yarn-to_zip_npz()

#start_Yarn-to_zip_parquet()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)
>>> y
<Yarn>
<IndexHierarchy>
i                x     Frame
i                y     Frame
j                v     Frame
j                w     Frame
<<U1>            <<U1> <object>
>>> y.to_zip_parquet('/tmp/y.zip', config=sf.StoreConfig(label_encoder=str))
#end_Yarn-to_zip_parquet()

#start_Yarn-to_zip_pickle()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)
>>> y
<Yarn>
<IndexHierarchy>
i                x     Frame
i                y     Frame
j                v     Frame
j                w     Frame
<<U1>            <<U1> <object>
>>> y.to_zip_pickle('/tmp/y.zip', config=sf.StoreConfig(label_encoder=str))
#end_Yarn-to_zip_pickle()

#start_Yarn-to_zip_tsv()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)
>>> y
<Yarn>
<IndexHierarchy>
i                x     Frame
i                y     Frame
j                v     Frame
j                w     Frame
<<U1>            <<U1> <object>
>>> y.to_zip_tsv('/tmp/y.zip', config=sf.StoreConfig(label_encoder=str))
#end_Yarn-to_zip_tsv()

#start_Yarn-STATIC
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> y.STATIC
True
#end_Yarn-STATIC

#start_Yarn-dtype
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> y.dtype
object
#end_Yarn-dtype

#start_Yarn-dtypes
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> y.dtypes
<Frame>
<Index>                a        b        c        d        <<U1>
<IndexHierarchy>
i                x     int64    int64    None     None
i                y     None     None     bool     bool
j                v     int64    int64    None     None
j                w     None     None     bool     bool
<<U1>            <<U1> <object> <object> <object> <object>
#end_Yarn-dtypes

#start_Yarn-index
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> y.index
<IndexHierarchy>
i                x
i                y
j                v
j                w
<<U1>            <<U1>
#end_Yarn-index

#start_Yarn-memory
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> y.memory
      L     Lu    LM   LMu   LMD  LMDu  R     Ru    RM   RMu   RMD  RMDu
Total 15.79 KB    4.62 KB    3.42 KB    23.88 KB    4.68 KB    3.48 KB
#end_Yarn-memory

#start_Yarn-name
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> y.name
#end_Yarn-name

#start_Yarn-nbytes
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> y.nbytes
108
#end_Yarn-nbytes

#start_Yarn-ndim
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> y.ndim
1
#end_Yarn-ndim

#start_Yarn-shape
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> y.shape
(4,)
#end_Yarn-shape

#start_Yarn-shapes
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> y.shapes
<Series: shape>
<IndexHierarchy>
i                x     (3, 2)
i                y     (3, 2)
j                v     (3, 2)
j                w     (3, 2)
<<U1>            <<U1> <object>
#end_Yarn-shapes

#start_Yarn-size
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> y.size
4
#end_Yarn-size

#start_Yarn-status
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> y.status
<Frame>
<Index>                loaded size      nbytes    shape    <<U6>
<IndexHierarchy>
i                x     True   6.0       48.0      (3, 2)
i                y     True   6.0       6.0       (3, 2)
j                v     True   6.0       48.0      (3, 2)
j                w     True   6.0       6.0       (3, 2)
<<U1>            <<U1> <bool> <float64> <float64> <object>
#end_Yarn-status

#start_Yarn-__bool__()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> bool(y)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_Yarn-__bool__()

#start_Yarn-__len__()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> len(y)
4
#end_Yarn-__len__()

#start_Yarn-equals()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> b3 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')
>>> y1 = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> y1
<Yarn>
<Index>
x       Frame
y       Frame
v       Frame
w       Frame
<<U1>   <object>
>>> y2 = sf.Yarn.from_buses((b3,), retain_labels=False)
>>> y2
<Yarn>
<Index>
x       Frame
y       Frame
v       Frame
w       Frame
<<U1>   <object>
>>> y1.equals(y2)
True
#end_Yarn-equals()

#start_Yarn-head()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> y.head(2)
<Yarn>
<Index>
x       Frame
y       Frame
<<U1>   <object>
#end_Yarn-head()

#start_Yarn-rehierarch()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)
>>> y
<Yarn>
<IndexHierarchy>
i                x     Frame
i                y     Frame
j                v     Frame
j                w     Frame
<<U1>            <<U1> <object>
>>> y.rehierarch((1, 0))
<Yarn>
<IndexHierarchy>
x                i     Frame
y                i     Frame
v                j     Frame
w                j     Frame
<<U1>            <<U1> <object>
#end_Yarn-rehierarch()

#start_Yarn-relabel()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)
>>> y
<Yarn>
<IndexHierarchy>
i                x     Frame
i                y     Frame
j                v     Frame
j                w     Frame
<<U1>            <<U1> <object>
>>> y.relabel(('A', 'B', 'C', 'D'))
<Yarn>
<Index>
A       Frame
B       Frame
C       Frame
D       Frame
<<U1>   <object>
>>> y.relabel({('j', 'v'):('A', 'x')})
<Yarn>
<IndexHierarchy>
i                x     Frame
i                y     Frame
A                x     Frame
j                w     Frame
<<U1>            <<U1> <object>
#end_Yarn-relabel()

#start_Yarn-relabel_flat()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)
>>> y
<Yarn>
<IndexHierarchy>
i                x     Frame
i                y     Frame
j                v     Frame
j                w     Frame
<<U1>            <<U1> <object>
>>> y.relabel_flat()
<Yarn>
<Index>
('i', 'x') Frame
('i', 'y') Frame
('j', 'v') Frame
('j', 'w') Frame
<object>   <object>
#end_Yarn-relabel_flat()

#start_Yarn-relabel_level_add()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)
>>> y
<Yarn>
<IndexHierarchy>
i                x     Frame
i                y     Frame
j                v     Frame
j                w     Frame
<<U1>            <<U1> <object>
>>> y.relabel_level_add('A')
<Yarn>
<IndexHierarchy>
A                i     x     Frame
A                i     y     Frame
A                j     v     Frame
A                j     w     Frame
<<U1>            <<U1> <<U1> <object>
#end_Yarn-relabel_level_add()

#start_Yarn-relabel_level_drop()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)
>>> y
<Yarn>
<IndexHierarchy>
i                x     Frame
i                y     Frame
j                v     Frame
j                w     Frame
<<U1>            <<U1> <object>
>>> y.relabel_level_drop()
<Yarn>
<Index>
x       Frame
y       Frame
v       Frame
w       Frame
<<U1>   <object>
#end_Yarn-relabel_level_drop()

#start_Yarn-rename()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)
>>> y.rename('j')
<Yarn: j>
<IndexHierarchy>
i                x     Frame
i                y     Frame
j                v     Frame
j                w     Frame
<<U1>            <<U1> <object>
#end_Yarn-rename()

#start_Yarn-tail()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> y.tail(2)
<Yarn>
<Index>
v       Frame
w       Frame
<<U1>   <object>
#end_Yarn-tail()

#start_Yarn-unpersist()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b1.to_zip_npz('/tmp/b1.zip')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> b2.to_zip_npz('/tmp/b2.zip')
>>> b1 = sf.Bus.from_zip_npz('/tmp/b1.zip').rename('a')
>>> b1
<Bus: a>
<Index>
x        <FrameDeferred>
y        <FrameDeferred>
<<U1>    <object>
>>> b2 = sf.Bus.from_zip_npz('/tmp/b2.zip').rename('b')
>>> b2
<Bus: b>
<Index>
v        <FrameDeferred>
w        <FrameDeferred>
<<U1>    <object>
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> tuple(y.values)
(<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>, <Frame: y>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          False  True
r          False  True
<<U1>      <bool> <bool>, <Frame: v>
<Index>    a       b       <<U1>
<Index>
p          40      41
q          42      43
r          44      45
<<U1>      <int64> <int64>, <Frame: w>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          True   False
r          True   True
<<U1>      <bool> <bool>)
>>> y
<Yarn>
<Index>
x       Frame
y       Frame
v       Frame
w       Frame
<<U1>   <object>
>>> y.unpersist()
>>> y
<Yarn>
<Index>
x       <FrameDeferred>
y       <FrameDeferred>
v       <FrameDeferred>
w       <FrameDeferred>
<<U1>   <object>
#end_Yarn-unpersist()

#start_Yarn-__contains__()
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> y.__contains__('a')
RuntimeError('Invalid key length for a; must be length 2.')
#end_Yarn-__contains__()

#start_Yarn-__iter__()
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> tuple(y.__iter__())
(('i', 'x'), ('i', 'y'), ('j', 'v'), ('j', 'w'))
#end_Yarn-__iter__()

#start_Yarn-__reversed__()
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> tuple(y.__reversed__())
(('j', 'w'), ('j', 'v'), ('i', 'y'), ('i', 'x'))
#end_Yarn-__reversed__()

#start_Yarn-get()
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> y.get('a')
RuntimeError('Invalid key length for a; must be length 2.')
>>> y.get('z', -1)
RuntimeError('Invalid key length for z; must be length 2.')
#end_Yarn-get()

#start_Yarn-items()
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> tuple(y.items())
((('i', 'x'), <Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>), (('i', 'y'), <Frame: y>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          False  True
r          False  True
<<U1>      <bool> <bool>), (('j', 'v'), <Frame: v>
<Index>    a       b       <<U1>
<Index>
p          40      41
q          42      43
r          44      45
<<U1>      <int64> <int64>), (('j', 'w'), <Frame: w>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          True   False
r          True   True
<<U1>      <bool> <bool>))
#end_Yarn-items()

#start_Yarn-keys()
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> y.keys()
<IndexHierarchy>
i                x
i                y
j                v
j                w
<<U1>            <<U1>
#end_Yarn-keys()

#start_Yarn-values
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> y.values
[<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>
 <Frame: y>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          False  True
r          False  True
<<U1>      <bool> <bool>
 <Frame: v>
<Index>    a       b       <<U1>
<Index>
p          40      41
q          42      43
r          44      45
<<U1>      <int64> <int64>
 <Frame: w>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          True   False
r          True   True
<<U1>      <bool> <bool>]
#end_Yarn-values

#start_Yarn-interface
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> y.interface
<Frame>
<Index>                              cls_name group       doc                  <<U18>
<Index: signature>
__init__(series, *, index, index_... Yarn     Constructor Args: series: An ...
from_buses(buses, *, name, retain... Yarn     Constructor Return a Yarn fro...
from_concat(containers, *, index,... Yarn     Constructor Concatenate multi...
to_hdf5(fp, *, config)               Yarn     Exporter    Write the complet...
to_series()                          Yarn     Exporter    Return a Series w...
to_sqlite(fp, *, config)             Yarn     Exporter    Write the complet...
to_visidata()                        Yarn     Exporter    Open an interacti...
to_xlsx(fp, *, config)               Yarn     Exporter    Write the complet...
to_zip_csv(fp, *, config, compres... Yarn     Exporter    Write the complet...
to_zip_npy(fp, *, config, compres... Yarn     Exporter    Write the complet...
to_zip_npz(fp, *, config, compres... Yarn     Exporter    Write the complet...
to_zip_parquet(fp, *, config, com... Yarn     Exporter    Write the complet...
to_zip_pickle(fp, *, config, comp... Yarn     Exporter    Write the complet...
to_zip_tsv(fp, *, config, compres... Yarn     Exporter    Write the complet...
STATIC                               Yarn     Attribute   bool(x) -> bool R...
dtype                                Yarn     Attribute   Return the dtype ...
dtypes                               Yarn     Attribute   Returns a Frame o...
...                                  ...      ...         ...
display_wide(config)                 Yarn     Display     Maximize horizont...
drop[key]                            Yarn     Selector    Label-based selec...
drop.iloc[key]                       Yarn     Selector
drop.loc[key]                        Yarn     Selector
[key]                                Yarn     Selector    Selector of value...
iloc[key]                            Yarn     Selector
loc[key]                             Yarn     Selector
iter_element()                       Yarn     Iterator    Iterator of eleme...
iter_element().apply(func, *, dty... Yarn     Iterator    Apply a function ...
iter_element().apply_iter(func)      Yarn     Iterator    Apply a function ...
iter_element().apply_iter_items(f... Yarn     Iterator    Apply a function ...
iter_element().apply_pool(func, *... Yarn     Iterator    Apply a function ...
iter_element_items()                 Yarn     Iterator    Iterator of label...
iter_element_items().apply(func, ... Yarn     Iterator    Apply a function ...
iter_element_items().apply_iter(f... Yarn     Iterator    Apply a function ...
iter_element_items().apply_iter_i... Yarn     Iterator    Apply a function ...
iter_element_items().apply_pool(f... Yarn     Iterator    Apply a function ...
<<U58>                               <<U4>    <<U15>      <<U83>
#end_Yarn-interface

#start_Yarn-__repr__()
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> repr(y)
<Yarn>
<IndexHierarchy>
i                x     Frame
i                y     Frame
j                v     Frame
j                w     Frame
<<U1>            <<U1> <object>
#end_Yarn-__repr__()

#start_Yarn-__str__()
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> str(y)
<Yarn>
<IndexHierarchy>
i                x     Frame
i                y     Frame
j                v     Frame
j                w     Frame
<<U1>            <<U1> <object>
#end_Yarn-__str__()

#start_Yarn-display()
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> y.display()
<Yarn>
<IndexHierarchy>
i                x     Frame
i                y     Frame
j                v     Frame
j                w     Frame
<<U1>            <<U1> <object>
>>> y.display(sf.DisplayConfig(type_show=False))
i x Frame
i y Frame
j v Frame
j w Frame
#end_Yarn-display()

#start_Yarn-display_tall()
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> y.display_tall()
<Yarn>
<IndexHierarchy>
i                x     Frame
i                y     Frame
j                v     Frame
j                w     Frame
<<U1>            <<U1> <object>
#end_Yarn-display_tall()

#start_Yarn-display_wide()
>>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)
>>> y.display_wide()
<Yarn>
<IndexHierarchy>
i                x     Frame
i                y     Frame
j                v     Frame
j                w     Frame
<<U1>            <<U1> <object>
#end_Yarn-display_wide()

#start_Yarn-drop[]
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> y.drop['x']
<Yarn>
<Index>
y       Frame
v       Frame
w       Frame
<<U1>   <object>
>>> y.drop['v':]
<Yarn>
<Index>
x       Frame
y       Frame
<<U1>   <object>
>>> y.drop[['w', 'y']]
<Yarn>
<Index>
x       Frame
v       Frame
<<U1>   <object>
#end_Yarn-drop[]

#start_Yarn-drop.iloc[]
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> y.drop.iloc[1]
<Yarn>
<Index>
x       Frame
v       Frame
w       Frame
<<U1>   <object>
>>> y.drop.iloc[1:]
<Yarn>
<Index>
x       Frame
<<U1>   <object>
>>> y.drop.iloc[[0, 3]]
<Yarn>
<Index>
y       Frame
v       Frame
<<U1>   <object>
#end_Yarn-drop.iloc[]

#start_Yarn-drop.loc[]
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> y.drop.loc['w']
<Yarn>
<Index>
x       Frame
y       Frame
v       Frame
<<U1>   <object>
>>> y.drop.loc['v':]
<Yarn>
<Index>
x       Frame
y       Frame
<<U1>   <object>
>>> y.drop.loc[['v', 'x']]
<Yarn>
<Index>
y       Frame
w       Frame
<<U1>   <object>
#end_Yarn-drop.loc[]

#start_Yarn-[]
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> y['w']
<Frame: w>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          True   False
r          True   True
<<U1>      <bool> <bool>
>>> y['v':]
<Yarn>
<Index>
v       Frame
w       Frame
<<U1>   <object>
>>> y[['v', 'x']]
<Yarn>
<Index>
v       Frame
x       Frame
<<U1>   <object>
#end_Yarn-[]

#start_Yarn-iloc[]
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> y.iloc[1]
<Frame: y>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          False  True
r          False  True
<<U1>      <bool> <bool>
>>> y.iloc[1:]
<Yarn>
<Index>
y       Frame
v       Frame
w       Frame
<<U1>   <object>
>>> y.iloc[[0, 3]]
<Yarn>
<Index>
x       Frame
w       Frame
<<U1>   <object>
#end_Yarn-iloc[]

#start_Yarn-loc[]
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> y.loc['w']
<Frame: w>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          True   False
r          True   True
<<U1>      <bool> <bool>
>>> y.loc['v':]
<Yarn>
<Index>
v       Frame
w       Frame
<<U1>   <object>
>>> y.loc[['v', 'x']]
<Yarn>
<Index>
v       Frame
x       Frame
<<U1>   <object>
#end_Yarn-loc[]

#start_Yarn-iter_element()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> tuple(y.iter_element())
(<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>, <Frame: y>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          False  True
r          False  True
<<U1>      <bool> <bool>, <Frame: v>
<Index>    a       b       <<U1>
<Index>
p          40      41
q          42      43
r          44      45
<<U1>      <int64> <int64>, <Frame: w>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          True   False
r          True   True
<<U1>      <bool> <bool>)
#end_Yarn-iter_element()

#start_Yarn-iter_element().apply()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> y.iter_element().apply(lambda f: f.shape)
<Series>
<Index>
x        (3, 2)
y        (3, 2)
v        (3, 2)
w        (3, 2)
<<U1>    <object>
#end_Yarn-iter_element().apply()

#start_Yarn-iter_element().apply_iter()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> tuple(y.iter_element().apply_iter(lambda f: f.nbytes))
(48, 6, 48, 6)
#end_Yarn-iter_element().apply_iter()

#start_Yarn-iter_element().apply_iter_items()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> tuple(y.iter_element().apply_iter_items(lambda f: f.nbytes))
(('x', 48), ('y', 6), ('v', 48), ('w', 6))
#end_Yarn-iter_element().apply_iter_items()

#start_Yarn-iter_element().apply_pool()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> def func(f): return f.sum().sum()
>>> y.iter_element().apply_pool(func, use_threads=True)
<Series>
<Index>
x        15
y        3
v        255
w        4
<<U1>    <int64>
#end_Yarn-iter_element().apply_pool()

#start_Yarn-iter_element_items()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> tuple(y.iter_element_items())
(('x', <Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>), ('y', <Frame: y>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          False  True
r          False  True
<<U1>      <bool> <bool>), ('v', <Frame: v>
<Index>    a       b       <<U1>
<Index>
p          40      41
q          42      43
r          44      45
<<U1>      <int64> <int64>), ('w', <Frame: w>
<Index>    c      d      <<U1>
<Index>
p          False  True
q          True   False
r          True   True
<<U1>      <bool> <bool>))
#end_Yarn-iter_element_items()

#start_Yarn-iter_element_items().apply()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> y.iter_element_items().apply(lambda l, f: f.size if l != 'v' else 0)
<Series>
<Index>
x        6
y        6
v        0
w        6
<<U1>    <int64>
#end_Yarn-iter_element_items().apply()

#start_Yarn-iter_element_items().apply_iter()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> tuple(y.iter_element_items().apply_iter(lambda l, f: f.shape if l != 'x' else 0))
(0, (3, 2), (3, 2), (3, 2))
#end_Yarn-iter_element_items().apply_iter()

#start_Yarn-iter_element_items().apply_iter_items()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> tuple(y.iter_element_items().apply_iter_items(lambda l, f: f.shape if l != 'x' else 0))
(('x', 0), ('y', (3, 2)), ('v', (3, 2)), ('w', (3, 2)))
#end_Yarn-iter_element_items().apply_iter_items()

#start_Yarn-iter_element_items().apply_pool()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')
>>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')
>>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)
>>> def func(pair): return pair[1].sum().sum() if pair[0] != 'v' else -1
>>> y.iter_element_items().apply_pool(func, use_threads=True)
<Series>
<Index>
x        15
y        3
v        -1
w        4
<<U1>    <int64>
#end_Yarn-iter_element_items().apply_pool()

#start_Batch-__init__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt
<Batch max_workers=None>
>>> bt.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       1
i                q     2       3
i                r     4       5
j                p     40      41
j                q     42      43
j                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Batch-__init__()

#start_Batch-from_frames()
>>> bt = sf.Batch.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')))
>>> bt
<Batch max_workers=None>
>>> bt.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                p     0       1
x                q     2       3
x                r     4       5
v                p     40      41
v                q     42      43
v                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Batch-from_frames()

#start_Batch-from_hdf5()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_hdf5('/tmp/f.hdf5')
>>> bt2 = sf.Batch.from_hdf5('/tmp/f.hdf5', config=sf.StoreConfig(index_depth=1))
>>> bt2.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       1
i                q     2       3
i                r     4       5
j                p     40      41
j                q     42      43
j                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Batch-from_hdf5()

#start_Batch-from_sqlite()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_sqlite('/tmp/f.sqlite')
>>> bt2 = sf.Batch.from_sqlite('/tmp/f.sqlite', config=sf.StoreConfig(index_depth=1))
>>> bt2.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       1
i                q     2       3
i                r     4       5
j                p     40      41
j                q     42      43
j                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Batch-from_sqlite()

#start_Batch-from_xlsx()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_xlsx('/tmp/f.xlsx')
>>> bt2 = sf.Batch.from_xlsx('/tmp/f.xlsx', config=sf.StoreConfig(index_depth=1))
>>> bt2.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       1
i                q     2       3
i                r     4       5
j                p     40      41
j                q     42      43
j                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Batch-from_xlsx()

#start_Batch-from_zip_csv()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_zip_csv('/tmp/f.zip')
>>> bt2 = sf.Batch.from_zip_csv('/tmp/f.zip', config=sf.StoreConfig(index_depth=1))
>>> bt2.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       1
i                q     2       3
i                r     4       5
j                p     40      41
j                q     42      43
j                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Batch-from_zip_csv()

#start_Batch-from_zip_npy()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_zip_npy('/tmp/f.zip')
>>> bt2 = sf.Batch.from_zip_npy('/tmp/f.zip')
>>> bt2.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       1
i                q     2       3
i                r     4       5
j                p     40      41
j                q     42      43
j                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Batch-from_zip_npy()

#start_Batch-from_zip_npz()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_zip_npz('/tmp/f.zip')
>>> bt2 = sf.Batch.from_zip_npz('/tmp/f.zip')
>>> bt2.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       1
i                q     2       3
i                r     4       5
j                p     40      41
j                q     42      43
j                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Batch-from_zip_npz()

#start_Batch-from_zip_parquet()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_zip_parquet('/tmp/f.zip')
>>> bt2 = sf.Batch.from_zip_parquet('/tmp/f.zip', config=sf.StoreConfig(index_depth=1))
>>> bt2.to_frame()
<Frame>
<Index>                   a       b       <<U1>
<IndexHierarchy>
i                p        0       1
i                q        2       3
i                r        4       5
j                p        40      41
j                q        42      43
j                r        44      45
<<U1>            <object> <int64> <int64>
#end_Batch-from_zip_parquet()

#start_Batch-from_zip_pickle()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_zip_pickle('/tmp/f.zip')
>>> bt2 = sf.Batch.from_zip_pickle('/tmp/f.zip')
>>> bt2.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       1
i                q     2       3
i                r     4       5
j                p     40      41
j                q     42      43
j                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Batch-from_zip_pickle()

#start_Batch-from_zip_tsv()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_zip_tsv('/tmp/f.zip')
>>> bt2 = sf.Batch.from_zip_tsv('/tmp/f.zip', config=sf.StoreConfig(index_depth=1))
>>> bt2.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       1
i                q     2       3
i                r     4       5
j                p     40      41
j                q     42      43
j                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Batch-from_zip_tsv()

#start_Batch-to_bus()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_bus()
<Bus>
<Index>
i       Frame
j       Frame
<<U1>   <object>
#end_Batch-to_bus()

#start_Batch-to_frame()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       1
i                q     2       3
i                r     4       5
j                p     40      41
j                q     42      43
j                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Batch-to_frame()

#start_Batch-to_hdf5()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_hdf5('/tmp/f.h5')
#end_Batch-to_hdf5()

#start_Batch-to_series()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_series()
<Series>
<Index>
i        Frame
j        Frame
<<U1>    <object>
#end_Batch-to_series()

#start_Batch-to_sqlite()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_sqlite('/tmp/f.sqlite')
#end_Batch-to_sqlite()

#start_Batch-to_xlsx()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_xlsx('/tmp/f.xlsx')
#end_Batch-to_xlsx()

#start_Batch-to_zip_csv()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_zip_csv('/tmp/f.zip')
#end_Batch-to_zip_csv()

#start_Batch-to_zip_npy()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_zip_npy('/tmp/f.zip')
#end_Batch-to_zip_npy()

#start_Batch-to_zip_npz()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_zip_npz('/tmp/f.zip')
#end_Batch-to_zip_npz()

#start_Batch-to_zip_parquet()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_zip_parquet('/tmp/f.zip')
#end_Batch-to_zip_parquet()

#start_Batch-to_zip_pickle()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_zip_pickle('/tmp/f.zip')
#end_Batch-to_zip_pickle()

#start_Batch-to_zip_tsv()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt1.to_zip_tsv('/tmp/f.zip')
#end_Batch-to_zip_tsv()

#start_Batch-STATIC
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.STATIC
True
#end_Batch-STATIC

#start_Batch-T
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.T
<Batch max_workers=None>
#end_Batch-T

#start_Batch-memory
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.memory
      L    Lu    LM   LMu   LMD  LMDu  R     Ru    RM   RMu   RMD  RMDu
Total 5.24 KB    5.37 KB    4.27 KB    13.34 KB    5.45 KB    4.35 KB
#end_Batch-memory

#start_Batch-name
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.name
#end_Batch-name

#start_Batch-shapes
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.shapes
<Series: shape>
<Index>
i               (3, 2)
j               (3, 2)
<<U1>           <object>
#end_Batch-shapes

#start_Batch-via_container
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.via_container
<Batch max_workers=None>
#end_Batch-via_container

#start_Batch-__array__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> tuple(bt.__array__())
(<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>, <Frame: v>
<Index>    a       b       <<U1>
<Index>
p          40      41
q          42      43
r          44      45
<<U1>      <int64> <int64>)
#end_Batch-__array__()

#start_Batch-__array_ufunc__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (np.array((0.5, 0)) * bt).to_frame()
<Frame>
<Index>                a         b         <<U1>
<IndexHierarchy>
i                p     0.0       0.0
i                q     1.0       0.0
i                r     2.0       0.0
j                p     20.0      0.0
j                q     21.0      0.0
j                r     22.0      0.0
<<U1>            <<U1> <float64> <float64>
#end_Batch-__array_ufunc__()

#start_Batch-__bool__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bool(bt)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_Batch-__bool__()

#start_Batch-__round__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), ('j', sf.Frame(np.arange(100, 106).reshape(3,2) / 3, index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))))
>>> round(bt, 2).to_frame()
<Frame>
<Index>                a         b         <<U1>
<IndexHierarchy>
i                p     40.0      41.0
i                q     42.0      43.0
i                r     44.0      45.0
j                p     33.33     33.67
j                q     34.0      34.33
j                r     34.67     35.0
<<U1>            <<U1> <float64> <float64>
#end_Batch-__round__()

#start_Batch-all()
>>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))
>>> bt.all().to_frame()
<Frame>
<Index> c      d      <<U1>
<Index>
i       False  True
j       False  False
<<U1>   <bool> <bool>
#end_Batch-all()

#start_Batch-any()
>>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))
>>> bt.any().to_frame()
<Frame>
<Index> c      d      <<U1>
<Index>
i       False  True
j       True   True
<<U1>   <bool> <bool>
#end_Batch-any()

#start_Batch-apply()
>>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))
>>> bt.apply(lambda f: f.iter_element().apply(lambda e: '+' if e else '-')).to_frame()
<Frame>
<Index>                c     d     <<U1>
<IndexHierarchy>
i                p     -     +
i                q     -     +
i                r     -     +
j                p     -     +
j                q     +     -
j                r     +     +
<<U1>            <<U1> <<U1> <<U1>
#end_Batch-apply()

#start_Batch-apply_except()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt.apply_except(lambda f: f + 100, Exception).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     100     101
i                q     102     103
i                r     104     105
<<U1>            <<U1> <int64> <int64>
#end_Batch-apply_except()

#start_Batch-apply_items()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.apply_items(lambda l, f: f * 100 if l == 'j' else f * 0.001).to_frame()
<Frame>
<Index>                a         b         <<U1>
<IndexHierarchy>
i                p     0.0       0.001
i                q     0.002     0.003
i                r     0.004     0.005
j                p     4000.0    4100.0
j                q     4200.0    4300.0
j                r     4400.0    4500.0
<<U1>            <<U1> <float64> <float64>
#end_Batch-apply_items()

#start_Batch-apply_items_except()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt.apply_items_except(lambda l, f: f * 100 if l == 'j' else f * 0.001, Exception).to_frame()
<Frame>
<Index>                a         b         <<U1>
<IndexHierarchy>
i                p     0.0       0.001
i                q     0.002     0.003
i                r     0.004     0.005
<<U1>            <<U1> <float64> <float64>
#end_Batch-apply_items_except()

#start_Batch-astype[]()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.astype['a'](str).to_frame()
<Frame>
<Index>                a      b       <<U1>
<IndexHierarchy>
i                p     0      1
i                q     2      3
i                r     4      5
j                p     40     41
j                q     42     43
j                r     44     45
<<U1>            <<U1> <<U21> <int64>
#end_Batch-astype[]()

#start_Batch-astype()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.astype(str).to_frame()
<Frame>
<Index>                a      b      <<U1>
<IndexHierarchy>
i                p     0      1
i                q     2      3
i                r     4      5
j                p     40     41
j                q     42     43
j                r     44     45
<<U1>            <<U1> <<U21> <<U21>
#end_Batch-astype()

#start_Batch-clip()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.clip(lower=3, upper=41).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     3       3
i                q     3       3
i                r     4       5
j                p     40      41
j                q     41      41
j                r     41      41
<<U1>            <<U1> <int64> <int64>
#end_Batch-clip()

#start_Batch-corr()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), ('j', sf.Frame(np.arange(100, 106).reshape(3,2) / 3, index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))))
>>> bt.corr().to_frame()
<Frame>
<Index>                a         b         <<U1>
<IndexHierarchy>
i                a     1.0       1.0
i                b     1.0       1.0
j                a     1.0       1.0
j                b     1.0       1.0
<<U1>            <<U1> <float64> <float64>
#end_Batch-corr()

#start_Batch-count()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.count(skipna=True).to_frame()
<Frame>
<Index> a       b       <<U1>
<Index>
i       3       3
j       3       3
<<U1>   <int64> <int64>
>>> bt.count(unique=True).to_frame()
<Frame>
<Index> a       b       <<U1>
<Index>
i       3       3
j       3       3
<<U1>   <int64> <int64>
#end_Batch-count()

#start_Batch-cov()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), ('j', sf.Frame(np.arange(100, 106).reshape(3,2) / 3, index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))))
>>> bt.cov().to_frame()
<Frame>
<Index>                a                   b                   <<U1>
<IndexHierarchy>
i                a     4.0                 4.0
i                b     4.0                 4.0
j                a     0.4444444444444413  0.44444444444444364
j                b     0.44444444444444364 0.44444444444444603
<<U1>            <<U1> <float64>           <float64>
#end_Batch-cov()

#start_Batch-cumprod()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), ('j', sf.Frame(np.arange(100, 106).reshape(3,2) / 3, index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))))
>>> bt.cumprod().to_frame()
<Frame>
<Index>                a                  b                  <<U1>
<IndexHierarchy>
i                p     40.0               41.0
i                q     1680.0             1763.0
i                r     73920.0            79335.0
j                p     33.333333333333336 33.666666666666664
j                q     1133.3333333333335 1155.888888888889
j                r     39288.88888888889  40456.11111111111
<<U1>            <<U1> <float64>          <float64>
#end_Batch-cumprod()

#start_Batch-cumsum()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), ('j', sf.Frame(np.arange(100, 106).reshape(3,2) / 3, index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))))
>>> bt.cumsum().to_frame()
<Frame>
<Index>                a                  b                  <<U1>
<IndexHierarchy>
i                p     40.0               41.0
i                q     82.0               84.0
i                r     126.0              129.0
j                p     33.333333333333336 33.666666666666664
j                q     67.33333333333334  68.0
j                r     102.0              103.0
<<U1>            <<U1> <float64>          <float64>
#end_Batch-cumsum()

#start_Batch-drop_duplicated()
>>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))
>>> bt.drop_duplicated().to_frame()
<Frame>
<Index>                c      d      <<U1>
<IndexHierarchy>
j                p     False  True
j                q     True   False
j                r     True   True
<<U1>            <<U1> <bool> <bool>
#end_Batch-drop_duplicated()

#start_Batch-dropfalsy()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt.dropfalsy(condition=np.any, axis=0).to_frame()
<Frame>
<Index>                   a         b        c          <<U1>
<IndexHierarchy>
i                q        2.0       3        nan
i                r        4.0       5        nan
j                0        10.0      qrs      1517-01-01
j                1        2.0       XYZ      1517-04-01
j                3        2.0       123      1517-04-01
<<U1>            <object> <float64> <object> <object>
#end_Batch-dropfalsy()

#start_Batch-dropna()
>>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))
>>> bt.dropna().to_frame()
<Frame>
<Index>                c      d      <<U1>
<IndexHierarchy>
i                p     False  True
i                q     False  True
i                r     False  True
j                p     False  True
j                q     True   False
j                r     True   True
<<U1>            <<U1> <bool> <bool>
#end_Batch-dropna()

#start_Batch-duplicated()
>>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))
>>> bt.duplicated().to_frame()
<Frame>
<Index> p      q      r      <<U1>
<Index>
i       True   True   True
j       False  False  False
<<U1>   <bool> <bool> <bool>
#end_Batch-duplicated()

#start_Batch-equals()
>>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt2 = sf.Batch((('i', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), ('j', sf.Frame(np.arange(100, 106).reshape(3,2) / 3, index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))))
>>> bt1.equals(bt2)
NotImplementedError()
#end_Batch-equals()

#start_Batch-fillfalsy()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt.fillfalsy([-1, '', np.nan]).to_frame()
<Frame>
<Index>                   a         b        c          <<U1>
<IndexHierarchy>
i                p        -1.0      1        nan
i                q        2.0       3        nan
i                r        4.0       5        nan
j                0        10.0      qrs      1517-01-01
j                1        2.0       XYZ      1517-04-01
j                2        -1.0               nan
j                3        2.0       123      1517-04-01
<<U1>            <object> <float64> <object> <object>
#end_Batch-fillfalsy()

#start_Batch-fillfalsy_backward()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))
>>> bt.fillfalsy_backward().to_frame()
<Frame>
<Index>                  a         b         c         <<U1>
<IndexHierarchy>
i                0       10.0      8.0       1.0
i                1       2.0       3.0       nan
i                2       nan       8.0       nan
i                3       nan       nan       nan
j                0       10.0      8.0       1.0
j                1       10.0      8.0       1.0
j                2       10.0      3.0       1.0
j                3       2.0       8.0       1.0
<<U1>            <int64> <float64> <float64> <float64>
#end_Batch-fillfalsy_backward()

#start_Batch-fillfalsy_forward()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))
>>> bt.fillfalsy_forward().to_frame()
<Frame>
<Index>                  a         b         c         <<U1>
<IndexHierarchy>
i                0       10.0      8.0       1.0
i                1       2.0       3.0       1.0
i                2       2.0       8.0       1.0
i                3       2.0       8.0       1.0
j                0       nan       nan       nan
j                1       nan       8.0       nan
j                2       10.0      3.0       nan
j                3       2.0       8.0       1.0
<<U1>            <int64> <float64> <float64> <float64>
#end_Batch-fillfalsy_forward()

#start_Batch-fillfalsy_leading()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))
>>> bt.fillfalsy_leading(-1).to_frame()
<Frame>
<Index>                  a         b         c         <<U1>
<IndexHierarchy>
i                0       10.0      8.0       1.0
i                1       2.0       3.0       nan
i                2       nan       8.0       nan
i                3       nan       nan       nan
j                0       -1.0      -1.0      -1.0
j                1       -1.0      8.0       -1.0
j                2       10.0      3.0       -1.0
j                3       2.0       8.0       1.0
<<U1>            <int64> <float64> <float64> <float64>
#end_Batch-fillfalsy_leading()

#start_Batch-fillfalsy_trailing()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))
>>> bt.fillfalsy_trailing(-1).to_frame()
<Frame>
<Index>                  a         b         c         <<U1>
<IndexHierarchy>
i                0       10.0      8.0       1.0
i                1       2.0       3.0       -1.0
i                2       -1.0      8.0       -1.0
i                3       -1.0      -1.0      -1.0
j                0       nan       nan       nan
j                1       nan       8.0       nan
j                2       10.0      3.0       nan
j                3       2.0       8.0       1.0
<<U1>            <int64> <float64> <float64> <float64>
#end_Batch-fillfalsy_trailing()

#start_Batch-fillna()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt.fillna(-1).to_frame()
<Frame>
<Index>                   a         b        c          <<U1>
<IndexHierarchy>
i                p        0.0       1        nan
i                q        2.0       3        nan
i                r        4.0       5        nan
j                0        10.0      qrs      1517-01-01
j                1        2.0       XYZ      1517-04-01
j                2        -1.0               -1
j                3        2.0       123      1517-04-01
<<U1>            <object> <float64> <object> <object>
#end_Batch-fillna()

#start_Batch-fillna_backward()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))
>>> bt.fillna_backward().to_frame()
<Frame>
<Index>                  a         b         c         <<U1>
<IndexHierarchy>
i                0       10.0      8.0       1.0
i                1       2.0       3.0       nan
i                2       nan       8.0       nan
i                3       nan       nan       nan
j                0       10.0      8.0       1.0
j                1       10.0      8.0       1.0
j                2       10.0      3.0       1.0
j                3       2.0       8.0       1.0
<<U1>            <int64> <float64> <float64> <float64>
#end_Batch-fillna_backward()

#start_Batch-fillna_forward()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))
>>> bt.fillna_forward().to_frame()
<Frame>
<Index>                  a         b         c         <<U1>
<IndexHierarchy>
i                0       10.0      8.0       1.0
i                1       2.0       3.0       1.0
i                2       2.0       8.0       1.0
i                3       2.0       8.0       1.0
j                0       nan       nan       nan
j                1       nan       8.0       nan
j                2       10.0      3.0       nan
j                3       2.0       8.0       1.0
<<U1>            <int64> <float64> <float64> <float64>
#end_Batch-fillna_forward()

#start_Batch-fillna_leading()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))
>>> bt.fillna_leading(-1).to_frame()
<Frame>
<Index>                  a         b         c         <<U1>
<IndexHierarchy>
i                0       10.0      8.0       1.0
i                1       2.0       3.0       nan
i                2       nan       8.0       nan
i                3       nan       nan       nan
j                0       -1.0      -1.0      -1.0
j                1       -1.0      8.0       -1.0
j                2       10.0      3.0       -1.0
j                3       2.0       8.0       1.0
<<U1>            <int64> <float64> <float64> <float64>
#end_Batch-fillna_leading()

#start_Batch-fillna_trailing()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))
>>> bt.fillna_trailing(-1).to_frame()
<Frame>
<Index>                  a         b         c         <<U1>
<IndexHierarchy>
i                0       10.0      8.0       1.0
i                1       2.0       3.0       -1.0
i                2       -1.0      8.0       -1.0
i                3       -1.0      -1.0      -1.0
j                0       nan       nan       nan
j                1       nan       8.0       nan
j                2       10.0      3.0       nan
j                3       2.0       8.0       1.0
<<U1>            <int64> <float64> <float64> <float64>
#end_Batch-fillna_trailing()

#start_Batch-head()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.head(2).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       1
i                q     2       3
j                p     40      41
j                q     42      43
<<U1>            <<U1> <int64> <int64>
#end_Batch-head()

#start_Batch-iloc_max()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))
>>> bt.iloc_max().to_frame()
<Frame>
<Index> a       b       c       <<U1>
<Index>
i       0       0       0
j       2       1       3
<<U1>   <int64> <int64> <int64>
#end_Batch-iloc_max()

#start_Batch-iloc_min()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))
>>> bt.iloc_min().to_frame()
<Frame>
<Index> a       b       c       <<U1>
<Index>
i       1       1       0
j       3       2       3
<<U1>   <int64> <int64> <int64>
#end_Batch-iloc_min()

#start_Batch-isfalsy()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt.isfalsy().to_frame(fill_value=False)
<Frame>
<Index>                   a      b      c      <<U1>
<IndexHierarchy>
i                p        True   False  False
i                q        False  False  False
i                r        False  False  False
j                0        False  False  False
j                1        False  False  False
j                2        True   True   True
j                3        False  False  False
<<U1>            <object> <bool> <bool> <bool>
#end_Batch-isfalsy()

#start_Batch-isin()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))
>>> bt.isin((3, 10)).to_frame()
<Frame>
<Index>                  a      b      c      <<U1>
<IndexHierarchy>
i                0       True   False  False
i                1       False  True   False
i                2       False  False  False
i                3       False  False  False
j                0       False  False  False
j                1       False  False  False
j                2       True   True   False
j                3       False  False  False
<<U1>            <int64> <bool> <bool> <bool>
#end_Batch-isin()

#start_Batch-isna()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))
>>> bt.isna().to_frame()
<Frame>
<Index>                  a      b      c      <<U1>
<IndexHierarchy>
i                0       False  False  False
i                1       False  False  True
i                2       True   False  True
i                3       True   True   True
j                0       True   True   True
j                1       True   False  True
j                2       False  False  True
j                3       False  False  False
<<U1>            <int64> <bool> <bool> <bool>
#end_Batch-isna()

#start_Batch-loc_max()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))
>>> bt.loc_max().to_frame()
<Frame>
<Index> a       b       c       <<U1>
<Index>
i       0       0       0
j       2       1       3
<<U1>   <int64> <int64> <int64>
#end_Batch-loc_max()

#start_Batch-loc_min()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))
>>> bt.loc_min().to_frame()
<Frame>
<Index> a       b       c       <<U1>
<Index>
i       1       1       0
j       3       2       3
<<U1>   <int64> <int64> <int64>
#end_Batch-loc_min()

#start_Batch-max()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.max().to_frame()
<Frame>
<Index> a       b       <<U1>
<Index>
i       4       5
j       44      45
<<U1>   <int64> <int64>
#end_Batch-max()

#start_Batch-mean()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.mean().to_frame()
<Frame>
<Index> a         b         <<U1>
<Index>
i       2.0       3.0
j       42.0      43.0
<<U1>   <float64> <float64>
#end_Batch-mean()

#start_Batch-median()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.median().to_frame()
<Frame>
<Index> a         b         <<U1>
<Index>
i       2.0       3.0
j       42.0      43.0
<<U1>   <float64> <float64>
#end_Batch-median()

#start_Batch-min()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.min().to_frame()
<Frame>
<Index> a       b       <<U1>
<Index>
i       0       1
j       40      41
<<U1>   <int64> <int64>
#end_Batch-min()

#start_Batch-notfalsy()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt.notfalsy().to_frame(fill_value=False)
<Frame>
<Index>                   a      b      c      <<U1>
<IndexHierarchy>
i                p        False  True   False
i                q        True   True   False
i                r        True   True   False
j                0        True   True   True
j                1        True   True   True
j                2        False  False  False
j                3        True   True   True
<<U1>            <object> <bool> <bool> <bool>
#end_Batch-notfalsy()

#start_Batch-notna()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))
>>> bt.notna().to_frame()
<Frame>
<Index>                  a      b      c      <<U1>
<IndexHierarchy>
i                0       True   True   True
i                1       True   True   False
i                2       False  True   False
i                3       False  False  False
j                0       False  False  False
j                1       False  True   False
j                2       True   True   False
j                3       True   True   True
<<U1>            <int64> <bool> <bool> <bool>
#end_Batch-notna()

#start_Batch-prod()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.prod().to_frame()
<Frame>
<Index> a       b       <<U1>
<Index>
i       0       15
j       73920   79335
<<U1>   <int64> <int64>
#end_Batch-prod()

#start_Batch-rank_dense()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x'))))
>>> bt.rank_dense().to_frame()
<Frame>
<Index>                  a       b       c       <<U1>
<IndexHierarchy>
i                0       3       0       0
i                1       1       2       1
i                2       2       1       0
i                3       0       2       1
j                0       0       2       0
j                1       0       1       0
j                2       2       0       0
j                3       1       1       1
<<U1>            <int64> <int64> <int64> <int64>
#end_Batch-rank_dense()

#start_Batch-rank_max()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x'))))
>>> bt.rank_max().to_frame()
<Frame>
<Index>                  a       b       c       <<U1>
<IndexHierarchy>
i                0       3       0       1
i                1       1       3       3
i                2       2       1       1
i                3       0       3       3
j                0       1       3       2
j                1       1       2       2
j                2       3       0       2
j                3       2       2       3
<<U1>            <int64> <int64> <int64> <int64>
#end_Batch-rank_max()

#start_Batch-rank_mean()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x'))))
>>> bt.rank_mean().to_frame()
<Frame>
<Index>                  a         b         c         <<U1>
<IndexHierarchy>
i                0       3.0       0.0       0.5
i                1       1.0       2.5       2.5
i                2       2.0       1.0       0.5
i                3       0.0       2.5       2.5
j                0       0.5       3.0       1.0
j                1       0.5       1.5       1.0
j                2       3.0       0.0       1.0
j                3       2.0       1.5       3.0
<<U1>            <int64> <float64> <float64> <float64>
#end_Batch-rank_mean()

#start_Batch-rank_min()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x'))))
>>> bt.rank_min().to_frame()
<Frame>
<Index>                  a       b       c       <<U1>
<IndexHierarchy>
i                0       3       0       0
i                1       1       2       2
i                2       2       1       0
i                3       0       2       2
j                0       0       3       0
j                1       0       1       0
j                2       3       0       0
j                3       2       1       3
<<U1>            <int64> <int64> <int64> <int64>
#end_Batch-rank_min()

#start_Batch-rank_ordinal()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x'))))
>>> bt.rank_ordinal().to_frame()
<Frame>
<Index>                  a       b       c       <<U1>
<IndexHierarchy>
i                0       3       0       0
i                1       1       2       2
i                2       2       1       1
i                3       0       3       3
j                0       0       3       0
j                1       1       1       1
j                2       3       0       2
j                3       2       2       3
<<U1>            <int64> <int64> <int64> <int64>
#end_Batch-rank_ordinal()

#start_Batch-reindex()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.reindex(('q', 'p', 'a'), fill_value=sf.FillValueAuto).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                q     2       3
i                p     0       1
i                a     0       0
j                q     42      43
j                p     40      41
j                a     0       0
<<U1>            <<U1> <int64> <int64>
#end_Batch-reindex()

#start_Batch-relabel()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt.relabel({'q':'x', 'p':'y', 0:'x', 1:'y'}).to_frame()
<Frame>
<Index>                   a         b        c          <<U1>
<IndexHierarchy>
i                y        0.0       1        nan
i                x        2.0       3        nan
i                r        4.0       5        nan
j                x        10.0      qrs      1517-01-01
j                y        2.0       XYZ      1517-04-01
j                2        nan                None
j                3        2.0       123      1517-04-01
<<U1>            <object> <float64> <object> <object>
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt.relabel(lambda l: f'+{str(l).upper()}+').to_frame()
<Frame>
<Index>                a         b        c          <<U1>
<IndexHierarchy>
i                +P+   0.0       1        nan
i                +Q+   2.0       3        nan
i                +R+   4.0       5        nan
j                +0+   10.0      qrs      1517-01-01
j                +1+   2.0       XYZ      1517-04-01
j                +2+   nan                None
j                +3+   2.0       123      1517-04-01
<<U1>            <<U3> <float64> <object> <object>
#end_Batch-relabel()

#start_Batch-relabel_flat()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt.relabel_flat(index=True).to_frame()
<Frame>
<Index>                   a       b      c               <<U1>
<IndexHierarchy>
i                (0, 'p') 10      False  1517-01-01
i                (0, 'q') 2       True   1517-04-01
i                (1, 'p') 8       True   1517-12-31
i                (1, 'q') 3       False  1517-06-30
j                (0, 'p') 23      True   2022-01-01
j                (0, 'q') 83      True   2023-04-01
j                (1, 'p') 19      False  2022-12-31
j                (1, 'q') 87      False  2024-06-30
<<U1>            <object> <int64> <bool> <datetime64[D]>
#end_Batch-relabel_flat()

#start_Batch-relabel_level_add()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> tuple(bt.relabel_level_add('I').values)
(<Frame: x>
<Index>                a       b       <<U1>
<IndexHierarchy>
I                p     0       1
I                q     2       3
I                r     4       5
<<U1>            <<U1> <int64> <int64>, <Frame: v>
<Index>                a       b       <<U1>
<IndexHierarchy>
I                p     40      41
I                q     42      43
I                r     44      45
<<U1>            <<U1> <int64> <int64>)
#end_Batch-relabel_level_add()

#start_Batch-relabel_level_drop()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt.iloc[:2].relabel_level_drop(1).to_frame()
<Frame>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
i                p     10      False  1517-01-01
i                q     2       True   1517-04-01
j                p     23      True   2022-01-01
j                q     83      True   2023-04-01
<<U1>            <<U1> <int64> <bool> <datetime64[D]>
#end_Batch-relabel_level_drop()

#start_Batch-relabel_shift_in()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> tuple(bt.relabel_shift_in('a').values)
(<Frame: x>
<Index>                                            b      c               <<U1>
<IndexHierarchy: ('__index0__', '...
0                                    p     10      False  1517-01-01
0                                    q     2       True   1517-04-01
1                                    p     8       True   1517-12-31
1                                    q     3       False  1517-06-30
<int64>                              <<U1> <int64> <bool> <datetime64[D]>, <Frame: x>
<Index>                                            b      c               <<U1>
<IndexHierarchy: ('__index0__', '...
0                                    p     23      True   2022-01-01
0                                    q     83      True   2023-04-01
1                                    p     19      False  2022-12-31
1                                    q     87      False  2024-06-30
<int64>                              <<U1> <int64> <bool> <datetime64[D]>)
#end_Batch-relabel_shift_in()

#start_Batch-rename()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.rename('y').to_bus()
<Bus>
<Index>
i       Frame
j       Frame
<<U1>   <object>
#end_Batch-rename()

#start_Batch-roll()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.roll(1, include_index=True).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                r     4       5
i                p     0       1
i                q     2       3
j                r     44      45
j                p     40      41
j                q     42      43
<<U1>            <<U1> <int64> <int64>
#end_Batch-roll()

#start_Batch-sample()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.sample(2, 2, seed=0).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                q     2       3
i                r     4       5
j                q     42      43
j                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Batch-sample()

#start_Batch-shift()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.shift(1, fill_value=sf.FillValueAuto).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       0
i                q     0       1
i                r     2       3
j                p     0       0
j                q     40      41
j                r     42      43
<<U1>            <<U1> <int64> <int64>
#end_Batch-shift()

#start_Batch-sort_columns()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.sort_columns(ascending=False).to_frame()
<Frame>
<Index>                b       a       <<U1>
<IndexHierarchy>
i                p     1       0
i                q     3       2
i                r     5       4
j                p     41      40
j                q     43      42
j                r     45      44
<<U1>            <<U1> <int64> <int64>
#end_Batch-sort_columns()

#start_Batch-sort_index()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.sort_index(ascending=False).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                r     4       5
i                q     2       3
i                p     0       1
j                r     44      45
j                q     42      43
j                p     40      41
<<U1>            <<U1> <int64> <int64>
#end_Batch-sort_index()

#start_Batch-sort_values()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.sort_values('a', ascending=False).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                r     4       5
i                q     2       3
i                p     0       1
j                r     44      45
j                q     42      43
j                p     40      41
<<U1>            <<U1> <int64> <int64>
#end_Batch-sort_values()

#start_Batch-std()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.std().to_frame()
<Frame>
<Index> a                 b                 <<U1>
<Index>
i       1.632993161855452 1.632993161855452
j       1.632993161855452 1.632993161855452
<<U1>   <float64>         <float64>
#end_Batch-std()

#start_Batch-sum()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.sum().to_frame()
<Frame>
<Index> a       b       <<U1>
<Index>
i       6       9
j       126     129
<<U1>   <int64> <int64>
#end_Batch-sum()

#start_Batch-tail()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.tail(2).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                q     2       3
i                r     4       5
j                q     42      43
j                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Batch-tail()

#start_Batch-transpose()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.transpose().to_frame()
<Frame>
<Index>                p       q       r       <<U1>
<IndexHierarchy>
i                a     0       2       4
i                b     1       3       5
j                a     40      42      44
j                b     41      43      45
<<U1>            <<U1> <int64> <int64> <int64>
#end_Batch-transpose()

#start_Batch-unique()
>>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))
>>> bt.unique().to_frame()
<Frame>
<Index> 0      1      <int64>
<Index>
i       False  True
j       False  True
<<U1>   <bool> <bool>
#end_Batch-unique()

#start_Batch-unset_index()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt.rename(index=('d', 'e')).unset_index().to_frame()
<Frame>
<Index>                  d       e     a       b      c               <<U1>
<IndexHierarchy>
i                0       0       p     10      False  1517-01-01
i                1       0       q     2       True   1517-04-01
i                2       1       p     8       True   1517-12-31
i                3       1       q     3       False  1517-06-30
j                0       0       p     23      True   2022-01-01
j                1       0       q     83      True   2023-04-01
j                2       1       p     19      False  2022-12-31
j                3       1       q     87      False  2024-06-30
<<U1>            <int64> <int64> <<U1> <int64> <bool> <datetime64[D]>
#end_Batch-unset_index()

#start_Batch-var()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.var().to_frame()
<Frame>
<Index> a                  b                  <<U1>
<Index>
i       2.6666666666666665 2.6666666666666665
j       2.6666666666666665 2.6666666666666665
<<U1>   <float64>          <float64>
#end_Batch-var()

#start_Batch-__iter__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> tuple(bt.__iter__())
('i', 'j')
#end_Batch-__iter__()

#start_Batch-items()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> tuple(bt.items())
(('i', <Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>), ('j', <Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     23      True   2022-01-01
0                q     83      True   2023-04-01
1                p     19      False  2022-12-31
1                q     87      False  2024-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>))
#end_Batch-items()

#start_Batch-keys()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> tuple(bt.keys())
('i', 'j')
#end_Batch-keys()

#start_Batch-values
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> tuple(bt.values)
(<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>, <Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     23      True   2022-01-01
0                q     83      True   2023-04-01
1                p     19      False  2022-12-31
1                q     87      False  2024-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>)
#end_Batch-values

#start_Batch-interface
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt.interface
<Frame>
<Index>                              cls_name group                doc                  <<U18>
<Index: signature>
__init__(items, *, name, config, ... Batch    Constructor          Default construct...
from_frames(frames, *, name, conf... Batch    Constructor          Return a Batch fr...
from_hdf5(fp, *, config, max_work... Batch    Constructor          Given a file path...
from_sqlite(fp, *, config, max_wo... Batch    Constructor          Given a file path...
from_xlsx(fp, *, config, max_work... Batch    Constructor          Given a file path...
from_zip_csv(fp, *, config, max_w... Batch    Constructor          Given a file path...
from_zip_npy(fp, *, config, max_w... Batch    Constructor          Given a file path...
from_zip_npz(fp, *, config, max_w... Batch    Constructor          Given a file path...
from_zip_parquet(fp, *, config, m... Batch    Constructor          Given a file path...
from_zip_pickle(fp, *, config, ma... Batch    Constructor          Given a file path...
from_zip_tsv(fp, *, config, max_w... Batch    Constructor          Given a file path...
to_bus(*, index_constructor)         Batch    Exporter             Realize the Batch...
to_frame(*, axis, union, index, ...) Batch    Exporter             Consolidate store...
to_hdf5(fp, *, config)               Batch    Exporter             Write the complet...
to_series(*, dtype, name, index_c... Batch    Exporter             Consolidate store...
to_sqlite(fp, *, config)             Batch    Exporter             Write the complet...
to_visidata()                        Batch    Exporter             Open an interacti...
...                                  ...      ...                  ...
via_fill_value(fill_value).__le__... Batch    Accessor Fill Value
via_fill_value(fill_value).__eq__... Batch    Accessor Fill Value
via_fill_value(fill_value).__ne__... Batch    Accessor Fill Value
via_fill_value(fill_value).__gt__... Batch    Accessor Fill Value
via_fill_value(fill_value).__ge__... Batch    Accessor Fill Value
via_fill_value(fill_value).__radd... Batch    Accessor Fill Value
via_fill_value(fill_value).__rsub... Batch    Accessor Fill Value
via_fill_value(fill_value).__rmul... Batch    Accessor Fill Value
via_fill_value(fill_value).__rtru... Batch    Accessor Fill Value
via_fill_value(fill_value).__rflo... Batch    Accessor Fill Value
via_re(pattern, flags).search(pos... Batch    Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... Batch    Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... Batch    Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... Batch    Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... Batch    Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... Batch    Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... Batch    Accessor Regular ... Perform the same ...
<<U63>                               <<U5>    <<U27>               <<U83>
#end_Batch-interface

#start_Batch-__repr__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> repr(bt)
<Batch max_workers=None>
#end_Batch-__repr__()

#start_Batch-__str__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> str(bt)
<Batch max_workers=None>
#end_Batch-__str__()

#start_Batch-display()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt.display()
<Batch>
<Index>
i       <Frame>
j       <Frame>
<<U1>   <object>
>>> bt.display(sf.DisplayConfig(type_show=False))
i [38;5;243m<Frame>[0m
j [38;5;243m<Frame>[0m
#end_Batch-display()

#start_Batch-display_tall()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt.display_tall()
<Batch>
<Index>
i       <Frame>
j       <Frame>
<<U1>   <object>
#end_Batch-display_tall()

#start_Batch-display_wide()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt.display_wide()
<Batch>
<Index>
i       <Frame>
j       <Frame>
<<U1>   <object>
#end_Batch-display_wide()

#start_Batch-bloc[]
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.bloc[np.arange(6).reshape(3,2) >= 3].to_frame()
<Frame>
<Index> ('q', 'b') ('r', 'a') ('r', 'b') <object>
<Index>
i       3          4          5
j       43         44         45
<<U1>   <int64>    <int64>    <int64>
#end_Batch-bloc[]

#start_Batch-drop[]
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x'))))
>>> bt.drop['b'].to_frame()
<Frame>
<Index>                  a       c       <<U1>
<IndexHierarchy>
i                0       11      0
i                1       4       1
i                2       10      0
i                3       2       1
j                0       0       0
j                1       0       0
j                2       10      0
j                3       2       1
<<U1>            <int64> <int64> <int64>
>>> bt.drop['b':].to_frame()
<Frame>
<Index>                  a       <<U1>
<IndexHierarchy>
i                0       11
i                1       4
i                2       10
i                3       2
j                0       0
j                1       0
j                2       10
j                3       2
<<U1>            <int64> <int64>
>>> bt.drop[['a', 'c']].to_frame()
<Frame>
<Index>                  b       <<U1>
<IndexHierarchy>
i                0       0
i                1       8
i                2       3
i                3       8
j                0       20
j                1       18
j                2       -3
j                3       18
<<U1>            <int64> <int64>
#end_Batch-drop[]

#start_Batch-drop.iloc[]
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x'))))
>>> bt.drop.iloc[1].to_frame()
<Frame>
<Index>                  a       b       c       <<U1>
<IndexHierarchy>
i                0       11      0       0
i                2       10      3       0
i                3       2       8       1
j                0       0       20      0
j                2       10      -3      0
j                3       2       18      1
<<U1>            <int64> <int64> <int64> <int64>
>>> bt.drop.iloc[1:].to_frame()
<Frame>
<Index>                  a       b       c       <<U1>
<IndexHierarchy>
i                0       11      0       0
j                0       0       20      0
<<U1>            <int64> <int64> <int64> <int64>
>>> bt.drop.iloc[[0, 2]].to_frame()
<Frame>
<Index>                  a       b       c       <<U1>
<IndexHierarchy>
i                1       4       8       1
i                3       2       8       1
j                1       0       18      0
j                3       2       18      1
<<U1>            <int64> <int64> <int64> <int64>
#end_Batch-drop.iloc[]

#start_Batch-drop.loc[]
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.drop.loc['r'].to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       1
i                q     2       3
j                p     40      41
j                q     42      43
<<U1>            <<U1> <int64> <int64>
>>> bt.drop.loc['r':].to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       1
i                q     2       3
j                p     40      41
j                q     42      43
<<U1>            <<U1> <int64> <int64>
>>> bt.drop.loc[['p', 'q']].to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                r     4       5
j                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Batch-drop.loc[]

#start_Batch-[]
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x'))))
>>> bt['b'].to_frame()
<Frame>
<Index> 0       1       2       3       <int64>
<Index>
i       0       8       3       8
j       20      18      -3      18
<<U1>   <int64> <int64> <int64> <int64>
>>> bt['b':].to_frame()
<Frame>
<Index>                  b       c       <<U1>
<IndexHierarchy>
i                0       0       0
i                1       8       1
i                2       3       0
i                3       8       1
j                0       20      0
j                1       18      0
j                2       -3      0
j                3       18      1
<<U1>            <int64> <int64> <int64>
>>> bt[['a', 'c']].to_frame()
<Frame>
<Index>                  a       c       <<U1>
<IndexHierarchy>
i                0       11      0
i                1       4       1
i                2       10      0
i                3       2       1
j                0       0       0
j                1       0       0
j                2       10      0
j                3       2       1
<<U1>            <int64> <int64> <int64>
#end_Batch-[]

#start_Batch-iloc[]
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x'))))
>>> bt.iloc[2].to_frame()
<Frame>
<Index> a       b       c       <<U1>
<Index>
i       10      3       0
j       10      -3      0
<<U1>   <int64> <int64> <int64>
>>> bt.iloc[2:].to_frame()
<Frame>
<Index>                  a       b       c       <<U1>
<IndexHierarchy>
i                2       10      3       0
i                3       2       8       1
j                2       10      -3      0
j                3       2       18      1
<<U1>            <int64> <int64> <int64> <int64>
>>> bt.iloc[[0, 3]].to_frame()
<Frame>
<Index>                  a       b       c       <<U1>
<IndexHierarchy>
i                0       11      0       0
i                3       2       8       1
j                0       0       20      0
j                3       2       18      1
<<U1>            <int64> <int64> <int64> <int64>
#end_Batch-iloc[]

#start_Batch-loc[]
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.loc['r'].to_frame()
<Frame>
<Index> a       b       <<U1>
<Index>
i       4       5
j       44      45
<<U1>   <int64> <int64>
>>> bt.loc['r':].to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                r     4       5
j                r     44      45
<<U1>            <<U1> <int64> <int64>
>>> bt.loc[['p', 'r']].to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       1
i                r     4       5
j                p     40      41
j                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Batch-loc[]

#start_Batch-__add__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (bt + 8).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     8       9
i                q     10      11
i                r     12      13
j                p     48      49
j                q     50      51
j                r     52      53
<<U1>            <<U1> <int64> <int64>
#end_Batch-__add__()

#start_Batch-__and__()
>>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))
>>> (bt & True).to_frame()
<Frame>
<Index>                c      d      <<U1>
<IndexHierarchy>
i                p     False  True
i                q     False  True
i                r     False  True
j                p     False  True
j                q     True   False
j                r     True   True
<<U1>            <<U1> <bool> <bool>
#end_Batch-__and__()

#start_Batch-__eq__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (bt == 8).to_frame()
<Frame>
<Index>                a      b      <<U1>
<IndexHierarchy>
i                p     False  False
i                q     False  False
i                r     False  False
j                p     False  False
j                q     False  False
j                r     False  False
<<U1>            <<U1> <bool> <bool>
#end_Batch-__eq__()

#start_Batch-__floordiv__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (bt // 8).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       0
i                q     0       0
i                r     0       0
j                p     5       5
j                q     5       5
j                r     5       5
<<U1>            <<U1> <int64> <int64>
#end_Batch-__floordiv__()

#start_Batch-__ge__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (bt >= 8).to_frame()
<Frame>
<Index>                a      b      <<U1>
<IndexHierarchy>
i                p     False  False
i                q     False  False
i                r     False  False
j                p     True   True
j                q     True   True
j                r     True   True
<<U1>            <<U1> <bool> <bool>
#end_Batch-__ge__()

#start_Batch-__gt__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (bt > 8).to_frame()
<Frame>
<Index>                a      b      <<U1>
<IndexHierarchy>
i                p     False  False
i                q     False  False
i                r     False  False
j                p     True   True
j                q     True   True
j                r     True   True
<<U1>            <<U1> <bool> <bool>
#end_Batch-__gt__()

#start_Batch-__le__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (bt <= 8).to_frame()
<Frame>
<Index>                a      b      <<U1>
<IndexHierarchy>
i                p     True   True
i                q     True   True
i                r     True   True
j                p     False  False
j                q     False  False
j                r     False  False
<<U1>            <<U1> <bool> <bool>
#end_Batch-__le__()

#start_Batch-__lt__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (bt < 8).to_frame()
<Frame>
<Index>                a      b      <<U1>
<IndexHierarchy>
i                p     True   True
i                q     True   True
i                r     True   True
j                p     False  False
j                q     False  False
j                r     False  False
<<U1>            <<U1> <bool> <bool>
#end_Batch-__lt__()

#start_Batch-__matmul__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (bt @ (1, 0.5)).to_frame()
<Frame>
<Index> p         q         r         <<U1>
<Index>
i       0.5       3.5       6.5
j       60.5      63.5      66.5
<<U1>   <float64> <float64> <float64>
#end_Batch-__matmul__()

#start_Batch-__mod__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (bt % 8).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       1
i                q     2       3
i                r     4       5
j                p     0       1
j                q     2       3
j                r     4       5
<<U1>            <<U1> <int64> <int64>
#end_Batch-__mod__()

#start_Batch-__mul__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (bt * 8).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       8
i                q     16      24
i                r     32      40
j                p     320     328
j                q     336     344
j                r     352     360
<<U1>            <<U1> <int64> <int64>
#end_Batch-__mul__()

#start_Batch-__ne__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (bt != 8).to_frame()
<Frame>
<Index>                a      b      <<U1>
<IndexHierarchy>
i                p     True   True
i                q     True   True
i                r     True   True
j                p     True   True
j                q     True   True
j                r     True   True
<<U1>            <<U1> <bool> <bool>
#end_Batch-__ne__()

#start_Batch-__or__()
>>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))
>>> (bt | True).to_frame()
<Frame>
<Index>                c      d      <<U1>
<IndexHierarchy>
i                p     True   True
i                q     True   True
i                r     True   True
j                p     True   True
j                q     True   True
j                r     True   True
<<U1>            <<U1> <bool> <bool>
#end_Batch-__or__()

#start_Batch-__pow__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (bt ** 8).to_frame()
<Frame>
<Index>                a              b              <<U1>
<IndexHierarchy>
i                p     0              1
i                q     256            6561
i                r     65536          390625
j                p     6553600000000  7984925229121
j                q     9682651996416  11688200277601
j                r     14048223625216 16815125390625
<<U1>            <<U1> <int64>        <int64>
#end_Batch-__pow__()

#start_Batch-__radd__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (8 + bt).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     8       9
i                q     10      11
i                r     12      13
j                p     48      49
j                q     50      51
j                r     52      53
<<U1>            <<U1> <int64> <int64>
#end_Batch-__radd__()

#start_Batch-__rfloordiv__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (8 // bt).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       8
i                q     4       2
i                r     2       1
j                p     0       0
j                q     0       0
j                r     0       0
<<U1>            <<U1> <int64> <int64>
#end_Batch-__rfloordiv__()

#start_Batch-__rmatmul__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (bt @ (1, 0.5)).to_frame()
<Frame>
<Index> p         q         r         <<U1>
<Index>
i       0.5       3.5       6.5
j       60.5      63.5      66.5
<<U1>   <float64> <float64> <float64>
#end_Batch-__rmatmul__()

#start_Batch-__rmul__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (8 * bt).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       8
i                q     16      24
i                r     32      40
j                p     320     328
j                q     336     344
j                r     352     360
<<U1>            <<U1> <int64> <int64>
#end_Batch-__rmul__()

#start_Batch-__rshift__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (bt >> 1).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       0
i                q     1       1
i                r     2       2
j                p     20      20
j                q     21      21
j                r     22      22
<<U1>            <<U1> <int64> <int64>
#end_Batch-__rshift__()

#start_Batch-__rsub__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (8 - bt).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     8       7
i                q     6       5
i                r     4       3
j                p     -32     -33
j                q     -34     -35
j                r     -36     -37
<<U1>            <<U1> <int64> <int64>
#end_Batch-__rsub__()

#start_Batch-__rtruediv__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (8 / bt).to_frame()
<Frame>
<Index>                a                   b                   <<U1>
<IndexHierarchy>
i                p     inf                 8.0
i                q     4.0                 2.6666666666666665
i                r     2.0                 1.6
j                p     0.2                 0.1951219512195122
j                q     0.19047619047619047 0.18604651162790697
j                r     0.18181818181818182 0.17777777777777778
<<U1>            <<U1> <float64>           <float64>
#end_Batch-__rtruediv__()

#start_Batch-__sub__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (bt - 8).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     -8      -7
i                q     -6      -5
i                r     -4      -3
j                p     32      33
j                q     34      35
j                r     36      37
<<U1>            <<U1> <int64> <int64>
#end_Batch-__sub__()

#start_Batch-__truediv__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> (bt / 8).to_frame()
<Frame>
<Index>                a         b         <<U1>
<IndexHierarchy>
i                p     0.0       0.125
i                q     0.25      0.375
i                r     0.5       0.625
j                p     5.0       5.125
j                q     5.25      5.375
j                r     5.5       5.625
<<U1>            <<U1> <float64> <float64>
#end_Batch-__truediv__()

#start_Batch-__xor__()
>>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))
>>> (bt ^ True).to_frame()
<Frame>
<Index>                c      d      <<U1>
<IndexHierarchy>
i                p     True   False
i                q     True   False
i                r     True   False
j                p     True   False
j                q     False  True
j                r     False  False
<<U1>            <<U1> <bool> <bool>
#end_Batch-__xor__()

#start_Batch-__abs__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), ('j', sf.Frame(np.arange(100, 106).reshape(3,2) / 3, index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))))
>>> abs(bt).to_frame()
<Frame>
<Index>                a                  b                  <<U1>
<IndexHierarchy>
i                p     40.0               41.0
i                q     42.0               43.0
i                r     44.0               45.0
j                p     33.333333333333336 33.666666666666664
j                q     34.0               34.333333333333336
j                r     34.666666666666664 35.0
<<U1>            <<U1> <float64>          <float64>
#end_Batch-__abs__()

#start_Batch-__invert__()
>>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))
>>> ~bt.to_frame()
<Frame>
<Index>                c      d      <<U1>
<IndexHierarchy>
i                p     True   False
i                q     True   False
i                r     True   False
j                p     True   False
j                q     False  True
j                r     False  False
<<U1>            <<U1> <bool> <bool>
#end_Batch-__invert__()

#start_Batch-__neg__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), ('j', sf.Frame(np.arange(100, 106).reshape(3,2) / 3, index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))))
>>> -bt.to_frame()
<Frame>
<Index>                a                   b                   <<U1>
<IndexHierarchy>
i                p     -40.0               -41.0
i                q     -42.0               -43.0
i                r     -44.0               -45.0
j                p     -33.333333333333336 -33.666666666666664
j                q     -34.0               -34.333333333333336
j                r     -34.666666666666664 -35.0
<<U1>            <<U1> <float64>           <float64>
#end_Batch-__neg__()

#start_Batch-__pos__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), ('j', sf.Frame(np.arange(100, 106).reshape(3,2) / 3, index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))))
>>> +bt.to_frame()
<Frame>
<Index>                a                  b                  <<U1>
<IndexHierarchy>
i                p     40.0               41.0
i                q     42.0               43.0
i                r     44.0               45.0
j                p     33.333333333333336 33.666666666666664
j                q     34.0               34.333333333333336
j                r     34.666666666666664 35.0
<<U1>            <<U1> <float64>          <float64>
#end_Batch-__pos__()

#start_Batch-via_dt.year
>>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))
>>> bt.via_dt.year.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     1517    2022
i                q     1517    2021
i                r     1517    2022
j                p     1620    1976
j                q     1620    1954
j                r     1620    1976
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_dt.year

#start_Batch-via_dt.month
>>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))
>>> bt.via_dt.month.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     4       4
i                q     12      12
i                r     6       6
j                p     4       4
j                q     12      12
j                r     6       6
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_dt.month

#start_Batch-via_dt.day
>>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))
>>> bt.via_dt.day.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     1       1
i                q     31      31
i                r     30      30
j                p     1       1
j                q     31      31
j                r     30      30
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_dt.day

#start_Batch-via_dt.hour
>>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))
>>> bt.via_dt.hour.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       0
i                q     0       0
i                r     0       0
j                p     0       0
j                q     0       0
j                r     0       0
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_dt.hour

#start_Batch-via_dt.minute
>>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))
>>> bt.via_dt.minute.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       0
i                q     0       0
i                r     0       0
j                p     0       0
j                q     0       0
j                r     0       0
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_dt.minute

#start_Batch-via_dt.second
>>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))
>>> bt.via_dt.second.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     0       0
i                q     0       0
i                r     0       0
j                p     0       0
j                q     0       0
j                r     0       0
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_dt.second

#start_Batch-via_dt.weekday()
>>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))
>>> bt.via_dt.weekday().to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     6       4
i                q     0       4
i                r     5       3
j                p     2       3
j                q     3       4
j                r     1       2
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_dt.weekday()

#start_Batch-via_dt.quarter()
>>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))
>>> bt.via_dt.quarter().to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
i                p     2       2
i                q     4       4
i                r     2       2
j                p     2       2
j                q     4       4
j                r     2       2
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_dt.quarter()

#start_Batch-via_dt.is_month_end()
>>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))
>>> bt.via_dt.is_month_end().to_frame()
<Frame>
<Index>                a      b      <<U1>
<IndexHierarchy>
i                p     False  False
i                q     True   True
i                r     True   True
j                p     False  False
j                q     True   True
j                r     True   True
<<U1>            <<U1> <bool> <bool>
#end_Batch-via_dt.is_month_end()

#start_Batch-via_dt.is_month_start()
>>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))
>>> bt.via_dt.is_month_start().to_frame()
<Frame>
<Index>                a      b      <<U1>
<IndexHierarchy>
i                p     True   True
i                q     False  False
i                r     False  False
j                p     True   True
j                q     False  False
j                r     False  False
<<U1>            <<U1> <bool> <bool>
#end_Batch-via_dt.is_month_start()

#start_Batch-via_dt.is_year_end()
>>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))
>>> bt.via_dt.is_year_end().to_frame()
<Frame>
<Index>                a      b      <<U1>
<IndexHierarchy>
i                p     False  False
i                q     True   True
i                r     False  False
j                p     False  False
j                q     True   True
j                r     False  False
<<U1>            <<U1> <bool> <bool>
#end_Batch-via_dt.is_year_end()

#start_Batch-via_dt.is_year_start()
>>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))
>>> bt.via_dt.is_year_start().to_frame()
<Frame>
<Index>                a      b      <<U1>
<IndexHierarchy>
i                p     False  False
i                q     False  False
i                r     False  False
j                p     False  False
j                q     False  False
j                r     False  False
<<U1>            <<U1> <bool> <bool>
#end_Batch-via_dt.is_year_start()

#start_Batch-via_dt.is_quarter_end()
>>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))
>>> bt.via_dt.is_quarter_end().to_frame()
<Frame>
<Index>                a      b      <<U1>
<IndexHierarchy>
i                p     False  False
i                q     True   True
i                r     True   True
j                p     False  False
j                q     True   True
j                r     True   True
<<U1>            <<U1> <bool> <bool>
#end_Batch-via_dt.is_quarter_end()

#start_Batch-via_dt.is_quarter_start()
>>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))
>>> bt.via_dt.is_quarter_start().to_frame()
<Frame>
<Index>                a      b      <<U1>
<IndexHierarchy>
i                p     True   True
i                q     False  False
i                r     False  False
j                p     True   True
j                q     False  False
j                r     False  False
<<U1>            <<U1> <bool> <bool>
#end_Batch-via_dt.is_quarter_start()

#start_Batch-via_dt.timetuple()
>>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))
>>> bt.via_dt.timetuple().to_frame()
<Frame>
<Index>                a                    b                    <<U1>
<IndexHierarchy>
i                p     time.struct_time(... time.struct_time(...
i                q     time.struct_time(... time.struct_time(...
i                r     time.struct_time(... time.struct_time(...
j                p     time.struct_time(... time.struct_time(...
j                q     time.struct_time(... time.struct_time(...
j                r     time.struct_time(... time.struct_time(...
<<U1>            <<U1> <object>             <object>
#end_Batch-via_dt.timetuple()

#start_Batch-via_dt.isoformat()
>>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))
>>> bt.via_dt.isoformat().to_frame()
<Frame>
<Index>                a          b          <<U1>
<IndexHierarchy>
i                p     1517-04-01 2022-04-01
i                q     1517-12-31 2021-12-31
i                r     1517-06-30 2022-06-30
j                p     1620-04-01 1976-04-01
j                q     1620-12-31 1954-12-31
j                r     1620-06-30 1976-06-30
<<U1>            <<U1> <<U10>     <<U10>
#end_Batch-via_dt.isoformat()

#start_Batch-via_dt.fromisoformat()
>>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'))), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b')))))
>>> bt.via_dt.fromisoformat().to_frame()
<Frame>
<Index>                a          b          <<U1>
<IndexHierarchy>
i                p     1517-04-01 2022-04-01
i                q     1517-12-31 2021-12-31
i                r     1517-06-30 2022-06-30
j                p     1620-04-01 1976-04-01
j                q     1620-12-31 1954-12-31
j                r     1620-06-30 1976-06-30
<<U1>            <<U1> <object>   <object>
#end_Batch-via_dt.fromisoformat()

#start_Batch-via_dt.strftime()
>>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))
>>> bt.via_dt.strftime("%A | %B").to_frame()
<Frame>
<Index>                a                   b                 <<U1>
<IndexHierarchy>
i                p     Sunday | April      Friday | April
i                q     Monday | December   Friday | December
i                r     Saturday | June     Thursday | June
j                p     Wednesday | April   Thursday | April
j                q     Thursday | December Friday | December
j                r     Tuesday | June      Wednesday | June
<<U1>            <<U1> <<U19>              <<U17>
#end_Batch-via_dt.strftime()

#start_Batch-via_dt.strptime()
>>> bt = sf.Batch((('i', sf.Frame.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))), ('j', sf.Frame.from_fields((('4/1/1620', '12/31/1620', '6/30/1620'), ('4/1/1976', '12/31/1954', '6/30/1976')), index=('p', 'q', 'r'), columns=('a', 'b')))))
>>> bt.via_dt.strptime("%m/%d/%Y").to_frame()
<Frame>
<Index>                a                   b                   <<U1>
<IndexHierarchy>
i                p     1517-04-01 00:00:00 2022-04-01 00:00:00
i                q     1517-12-31 00:00:00 2021-12-31 00:00:00
i                r     1517-06-30 00:00:00 2022-06-30 00:00:00
j                p     1620-04-01 00:00:00 1976-04-01 00:00:00
j                q     1620-12-31 00:00:00 1954-12-31 00:00:00
j                r     1620-06-30 00:00:00 1976-06-30 00:00:00
<<U1>            <<U1> <object>            <object>
#end_Batch-via_dt.strptime()

#start_Batch-via_dt.strpdate()
>>> bt = sf.Batch((('i', sf.Frame.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))), ('j', sf.Frame.from_fields((('4/1/1620', '12/31/1620', '6/30/1620'), ('4/1/1976', '12/31/1954', '6/30/1976')), index=('p', 'q', 'r'), columns=('a', 'b')))))
>>> bt.via_dt.strpdate("%m/%d/%Y").to_frame()
<Frame>
<Index>                a          b          <<U1>
<IndexHierarchy>
i                p     1517-04-01 2022-04-01
i                q     1517-12-31 2021-12-31
i                r     1517-06-30 2022-06-30
j                p     1620-04-01 1976-04-01
j                q     1620-12-31 1954-12-31
j                r     1620-06-30 1976-06-30
<<U1>            <<U1> <object>   <object>
#end_Batch-via_dt.strpdate()

#start_Batch-via_str.__getitem__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str[-1].to_frame()
<Frame>
<Index>                   a     b     c        <<U1>
<IndexHierarchy>
i                0        0           1
i                1        2     Z     1
i                2        8     3     1
i                3        3           0
j                p        0           nan
j                q        2     Z     nan
j                r        8     3     nan
j                s        3           nan
<<U1>            <object> <<U1> <<U1> <object>
#end_Batch-via_str.__getitem__()

#start_Batch-via_str.capitalize()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.capitalize().to_frame()
<Frame>
<Index>                   a      b     c          <<U1>
<IndexHierarchy>
i                0        10     Qrs   1517-01-01
i                1        2      Xyz   1517-04-01
i                2        8      123   1517-12-31
i                3        3       wx   1517-06-30
j                p        10     Qrs   nan
j                q        2      Xyz   nan
j                r        8      123   nan
j                s        3       wx   nan
<<U1>            <object> <<U21> <<U4> <object>
#end_Batch-via_str.capitalize()

#start_Batch-via_str.center()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.center(8).to_frame()
<Frame>
<Index>                   a        b        c        <<U1>
<IndexHierarchy>
i                0           10      qrs    1517-01-
i                1           2       XYZ    1517-04-
i                2           8       123    1517-12-
i                3           3        wX    1517-06-
j                p           10      qrs    nan
j                q           2       XYZ    nan
j                r           8       123    nan
j                s           3        wX    nan
<<U1>            <object> <<U8>    <<U8>    <object>
#end_Batch-via_str.center()

#start_Batch-via_str.contains()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.contains('X').to_frame()
<Frame>
<Index>                   a      b      c        <<U1>
<IndexHierarchy>
i                0        False  False  False
i                1        False  True   False
i                2        False  False  False
i                3        False  True   False
j                p        False  False  nan
j                q        False  True   nan
j                r        False  False  nan
j                s        False  True   nan
<<U1>            <object> <bool> <bool> <object>
#end_Batch-via_str.contains()

#start_Batch-via_str.count()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.count('X').to_frame()
<Frame>
<Index>                   a       b       c         <<U1>
<IndexHierarchy>
i                0        0       0       0.0
i                1        0       1       0.0
i                2        0       0       0.0
i                3        0       1       0.0
j                p        0       0       nan
j                q        0       1       nan
j                r        0       0       nan
j                s        0       1       nan
<<U1>            <object> <int64> <int64> <float64>
#end_Batch-via_str.count()

#start_Batch-via_str.decode()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')))).astype(bytes)
>>> bt
<Batch max_workers=None>
>>> bt.via_str.decode().to_frame()
<Frame>
<Index>                   a     b     c          <<U1>
<IndexHierarchy>
i                0        10    qrs   1517-01-01
i                1        2     XYZ   1517-04-01
i                2        8     123   1517-12-31
i                3        3      wX   1517-06-30
j                p        10    qrs   nan
j                q        2     XYZ   nan
j                r        8     123   nan
j                s        3      wX   nan
<<U1>            <object> <<U2> <<U4> <object>
#end_Batch-via_str.decode()

#start_Batch-via_str.encode()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.encode().to_frame()
<Frame>
<Index>                   a     b       c             <<U1>
<IndexHierarchy>
i                0        b'10' b'qrs ' b'1517-01-01'
i                1        b'2'  b'XYZ'  b'1517-04-01'
i                2        b'8'  b'123'  b'1517-12-31'
i                3        b'3'  b' wX ' b'1517-06-30'
j                p        b'10' b'qrs ' nan
j                q        b'2'  b'XYZ'  nan
j                r        b'8'  b'123'  nan
j                s        b'3'  b' wX ' nan
<<U1>            <object> <|S2> <|S4>   <object>
#end_Batch-via_str.encode()

#start_Batch-via_str.endswith()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.endswith(' ').to_frame()
<Frame>
<Index>                   a      b      c        <<U1>
<IndexHierarchy>
i                0        False  True   False
i                1        False  False  False
i                2        False  False  False
i                3        False  True   False
j                p        False  True   nan
j                q        False  False  nan
j                r        False  False  nan
j                s        False  True   nan
<<U1>            <object> <bool> <bool> <object>
#end_Batch-via_str.endswith()

#start_Batch-via_str.find()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.find('X').to_frame()
<Frame>
<Index>                   a       b       c         <<U1>
<IndexHierarchy>
i                0        -1      -1      -1.0
i                1        -1      0       -1.0
i                2        -1      -1      -1.0
i                3        -1      2       -1.0
j                p        -1      -1      nan
j                q        -1      0       nan
j                r        -1      -1      nan
j                s        -1      2       nan
<<U1>            <object> <int64> <int64> <float64>
#end_Batch-via_str.find()

#start_Batch-via_str.format()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.format('{:-^10}').to_frame()
<Frame>
<Index>                   a          b          c          <<U1>
<IndexHierarchy>
i                0        ----10---- ---qrs --- 1517-01-01
i                1        ----2----- ---XYZ---- 1517-04-01
i                2        ----8----- ---123---- 1517-12-31
i                3        ----3----- --- wX --- 1517-06-30
j                p        ----10---- ---qrs --- nan
j                q        ----2----- ---XYZ---- nan
j                r        ----8----- ---123---- nan
j                s        ----3----- --- wX --- nan
<<U1>            <object> <<U10>     <<U10>     <object>
#end_Batch-via_str.format()

#start_Batch-via_str.index()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.index('X').to_frame()
ValueError('substring not found')
#end_Batch-via_str.index()

#start_Batch-via_str.isalnum()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.isalnum().to_frame()
<Frame>
<Index>                   a      b      c        <<U1>
<IndexHierarchy>
i                0        True   False  False
i                1        True   True   False
i                2        True   True   False
i                3        True   False  False
j                p        True   False  nan
j                q        True   True   nan
j                r        True   True   nan
j                s        True   False  nan
<<U1>            <object> <bool> <bool> <object>
#end_Batch-via_str.isalnum()

#start_Batch-via_str.isalpha()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.isalpha().to_frame()
<Frame>
<Index>                   a      b      c        <<U1>
<IndexHierarchy>
i                0        False  False  False
i                1        False  True   False
i                2        False  False  False
i                3        False  False  False
j                p        False  False  nan
j                q        False  True   nan
j                r        False  False  nan
j                s        False  False  nan
<<U1>            <object> <bool> <bool> <object>
#end_Batch-via_str.isalpha()

#start_Batch-via_str.isdecimal()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.isdecimal().to_frame()
<Frame>
<Index>                   a      b      c        <<U1>
<IndexHierarchy>
i                0        True   False  False
i                1        True   False  False
i                2        True   True   False
i                3        True   False  False
j                p        True   False  nan
j                q        True   False  nan
j                r        True   True   nan
j                s        True   False  nan
<<U1>            <object> <bool> <bool> <object>
#end_Batch-via_str.isdecimal()

#start_Batch-via_str.isdigit()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.isdigit().to_frame()
<Frame>
<Index>                   a      b      c        <<U1>
<IndexHierarchy>
i                0        True   False  False
i                1        True   False  False
i                2        True   True   False
i                3        True   False  False
j                p        True   False  nan
j                q        True   False  nan
j                r        True   True   nan
j                s        True   False  nan
<<U1>            <object> <bool> <bool> <object>
#end_Batch-via_str.isdigit()

#start_Batch-via_str.islower()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.islower().to_frame()
<Frame>
<Index>                   a      b      c        <<U1>
<IndexHierarchy>
i                0        False  True   False
i                1        False  False  False
i                2        False  False  False
i                3        False  False  False
j                p        False  True   nan
j                q        False  False  nan
j                r        False  False  nan
j                s        False  False  nan
<<U1>            <object> <bool> <bool> <object>
#end_Batch-via_str.islower()

#start_Batch-via_str.isnumeric()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.isnumeric().to_frame()
<Frame>
<Index>                   a      b      c        <<U1>
<IndexHierarchy>
i                0        True   False  False
i                1        True   False  False
i                2        True   True   False
i                3        True   False  False
j                p        True   False  nan
j                q        True   False  nan
j                r        True   True   nan
j                s        True   False  nan
<<U1>            <object> <bool> <bool> <object>
#end_Batch-via_str.isnumeric()

#start_Batch-via_str.isspace()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.isspace().to_frame()
<Frame>
<Index>                   a      b      c        <<U1>
<IndexHierarchy>
i                0        False  False  False
i                1        False  False  False
i                2        False  False  False
i                3        False  False  False
j                p        False  False  nan
j                q        False  False  nan
j                r        False  False  nan
j                s        False  False  nan
<<U1>            <object> <bool> <bool> <object>
#end_Batch-via_str.isspace()

#start_Batch-via_str.istitle()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.istitle().to_frame()
<Frame>
<Index>                   a      b      c        <<U1>
<IndexHierarchy>
i                0        False  False  False
i                1        False  False  False
i                2        False  False  False
i                3        False  False  False
j                p        False  False  nan
j                q        False  False  nan
j                r        False  False  nan
j                s        False  False  nan
<<U1>            <object> <bool> <bool> <object>
#end_Batch-via_str.istitle()

#start_Batch-via_str.isupper()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.isupper().to_frame()
<Frame>
<Index>                   a      b      c        <<U1>
<IndexHierarchy>
i                0        False  False  False
i                1        False  True   False
i                2        False  False  False
i                3        False  False  False
j                p        False  False  nan
j                q        False  True   nan
j                r        False  False  nan
j                s        False  False  nan
<<U1>            <object> <bool> <bool> <object>
#end_Batch-via_str.isupper()

#start_Batch-via_str.ljust()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.ljust(8).to_frame()
<Frame>
<Index>                   a        b        c        <<U1>
<IndexHierarchy>
i                0        10       qrs      1517-01-
i                1        2        XYZ      1517-04-
i                2        8        123      1517-12-
i                3        3         wX      1517-06-
j                p        10       qrs      nan
j                q        2        XYZ      nan
j                r        8        123      nan
j                s        3         wX      nan
<<U1>            <object> <<U8>    <<U8>    <object>
#end_Batch-via_str.ljust()

#start_Batch-via_str.len()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.len().to_frame()
<Frame>
<Index>                   a       b       c         <<U1>
<IndexHierarchy>
i                0        2       4       10.0
i                1        1       3       10.0
i                2        1       3       10.0
i                3        1       4       10.0
j                p        2       4       nan
j                q        1       3       nan
j                r        1       3       nan
j                s        1       4       nan
<<U1>            <object> <int64> <int64> <float64>
#end_Batch-via_str.len()

#start_Batch-via_str.lower()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.lower().to_frame()
<Frame>
<Index>                   a      b     c          <<U1>
<IndexHierarchy>
i                0        10     qrs   1517-01-01
i                1        2      xyz   1517-04-01
i                2        8      123   1517-12-31
i                3        3       wx   1517-06-30
j                p        10     qrs   nan
j                q        2      xyz   nan
j                r        8      123   nan
j                s        3       wx   nan
<<U1>            <object> <<U21> <<U4> <object>
#end_Batch-via_str.lower()

#start_Batch-via_str.lstrip()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.lstrip().to_frame()
<Frame>
<Index>                   a      b     c          <<U1>
<IndexHierarchy>
i                0        10     qrs   1517-01-01
i                1        2      XYZ   1517-04-01
i                2        8      123   1517-12-31
i                3        3      wX    1517-06-30
j                p        10     qrs   nan
j                q        2      XYZ   nan
j                r        8      123   nan
j                s        3      wX    nan
<<U1>            <object> <<U21> <<U4> <object>
#end_Batch-via_str.lstrip()

#start_Batch-via_str.partition()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.partition('X').to_frame()
<Frame>
<Index>                   a              b                c                    <<U1>
<IndexHierarchy>
i                0        ('10', '', '') ('qrs ', '', '') ('1517-01-01', ''...
i                1        ('2', '', '')  ('', 'X', 'YZ')  ('1517-04-01', ''...
i                2        ('8', '', '')  ('123', '', '')  ('1517-12-31', ''...
i                3        ('3', '', '')  (' w', 'X', ' ') ('1517-06-30', ''...
j                p        ('10', '', '') ('qrs ', '', '') nan
j                q        ('2', '', '')  ('', 'X', 'YZ')  nan
j                r        ('8', '', '')  ('123', '', '')  nan
j                s        ('3', '', '')  (' w', 'X', ' ') nan
<<U1>            <object> <object>       <object>         <object>
#end_Batch-via_str.partition()

#start_Batch-via_str.replace()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.replace('X', '*').to_frame()
<Frame>
<Index>                   a     b     c          <<U1>
<IndexHierarchy>
i                0        10    qrs   1517-01-01
i                1        2     *YZ   1517-04-01
i                2        8     123   1517-12-31
i                3        3      w*   1517-06-30
j                p        10    qrs   nan
j                q        2     *YZ   nan
j                r        8     123   nan
j                s        3      w*   nan
<<U1>            <object> <<U2> <<U4> <object>
#end_Batch-via_str.replace()

#start_Batch-via_str.rfind()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.rfind('X').to_frame()
<Frame>
<Index>                   a       b       c         <<U1>
<IndexHierarchy>
i                0        -1      -1      -1.0
i                1        -1      0       -1.0
i                2        -1      -1      -1.0
i                3        -1      2       -1.0
j                p        -1      -1      nan
j                q        -1      0       nan
j                r        -1      -1      nan
j                s        -1      2       nan
<<U1>            <object> <int64> <int64> <float64>
#end_Batch-via_str.rfind()

#start_Batch-via_str.rindex()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.rindex('X').to_frame()
ValueError('substring not found')
#end_Batch-via_str.rindex()

#start_Batch-via_str.rjust()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.rjust(8).to_frame()
<Frame>
<Index>                   a        b        c        <<U1>
<IndexHierarchy>
i                0              10     qrs  1517-01-
i                1               2      XYZ 1517-04-
i                2               8      123 1517-12-
i                3               3      wX  1517-06-
j                p              10     qrs  nan
j                q               2      XYZ nan
j                r               8      123 nan
j                s               3      wX  nan
<<U1>            <object> <<U8>    <<U8>    <object>
#end_Batch-via_str.rjust()

#start_Batch-via_str.rpartition()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.rpartition('X').to_frame()
<Frame>
<Index>                   a              b                c                    <<U1>
<IndexHierarchy>
i                0        ('', '', '10') ('', '', 'qrs ') ('', '', '1517-01...
i                1        ('', '', '2')  ('', 'X', 'YZ')  ('', '', '1517-04...
i                2        ('', '', '8')  ('', '', '123')  ('', '', '1517-12...
i                3        ('', '', '3')  (' w', 'X', ' ') ('', '', '1517-06...
j                p        ('', '', '10') ('', '', 'qrs ') nan
j                q        ('', '', '2')  ('', 'X', 'YZ')  nan
j                r        ('', '', '8')  ('', '', '123')  nan
j                s        ('', '', '3')  (' w', 'X', ' ') nan
<<U1>            <object> <object>       <object>         <object>
#end_Batch-via_str.rpartition()

#start_Batch-via_str.rsplit()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.rsplit('X').to_frame()
<Frame>
<Index>                   a        b           c               <<U1>
<IndexHierarchy>
i                0        ('10',)  ('qrs ',)   ('1517-01-01',)
i                1        ('2',)   ('', 'YZ')  ('1517-04-01',)
i                2        ('8',)   ('123',)    ('1517-12-31',)
i                3        ('3',)   (' w', ' ') ('1517-06-30',)
j                p        ('10',)  ('qrs ',)   nan
j                q        ('2',)   ('', 'YZ')  nan
j                r        ('8',)   ('123',)    nan
j                s        ('3',)   (' w', ' ') nan
<<U1>            <object> <object> <object>    <object>
#end_Batch-via_str.rsplit()

#start_Batch-via_str.rstrip()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.rstrip().to_frame()
<Frame>
<Index>                   a      b     c          <<U1>
<IndexHierarchy>
i                0        10     qrs   1517-01-01
i                1        2      XYZ   1517-04-01
i                2        8      123   1517-12-31
i                3        3       wX   1517-06-30
j                p        10     qrs   nan
j                q        2      XYZ   nan
j                r        8      123   nan
j                s        3       wX   nan
<<U1>            <object> <<U21> <<U4> <object>
#end_Batch-via_str.rstrip()

#start_Batch-via_str.split()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.split('X').to_frame()
<Frame>
<Index>                   a        b           c               <<U1>
<IndexHierarchy>
i                0        ('10',)  ('qrs ',)   ('1517-01-01',)
i                1        ('2',)   ('', 'YZ')  ('1517-04-01',)
i                2        ('8',)   ('123',)    ('1517-12-31',)
i                3        ('3',)   (' w', ' ') ('1517-06-30',)
j                p        ('10',)  ('qrs ',)   nan
j                q        ('2',)   ('', 'YZ')  nan
j                r        ('8',)   ('123',)    nan
j                s        ('3',)   (' w', ' ') nan
<<U1>            <object> <object> <object>    <object>
#end_Batch-via_str.split()

#start_Batch-via_str.startswith()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.startswith('X').to_frame()
<Frame>
<Index>                   a      b      c        <<U1>
<IndexHierarchy>
i                0        False  False  False
i                1        False  True   False
i                2        False  False  False
i                3        False  False  False
j                p        False  False  nan
j                q        False  True   nan
j                r        False  False  nan
j                s        False  False  nan
<<U1>            <object> <bool> <bool> <object>
#end_Batch-via_str.startswith()

#start_Batch-via_str.strip()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.strip().to_frame()
<Frame>
<Index>                   a      b     c          <<U1>
<IndexHierarchy>
i                0        10     qrs   1517-01-01
i                1        2      XYZ   1517-04-01
i                2        8      123   1517-12-31
i                3        3      wX    1517-06-30
j                p        10     qrs   nan
j                q        2      XYZ   nan
j                r        8      123   nan
j                s        3      wX    nan
<<U1>            <object> <<U21> <<U4> <object>
#end_Batch-via_str.strip()

#start_Batch-via_str.swapcase()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.swapcase().to_frame()
<Frame>
<Index>                   a      b     c          <<U1>
<IndexHierarchy>
i                0        10     QRS   1517-01-01
i                1        2      xyz   1517-04-01
i                2        8      123   1517-12-31
i                3        3       Wx   1517-06-30
j                p        10     QRS   nan
j                q        2      xyz   nan
j                r        8      123   nan
j                s        3       Wx   nan
<<U1>            <object> <<U21> <<U4> <object>
#end_Batch-via_str.swapcase()

#start_Batch-via_str.title()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.title().to_frame()
<Frame>
<Index>                   a      b     c          <<U1>
<IndexHierarchy>
i                0        10     Qrs   1517-01-01
i                1        2      Xyz   1517-04-01
i                2        8      123   1517-12-31
i                3        3       Wx   1517-06-30
j                p        10     Qrs   nan
j                q        2      Xyz   nan
j                r        8      123   nan
j                s        3       Wx   nan
<<U1>            <object> <<U21> <<U4> <object>
#end_Batch-via_str.title()

#start_Batch-via_str.upper()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.upper().to_frame()
<Frame>
<Index>                   a      b     c          <<U1>
<IndexHierarchy>
i                0        10     QRS   1517-01-01
i                1        2      XYZ   1517-04-01
i                2        8      123   1517-12-31
i                3        3       WX   1517-06-30
j                p        10     QRS   nan
j                q        2      XYZ   nan
j                r        8      123   nan
j                s        3       WX   nan
<<U1>            <object> <<U21> <<U4> <object>
#end_Batch-via_str.upper()

#start_Batch-via_str.zfill()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_str.zfill(8).to_frame()
<Frame>
<Index>                   a        b        c        <<U1>
<IndexHierarchy>
i                0        00000010 0000qrs  1517-01-
i                1        00000002 00000XYZ 1517-04-
i                2        00000008 00000123 1517-12-
i                3        00000003 0000 wX  1517-06-
j                p        00000010 0000qrs  nan
j                q        00000002 00000XYZ nan
j                r        00000008 00000123 nan
j                s        00000003 0000 wX  nan
<<U1>            <object> <<U8>    <<U8>    <object>
#end_Batch-via_str.zfill()

#start_Batch-via_T.via_fill_value()
>>> 
#end_Batch-via_T.via_fill_value()

#start_Batch-via_T.__add__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> (bt.via_T + s).to_frame()
<Frame>
<Index>                a         b         c         <<U1>
<IndexHierarchy>
i                p     10.0      8.0       1.0
i                q     -4.0      -5.0      -2.0
i                r     0.5       8.5       9.5
i                s     1.0       1.0       13.0
j                p     1.0       2.0       1.0
j                q     0.0       -1.0      -2.0
j                r     0.5       2.5       2.5
j                s     1.0       1.0       2.0
<<U1>            <<U1> <float64> <float64> <float64>
#end_Batch-via_T.__add__()

#start_Batch-via_T.__sub__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> (bt.via_T - s).to_frame()
<Frame>
<Index>                a         b         c         <<U1>
<IndexHierarchy>
i                p     10.0      8.0       1.0
i                q     0.0       -1.0      2.0
i                r     -0.5      7.5       8.5
i                s     -1.0      -1.0      11.0
j                p     1.0       2.0       1.0
j                q     4.0       3.0       2.0
j                r     -0.5      1.5       1.5
j                s     -1.0      -1.0      0.0
<<U1>            <<U1> <float64> <float64> <float64>
#end_Batch-via_T.__sub__()

#start_Batch-via_T.__mul__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> (bt.via_T * s).to_frame()
<Frame>
<Index>                a         b         c         <<U1>
<IndexHierarchy>
i                p     0.0       0.0       0.0
i                q     4.0       6.0       -0.0
i                r     0.0       4.0       4.5
i                s     0.0       0.0       12.0
j                p     0.0       0.0       0.0
j                q     -4.0      -2.0      -0.0
j                r     0.0       1.0       1.0
j                s     0.0       0.0       1.0
<<U1>            <<U1> <float64> <float64> <float64>
#end_Batch-via_T.__mul__()

#start_Batch-via_T.__truediv__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> (bt.via_T / s).to_frame()
<Frame>
<Index>                a         b         c         <<U1>
<IndexHierarchy>
i                p     inf       inf       inf
i                q     1.0       1.5       -0.0
i                r     0.0       16.0      18.0
i                s     0.0       0.0       12.0
j                p     inf       inf       inf
j                q     -1.0      -0.5      -0.0
j                r     0.0       4.0       4.0
j                s     0.0       0.0       1.0
<<U1>            <<U1> <float64> <float64> <float64>
#end_Batch-via_T.__truediv__()

#start_Batch-via_T.__floordiv__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> (bt.via_T // s).to_frame()
<Frame>
<Index>                a         b         c         <<U1>
<IndexHierarchy>
i                p     nan       nan       nan
i                q     1.0       1.0       -0.0
i                r     0.0       16.0      18.0
i                s     0.0       0.0       12.0
j                p     nan       nan       nan
j                q     -1.0      -1.0      -0.0
j                r     0.0       4.0       4.0
j                s     0.0       0.0       1.0
<<U1>            <<U1> <float64> <float64> <float64>
#end_Batch-via_T.__floordiv__()

#start_Batch-via_T.__mod__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> (bt.via_T % s).to_frame()
<Frame>
<Index>                a         b         c         <<U1>
<IndexHierarchy>
i                p     nan       nan       nan
i                q     -0.0      -1.0      -0.0
i                r     0.0       0.0       0.0
i                s     0.0       0.0       0.0
j                p     nan       nan       nan
j                q     -0.0      -1.0      -0.0
j                r     0.0       0.0       0.0
j                s     0.0       0.0       0.0
<<U1>            <<U1> <float64> <float64> <float64>
#end_Batch-via_T.__mod__()

#start_Batch-via_T.__pow__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> (bt.via_T ** s).to_frame()
<Frame>
<Index>                a         b                  c                  <<U1>
<IndexHierarchy>
i                p     1.0       1.0                1.0
i                q     0.25      0.1111111111111111 inf
i                r     0.0       2.8284271247461903 3.0
i                s     0.0       0.0                12.0
j                p     1.0       1.0                1.0
j                q     0.25      1.0                inf
j                r     0.0       1.4142135623730951 1.4142135623730951
j                s     0.0       0.0                1.0
<<U1>            <<U1> <float64> <float64>          <float64>
#end_Batch-via_T.__pow__()

#start_Batch-via_T.__lshift__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))
>>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))
>>> (bt.via_T << s).to_frame()
<Frame>
<Index>                a       b       c       <<U1>
<IndexHierarchy>
i                p     10      8       1
i                q     0       0       0
i                r     0       64      72
i                s     0       0       24
j                p     1       2       1
j                q     0       0       0
j                r     0       16      16
j                s     0       0       2
<<U1>            <<U1> <int64> <int64> <int64>
#end_Batch-via_T.__lshift__()

#start_Batch-via_T.__rshift__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))
>>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))
>>> (bt.via_T >> s).to_frame()
<Frame>
<Index>                a       b       c       <<U1>
<IndexHierarchy>
i                p     10      8       1
i                q     -1      -1      0
i                r     0       1       1
i                s     0       0       6
j                p     1       2       1
j                q     0       0       0
j                r     0       0       0
j                s     0       0       0
<<U1>            <<U1> <int64> <int64> <int64>
#end_Batch-via_T.__rshift__()

#start_Batch-via_T.__and__()
>>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> (bt.via_T & s).to_frame()
<Frame>
<Index>                c      d      <<U1>
<IndexHierarchy>
i                p     False  False
i                q     False  True
i                r     False  True
j                p     False  False
j                q     True   False
j                r     True   True
<<U1>            <<U1> <bool> <bool>
#end_Batch-via_T.__and__()

#start_Batch-via_T.__xor__()
>>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> (bt.via_T ^ s).to_frame()
<Frame>
<Index>                c      d      <<U1>
<IndexHierarchy>
i                p     False  True
i                q     True   False
i                r     True   False
j                p     False  True
j                q     False  True
j                r     False  False
<<U1>            <<U1> <bool> <bool>
#end_Batch-via_T.__xor__()

#start_Batch-via_T.__or__()
>>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> (bt.via_T | s).to_frame()
<Frame>
<Index>                c      d      <<U1>
<IndexHierarchy>
i                p     False  True
i                q     True   True
i                r     True   True
j                p     False  True
j                q     True   True
j                r     True   True
<<U1>            <<U1> <bool> <bool>
#end_Batch-via_T.__or__()

#start_Batch-via_T.__lt__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> (bt.via_T < s).to_frame()
<Frame>
<Index>                a      b      c      <<U1>
<IndexHierarchy>
i                p     False  False  False
i                q     False  True   False
i                r     True   False  False
i                s     True   True   False
j                p     False  False  False
j                q     False  False  False
j                r     True   False  False
j                s     True   True   False
<<U1>            <<U1> <bool> <bool> <bool>
#end_Batch-via_T.__lt__()

#start_Batch-via_T.__le__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> (bt.via_T <= s).to_frame()
<Frame>
<Index>                a      b      c      <<U1>
<IndexHierarchy>
i                p     False  False  False
i                q     True   True   False
i                r     True   False  False
i                s     True   True   False
j                p     False  False  False
j                q     False  False  False
j                r     True   False  False
j                s     True   True   True
<<U1>            <<U1> <bool> <bool> <bool>
#end_Batch-via_T.__le__()

#start_Batch-via_T.__eq__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> (bt.via_T == s).to_frame()
<Frame>
<Index>                a      b      c      <<U1>
<IndexHierarchy>
i                p     False  False  False
i                q     True   False  False
i                r     False  False  False
i                s     False  False  False
j                p     False  False  False
j                q     False  False  False
j                r     False  False  False
j                s     False  False  True
<<U1>            <<U1> <bool> <bool> <bool>
#end_Batch-via_T.__eq__()

#start_Batch-via_T.__ne__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> (bt.via_T != s).to_frame()
<Frame>
<Index>                a      b      c      <<U1>
<IndexHierarchy>
i                p     True   True   True
i                q     False  True   True
i                r     True   True   True
i                s     True   True   True
j                p     True   True   True
j                q     True   True   True
j                r     True   True   True
j                s     True   True   False
<<U1>            <<U1> <bool> <bool> <bool>
#end_Batch-via_T.__ne__()

#start_Batch-via_T.__gt__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> (bt.via_T > s).to_frame()
<Frame>
<Index>                a      b      c      <<U1>
<IndexHierarchy>
i                p     True   True   True
i                q     False  False  True
i                r     False  True   True
i                s     False  False  True
j                p     True   True   True
j                q     True   True   True
j                r     False  True   True
j                s     False  False  False
<<U1>            <<U1> <bool> <bool> <bool>
#end_Batch-via_T.__gt__()

#start_Batch-via_T.__ge__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> (bt.via_T >= s).to_frame()
<Frame>
<Index>                a      b      c      <<U1>
<IndexHierarchy>
i                p     True   True   True
i                q     True   False  True
i                r     False  True   True
i                s     False  False  True
j                p     True   True   True
j                q     True   True   True
j                r     False  True   True
j                s     False  False  True
<<U1>            <<U1> <bool> <bool> <bool>
#end_Batch-via_T.__ge__()

#start_Batch-via_T.__radd__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> (bt.via_T + s).to_frame()
<Frame>
<Index>                a         b         c         <<U1>
<IndexHierarchy>
i                p     10.0      8.0       1.0
i                q     -4.0      -5.0      -2.0
i                r     0.5       8.5       9.5
i                s     1.0       1.0       13.0
j                p     1.0       2.0       1.0
j                q     0.0       -1.0      -2.0
j                r     0.5       2.5       2.5
j                s     1.0       1.0       2.0
<<U1>            <<U1> <float64> <float64> <float64>
#end_Batch-via_T.__radd__()

#start_Batch-via_T.__rsub__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> (bt.via_T - s).to_frame()
<Frame>
<Index>                a         b         c         <<U1>
<IndexHierarchy>
i                p     10.0      8.0       1.0
i                q     0.0       -1.0      2.0
i                r     -0.5      7.5       8.5
i                s     -1.0      -1.0      11.0
j                p     1.0       2.0       1.0
j                q     4.0       3.0       2.0
j                r     -0.5      1.5       1.5
j                s     -1.0      -1.0      0.0
<<U1>            <<U1> <float64> <float64> <float64>
#end_Batch-via_T.__rsub__()

#start_Batch-via_T.__rmul__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> (bt.via_T * s).to_frame()
<Frame>
<Index>                a         b         c         <<U1>
<IndexHierarchy>
i                p     0.0       0.0       0.0
i                q     4.0       6.0       -0.0
i                r     0.0       4.0       4.5
i                s     0.0       0.0       12.0
j                p     0.0       0.0       0.0
j                q     -4.0      -2.0      -0.0
j                r     0.0       1.0       1.0
j                s     0.0       0.0       1.0
<<U1>            <<U1> <float64> <float64> <float64>
#end_Batch-via_T.__rmul__()

#start_Batch-via_T.__rtruediv__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> (bt.via_T / s).to_frame()
<Frame>
<Index>                a         b         c         <<U1>
<IndexHierarchy>
i                p     inf       inf       inf
i                q     1.0       1.5       -0.0
i                r     0.0       16.0      18.0
i                s     0.0       0.0       12.0
j                p     inf       inf       inf
j                q     -1.0      -0.5      -0.0
j                r     0.0       4.0       4.0
j                s     0.0       0.0       1.0
<<U1>            <<U1> <float64> <float64> <float64>
#end_Batch-via_T.__rtruediv__()

#start_Batch-via_T.__rfloordiv__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> (bt.via_T // s).to_frame()
<Frame>
<Index>                a         b         c         <<U1>
<IndexHierarchy>
i                p     nan       nan       nan
i                q     1.0       1.0       -0.0
i                r     0.0       16.0      18.0
i                s     0.0       0.0       12.0
j                p     nan       nan       nan
j                q     -1.0      -1.0      -0.0
j                r     0.0       4.0       4.0
j                s     0.0       0.0       1.0
<<U1>            <<U1> <float64> <float64> <float64>
#end_Batch-via_T.__rfloordiv__()

#start_Batch-via_fill_value().loc
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> bt.via_fill_value(-1).loc[['a', 'b', 'd']].to_frame()
<Frame>
<Index>                x       y       <<U1>
<IndexHierarchy>
i                a     -1      -1
i                b     2       3
i                d     -1      -1
j                a     -1      -1
j                b     0       2
j                d     -1      -1
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_fill_value().loc

#start_Batch-via_fill_value().__getitem__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> bt.via_fill_value(-1)[['z', 'x']].to_frame()
<Frame>
<Index>                z       x       <<U1>
<IndexHierarchy>
i                b     -1      2
i                c     -1      4
j                b     -1      0
j                c     -1      1
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_fill_value().__getitem__()

#start_Batch-via_fill_value().via_T
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> s = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> (bt.via_fill_value(-1).via_T * s).to_frame()
<Frame>
<Index>                x       y       <<U1>
<IndexHierarchy>
i                b     4       6
i                c     32      112
i                d     -19     -19
j                b     0       4
j                c     8       8
j                d     -19     -19
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_fill_value().via_T

#start_Batch-via_fill_value().__add__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> (bt.via_fill_value(0) + f).to_frame()
<Frame>
<Index>                x       y       <<U1>
<IndexHierarchy>
i                a     3       2
i                b     2       3
i                c     24      26
j                a     3       2
j                b     0       2
j                c     21      13
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_fill_value().__add__()

#start_Batch-via_fill_value().__sub__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> (bt.via_fill_value(0) - f).to_frame()
<Frame>
<Index>                x       y       <<U1>
<IndexHierarchy>
i                a     -3      -2
i                b     2       3
i                c     -16     2
j                a     -3      -2
j                b     0       2
j                c     -19     -11
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_fill_value().__sub__()

#start_Batch-via_fill_value().__mul__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> (bt.via_fill_value(0) * f).to_frame()
<Frame>
<Index>                x       y       <<U1>
<IndexHierarchy>
i                a     0       0
i                b     0       0
i                c     80      168
j                a     0       0
j                b     0       0
j                c     20      12
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_fill_value().__mul__()

#start_Batch-via_fill_value().__truediv__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> (bt.via_fill_value(0) / f).to_frame()
<Frame>
<Index>                x         y                   <<U1>
<IndexHierarchy>
i                a     0.0       0.0
i                b     inf       inf
i                c     0.2       1.1666666666666667
j                a     0.0       0.0
j                b     nan       inf
j                c     0.05      0.08333333333333333
<<U1>            <<U1> <float64> <float64>
#end_Batch-via_fill_value().__truediv__()

#start_Batch-via_fill_value().__floordiv__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> (bt.via_fill_value(0) // f).to_frame()
<Frame>
<Index>                x       y       <<U1>
<IndexHierarchy>
i                a     0       0
i                b     0       0
i                c     0       1
j                a     0       0
j                b     0       0
j                c     0       0
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_fill_value().__floordiv__()

#start_Batch-via_fill_value().__mod__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> (bt.via_fill_value(0) % f).to_frame()
<Frame>
<Index>                x       y       <<U1>
<IndexHierarchy>
i                a     0       0
i                b     0       0
i                c     4       2
j                a     0       0
j                b     0       0
j                c     1       1
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_fill_value().__mod__()

#start_Batch-via_fill_value().__pow__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> (bt.via_fill_value(0) ** f).to_frame()
<Frame>
<Index>                x             y              <<U1>
<IndexHierarchy>
i                a     0             0
i                b     1             1
i                c     1099511627776 56693912375296
j                a     0             0
j                b     1             1
j                c     1             1
<<U1>            <<U1> <int64>       <int64>
#end_Batch-via_fill_value().__pow__()

#start_Batch-via_fill_value().__lshift__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> f = sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> (bt.via_fill_value(0) << f).to_frame()
<Frame>
<Index>                x       y       <<U1>
<IndexHierarchy>
i                b     2       12
i                c     8       28
j                b     0       8
j                c     2       2
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_fill_value().__lshift__()

#start_Batch-via_fill_value().__rshift__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> f = sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> (bt.via_fill_value(0) >> f).to_frame()
<Frame>
<Index>                x       y       <<U1>
<IndexHierarchy>
i                b     2       0
i                c     2       7
j                b     0       0
j                c     0       0
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_fill_value().__rshift__()

#start_Batch-via_fill_value().__and__()
>>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))
>>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> (bt.via_fill_value(False) & f).to_frame()
<Frame>
<Index>                a      b      c      d      <<U1>
<IndexHierarchy>
i                p     False  False  False  False
i                q     False  False  False  False
i                r     False  False  False  False
j                p     False  False  False  False
j                q     False  False  False  False
j                r     False  False  False  False
<<U1>            <<U1> <bool> <bool> <bool> <bool>
#end_Batch-via_fill_value().__and__()

#start_Batch-via_fill_value().__xor__()
>>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))
>>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> (bt.via_fill_value(False) ^ f).to_frame()
<Frame>
<Index>                a      b      c      d      <<U1>
<IndexHierarchy>
i                p     False  True   False  True
i                q     True   True   False  True
i                r     True   False  False  True
j                p     False  True   False  True
j                q     True   True   True   False
j                r     True   False  True   True
<<U1>            <<U1> <bool> <bool> <bool> <bool>
#end_Batch-via_fill_value().__xor__()

#start_Batch-via_fill_value().__or__()
>>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))
>>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> (bt.via_fill_value(False) | f).to_frame()
<Frame>
<Index>                a      b      c      d      <<U1>
<IndexHierarchy>
i                p     False  True   False  True
i                q     True   True   False  True
i                r     True   False  False  True
j                p     False  True   False  True
j                q     True   True   True   False
j                r     True   False  True   True
<<U1>            <<U1> <bool> <bool> <bool> <bool>
#end_Batch-via_fill_value().__or__()

#start_Batch-via_fill_value().__lt__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> (bt.via_fill_value(0) < f).to_frame()
<Frame>
<Index>                x      y      <<U1>
<IndexHierarchy>
i                a     True   True
i                b     False  False
i                c     True   False
j                a     True   True
j                b     False  False
j                c     True   True
<<U1>            <<U1> <bool> <bool>
#end_Batch-via_fill_value().__lt__()

#start_Batch-via_fill_value().__le__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> (bt.via_fill_value(0) <= f).to_frame()
<Frame>
<Index>                x      y      <<U1>
<IndexHierarchy>
i                a     True   True
i                b     False  False
i                c     True   False
j                a     True   True
j                b     True   False
j                c     True   True
<<U1>            <<U1> <bool> <bool>
#end_Batch-via_fill_value().__le__()

#start_Batch-via_fill_value().__eq__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> (bt.via_fill_value(0) == f).to_frame()
<Frame>
<Index>                x      y      <<U1>
<IndexHierarchy>
i                a     False  False
i                b     False  False
i                c     False  False
j                a     False  False
j                b     True   False
j                c     False  False
<<U1>            <<U1> <bool> <bool>
#end_Batch-via_fill_value().__eq__()

#start_Batch-via_fill_value().__ne__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> (bt.via_fill_value(0) != f).to_frame()
<Frame>
<Index>                x      y      <<U1>
<IndexHierarchy>
i                a     True   True
i                b     True   True
i                c     True   True
j                a     True   True
j                b     False  True
j                c     True   True
<<U1>            <<U1> <bool> <bool>
#end_Batch-via_fill_value().__ne__()

#start_Batch-via_fill_value().__gt__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> (bt.via_fill_value(0) > f).to_frame()
<Frame>
<Index>                x      y      <<U1>
<IndexHierarchy>
i                a     False  False
i                b     True   True
i                c     False  True
j                a     False  False
j                b     False  True
j                c     False  False
<<U1>            <<U1> <bool> <bool>
#end_Batch-via_fill_value().__gt__()

#start_Batch-via_fill_value().__ge__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> (bt.via_fill_value(0) >= f).to_frame()
<Frame>
<Index>                x      y      <<U1>
<IndexHierarchy>
i                a     False  False
i                b     True   True
i                c     False  True
j                a     False  False
j                b     True   True
j                c     False  False
<<U1>            <<U1> <bool> <bool>
#end_Batch-via_fill_value().__ge__()

#start_Batch-via_fill_value().__radd__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> (f + bt.via_fill_value(0)).to_frame()
<Frame>
<Index>                x       y       <<U1>
<IndexHierarchy>
i                a     3       2
i                b     2       3
i                c     24      26
j                a     3       2
j                b     0       2
j                c     21      13
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_fill_value().__radd__()

#start_Batch-via_fill_value().__rsub__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> (f - bt.via_fill_value(0)).to_frame()
<Frame>
<Index>                x       y       <<U1>
<IndexHierarchy>
i                a     3       2
i                b     -2      -3
i                c     16      -2
j                a     3       2
j                b     0       -2
j                c     19      11
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_fill_value().__rsub__()

#start_Batch-via_fill_value().__rmul__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> (f * bt.via_fill_value(0)).to_frame()
<Frame>
<Index>                x       y       <<U1>
<IndexHierarchy>
i                a     0       0
i                b     0       0
i                c     80      168
j                a     0       0
j                b     0       0
j                c     20      12
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_fill_value().__rmul__()

#start_Batch-via_fill_value().__rtruediv__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> (f / bt.via_fill_value(0)).to_frame()
<Frame>
<Index>                x         y                  <<U1>
<IndexHierarchy>
i                a     inf       inf
i                b     0.0       0.0
i                c     5.0       0.8571428571428571
j                a     inf       inf
j                b     nan       0.0
j                c     20.0      12.0
<<U1>            <<U1> <float64> <float64>
#end_Batch-via_fill_value().__rtruediv__()

#start_Batch-via_fill_value().__rfloordiv__()
>>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> (f // bt.via_fill_value(0)).to_frame()
<Frame>
<Index>                x       y       <<U1>
<IndexHierarchy>
i                a     0       0
i                b     0       0
i                c     5       0
j                a     0       0
j                b     0       0
j                c     20      12
<<U1>            <<U1> <int64> <int64>
#end_Batch-via_fill_value().__rfloordiv__()

#start_Batch-via_re().search()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_re('[X123]').search().to_frame()
<Frame>
<Index>                   a      b      c        <<U1>
<IndexHierarchy>
i                p        False  True   nan
i                q        True   True   nan
i                r        False  False  nan
j                0        True   False  True
j                1        True   True   True
j                2        False  False  False
j                3        True   True   True
<<U1>            <object> <bool> <bool> <object>
#end_Batch-via_re().search()

#start_Batch-via_re().match()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_re('[X123]').match().to_frame()
<Frame>
<Index>                   a      b      c        <<U1>
<IndexHierarchy>
i                p        False  True   nan
i                q        True   True   nan
i                r        False  False  nan
j                0        True   False  True
j                1        True   True   True
j                2        False  False  False
j                3        True   True   True
<<U1>            <object> <bool> <bool> <object>
#end_Batch-via_re().match()

#start_Batch-via_re().fullmatch()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_re('123').fullmatch().to_frame()
<Frame>
<Index>                   a      b      c        <<U1>
<IndexHierarchy>
i                p        False  False  nan
i                q        False  False  nan
i                r        False  False  nan
j                0        False  False  False
j                1        False  False  False
j                2        False  False  False
j                3        False  True   False
<<U1>            <object> <bool> <bool> <object>
#end_Batch-via_re().fullmatch()

#start_Batch-via_re().split()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_re('[X123]').split().to_frame()
<Frame>
<Index>                   a           b                c                    <<U1>
<IndexHierarchy>
i                p        ('0',)      ('', '')         nan
i                q        ('', '')    ('', '')         nan
i                r        ('4',)      ('5',)           nan
j                0        ('', '0.0') ('qrs ',)        ('', '5', '7-0', ...
j                1        ('', '.0')  ('', 'YZ')       ('', '5', '7-04-0...
j                2        ('nan',)    ('',)            ('NaT',)
j                3        ('', '.0')  ('', '', '', '') ('', '5', '7-04-0...
<<U1>            <object> <object>    <object>         <object>
#end_Batch-via_re().split()

#start_Batch-via_re().findall()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_re('[X123]').findall().to_frame()
<Frame>
<Index>                   a        b               c                    <<U1>
<IndexHierarchy>
i                p        ()       ('1',)          nan
i                q        ('2',)   ('3',)          nan
i                r        ()       ()              nan
j                0        ('1',)   ()              ('1', '1', '1', '1')
j                1        ('2',)   ('X',)          ('1', '1', '1')
j                2        ()       ()              ()
j                3        ('2',)   ('1', '2', '3') ('1', '1', '1')
<<U1>            <object> <object> <object>        <object>
#end_Batch-via_re().findall()

#start_Batch-via_re().sub()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_re('[X123]').sub('==').to_frame()
<Frame>
<Index>                   a     b      c              <<U1>
<IndexHierarchy>
i                p        0     ==     nan
i                q        ==    ==     nan
i                r        4     5      nan
j                0        ==0.0 qrs    ==5==7-0==-0==
j                1        ==.0  ==YZ   ==5==7-04-0==
j                2        nan          NaT
j                3        ==.0  ====== ==5==7-04-0==
<<U1>            <object> <<U5> <<U6>  <object>
#end_Batch-via_re().sub()

#start_Batch-via_re().subn()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))
>>> bt
<Batch max_workers=None>
>>> bt.via_re('[X123]').subn('==', 1).to_frame()
<Frame>
<Index>                   a            b           c                  <<U1>
<IndexHierarchy>
i                p        ('0', 0)     ('==', 1)   nan
i                q        ('==', 1)    ('==', 1)   nan
i                r        ('4', 0)     ('5', 0)    nan
j                0        ('==0.0', 1) ('qrs ', 0) ('==517-01-01', 1)
j                1        ('==.0', 1)  ('==YZ', 1) ('==517-04-01', 1)
j                2        ('nan', 0)   ('', 0)     ('NaT', 0)
j                3        ('==.0', 1)  ('==23', 1) ('==517-04-01', 1)
<<U1>            <object> <object>     <object>    <object>
#end_Batch-via_re().subn()

#start_Batch-via_values.apply()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> bt.via_values.apply(np.sin).to_frame()
<Frame>
<Index>                a                    b                   <<U1>
<IndexHierarchy>
i                p     0.0                  0.8414709848078965
i                q     0.9092974268256817   0.1411200080598672
i                r     -0.7568024953079282  -0.9589242746631385
j                p     0.7451131604793488   -0.158622668804709
j                q     -0.9165215479156338  -0.8317747426285983
j                r     0.017701925105413577 0.8509035245341184
<<U1>            <<U1> <float64>            <float64>
#end_Batch-via_values.apply()

#start_Batch-via_values.__array_ufunc__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> np.sin(bt.via_values).to_frame()
<Frame>
<Index>                a                    b                   <<U1>
<IndexHierarchy>
i                p     0.0                  0.8414709848078965
i                q     0.9092974268256817   0.1411200080598672
i                r     -0.7568024953079282  -0.9589242746631385
j                p     0.7451131604793488   -0.158622668804709
j                q     -0.9165215479156338  -0.8317747426285983
j                r     0.017701925105413577 0.8509035245341184
<<U1>            <<U1> <float64>            <float64>
#end_Batch-via_values.__array_ufunc__()

#start_Batch-via_values.__call__()
>>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))
>>> np.sin(bt.via_values(unify_blocks=True)).to_frame()
<Frame>
<Index>                a                    b                   <<U1>
<IndexHierarchy>
i                p     0.0                  0.8414709848078965
i                q     0.9092974268256817   0.1411200080598672
i                r     -0.7568024953079282  -0.9589242746631385
j                p     0.7451131604793488   -0.158622668804709
j                q     -0.9165215479156338  -0.8317747426285983
j                r     0.017701925105413577 0.8509035245341184
<<U1>            <<U1> <float64>            <float64>
#end_Batch-via_values.__call__()

#start_Quilt-__init__()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q1 = sf.Quilt(b, retain_labels=True)
>>> q1
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q1.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                p     0       1
x                q     2       3
x                r     4       5
v                p     40      41
v                q     42      43
v                r     44      45
<<U1>            <<U1> <int64> <int64>
>>> q2 = sf.Quilt(b, retain_labels=True, axis=1)
>>> q2
<Quilt: j>
<Index: Frames>  x v
<Index: Aligned>
p                . .
q                . .
r                . .
<<U1>
>>> q2.to_frame()
<Frame>
<IndexHierarchy> x       x       v       v       <<U1>
                 a       b       a       b       <<U1>
<Index>
p                0       1       40      41
q                2       3       42      43
r                4       5       44      45
<<U1>            <int64> <int64> <int64> <int64>
#end_Quilt-__init__()

#start_Quilt-from_frame()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> q = sf.Quilt.from_frame(f, retain_labels=True, chunksize=2)
>>> q
<Quilt: x>
<Index: Aligned> a b c <<U1>
<Index: Frames>
0                . . .
2                . . .
<int64>
>>> q.to_frame()
<Frame>
<Index>                  a       b      c               <<U1>
<IndexHierarchy>
0                0       10      False  1517-01-01
0                1       2       True   1517-04-01
2                2       8       True   1517-12-31
2                3       3       False  1517-06-30
<int64>          <int64> <int64> <bool> <datetime64[D]>
#end_Quilt-from_frame()

#start_Quilt-from_frames()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')
>>> q = sf.Quilt.from_frames((f1, f2), retain_labels=True)
>>> q
<Quilt>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                p     0       1
x                q     2       3
x                r     4       5
v                p     40      41
v                q     42      43
v                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Quilt-from_frames()

#start_Quilt-from_hdf5()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q1 = sf.Quilt(b, retain_labels=True)
>>> q1.to_hdf5('/tmp/q.hdf5')
>>> q2 = sf.Quilt.from_hdf5('/tmp/q.hdf5', retain_labels=True, config=sf.StoreConfig(index_depth=1))
>>> q2.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
v                p     40      41
v                q     42      43
v                r     44      45
x                p     0       1
x                q     2       3
x                r     4       5
<<U1>            <<U1> <int64> <int64>
#end_Quilt-from_hdf5()

#start_Quilt-from_items()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')
>>> q = sf.Quilt.from_items((('A', f1), ('B', f2)), retain_labels=True)
>>> q
<Quilt>
<Index: Aligned> a b <<U1>
<Index: Frames>
A                . .
B                . .
<<U1>
>>> q.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
A                p     0       1
A                q     2       3
A                r     4       5
B                p     40      41
B                q     42      43
B                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Quilt-from_items()

#start_Quilt-from_sqlite()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q1 = sf.Quilt(b, retain_labels=True)
>>> q1.to_sqlite('/tmp/q.db')
>>> q2 = sf.Quilt.from_sqlite('/tmp/q.db', retain_labels=True, config=sf.StoreConfig(index_depth=1))
>>> q2.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                p     0       1
x                q     2       3
x                r     4       5
v                p     40      41
v                q     42      43
v                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Quilt-from_sqlite()

#start_Quilt-from_xlsx()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q1 = sf.Quilt(b, retain_labels=True)
>>> q1.to_xlsx('/tmp/q.xlsx')
>>> q2 = sf.Quilt.from_xlsx('/tmp/q.xlsx', retain_labels=True, config=sf.StoreConfig(index_depth=1))
>>> q2.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                p     0       1
x                q     2       3
x                r     4       5
v                p     40      41
v                q     42      43
v                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Quilt-from_xlsx()

#start_Quilt-from_zip_csv()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q1 = sf.Quilt(b, retain_labels=True)
>>> q1.to_zip_csv('/tmp/q.zip')
>>> q2 = sf.Quilt.from_zip_csv('/tmp/q.zip', retain_labels=True, config=sf.StoreConfig(index_depth=1))
>>> q2.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                p     0       1
x                q     2       3
x                r     4       5
v                p     40      41
v                q     42      43
v                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Quilt-from_zip_csv()

#start_Quilt-from_zip_npy()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q1 = sf.Quilt(b, retain_labels=True)
>>> q1.to_zip_npy('/tmp/q.zip')
>>> q2 = sf.Quilt.from_zip_npy('/tmp/q.zip', retain_labels=True, config=sf.StoreConfig(index_depth=1))
>>> q2.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                p     0       1
x                q     2       3
x                r     4       5
v                p     40      41
v                q     42      43
v                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Quilt-from_zip_npy()

#start_Quilt-from_zip_npz()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q1 = sf.Quilt(b, retain_labels=True)
>>> q1.to_zip_npz('/tmp/q.zip')
>>> q2 = sf.Quilt.from_zip_npz('/tmp/q.zip', retain_labels=True, config=sf.StoreConfig(index_depth=1))
>>> q2.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                p     0       1
x                q     2       3
x                r     4       5
v                p     40      41
v                q     42      43
v                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Quilt-from_zip_npz()

#start_Quilt-from_zip_parquet()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q1 = sf.Quilt(b, retain_labels=True)
>>> q1.to_zip_parquet('/tmp/q.zip')
>>> q2 = sf.Quilt.from_zip_parquet('/tmp/q.zip', retain_labels=True, config=sf.StoreConfig(index_depth=1))
>>> q2.to_frame()
<Frame>
<Index>                   a       b       <<U1>
<IndexHierarchy>
x                p        0       1
x                q        2       3
x                r        4       5
v                p        40      41
v                q        42      43
v                r        44      45
<<U1>            <object> <int64> <int64>
#end_Quilt-from_zip_parquet()

#start_Quilt-from_zip_pickle()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q1 = sf.Quilt(b, retain_labels=True)
>>> q1.to_zip_pickle('/tmp/q.zip')
>>> q2 = sf.Quilt.from_zip_pickle('/tmp/q.zip', retain_labels=True, config=sf.StoreConfig(index_depth=1))
>>> q2.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                p     0       1
x                q     2       3
x                r     4       5
v                p     40      41
v                q     42      43
v                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Quilt-from_zip_pickle()

#start_Quilt-from_zip_tsv()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q1 = sf.Quilt(b, retain_labels=True)
>>> q1.to_zip_tsv('/tmp/q.zip')
>>> q2 = sf.Quilt.from_zip_tsv('/tmp/q.zip', retain_labels=True, config=sf.StoreConfig(index_depth=1))
>>> q2.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                p     0       1
x                q     2       3
x                r     4       5
v                p     40      41
v                q     42      43
v                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Quilt-from_zip_tsv()

#start_Quilt-to_frame()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q1 = sf.Quilt(b, retain_labels=True)
>>> q1.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                p     0       1
x                q     2       3
x                r     4       5
v                p     40      41
v                q     42      43
v                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Quilt-to_frame()

#start_Quilt-to_hdf5()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True)
>>> q.to_hdf5('/tmp/q.h5')
#end_Quilt-to_hdf5()

#start_Quilt-to_sqlite()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True)
>>> q.to_sqlite('/tmp/q.db')
#end_Quilt-to_sqlite()

#start_Quilt-to_xlsx()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True)
>>> q.to_xlsx('/tmp/q.xlsx')
#end_Quilt-to_xlsx()

#start_Quilt-to_zip_csv()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True)
>>> q.to_zip_csv('/tmp/q.zip')
#end_Quilt-to_zip_csv()

#start_Quilt-to_zip_npy()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True)
>>> q.to_zip_npy('/tmp/q.zip')
#end_Quilt-to_zip_npy()

#start_Quilt-to_zip_npz()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True)
>>> q.to_zip_npz('/tmp/q.zip')
#end_Quilt-to_zip_npz()

#start_Quilt-to_zip_parquet()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True)
>>> q.to_zip_parquet('/tmp/q.zip')
#end_Quilt-to_zip_parquet()

#start_Quilt-to_zip_pickle()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True)
>>> q.to_zip_pickle('/tmp/q.zip')
#end_Quilt-to_zip_pickle()

#start_Quilt-to_zip_tsv()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True)
>>> q.to_zip_tsv('/tmp/q.zip')
#end_Quilt-to_zip_tsv()

#start_Quilt-STATIC
>>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2)
>>> q.STATIC
True
#end_Quilt-STATIC

#start_Quilt-columns
>>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2)
>>> q.columns
<Index>
a
b
c
<<U1>
#end_Quilt-columns

#start_Quilt-index
>>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2)
>>> q.index
<IndexHierarchy>
0                0
0                1
2                2
2                3
<int64>          <int64>
#end_Quilt-index

#start_Quilt-memory
>>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2)
>>> q.memory
      L    Lu    LM   LMu   LMD  LMDu  R     Ru    RM   RMu   RMD RMDu
Total 9.24 KB    5.95 KB    4.42 KB    17.68 KB    6.03 KB    4.5 KB
#end_Quilt-memory

#start_Quilt-name
>>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2)
>>> q.name
x
#end_Quilt-name

#start_Quilt-nbytes
>>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2)
>>> q.nbytes
68
#end_Quilt-nbytes

#start_Quilt-ndim
>>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2)
>>> q.ndim
2
#end_Quilt-ndim

#start_Quilt-shape
>>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2)
>>> q.shape
(4, 3)
#end_Quilt-shape

#start_Quilt-size
>>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2)
>>> q.size
12
#end_Quilt-size

#start_Quilt-status
>>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2)
>>> q.status
<Frame>
<Index> loaded size      nbytes    shape    <<U6>
<Index>
0       True   6.0       34.0      (2, 3)
2       True   6.0       34.0      (2, 3)
<int64> <bool> <float64> <float64> <object>
#end_Quilt-status

#start_Quilt-__bool__()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True)
>>> bool(b)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_Quilt-__bool__()

#start_Quilt-equals()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q1 = sf.Quilt(b, retain_labels=True, axis=0)
>>> q2 = sf.Quilt(b, retain_labels=True, axis=1)
>>> q1.equals(q2)
False
#end_Quilt-equals()

#start_Quilt-head()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q.head(2)
<Frame: x>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                p     0       1
x                q     2       3
<<U1>            <<U1> <int64> <int64>
#end_Quilt-head()

#start_Quilt-rename()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q.rename('y')
<Quilt: y>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
#end_Quilt-rename()

#start_Quilt-sample()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q.sample(2, 2, seed=0).to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                r     4       5
v                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Quilt-sample()

#start_Quilt-tail()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q.tail(2)
<Frame: v>
<Index>                a       b       <<U1>
<IndexHierarchy>
v                q     42      43
v                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Quilt-tail()

#start_Quilt-unpersist()
>>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> b1.to_zip_npz('/tmp/b.zip')
>>> b2 = sf.Bus.from_zip_npz('/tmp/b.zip')
>>> q = sf.Quilt(b2, retain_labels=True, axis=0)
>>> q.to_frame()
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                p     0       1
x                q     2       3
x                r     4       5
v                p     40      41
v                q     42      43
v                r     44      45
<<U1>            <<U1> <int64> <int64>
>>> q.status
<Frame>
<Index> loaded size      nbytes    shape    <<U6>
<Index>
x       True   6.0       48.0      (3, 2)
v       True   6.0       48.0      (3, 2)
<<U1>   <bool> <float64> <float64> <object>
>>> q.unpersist()
>>> q.status
<Frame>
<Index> loaded size      nbytes    shape    <<U6>
<Index>
x       False  nan       nan       None
v       False  nan       nan       None
<<U1>   <bool> <float64> <float64> <object>
#end_Quilt-unpersist()

#start_Quilt-__contains__()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q.__contains__('a')
True
#end_Quilt-__contains__()

#start_Quilt-__iter__()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> tuple(q.__iter__())
('a', 'b')
#end_Quilt-__iter__()

#start_Quilt-get()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q.get('a')
<Series: a>
<IndexHierarchy>
x                p     0
x                q     2
x                r     4
v                p     40
v                q     42
v                r     44
<<U1>            <<U1> <int64>
>>> q.get('z', -1)
-1
#end_Quilt-get()

#start_Quilt-items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> tuple(q.items())
NotImplementedAxis('Iteration along this axis is too inefficient; create a consolidated Frame with Quilt.to_frame()')
#end_Quilt-items()

#start_Quilt-keys()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> tuple(q.keys())
('a', 'b')
#end_Quilt-keys()

#start_Quilt-values
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q.values
[[ 0  1]
 [ 2  3]
 [ 4  5]
 [40 41]
 [42 43]
 [44 45]]
#end_Quilt-values

#start_Quilt-interface
>>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2)
>>> q.interface
<Frame>
<Index>                              cls_name group       doc                  <<U18>
<Index: signature>
__init__(bus, *, axis, retain_lab... Quilt    Constructor Args: bus: Bus of...
from_frame(frame, *, chunksize, r... Quilt    Constructor Given a Frame, cr...
from_frames(frames, *, axis, name... Quilt    Constructor Return a Quilt fr...
from_hdf5(fp, *, config, axis, ...)  Quilt    Constructor Given a file path...
from_items(items, *, axis, name, ... Quilt    Constructor Given an iterable...
from_sqlite(fp, *, config, axis, ... Quilt    Constructor Given a file path...
from_xlsx(fp, *, config, axis, ...)  Quilt    Constructor Given a file path...
from_zip_csv(fp, *, config, axis,... Quilt    Constructor Given a file path...
from_zip_npy(fp, *, config, axis,... Quilt    Constructor Given a file path...
from_zip_npz(fp, *, config, axis,... Quilt    Constructor Given a file path...
from_zip_parquet(fp, *, config, a... Quilt    Constructor Given a file path...
from_zip_pickle(fp, *, config, ax... Quilt    Constructor Given a file path...
from_zip_tsv(fp, *, config, axis,... Quilt    Constructor Given a file path...
to_frame()                           Quilt    Exporter    Return a consolid...
to_hdf5(fp, *, config)               Quilt    Exporter    Write the complet...
to_sqlite(fp, *, config)             Quilt    Exporter    Write the complet...
to_visidata()                        Quilt    Exporter    Open an interacti...
...                                  ...      ...         ...
iter_window(*, size, axis, step, ... Quilt    Iterator    Apply a function ...
iter_window(*, size, axis, step, ... Quilt    Iterator    Apply a function ...
iter_window_array(*, size, axis, ... Quilt    Iterator    Iterator of windo...
iter_window_array(*, size, axis, ... Quilt    Iterator    Apply a function ...
iter_window_array(*, size, axis, ... Quilt    Iterator    Apply a function ...
iter_window_array(*, size, axis, ... Quilt    Iterator    Apply a function ...
iter_window_array(*, size, axis, ... Quilt    Iterator    Apply a function ...
iter_window_array_items(*, size, ... Quilt    Iterator    Iterator of pairs...
iter_window_array_items(*, size, ... Quilt    Iterator    Apply a function ...
iter_window_array_items(*, size, ... Quilt    Iterator    Apply a function ...
iter_window_array_items(*, size, ... Quilt    Iterator    Apply a function ...
iter_window_array_items(*, size, ... Quilt    Iterator    Apply a function ...
iter_window_items(*, size, axis, ... Quilt    Iterator    Iterator of pairs...
iter_window_items(*, size, axis, ... Quilt    Iterator    Apply a function ...
iter_window_items(*, size, axis, ... Quilt    Iterator    Apply a function ...
iter_window_items(*, size, axis, ... Quilt    Iterator    Apply a function ...
iter_window_items(*, size, axis, ... Quilt    Iterator    Apply a function ...
<<U87>                               <<U5>    <<U15>      <<U83>
#end_Quilt-interface

#start_Quilt-__repr__()
>>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2)
>>> repr(q)
<Quilt: x>
<Index: Aligned> a b c <<U1>
<Index: Frames>
0                . . .
2                . . .
<int64>
#end_Quilt-__repr__()

#start_Quilt-__str__()
>>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2)
>>> str(q)
<Quilt: x>
<Index: Aligned> a b c <<U1>
<Index: Frames>
0                . . .
2                . . .
<int64>
#end_Quilt-__str__()

#start_Quilt-display()
>>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2)
>>> q.display()
<Quilt: x>
<Index: Aligned> a b c <<U1>
<Index: Frames>
0                . . .
2                . . .
<int64>
>>> q.display(sf.DisplayConfig(type_show=False))
  a b c
0 . . .
2 . . .
#end_Quilt-display()

#start_Quilt-display_tall()
>>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2)
>>> q.display_tall()
<Quilt: x>
<Index: Aligned> a b c <<U1>
<Index: Frames>
0                . . .
2                . . .
<int64>
#end_Quilt-display_tall()

#start_Quilt-display_wide()
>>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2)
>>> q.display_wide()
<Quilt: x>
<Index: Aligned> a b c <<U1>
<Index: Frames>
0                . . .
2                . . .
<int64>
#end_Quilt-display_wide()

#start_Quilt-[]
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q['b']
<Series: b>
<IndexHierarchy>
x                p     1
x                q     3
x                r     5
v                p     41
v                q     43
v                r     45
<<U1>            <<U1> <int64>
>>> q['a':]
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                p     0       1
x                q     2       3
x                r     4       5
v                p     40      41
v                q     42      43
v                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Quilt-[]

#start_Quilt-iloc[]
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q.iloc[3, 0]
40
>>> q.iloc[2:, 1]
<Series: b>
<IndexHierarchy>
x                r     5
v                p     41
v                q     43
v                r     45
<<U1>            <<U1> <int64>
>>> q.iloc[[0, 3, 5]]
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                p     0       1
v                p     40      41
v                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Quilt-iloc[]

#start_Quilt-loc[]
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q.loc[sf.HLoc['x', 'r']]
<Series: ('x', 'r')>
<Index>
a                    4
b                    5
<<U1>                <int64>
>>> q.loc[('x', 'r'):]
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                r     4       5
v                p     40      41
v                q     42      43
v                r     44      45
<<U1>            <<U1> <int64> <int64>
>>> q.loc[sf.HLoc[:, 'r']]
<Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                r     4       5
v                r     44      45
<<U1>            <<U1> <int64> <int64>
#end_Quilt-loc[]

#start_Quilt-iter_array()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_array(axis=1))
(array([0, 1]), array([2, 3]), array([4, 5]), array([40, 41]), array([42, 43]), array([44, 45]))
#end_Quilt-iter_array()

#start_Quilt-iter_array().apply()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.iter_array(axis=1).apply(lambda v: v.sum())
<Series>
<IndexHierarchy>
x                p     1
x                q     5
x                r     9
v                p     81
v                q     85
v                r     89
<<U1>            <<U1> <int64>
#end_Quilt-iter_array().apply()

#start_Quilt-iter_array().apply_iter()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_array(axis=1).apply_iter(lambda v: v.sum()))
(1, 5, 9, 81, 85, 89)
#end_Quilt-iter_array().apply_iter()

#start_Quilt-iter_array().apply_iter_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_array(axis=1).apply_iter_items(lambda v: v.sum()))
((('x', 'p'), 1), (('x', 'q'), 5), (('x', 'r'), 9), (('v', 'p'), 81), (('v', 'q'), 85), (('v', 'r'), 89))
#end_Quilt-iter_array().apply_iter_items()

#start_Quilt-iter_array().apply_pool()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.iter_array(axis=1).apply_pool(lambda v: v.sum(), use_threads=True)
<Series>
<IndexHierarchy>
x                p     1
x                q     5
x                r     9
v                p     81
v                q     85
v                r     89
<<U1>            <<U1> <int64>
#end_Quilt-iter_array().apply_pool()

#start_Quilt-iter_array_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_array_items(axis=1))
((('x', 'p'), array([0, 1])), (('x', 'q'), array([2, 3])), (('x', 'r'), array([4, 5])), (('v', 'p'), array([40, 41])), (('v', 'q'), array([42, 43])), (('v', 'r'), array([44, 45])))
#end_Quilt-iter_array_items()

#start_Quilt-iter_array_items().apply()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.iter_array_items(axis=1).apply(lambda k, v: v.sum() if 'q' in k else -1)
<Series>
<IndexHierarchy>
x                p     -1
x                q     5
x                r     -1
v                p     -1
v                q     85
v                r     -1
<<U1>            <<U1> <int64>
#end_Quilt-iter_array_items().apply()

#start_Quilt-iter_array_items().apply_iter()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_array_items(axis=1).apply_iter(lambda k, v: v.sum() if 'q' in k else -1))
(-1, 5, -1, -1, 85, -1)
#end_Quilt-iter_array_items().apply_iter()

#start_Quilt-iter_array_items().apply_iter_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_array_items(axis=1).apply_iter_items(lambda k, v: v.sum() if 'q' in k else -1))
((('x', 'p'), -1), (('x', 'q'), 5), (('x', 'r'), -1), (('v', 'p'), -1), (('v', 'q'), 85), (('v', 'r'), -1))
#end_Quilt-iter_array_items().apply_iter_items()

#start_Quilt-iter_array_items().apply_pool()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.iter_array_items(axis=1).apply_pool(lambda pair: pair[1].sum() if pair[0][1] != 'p' else -1, use_threads=True)
<Series>
<IndexHierarchy>
x                p     -1
x                q     5
x                r     9
v                p     -1
v                q     85
v                r     89
<<U1>            <<U1> <int64>
#end_Quilt-iter_array_items().apply_pool()

#start_Quilt-iter_series()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_series(axis=1))
(<Series: ('x', 'p')>
<Index>
a                    0
b                    1
<<U1>                <int64>, <Series: ('x', 'q')>
<Index>
a                    2
b                    3
<<U1>                <int64>, <Series: ('x', 'r')>
<Index>
a                    4
b                    5
<<U1>                <int64>, <Series: ('v', 'p')>
<Index>
a                    40
b                    41
<<U1>                <int64>, <Series: ('v', 'q')>
<Index>
a                    42
b                    43
<<U1>                <int64>, <Series: ('v', 'r')>
<Index>
a                    44
b                    45
<<U1>                <int64>)
#end_Quilt-iter_series()

#start_Quilt-iter_series().apply()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.iter_series(axis=1).apply(lambda v: v.sum())
<Series>
<IndexHierarchy>
x                p     1
x                q     5
x                r     9
v                p     81
v                q     85
v                r     89
<<U1>            <<U1> <int64>
#end_Quilt-iter_series().apply()

#start_Quilt-iter_series().apply_iter()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_series(axis=1).apply_iter(lambda v: v.sum()))
(1, 5, 9, 81, 85, 89)
#end_Quilt-iter_series().apply_iter()

#start_Quilt-iter_series().apply_iter_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_series(axis=1).apply_iter_items(lambda v: v.sum()))
((('x', 'p'), 1), (('x', 'q'), 5), (('x', 'r'), 9), (('v', 'p'), 81), (('v', 'q'), 85), (('v', 'r'), 89))
#end_Quilt-iter_series().apply_iter_items()

#start_Quilt-iter_series().apply_pool()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.iter_series(axis=1).apply_pool(lambda v: v.sum(), use_threads=True)
<Series>
<IndexHierarchy>
x                p     1
x                q     5
x                r     9
v                p     81
v                q     85
v                r     89
<<U1>            <<U1> <int64>
#end_Quilt-iter_series().apply_pool()

#start_Quilt-iter_series_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_series_items(axis=1))
((('x', 'p'), <Series: ('x', 'p')>
<Index>
a                    0
b                    1
<<U1>                <int64>), (('x', 'q'), <Series: ('x', 'q')>
<Index>
a                    2
b                    3
<<U1>                <int64>), (('x', 'r'), <Series: ('x', 'r')>
<Index>
a                    4
b                    5
<<U1>                <int64>), (('v', 'p'), <Series: ('v', 'p')>
<Index>
a                    40
b                    41
<<U1>                <int64>), (('v', 'q'), <Series: ('v', 'q')>
<Index>
a                    42
b                    43
<<U1>                <int64>), (('v', 'r'), <Series: ('v', 'r')>
<Index>
a                    44
b                    45
<<U1>                <int64>))
#end_Quilt-iter_series_items()

#start_Quilt-iter_series_items().apply()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.iter_series_items(axis=1).apply(lambda k, v: v.sum() if 'q' in k else -1)
<Series>
<IndexHierarchy>
x                p     -1
x                q     5
x                r     -1
v                p     -1
v                q     85
v                r     -1
<<U1>            <<U1> <int64>
#end_Quilt-iter_series_items().apply()

#start_Quilt-iter_series_items().apply_iter()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_series_items(axis=1).apply_iter(lambda k, v: v.sum() if 'q' in k else -1))
(-1, 5, -1, -1, 85, -1)
#end_Quilt-iter_series_items().apply_iter()

#start_Quilt-iter_series_items().apply_iter_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_series_items(axis=1).apply_iter_items(lambda k, v: v.sum() if 'q' in k else -1))
((('x', 'p'), -1), (('x', 'q'), 5), (('x', 'r'), -1), (('v', 'p'), -1), (('v', 'q'), 85), (('v', 'r'), -1))
#end_Quilt-iter_series_items().apply_iter_items()

#start_Quilt-iter_series_items().apply_pool()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.iter_series_items(axis=1).apply_pool(lambda pair: pair[1].sum() if pair[0][1] != 'p' else -1, use_threads=True)
<Series>
<IndexHierarchy>
x                p     -1
x                q     5
x                r     9
v                p     -1
v                q     85
v                r     89
<<U1>            <<U1> <int64>
#end_Quilt-iter_series_items().apply_pool()

#start_Quilt-iter_tuple()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_tuple(axis=1))
(Axis(a=0, b=1), Axis(a=2, b=3), Axis(a=4, b=5), Axis(a=40, b=41), Axis(a=42, b=43), Axis(a=44, b=45))
#end_Quilt-iter_tuple()

#start_Quilt-iter_tuple().apply()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.iter_tuple(axis=1).apply(lambda v: v.a + v.b)
<Series>
<IndexHierarchy>
x                p     1
x                q     5
x                r     9
v                p     81
v                q     85
v                r     89
<<U1>            <<U1> <int64>
#end_Quilt-iter_tuple().apply()

#start_Quilt-iter_tuple().apply_iter()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_tuple(axis=1).apply_iter(lambda v: v.a + v.b))
(1, 5, 9, 81, 85, 89)
#end_Quilt-iter_tuple().apply_iter()

#start_Quilt-iter_tuple().apply_iter_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_tuple(axis=1).apply_iter_items(lambda v: v.a + v.b))
((('x', 'p'), 1), (('x', 'q'), 5), (('x', 'r'), 9), (('v', 'p'), 81), (('v', 'q'), 85), (('v', 'r'), 89))
#end_Quilt-iter_tuple().apply_iter_items()

#start_Quilt-iter_tuple().map_all()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.iloc[:2].iter_tuple(axis=1).map_all({(0, 1): -1, (2, 3): -2})
<Series>
<IndexHierarchy>
x                p     -1
x                q     -2
<<U1>            <<U1> <int64>
#end_Quilt-iter_tuple().map_all()

#start_Quilt-iter_tuple().map_all_iter()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iloc[:2].iter_tuple(axis=1).map_all_iter({(0, 1): -1, (2, 3): -2}))
(-1, -2)
#end_Quilt-iter_tuple().map_all_iter()

#start_Quilt-iter_tuple().map_all_iter_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iloc[:2].iter_tuple(axis=1).map_all_iter_items({(0, 1): -1, (2, 3): -2}))
((('x', 'p'), -1), (('x', 'q'), -2))
#end_Quilt-iter_tuple().map_all_iter_items()

#start_Quilt-iter_tuple().map_any()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.iter_tuple(axis=1).map_any({(0, 1): -1, (42, 43): -2})
<Series>
<IndexHierarchy>
x                p     -1
x                q     Axis(a=2, b=3)
x                r     Axis(a=4, b=5)
v                p     Axis(a=40, b=41)
v                q     -2
v                r     Axis(a=44, b=45)
<<U1>            <<U1> <object>
#end_Quilt-iter_tuple().map_any()

#start_Quilt-iter_tuple().map_any_iter()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_tuple(axis=1).map_any_iter({(0, 1): -1, (42, 43): -2}))
(-1, Axis(a=2, b=3), Axis(a=4, b=5), Axis(a=40, b=41), -2, Axis(a=44, b=45))
#end_Quilt-iter_tuple().map_any_iter()

#start_Quilt-iter_tuple().map_any_iter_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_tuple(axis=1).map_any_iter_items({(0, 1): -1, (42, 43): -2}))
((('x', 'p'), -1), (('x', 'q'), Axis(a=2, b=3)), (('x', 'r'), Axis(a=4, b=5)), (('v', 'p'), Axis(a=40, b=41)), (('v', 'q'), -2), (('v', 'r'), Axis(a=44, b=45)))
#end_Quilt-iter_tuple().map_any_iter_items()

#start_Quilt-iter_tuple().map_fill()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.iter_tuple(axis=1).map_fill({(0, 1): -1, (42, 43): -2}, fill_value=np.nan)
<Series>
<IndexHierarchy>
x                p     -1.0
x                q     nan
x                r     nan
v                p     nan
v                q     -2.0
v                r     nan
<<U1>            <<U1> <float64>
#end_Quilt-iter_tuple().map_fill()

#start_Quilt-iter_tuple().map_fill_iter()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_tuple(axis=1).map_fill_iter({(0, 1): -1, (42, 43): -2}, fill_value=np.nan))
(-1, nan, nan, nan, -2, nan)
#end_Quilt-iter_tuple().map_fill_iter()

#start_Quilt-iter_tuple().map_fill_iter_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_tuple(axis=1).map_fill_iter_items({(0, 1): -1, (42, 43): -2}, fill_value=np.nan))
((('x', 'p'), -1), (('x', 'q'), nan), (('x', 'r'), nan), (('v', 'p'), nan), (('v', 'q'), -2), (('v', 'r'), nan))
#end_Quilt-iter_tuple().map_fill_iter_items()

#start_Quilt-iter_tuple_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_tuple_items(axis=1))
((('x', 'p'), Axis(a=0, b=1)), (('x', 'q'), Axis(a=2, b=3)), (('x', 'r'), Axis(a=4, b=5)), (('v', 'p'), Axis(a=40, b=41)), (('v', 'q'), Axis(a=42, b=43)), (('v', 'r'), Axis(a=44, b=45)))
#end_Quilt-iter_tuple_items()

#start_Quilt-iter_tuple_items().apply()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.iter_tuple_items(axis=1).apply(lambda k, v: v.a + v.b if 'r' in k else -1)
<Series>
<IndexHierarchy>
x                p     -1
x                q     -1
x                r     9
v                p     -1
v                q     -1
v                r     89
<<U1>            <<U1> <int64>
#end_Quilt-iter_tuple_items().apply()

#start_Quilt-iter_tuple_items().apply_iter()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_tuple_items(axis=1).apply_iter(lambda k, v: v.a + v.b if 'r' in k else -1))
(-1, -1, 9, -1, -1, 89)
#end_Quilt-iter_tuple_items().apply_iter()

#start_Quilt-iter_tuple_items().apply_iter_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_tuple_items(axis=1).apply_iter_items(lambda k, v: v.a + v.b if 'r' in k else -1))
((('x', 'p'), -1), (('x', 'q'), -1), (('x', 'r'), 9), (('v', 'p'), -1), (('v', 'q'), -1), (('v', 'r'), 89))
#end_Quilt-iter_tuple_items().apply_iter_items()

#start_Quilt-iter_tuple_items().map_all()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.iloc[:2].iter_tuple_items(axis=1).map_all({(('x', 'p'), (0, 1)): -1, (('x', 'q'), (2, 3)): -2})
<Series>
<IndexHierarchy>
x                p     -1
x                q     -2
<<U1>            <<U1> <int64>
#end_Quilt-iter_tuple_items().map_all()

#start_Quilt-iter_tuple_items().map_all_iter()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iloc[:2].iter_tuple_items(axis=1).map_all_iter({(('x', 'p'), (0, 1)): -1, (('x', 'q'), (2, 3)): -2}))
(-1, -2)
#end_Quilt-iter_tuple_items().map_all_iter()

#start_Quilt-iter_tuple_items().map_all_iter_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iloc[:2].iter_tuple_items(axis=1).map_all_iter_items({(('x', 'p'), (0, 1)): -1, (('x', 'q'), (2, 3)): -2}))
((('x', 'p'), -1), (('x', 'q'), -2))
#end_Quilt-iter_tuple_items().map_all_iter_items()

#start_Quilt-iter_tuple_items().map_any()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.iter_tuple_items(axis=1).map_any({(('x', 'p'), (0, 1)): -1, (('x', 'q'), (2, 3)): -2})
<Series>
<IndexHierarchy>
x                p     -1
x                q     -2
x                r     Axis(a=4, b=5)
v                p     Axis(a=40, b=41)
v                q     Axis(a=42, b=43)
v                r     Axis(a=44, b=45)
<<U1>            <<U1> <object>
#end_Quilt-iter_tuple_items().map_any()

#start_Quilt-iter_tuple_items().map_any_iter()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_tuple_items(axis=1).map_any_iter({(('x', 'p'), (0, 1)): -1, (('x', 'q'), (2, 3)): -2}))
(-1, -2, Axis(a=4, b=5), Axis(a=40, b=41), Axis(a=42, b=43), Axis(a=44, b=45))
#end_Quilt-iter_tuple_items().map_any_iter()

#start_Quilt-iter_tuple_items().map_any_iter_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_tuple_items(axis=1).map_any_iter_items({(('x', 'p'), (0, 1)): -1, (('x', 'q'), (2, 3)): -2}))
((('x', 'p'), -1), (('x', 'q'), -2), (('x', 'r'), Axis(a=4, b=5)), (('v', 'p'), Axis(a=40, b=41)), (('v', 'q'), Axis(a=42, b=43)), (('v', 'r'), Axis(a=44, b=45)))
#end_Quilt-iter_tuple_items().map_any_iter_items()

#start_Quilt-iter_tuple_items().map_fill()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.iter_tuple_items(axis=1).map_fill({(('x', 'p'), (0, 1)): -1, (('x', 'q'), (2, 3)): -2}, fill_value=np.nan)
<Series>
<IndexHierarchy>
x                p     -1.0
x                q     -2.0
x                r     nan
v                p     nan
v                q     nan
v                r     nan
<<U1>            <<U1> <float64>
#end_Quilt-iter_tuple_items().map_fill()

#start_Quilt-iter_tuple_items().map_fill_iter()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_tuple_items(axis=1).map_fill_iter({(('x', 'p'), (0, 1)): -1, (('x', 'q'), (2, 3)): -2}, fill_value=np.nan))
(-1, -2, nan, nan, nan, nan)
#end_Quilt-iter_tuple_items().map_fill_iter()

#start_Quilt-iter_tuple_items().map_fill_iter_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_tuple_items(axis=1).map_fill_iter_items({(('x', 'p'), (0, 1)): -1, (('x', 'q'), (2, 3)): -2}, fill_value=np.nan))
((('x', 'p'), -1), (('x', 'q'), -2), (('x', 'r'), nan), (('v', 'p'), nan), (('v', 'q'), nan), (('v', 'r'), nan))
#end_Quilt-iter_tuple_items().map_fill_iter_items()

#start_Quilt-iter_window()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_window(size=2, step=2, axis=0))
(<Frame: x>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                p     0       1
x                q     2       3
<<U1>            <<U1> <int64> <int64>, <Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                r     4       5
v                p     40      41
<<U1>            <<U1> <int64> <int64>, <Frame: v>
<Index>                a       b       <<U1>
<IndexHierarchy>
v                q     42      43
v                r     44      45
<<U1>            <<U1> <int64> <int64>)
#end_Quilt-iter_window()

#start_Quilt-iter_window().apply()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.iter_window(size=2, step=2, axis=0).apply(lambda f: f.max().max())
<Series>
<IndexHierarchy>
x                q     3
v                p     41
v                r     45
<<U1>            <<U1> <int64>
#end_Quilt-iter_window().apply()

#start_Quilt-iter_window().apply_iter()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_window(size=2, step=2, axis=0).apply_iter(lambda f: f.max().max()))
(3, 41, 45)
#end_Quilt-iter_window().apply_iter()

#start_Quilt-iter_window().apply_iter_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_window(size=2, step=2, axis=0).apply_iter_items(lambda f: f.max().max()))
((('x', 'q'), 3), (('v', 'p'), 41), (('v', 'r'), 45))
#end_Quilt-iter_window().apply_iter_items()

#start_Quilt-iter_window_array()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_window_array(size=2, step=2, axis=0))
(array([[0, 1],
       [2, 3]]), array([[ 4,  5],
       [40, 41]]), array([[42, 43],
       [44, 45]]))
#end_Quilt-iter_window_array()

#start_Quilt-iter_window_array().apply()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.iter_window_array(size=2, step=2, axis=0).apply(lambda a: np.max(a))
<Series>
<IndexHierarchy>
x                q     3
v                p     41
v                r     45
<<U1>            <<U1> <int64>
#end_Quilt-iter_window_array().apply()

#start_Quilt-iter_window_array().apply_iter()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_window_array(size=2, step=2, axis=0).apply_iter(lambda a: np.max(a)))
(3, 41, 45)
#end_Quilt-iter_window_array().apply_iter()

#start_Quilt-iter_window_array().apply_iter_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_window_array(size=2, step=2, axis=0).apply_iter_items(lambda a: np.max(a)))
((('x', 'q'), 3), (('v', 'p'), 41), (('v', 'r'), 45))
#end_Quilt-iter_window_array().apply_iter_items()

#start_Quilt-iter_window_array_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_window_array_items(size=2, step=2, axis=0))
((('x', 'q'), array([[0, 1],
       [2, 3]])), (('v', 'p'), array([[ 4,  5],
       [40, 41]])), (('v', 'r'), array([[42, 43],
       [44, 45]])))
#end_Quilt-iter_window_array_items()

#start_Quilt-iter_window_array_items().apply()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.iter_window_array_items(size=2, step=2, axis=0).apply(lambda k, v: np.max(v) if k == ('v', 'p') else np.min(v))
<Series>
<IndexHierarchy>
x                q     0
v                p     41
v                r     42
<<U1>            <<U1> <int64>
#end_Quilt-iter_window_array_items().apply()

#start_Quilt-iter_window_array_items().apply_iter()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_window_array_items(size=2, step=2, axis=0).apply_iter(lambda k, v: np.max(v) if k == ('v', 'p') else np.min(v)))
(0, 41, 42)
#end_Quilt-iter_window_array_items().apply_iter()

#start_Quilt-iter_window_array_items().apply_iter_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_window_array_items(size=2, step=2, axis=0).apply_iter_items(lambda k, v: np.max(v) if k == ('v', 'p') else np.min(v)))
((('x', 'q'), 0), (('v', 'p'), 41), (('v', 'r'), 42))
#end_Quilt-iter_window_array_items().apply_iter_items()

#start_Quilt-iter_window_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_window_items(size=2, step=2, axis=0))
((('x', 'q'), <Frame: x>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                p     0       1
x                q     2       3
<<U1>            <<U1> <int64> <int64>), (('v', 'p'), <Frame>
<Index>                a       b       <<U1>
<IndexHierarchy>
x                r     4       5
v                p     40      41
<<U1>            <<U1> <int64> <int64>), (('v', 'r'), <Frame: v>
<Index>                a       b       <<U1>
<IndexHierarchy>
v                q     42      43
v                r     44      45
<<U1>            <<U1> <int64> <int64>))
#end_Quilt-iter_window_items()

#start_Quilt-iter_window_items().apply()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> q.iter_window_items(size=2, step=2, axis=0).apply(lambda k, v: v.max().max() if k == ('v', 'p') else v.min().min())
<Series>
<IndexHierarchy>
x                q     0
v                p     41
v                r     42
<<U1>            <<U1> <int64>
#end_Quilt-iter_window_items().apply()

#start_Quilt-iter_window_items().apply_iter()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_window_items(size=2, step=2, axis=0).apply_iter(lambda k, v: v.max().max() if k == ('v', 'p') else v.min().min()))
(0, 41, 42)
#end_Quilt-iter_window_items().apply_iter()

#start_Quilt-iter_window_items().apply_iter_items()
>>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')
>>> q = sf.Quilt(b, retain_labels=True, axis=0)
>>> q
<Quilt: j>
<Index: Aligned> a b <<U1>
<Index: Frames>
x                . .
v                . .
<<U1>
>>> tuple(q.iter_window_items(size=2, step=2, axis=0).apply_iter_items(lambda k, v: v.max().max() if k == ('v', 'p') else v.min().min()))
((('x', 'q'), 0), (('v', 'p'), 41), (('v', 'r'), 42))
#end_Quilt-iter_window_items().apply_iter_items()

#start_HLoc-__init__()
>>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')
>>> ih
<IndexHierarchy: x>
a                   1024
a                   4096
a                   2048
b                   1024
b                   4096
b                   2048
c                   1024
c                   4096
c                   2048
<<U1>               <int64>
>>> ih.loc[sf.HLoc[:, 4096]]
<IndexHierarchy: x>
a                   4096
b                   4096
c                   4096
<<U1>               <int64>
>>> ih.loc[sf.HLoc[['a', 'c'], [1024, 2048]]]
<IndexHierarchy: x>
a                   1024
a                   2048
c                   1024
c                   2048
<<U1>               <int64>
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.loc[sf.HLoc[:, 'q']]
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                q     2       True   1517-04-01
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
#end_HLoc-__init__()

#start_HLoc-STATIC
>>> sf.HLoc[:, ['a', 'b']].STATIC
True
#end_HLoc-STATIC

#start_HLoc-key
>>> sf.HLoc[:, ['a', 'b']].key
(slice(None, None, None), ['a', 'b'])
#end_HLoc-key

#start_HLoc-__len__()
>>> len(sf.HLoc[:, ['a', 'b'], 2048:])
3
#end_HLoc-__len__()

#start_HLoc-__iter__()
>>> hl = sf.HLoc[:, ['a', 'b'], 2048:]
>>> tuple(iter(hl))
(slice(None, None, None), ['a', 'b'], slice(2048, None, None))
#end_HLoc-__iter__()

#start_HLoc-__repr__()
>>> hl = sf.HLoc[:, ['a', 'b'], 2048:]
>>> repr(hl)
<HLoc[:,['a', 'b'],2048:]>
#end_HLoc-__repr__()

#start_HLoc-__str__()
>>> hl = sf.HLoc[:, ['a', 'b'], 2048:]
>>> str(hl)
<HLoc[:,['a', 'b'],2048:]>
#end_HLoc-__str__()

#start_ILoc-__init__()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
0                p     10      False  1517-01-01
0                q     2       True   1517-04-01
1                p     8       True   1517-12-31
1                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.loc[sf.ILoc[-2:], ['a', 'c']]
<Frame: x>
<Index>                a       c               <<U1>
<IndexHierarchy>
1                p     8       1517-12-31
1                q     3       1517-06-30
<int64>          <<U1> <int64> <datetime64[D]>
>>> f.loc[sf.ILoc[-1], 'b':]
<Series: (1, 'q')>
<Index>
b                  False
c                  1517-06-30
<<U1>              <object>
#end_ILoc-__init__()

#start_ILoc-STATIC
>>> sf.ILoc[-2:].STATIC
True
#end_ILoc-STATIC

#start_ILoc-key
>>> sf.ILoc[-2:].key
slice(-2, None, None)
#end_ILoc-key

#start_ILoc-__repr__()
>>> il = sf.ILoc[-2:]
>>> repr(il)
<ILoc[-2:]>
#end_ILoc-__repr__()

#start_ILoc-__str__()
>>> il = sf.ILoc[-2:]
>>> str(il)
<ILoc[-2:]>
#end_ILoc-__str__()

#start_FillValueAuto-__init__()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a         b     c               <<U1>
<Index>
0          10.0      qrs   1517-01-01
1          2.0       XYZ   1517-04-01
2          nan             NaT
3          2.0       123   1517-04-01
<int64>    <float64> <<U4> <datetime64[D]>
>>> f.fillfalsy(sf.FillValueAuto(f=-1, U='na', M=np.datetime64('2021-01-01')))
<Frame: x>
<Index>    a         b     c               <<U1>
<Index>
0          10.0      qrs   1517-01-01
1          2.0       XYZ   1517-04-01
2          -1.0      na    2021-01-01
3          2.0       123   1517-04-01
<int64>    <float64> <<U4> <datetime64[D]>
>>> f.shift(index=2, fill_value=sf.FillValueAuto)
<Frame: x>
<Index>    a         b     c               <<U1>
<Index>
0          nan             NaT
1          nan             NaT
2          10.0      qrs   1517-01-01
3          2.0       XYZ   1517-04-01
<int64>    <float64> <<U4> <datetime64[D]>
#end_FillValueAuto-__init__()

#start_FillValueAuto-from_default()
>>> sf.FillValueAuto.from_default()
<static_frame.core.fill_value_auto.FillValueAuto object at 0x7f88bf3f2840>
#end_FillValueAuto-from_default()

#start_FillValueAuto-M
>>> sf.FillValueAuto.from_default().M
NaT
#end_FillValueAuto-M

#start_FillValueAuto-O
>>> sf.FillValueAuto.from_default().O
#end_FillValueAuto-O

#start_FillValueAuto-S
>>> sf.FillValueAuto.from_default().S
b''
#end_FillValueAuto-S

#start_FillValueAuto-U
>>> sf.FillValueAuto.from_default().U

#end_FillValueAuto-U

#start_FillValueAuto-V
>>> sf.FillValueAuto.from_default().V
b'\x00'
#end_FillValueAuto-V

#start_FillValueAuto-b
>>> sf.FillValueAuto.from_default().b
False
#end_FillValueAuto-b

#start_FillValueAuto-c
>>> sf.FillValueAuto.from_default().c
(nan+nanj)
#end_FillValueAuto-c

#start_FillValueAuto-f
>>> sf.FillValueAuto.from_default().f
nan
#end_FillValueAuto-f

#start_FillValueAuto-i
>>> sf.FillValueAuto.from_default().i
0
#end_FillValueAuto-i

#start_FillValueAuto-m
>>> sf.FillValueAuto.from_default().m
NaT
#end_FillValueAuto-m

#start_FillValueAuto-u
>>> sf.FillValueAuto.from_default().u
0
#end_FillValueAuto-u

#start_FillValueAuto-__repr__()
>>> fva = sf.FillValueAuto.from_default()
>>> repr(fva)
<static_frame.core.fill_value_auto.FillValueAuto object at 0x7f88b5bc2340>
#end_FillValueAuto-__repr__()

#start_FillValueAuto-__str__()
>>> fva = sf.FillValueAuto.from_default()
>>> str(fva)
<static_frame.core.fill_value_auto.FillValueAuto object at 0x7f88cc2e0f40>
#end_FillValueAuto-__str__()

#start_FillValueAuto-[]
>>> fva = sf.FillValueAuto.from_default()
>>> fva[np.dtype(int)]
0
>>> fva[np.dtype(float)]
nan
>>> fva[np.dtype(bool)]
False
#end_FillValueAuto-[]

#start_MemoryDisplay-__init__()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.memory
        L    Lu    LM   LMu   LMD  LMDu  R     Ru    RM   RMu   RMD  RMDu
Name    50   B     50   B     50   B     50    B     50   B     50   B
Index   208  B     224  B     112  B     8.3   KB    256  B     144  B
Columns 756  B     788  B     564  B     8.83  KB    812  B     588  B
Blocks  1.4  KB    1.45 KB    1.12 KB    1.4   KB    1.45 KB    1.12 KB
Total   2.42 KB    2.52 KB    1.86 KB    10.52 KB    2.57 KB    1.92 KB
#end_MemoryDisplay-__init__()

#start_MemoryDisplay-from_any()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> sf.MemoryDisplay.from_any(f.index)
      L   Lu    LM  LMu   LMD LMDu  R   Ru    RM  RMu   RMD RMDu
Total 208 B     224 B     112 B     8.3 KB    256 B     144 B
#end_MemoryDisplay-from_any()

#start_MemoryDisplay-to_frame()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.memory.to_frame()
<Frame: <Frame: x>>
<Index>             L       LM      LMD     R       RM      RMD     <<U3>
<Index>
Name                50      50      50      50      50      50
Index               208     224     112     8496    256     144
Columns             756     788     564     9044    812     588
Blocks              1436    1484    1148    1436    1484    1148
Total               2482    2578    1906    10770   2634    1962
<<U7>               <int64> <int64> <int64> <int64> <int64> <int64>
#end_MemoryDisplay-to_frame()

#start_MemoryDisplay-__repr__()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> md = f.memory
>>> repr(md)
        L    Lu    LM   LMu   LMD  LMDu  R     Ru    RM   RMu   RMD  RMDu
Name    50   B     50   B     50   B     50    B     50   B     50   B
Index   208  B     224  B     112  B     8.3   KB    256  B     144  B
Columns 756  B     788  B     564  B     8.83  KB    812  B     588  B
Blocks  1.4  KB    1.45 KB    1.12 KB    1.4   KB    1.45 KB    1.12 KB
Total   2.42 KB    2.52 KB    1.86 KB    10.52 KB    2.57 KB    1.92 KB
#end_MemoryDisplay-__repr__()

#start_MemoryDisplay-__str__()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> md = f.memory
>>> str(md)
        L    Lu    LM   LMu   LMD  LMDu  R     Ru    RM   RMu   RMD  RMDu
Name    50   B     50   B     50   B     50    B     50   B     50   B
Index   208  B     224  B     112  B     8.3   KB    256  B     144  B
Columns 756  B     788  B     564  B     8.83  KB    812  B     588  B
Blocks  1.4  KB    1.45 KB    1.12 KB    1.4   KB    1.45 KB    1.12 KB
Total   2.42 KB    2.52 KB    1.86 KB    10.52 KB    2.57 KB    1.92 KB
#end_MemoryDisplay-__str__()

